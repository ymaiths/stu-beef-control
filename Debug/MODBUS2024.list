
MODBUS2024.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e28  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08007000  08007000  00017000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007040  08007040  0002020c  2**0
                  CONTENTS
  4 .ARM          00000008  08007040  08007040  00017040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007048  08007048  0002020c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007048  08007048  00017048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800704c  0800704c  0001704c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000020c  20000000  08007050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000884  2000020c  0800725c  0002020c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a90  0800725c  00020a90  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002023c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000154b7  00000000  00000000  0002027f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002839  00000000  00000000  00035736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010f0  00000000  00000000  00037f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d48  00000000  00000000  00039060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000263b0  00000000  00000000  00039da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001449b  00000000  00000000  00060158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fc013  00000000  00000000  000745f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004838  00000000  00000000  00170608  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00174e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000020c 	.word	0x2000020c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006fe8 	.word	0x08006fe8

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000210 	.word	0x20000210
 8000214:	08006fe8 	.word	0x08006fe8

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000514:	b480      	push	{r7}
 8000516:	b083      	sub	sp, #12
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 800051c:	4b04      	ldr	r3, [pc, #16]	; (8000530 <modbus_1t5_Timeout+0x1c>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2201      	movs	r2, #1
 8000522:	751a      	strb	r2, [r3, #20]
}
 8000524:	bf00      	nop
 8000526:	370c      	adds	r7, #12
 8000528:	46bd      	mov	sp, r7
 800052a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052e:	4770      	bx	lr
 8000530:	20000228 	.word	0x20000228

08000534 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 800053c:	4b04      	ldr	r3, [pc, #16]	; (8000550 <modbus_3t5_Timeout+0x1c>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	2201      	movs	r2, #1
 8000542:	755a      	strb	r2, [r3, #21]
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr
 8000550:	20000228 	.word	0x20000228

08000554 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
 800055c:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 800055e:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <modbus_UART_Recived+0x60>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	2201      	movs	r2, #1
 8000564:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000566:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <modbus_UART_Recived+0x60>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 800056e:	1c59      	adds	r1, r3, #1
 8000570:	b289      	uxth	r1, r1
 8000572:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8000576:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800057a:	d210      	bcs.n	800059e <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800057c:	4b0d      	ldr	r3, [pc, #52]	; (80005b4 <modbus_UART_Recived+0x60>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	68d8      	ldr	r0, [r3, #12]
 8000582:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <modbus_UART_Recived+0x60>)
 8000584:	681a      	ldr	r2, [r3, #0]
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <modbus_UART_Recived+0x60>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800058e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000592:	4413      	add	r3, r2
 8000594:	3302      	adds	r3, #2
 8000596:	2201      	movs	r2, #1
 8000598:	4619      	mov	r1, r3
 800059a:	f004 f979 	bl	8004890 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 800059e:	4b05      	ldr	r3, [pc, #20]	; (80005b4 <modbus_UART_Recived+0x60>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	691b      	ldr	r3, [r3, #16]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	2200      	movs	r2, #0
 80005a8:	625a      	str	r2, [r3, #36]	; 0x24

}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000228 	.word	0x20000228

080005b8 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80005c2:	4a24      	ldr	r2, [pc, #144]	; (8000654 <Modbus_init+0x9c>)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80005c8:	4b22      	ldr	r3, [pc, #136]	; (8000654 <Modbus_init+0x9c>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	683a      	ldr	r2, [r7, #0]
 80005ce:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 80005d0:	4b20      	ldr	r3, [pc, #128]	; (8000654 <Modbus_init+0x9c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	691b      	ldr	r3, [r3, #16]
 80005d6:	4a20      	ldr	r2, [pc, #128]	; (8000658 <Modbus_init+0xa0>)
 80005d8:	2114      	movs	r1, #20
 80005da:	4618      	mov	r0, r3
 80005dc:	f003 f980 	bl	80038e0 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80005e0:	4b1c      	ldr	r3, [pc, #112]	; (8000654 <Modbus_init+0x9c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	691b      	ldr	r3, [r3, #16]
 80005e6:	4a1d      	ldr	r2, [pc, #116]	; (800065c <Modbus_init+0xa4>)
 80005e8:	210e      	movs	r1, #14
 80005ea:	4618      	mov	r0, r3
 80005ec:	f003 f978 	bl	80038e0 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 80005f0:	4b18      	ldr	r3, [pc, #96]	; (8000654 <Modbus_init+0x9c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	68db      	ldr	r3, [r3, #12]
 80005f6:	4a1a      	ldr	r2, [pc, #104]	; (8000660 <Modbus_init+0xa8>)
 80005f8:	2103      	movs	r1, #3
 80005fa:	4618      	mov	r0, r3
 80005fc:	f004 f88e 	bl	800471c <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000600:	4b14      	ldr	r3, [pc, #80]	; (8000654 <Modbus_init+0x9c>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	68d8      	ldr	r0, [r3, #12]
 8000606:	4b13      	ldr	r3, [pc, #76]	; (8000654 <Modbus_init+0x9c>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	4b12      	ldr	r3, [pc, #72]	; (8000654 <Modbus_init+0x9c>)
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000612:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000616:	4413      	add	r3, r2
 8000618:	3302      	adds	r3, #2
 800061a:	2201      	movs	r2, #1
 800061c:	4619      	mov	r1, r3
 800061e:	f004 f937 	bl	8004890 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000622:	4b0c      	ldr	r3, [pc, #48]	; (8000654 <Modbus_init+0x9c>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	691b      	ldr	r3, [r3, #16]
 8000628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800062c:	b2db      	uxtb	r3, r3
 800062e:	2b01      	cmp	r3, #1
 8000630:	d10c      	bne.n	800064c <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <Modbus_init+0x9c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	691b      	ldr	r3, [r3, #16]
 8000638:	4618      	mov	r0, r3
 800063a:	f002 fd1d 	bl	8003078 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 800063e:	4b05      	ldr	r3, [pc, #20]	; (8000654 <Modbus_init+0x9c>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	691b      	ldr	r3, [r3, #16]
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f002 fe64 	bl	8003314 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 800064c:	bf00      	nop
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	20000228 	.word	0x20000228
 8000658:	08000515 	.word	0x08000515
 800065c:	08000535 	.word	0x08000535
 8000660:	08000555 	.word	0x08000555

08000664 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
 800066c:	460b      	mov	r3, r1
 800066e:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000670:	23ff      	movs	r3, #255	; 0xff
 8000672:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000674:	23ff      	movs	r3, #255	; 0xff
 8000676:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000678:	e013      	b.n	80006a2 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	1c5a      	adds	r2, r3, #1
 800067e:	607a      	str	r2, [r7, #4]
 8000680:	781a      	ldrb	r2, [r3, #0]
 8000682:	7bbb      	ldrb	r3, [r7, #14]
 8000684:	4053      	eors	r3, r2
 8000686:	b2db      	uxtb	r3, r3
 8000688:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800068a:	4a0f      	ldr	r2, [pc, #60]	; (80006c8 <CRC16+0x64>)
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	4413      	add	r3, r2
 8000690:	781a      	ldrb	r2, [r3, #0]
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	4053      	eors	r3, r2
 8000696:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000698:	4a0c      	ldr	r2, [pc, #48]	; (80006cc <CRC16+0x68>)
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	4413      	add	r3, r2
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 80006a2:	883b      	ldrh	r3, [r7, #0]
 80006a4:	1e5a      	subs	r2, r3, #1
 80006a6:	803a      	strh	r2, [r7, #0]
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d1e6      	bne.n	800067a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80006ac:	7bfb      	ldrb	r3, [r7, #15]
 80006ae:	021b      	lsls	r3, r3, #8
 80006b0:	b21a      	sxth	r2, r3
 80006b2:	7bbb      	ldrb	r3, [r7, #14]
 80006b4:	b21b      	sxth	r3, r3
 80006b6:	4313      	orrs	r3, r2
 80006b8:	b21b      	sxth	r3, r3
 80006ba:	b29b      	uxth	r3, r3
}
 80006bc:	4618      	mov	r0, r3
 80006be:	3714      	adds	r7, #20
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	20000100 	.word	0x20000100
 80006cc:	20000000 	.word	0x20000000

080006d0 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80006d6:	4b80      	ldr	r3, [pc, #512]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	7e1b      	ldrb	r3, [r3, #24]
 80006dc:	3b01      	subs	r3, #1
 80006de:	2b03      	cmp	r3, #3
 80006e0:	d80a      	bhi.n	80006f8 <Modbus_Protocal_Worker+0x28>
 80006e2:	a201      	add	r2, pc, #4	; (adr r2, 80006e8 <Modbus_Protocal_Worker+0x18>)
 80006e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e8:	08000703 	.word	0x08000703
 80006ec:	080008a1 	.word	0x080008a1
 80006f0:	0800078d 	.word	0x0800078d
 80006f4:	080007b3 	.word	0x080007b3
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80006f8:	4b77      	ldr	r3, [pc, #476]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2201      	movs	r2, #1
 80006fe:	761a      	strb	r2, [r3, #24]
		break;
 8000700:	e0e6      	b.n	80008d0 <Modbus_Protocal_Worker+0x200>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8000702:	4b75      	ldr	r3, [pc, #468]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800070a:	2b00      	cmp	r3, #0
 800070c:	d002      	beq.n	8000714 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 800070e:	f000 f9db 	bl	8000ac8 <Modbus_Emission>
 8000712:	e01c      	b.n	800074e <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8000714:	4b70      	ldr	r3, [pc, #448]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	7d9b      	ldrb	r3, [r3, #22]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d017      	beq.n	800074e <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 800071e:	4b6e      	ldr	r3, [pc, #440]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2200      	movs	r2, #0
 8000724:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 8000726:	4b6c      	ldr	r3, [pc, #432]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2200      	movs	r2, #0
 800072c:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 800072e:	4b6a      	ldr	r3, [pc, #424]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	691b      	ldr	r3, [r3, #16]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	4b67      	ldr	r3, [pc, #412]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	691b      	ldr	r3, [r3, #16]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	f042 0201 	orr.w	r2, r2, #1
 8000744:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8000746:	4b64      	ldr	r3, [pc, #400]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	2203      	movs	r2, #3
 800074c:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800074e:	4b62      	ldr	r3, [pc, #392]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000758:	2b20      	cmp	r3, #32
 800075a:	f040 80b2 	bne.w	80008c2 <Modbus_Protocal_Worker+0x1f2>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800075e:	4b5e      	ldr	r3, [pc, #376]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	2200      	movs	r2, #0
 8000764:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000768:	4b5b      	ldr	r3, [pc, #364]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	68d8      	ldr	r0, [r3, #12]
 800076e:	4b5a      	ldr	r3, [pc, #360]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 8000770:	681a      	ldr	r2, [r3, #0]
 8000772:	4b59      	ldr	r3, [pc, #356]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800077a:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800077e:	4413      	add	r3, r2
 8000780:	3302      	adds	r3, #2
 8000782:	2201      	movs	r2, #1
 8000784:	4619      	mov	r1, r3
 8000786:	f004 f883 	bl	8004890 <HAL_UART_Receive_IT>
		}
		break;
 800078a:	e09a      	b.n	80008c2 <Modbus_Protocal_Worker+0x1f2>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800078c:	4b52      	ldr	r3, [pc, #328]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	7d1b      	ldrb	r3, [r3, #20]
 8000792:	2b00      	cmp	r3, #0
 8000794:	f000 8097 	beq.w	80008c6 <Modbus_Protocal_Worker+0x1f6>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 8000798:	4b4f      	ldr	r3, [pc, #316]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2200      	movs	r2, #0
 800079e:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 80007a0:	4b4d      	ldr	r3, [pc, #308]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	22fe      	movs	r2, #254	; 0xfe
 80007a6:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 80007a8:	4b4b      	ldr	r3, [pc, #300]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	2204      	movs	r2, #4
 80007ae:	761a      	strb	r2, [r3, #24]
		}
		break;
 80007b0:	e089      	b.n	80008c6 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80007b2:	4b49      	ldr	r3, [pc, #292]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	7d9b      	ldrb	r3, [r3, #22]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d009      	beq.n	80007d0 <Modbus_Protocal_Worker+0x100>
		{

			if(!hModbus->RecvStatus)
 80007bc:	4b46      	ldr	r3, [pc, #280]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d103      	bne.n	80007d0 <Modbus_Protocal_Worker+0x100>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80007c8:	4b43      	ldr	r3, [pc, #268]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	22ff      	movs	r2, #255	; 0xff
 80007ce:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80007d0:	4b41      	ldr	r3, [pc, #260]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80007d8:	f113 0f02 	cmn.w	r3, #2
 80007dc:	d150      	bne.n	8000880 <Modbus_Protocal_Worker+0x1b0>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80007de:	4b3e      	ldr	r3, [pc, #248]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2200      	movs	r2, #0
 80007e4:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80007e6:	4b3c      	ldr	r3, [pc, #240]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f203 2272 	addw	r2, r3, #626	; 0x272
 80007ee:	4b3a      	ldr	r3, [pc, #232]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80007f6:	3b02      	subs	r3, #2
 80007f8:	4619      	mov	r1, r3
 80007fa:	4610      	mov	r0, r2
 80007fc:	f7ff ff32 	bl	8000664 <CRC16>
 8000800:	4603      	mov	r3, r0
 8000802:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000804:	793a      	ldrb	r2, [r7, #4]
 8000806:	4b34      	ldr	r3, [pc, #208]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 8000808:	6819      	ldr	r1, [r3, #0]
 800080a:	4b33      	ldr	r3, [pc, #204]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000812:	3b02      	subs	r3, #2
 8000814:	440b      	add	r3, r1
 8000816:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 800081a:	429a      	cmp	r2, r3
 800081c:	d10c      	bne.n	8000838 <Modbus_Protocal_Worker+0x168>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 800081e:	797a      	ldrb	r2, [r7, #5]
 8000820:	4b2d      	ldr	r3, [pc, #180]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 8000822:	6819      	ldr	r1, [r3, #0]
 8000824:	4b2c      	ldr	r3, [pc, #176]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800082c:	3b01      	subs	r3, #1
 800082e:	440b      	add	r3, r1
 8000830:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000834:	429a      	cmp	r2, r3
 8000836:	d004      	beq.n	8000842 <Modbus_Protocal_Worker+0x172>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 8000838:	4b27      	ldr	r3, [pc, #156]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	22ff      	movs	r2, #255	; 0xff
 800083e:	75da      	strb	r2, [r3, #23]
				break;
 8000840:	e046      	b.n	80008d0 <Modbus_Protocal_Worker+0x200>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8000842:	4b25      	ldr	r3, [pc, #148]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 800084a:	4b23      	ldr	r3, [pc, #140]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	429a      	cmp	r2, r3
 8000852:	d113      	bne.n	800087c <Modbus_Protocal_Worker+0x1ac>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8000854:	4b20      	ldr	r3, [pc, #128]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800085c:	4b1e      	ldr	r3, [pc, #120]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 8000864:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8000866:	4b1c      	ldr	r3, [pc, #112]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 800086e:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8000870:	461a      	mov	r2, r3
 8000872:	f006 fbab 	bl	8006fcc <memcpy>

			//execute command
			Modbus_frame_response();
 8000876:	f000 f90f 	bl	8000a98 <Modbus_frame_response>
 800087a:	e001      	b.n	8000880 <Modbus_Protocal_Worker+0x1b0>
				break;
 800087c:	bf00      	nop
					}
		break;


	}
}
 800087e:	e027      	b.n	80008d0 <Modbus_Protocal_Worker+0x200>
		if(hModbus->Flag_T35TimeOut)
 8000880:	4b15      	ldr	r3, [pc, #84]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	7d5b      	ldrb	r3, [r3, #21]
 8000886:	2b00      	cmp	r3, #0
 8000888:	d01f      	beq.n	80008ca <Modbus_Protocal_Worker+0x1fa>
			hModbus->Mstatus = Modbus_state_Idle;
 800088a:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2201      	movs	r2, #1
 8000890:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8000892:	4b11      	ldr	r3, [pc, #68]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	4618      	mov	r0, r3
 800089a:	f004 f8c5 	bl	8004a28 <HAL_UART_AbortReceive>
		break;
 800089e:	e014      	b.n	80008ca <Modbus_Protocal_Worker+0x1fa>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80008a0:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	68db      	ldr	r3, [r3, #12]
 80008a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008aa:	2b20      	cmp	r3, #32
 80008ac:	d10f      	bne.n	80008ce <Modbus_Protocal_Worker+0x1fe>
			hModbus->TxCount=0;
 80008ae:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	2200      	movs	r2, #0
 80008b4:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 80008b8:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <Modbus_Protocal_Worker+0x208>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	2201      	movs	r2, #1
 80008be:	761a      	strb	r2, [r3, #24]
		break;
 80008c0:	e005      	b.n	80008ce <Modbus_Protocal_Worker+0x1fe>
		break;
 80008c2:	bf00      	nop
 80008c4:	e004      	b.n	80008d0 <Modbus_Protocal_Worker+0x200>
		break;
 80008c6:	bf00      	nop
 80008c8:	e002      	b.n	80008d0 <Modbus_Protocal_Worker+0x200>
		break;
 80008ca:	bf00      	nop
 80008cc:	e000      	b.n	80008d0 <Modbus_Protocal_Worker+0x200>
		break;
 80008ce:	bf00      	nop
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	20000228 	.word	0x20000228

080008dc <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <modbusWrite1Register+0x80>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	7e9b      	ldrb	r3, [r3, #26]
 80008e8:	b29b      	uxth	r3, r3
 80008ea:	021b      	lsls	r3, r3, #8
 80008ec:	b29a      	uxth	r2, r3
 80008ee:	4b1b      	ldr	r3, [pc, #108]	; (800095c <modbusWrite1Register+0x80>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	7edb      	ldrb	r3, [r3, #27]
 80008f4:	b29b      	uxth	r3, r3
 80008f6:	4413      	add	r3, r2
 80008f8:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80008fa:	88fa      	ldrh	r2, [r7, #6]
 80008fc:	4b17      	ldr	r3, [pc, #92]	; (800095c <modbusWrite1Register+0x80>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	689b      	ldr	r3, [r3, #8]
 8000902:	429a      	cmp	r2, r3
 8000904:	d903      	bls.n	800090e <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000906:	2002      	movs	r0, #2
 8000908:	f000 f8a4 	bl	8000a54 <ModbusErrorReply>
			 return;
 800090c:	e023      	b.n	8000956 <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <modbusWrite1Register+0x80>)
 8000910:	681a      	ldr	r2, [r3, #0]
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <modbusWrite1Register+0x80>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	6859      	ldr	r1, [r3, #4]
 8000918:	88fb      	ldrh	r3, [r7, #6]
 800091a:	005b      	lsls	r3, r3, #1
 800091c:	440b      	add	r3, r1
 800091e:	7f12      	ldrb	r2, [r2, #28]
 8000920:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <modbusWrite1Register+0x80>)
 8000924:	681a      	ldr	r2, [r3, #0]
 8000926:	4b0d      	ldr	r3, [pc, #52]	; (800095c <modbusWrite1Register+0x80>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	6859      	ldr	r1, [r3, #4]
 800092c:	88fb      	ldrh	r3, [r7, #6]
 800092e:	005b      	lsls	r3, r3, #1
 8000930:	440b      	add	r3, r1
 8000932:	7f52      	ldrb	r2, [r2, #29]
 8000934:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <modbusWrite1Register+0x80>)
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 800093e:	4b07      	ldr	r3, [pc, #28]	; (800095c <modbusWrite1Register+0x80>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 8000944:	2208      	movs	r2, #8
 8000946:	4619      	mov	r1, r3
 8000948:	f006 fb40 	bl	8006fcc <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 800094c:	4b03      	ldr	r3, [pc, #12]	; (800095c <modbusWrite1Register+0x80>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	2205      	movs	r2, #5
 8000952:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000228 	.word	0x20000228

08000960 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8000960:	b590      	push	{r4, r7, lr}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8000966:	4b3a      	ldr	r3, [pc, #232]	; (8000a50 <modbusRead1Register+0xf0>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	7f1b      	ldrb	r3, [r3, #28]
 800096c:	b29b      	uxth	r3, r3
 800096e:	021b      	lsls	r3, r3, #8
 8000970:	b29a      	uxth	r2, r3
 8000972:	4b37      	ldr	r3, [pc, #220]	; (8000a50 <modbusRead1Register+0xf0>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	7f5b      	ldrb	r3, [r3, #29]
 8000978:	b29b      	uxth	r3, r3
 800097a:	4413      	add	r3, r2
 800097c:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800097e:	4b34      	ldr	r3, [pc, #208]	; (8000a50 <modbusRead1Register+0xf0>)
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	7e9b      	ldrb	r3, [r3, #26]
 8000984:	b29b      	uxth	r3, r3
 8000986:	021b      	lsls	r3, r3, #8
 8000988:	b29a      	uxth	r2, r3
 800098a:	4b31      	ldr	r3, [pc, #196]	; (8000a50 <modbusRead1Register+0xf0>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	7edb      	ldrb	r3, [r3, #27]
 8000990:	b29b      	uxth	r3, r3
 8000992:	4413      	add	r3, r2
 8000994:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8000996:	88fb      	ldrh	r3, [r7, #6]
 8000998:	2b00      	cmp	r3, #0
 800099a:	d002      	beq.n	80009a2 <modbusRead1Register+0x42>
 800099c:	88fb      	ldrh	r3, [r7, #6]
 800099e:	2b7d      	cmp	r3, #125	; 0x7d
 80009a0:	d903      	bls.n	80009aa <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80009a2:	2003      	movs	r0, #3
 80009a4:	f000 f856 	bl	8000a54 <ModbusErrorReply>
		 return;
 80009a8:	e04e      	b.n	8000a48 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80009aa:	88ba      	ldrh	r2, [r7, #4]
 80009ac:	4b28      	ldr	r3, [pc, #160]	; (8000a50 <modbusRead1Register+0xf0>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	429a      	cmp	r2, r3
 80009b4:	d808      	bhi.n	80009c8 <modbusRead1Register+0x68>
 80009b6:	88ba      	ldrh	r2, [r7, #4]
 80009b8:	88fb      	ldrh	r3, [r7, #6]
 80009ba:	4413      	add	r3, r2
 80009bc:	461a      	mov	r2, r3
 80009be:	4b24      	ldr	r3, [pc, #144]	; (8000a50 <modbusRead1Register+0xf0>)
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	689b      	ldr	r3, [r3, #8]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d903      	bls.n	80009d0 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80009c8:	2002      	movs	r0, #2
 80009ca:	f000 f843 	bl	8000a54 <ModbusErrorReply>
		 return;
 80009ce:	e03b      	b.n	8000a48 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80009d0:	4b1f      	ldr	r3, [pc, #124]	; (8000a50 <modbusRead1Register+0xf0>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2203      	movs	r2, #3
 80009d6:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80009da:	88fb      	ldrh	r3, [r7, #6]
 80009dc:	b2da      	uxtb	r2, r3
 80009de:	4b1c      	ldr	r3, [pc, #112]	; (8000a50 <modbusRead1Register+0xf0>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	0052      	lsls	r2, r2, #1
 80009e4:	b2d2      	uxtb	r2, r2
 80009e6:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80009ea:	2400      	movs	r4, #0
 80009ec:	e020      	b.n	8000a30 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80009ee:	4b18      	ldr	r3, [pc, #96]	; (8000a50 <modbusRead1Register+0xf0>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	685a      	ldr	r2, [r3, #4]
 80009f4:	88bb      	ldrh	r3, [r7, #4]
 80009f6:	4423      	add	r3, r4
 80009f8:	005b      	lsls	r3, r3, #1
 80009fa:	18d1      	adds	r1, r2, r3
 80009fc:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <modbusRead1Register+0xf0>)
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	1c63      	adds	r3, r4, #1
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	7849      	ldrb	r1, [r1, #1]
 8000a06:	4413      	add	r3, r2
 8000a08:	460a      	mov	r2, r1
 8000a0a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <modbusRead1Register+0xf0>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	685a      	ldr	r2, [r3, #4]
 8000a14:	88bb      	ldrh	r3, [r7, #4]
 8000a16:	4423      	add	r3, r4
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	18d1      	adds	r1, r2, r3
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	; (8000a50 <modbusRead1Register+0xf0>)
 8000a1e:	681a      	ldr	r2, [r3, #0]
 8000a20:	0063      	lsls	r3, r4, #1
 8000a22:	3303      	adds	r3, #3
 8000a24:	7809      	ldrb	r1, [r1, #0]
 8000a26:	4413      	add	r3, r2
 8000a28:	460a      	mov	r2, r1
 8000a2a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8000a2e:	3401      	adds	r4, #1
 8000a30:	88fb      	ldrh	r3, [r7, #6]
 8000a32:	429c      	cmp	r4, r3
 8000a34:	dbdb      	blt.n	80009ee <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 8000a36:	88fb      	ldrh	r3, [r7, #6]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	4b04      	ldr	r3, [pc, #16]	; (8000a50 <modbusRead1Register+0xf0>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	0052      	lsls	r2, r2, #1
 8000a42:	b2d2      	uxtb	r2, r2
 8000a44:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd90      	pop	{r4, r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000228 	.word	0x20000228

08000a54 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8000a5e:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <ModbusErrorReply+0x40>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	7e5a      	ldrb	r2, [r3, #25]
 8000a64:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <ModbusErrorReply+0x40>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8000a6c:	b2d2      	uxtb	r2, r2
 8000a6e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8000a72:	4b08      	ldr	r3, [pc, #32]	; (8000a94 <ModbusErrorReply+0x40>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	79fa      	ldrb	r2, [r7, #7]
 8000a78:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 8000a7c:	4b05      	ldr	r3, [pc, #20]	; (8000a94 <ModbusErrorReply+0x40>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	2202      	movs	r2, #2
 8000a82:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	20000228 	.word	0x20000228

08000a98 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8000a9c:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <Modbus_frame_response+0x2c>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	7e5b      	ldrb	r3, [r3, #25]
 8000aa2:	2b03      	cmp	r3, #3
 8000aa4:	d004      	beq.n	8000ab0 <Modbus_frame_response+0x18>
 8000aa6:	2b06      	cmp	r3, #6
 8000aa8:	d105      	bne.n	8000ab6 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8000aaa:	f7ff ff17 	bl	80008dc <modbusWrite1Register>
		break;
 8000aae:	e006      	b.n	8000abe <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8000ab0:	f7ff ff56 	bl	8000960 <modbusRead1Register>
		break;
 8000ab4:	e003      	b.n	8000abe <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8000ab6:	2001      	movs	r0, #1
 8000ab8:	f7ff ffcc 	bl	8000a54 <ModbusErrorReply>
		break;
 8000abc:	bf00      	nop

	}
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	20000228 	.word	0x20000228

08000ac8 <Modbus_Emission>:

void Modbus_Emission()
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000ace:	4b3c      	ldr	r3, [pc, #240]	; (8000bc0 <Modbus_Emission+0xf8>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	68db      	ldr	r3, [r3, #12]
 8000ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad8:	2b20      	cmp	r3, #32
 8000ada:	d15d      	bne.n	8000b98 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8000adc:	4b38      	ldr	r3, [pc, #224]	; (8000bc0 <Modbus_Emission+0xf8>)
 8000ade:	681a      	ldr	r2, [r3, #0]
 8000ae0:	4b37      	ldr	r3, [pc, #220]	; (8000bc0 <Modbus_Emission+0xf8>)
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	7812      	ldrb	r2, [r2, #0]
 8000ae6:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8000aea:	4b35      	ldr	r3, [pc, #212]	; (8000bc0 <Modbus_Emission+0xf8>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 8000af2:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8000af4:	4b32      	ldr	r3, [pc, #200]	; (8000bc0 <Modbus_Emission+0xf8>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 8000afc:	4b30      	ldr	r3, [pc, #192]	; (8000bc0 <Modbus_Emission+0xf8>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 8000b04:	461a      	mov	r2, r3
 8000b06:	f006 fa61 	bl	8006fcc <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8000b0a:	4b2d      	ldr	r3, [pc, #180]	; (8000bc0 <Modbus_Emission+0xf8>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8000b12:	b29a      	uxth	r2, r3
 8000b14:	4b2a      	ldr	r3, [pc, #168]	; (8000bc0 <Modbus_Emission+0xf8>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	3203      	adds	r2, #3
 8000b1a:	b292      	uxth	r2, r2
 8000b1c:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000b20:	4b27      	ldr	r3, [pc, #156]	; (8000bc0 <Modbus_Emission+0xf8>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8000b28:	4b25      	ldr	r3, [pc, #148]	; (8000bc0 <Modbus_Emission+0xf8>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000b30:	3b02      	subs	r3, #2
 8000b32:	4619      	mov	r1, r3
 8000b34:	4610      	mov	r0, r2
 8000b36:	f7ff fd95 	bl	8000664 <CRC16>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8000b3e:	4b20      	ldr	r3, [pc, #128]	; (8000bc0 <Modbus_Emission+0xf8>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <Modbus_Emission+0xf8>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8000b4a:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8000b4c:	7939      	ldrb	r1, [r7, #4]
 8000b4e:	4413      	add	r3, r2
 8000b50:	460a      	mov	r2, r1
 8000b52:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8000b56:	4b1a      	ldr	r3, [pc, #104]	; (8000bc0 <Modbus_Emission+0xf8>)
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	4b19      	ldr	r3, [pc, #100]	; (8000bc0 <Modbus_Emission+0xf8>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8000b62:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8000b64:	7979      	ldrb	r1, [r7, #5]
 8000b66:	4413      	add	r3, r2
 8000b68:	460a      	mov	r2, r1
 8000b6a:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000b6e:	4b14      	ldr	r3, [pc, #80]	; (8000bc0 <Modbus_Emission+0xf8>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b78:	2b20      	cmp	r3, #32
 8000b7a:	d10d      	bne.n	8000b98 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8000b7c:	4b10      	ldr	r3, [pc, #64]	; (8000bc0 <Modbus_Emission+0xf8>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8000b82:	4b0f      	ldr	r3, [pc, #60]	; (8000bc0 <Modbus_Emission+0xf8>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <Modbus_Emission+0xf8>)
 8000b8c:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8000b8e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8000b92:	461a      	mov	r2, r3
 8000b94:	f003 fec8 	bl	8004928 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8000b98:	4b09      	ldr	r3, [pc, #36]	; (8000bc0 <Modbus_Emission+0xf8>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8000ba0:	4b07      	ldr	r3, [pc, #28]	; (8000bc0 <Modbus_Emission+0xf8>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <Modbus_Emission+0xf8>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	2200      	movs	r2, #0
 8000bae:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <Modbus_Emission+0xf8>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2202      	movs	r2, #2
 8000bb6:	761a      	strb	r2, [r3, #24]
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20000228 	.word	0x20000228

08000bc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc8:	f000 fb45 	bl	8001256 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bcc:	f000 f82a 	bl	8000c24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bd0:	f000 f96c 	bl	8000eac <MX_GPIO_Init>
  MX_DMA_Init();
 8000bd4:	f000 f940 	bl	8000e58 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000bd8:	f000 f8f0 	bl	8000dbc <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000bdc:	f000 f86e 	bl	8000cbc <MX_TIM16_Init>
  /* USER CODE BEGIN 2 */
  hmodbus.huart = &huart2;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <main+0x50>)
 8000be2:	4a0d      	ldr	r2, [pc, #52]	; (8000c18 <main+0x54>)
 8000be4:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	; (8000c14 <main+0x50>)
 8000be8:	4a0c      	ldr	r2, [pc, #48]	; (8000c1c <main+0x58>)
 8000bea:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8000bec:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <main+0x50>)
 8000bee:	2215      	movs	r2, #21
 8000bf0:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <main+0x50>)
 8000bf4:	22c8      	movs	r2, #200	; 0xc8
 8000bf6:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8000bf8:	4909      	ldr	r1, [pc, #36]	; (8000c20 <main+0x5c>)
 8000bfa:	4806      	ldr	r0, [pc, #24]	; (8000c14 <main+0x50>)
 8000bfc:	f7ff fcdc 	bl	80005b8 <Modbus_init>
  HAL_UART_ReceiverTimeout_Config(&huart2, 22);
 8000c00:	2116      	movs	r1, #22
 8000c02:	4805      	ldr	r0, [pc, #20]	; (8000c18 <main+0x54>)
 8000c04:	f004 fb56 	bl	80052b4 <HAL_UART_ReceiverTimeout_Config>
  HAL_UART_EnableReceiverTimeout(&huart2);
 8000c08:	4803      	ldr	r0, [pc, #12]	; (8000c18 <main+0x54>)
 8000c0a:	f004 fb6f 	bl	80052ec <HAL_UART_EnableReceiverTimeout>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Modbus_Protocal_Worker();
 8000c0e:	f7ff fd5f 	bl	80006d0 <Modbus_Protocal_Worker>
 8000c12:	e7fc      	b.n	8000c0e <main+0x4a>
 8000c14:	20000424 	.word	0x20000424
 8000c18:	200002f8 	.word	0x200002f8
 8000c1c:	2000022c 	.word	0x2000022c
 8000c20:	200008fc 	.word	0x200008fc

08000c24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b094      	sub	sp, #80	; 0x50
 8000c28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2a:	f107 0318 	add.w	r3, r7, #24
 8000c2e:	2238      	movs	r2, #56	; 0x38
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f006 f99e 	bl	8006f74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	601a      	str	r2, [r3, #0]
 8000c3e:	605a      	str	r2, [r3, #4]
 8000c40:	609a      	str	r2, [r3, #8]
 8000c42:	60da      	str	r2, [r3, #12]
 8000c44:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000c46:	2000      	movs	r0, #0
 8000c48:	f001 f982 	bl	8001f50 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c56:	2340      	movs	r3, #64	; 0x40
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000c62:	2304      	movs	r3, #4
 8000c64:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000c66:	2355      	movs	r3, #85	; 0x55
 8000c68:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000c6e:	2302      	movs	r3, #2
 8000c70:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000c72:	2302      	movs	r3, #2
 8000c74:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c76:	f107 0318 	add.w	r3, r7, #24
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f001 fa1c 	bl	80020b8 <HAL_RCC_OscConfig>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c86:	f000 f97f 	bl	8000f88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c8e:	2303      	movs	r3, #3
 8000c90:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c96:	2300      	movs	r3, #0
 8000c98:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c9e:	1d3b      	adds	r3, r7, #4
 8000ca0:	2104      	movs	r1, #4
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f001 fd1a 	bl	80026dc <HAL_RCC_ClockConfig>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000cae:	f000 f96b 	bl	8000f88 <Error_Handler>
  }
}
 8000cb2:	bf00      	nop
 8000cb4:	3750      	adds	r7, #80	; 0x50
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b094      	sub	sp, #80	; 0x50
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cc2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]
 8000cd2:	615a      	str	r2, [r3, #20]
 8000cd4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cd6:	463b      	mov	r3, r7
 8000cd8:	2234      	movs	r2, #52	; 0x34
 8000cda:	2100      	movs	r1, #0
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f006 f949 	bl	8006f74 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000ce2:	4b34      	ldr	r3, [pc, #208]	; (8000db4 <MX_TIM16_Init+0xf8>)
 8000ce4:	4a34      	ldr	r2, [pc, #208]	; (8000db8 <MX_TIM16_Init+0xfc>)
 8000ce6:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8000ce8:	4b32      	ldr	r3, [pc, #200]	; (8000db4 <MX_TIM16_Init+0xf8>)
 8000cea:	22a9      	movs	r2, #169	; 0xa9
 8000cec:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cee:	4b31      	ldr	r3, [pc, #196]	; (8000db4 <MX_TIM16_Init+0xf8>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 2005;
 8000cf4:	4b2f      	ldr	r3, [pc, #188]	; (8000db4 <MX_TIM16_Init+0xf8>)
 8000cf6:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8000cfa:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cfc:	4b2d      	ldr	r3, [pc, #180]	; (8000db4 <MX_TIM16_Init+0xf8>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000d02:	4b2c      	ldr	r3, [pc, #176]	; (8000db4 <MX_TIM16_Init+0xf8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d08:	4b2a      	ldr	r3, [pc, #168]	; (8000db4 <MX_TIM16_Init+0xf8>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000d0e:	4829      	ldr	r0, [pc, #164]	; (8000db4 <MX_TIM16_Init+0xf8>)
 8000d10:	f002 f94e 	bl	8002fb0 <HAL_TIM_Base_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8000d1a:	f000 f935 	bl	8000f88 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim16) != HAL_OK)
 8000d1e:	4825      	ldr	r0, [pc, #148]	; (8000db4 <MX_TIM16_Init+0xf8>)
 8000d20:	f002 fa22 	bl	8003168 <HAL_TIM_OC_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8000d2a:	f000 f92d 	bl	8000f88 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8000d2e:	2108      	movs	r1, #8
 8000d30:	4820      	ldr	r0, [pc, #128]	; (8000db4 <MX_TIM16_Init+0xf8>)
 8000d32:	f002 fa87 	bl	8003244 <HAL_TIM_OnePulse_Init>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_TIM16_Init+0x84>
  {
    Error_Handler();
 8000d3c:	f000 f924 	bl	8000f88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8000d40:	2310      	movs	r3, #16
 8000d42:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 1432;
 8000d44:	f44f 63b3 	mov.w	r3, #1432	; 0x598
 8000d48:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d56:	2300      	movs	r3, #0
 8000d58:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_OC_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000d62:	2200      	movs	r2, #0
 8000d64:	4619      	mov	r1, r3
 8000d66:	4813      	ldr	r0, [pc, #76]	; (8000db4 <MX_TIM16_Init+0xf8>)
 8000d68:	f002 fcdc 	bl	8003724 <HAL_TIM_OC_ConfigChannel>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_TIM16_Init+0xba>
  {
    Error_Handler();
 8000d72:	f000 f909 	bl	8000f88 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000d76:	2300      	movs	r3, #0
 8000d78:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d8e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8000d98:	463b      	mov	r3, r7
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4805      	ldr	r0, [pc, #20]	; (8000db4 <MX_TIM16_Init+0xf8>)
 8000d9e:	f003 fb79 	bl	8004494 <HAL_TIMEx_ConfigBreakDeadTime>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM16_Init+0xf0>
  {
    Error_Handler();
 8000da8:	f000 f8ee 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000dac:	bf00      	nop
 8000dae:	3750      	adds	r7, #80	; 0x50
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	2000022c 	.word	0x2000022c
 8000db8:	40014400 	.word	0x40014400

08000dbc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dc0:	4b23      	ldr	r3, [pc, #140]	; (8000e50 <MX_USART2_UART_Init+0x94>)
 8000dc2:	4a24      	ldr	r2, [pc, #144]	; (8000e54 <MX_USART2_UART_Init+0x98>)
 8000dc4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000dc6:	4b22      	ldr	r3, [pc, #136]	; (8000e50 <MX_USART2_UART_Init+0x94>)
 8000dc8:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8000dcc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000dce:	4b20      	ldr	r3, [pc, #128]	; (8000e50 <MX_USART2_UART_Init+0x94>)
 8000dd0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000dd4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dd6:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <MX_USART2_UART_Init+0x94>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000ddc:	4b1c      	ldr	r3, [pc, #112]	; (8000e50 <MX_USART2_UART_Init+0x94>)
 8000dde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000de2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000de4:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <MX_USART2_UART_Init+0x94>)
 8000de6:	220c      	movs	r2, #12
 8000de8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dea:	4b19      	ldr	r3, [pc, #100]	; (8000e50 <MX_USART2_UART_Init+0x94>)
 8000dec:	2200      	movs	r2, #0
 8000dee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000df0:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <MX_USART2_UART_Init+0x94>)
 8000df2:	2200      	movs	r2, #0
 8000df4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000df6:	4b16      	ldr	r3, [pc, #88]	; (8000e50 <MX_USART2_UART_Init+0x94>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dfc:	4b14      	ldr	r3, [pc, #80]	; (8000e50 <MX_USART2_UART_Init+0x94>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e02:	4b13      	ldr	r3, [pc, #76]	; (8000e50 <MX_USART2_UART_Init+0x94>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e08:	4811      	ldr	r0, [pc, #68]	; (8000e50 <MX_USART2_UART_Init+0x94>)
 8000e0a:	f003 fc27 	bl	800465c <HAL_UART_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8000e14:	f000 f8b8 	bl	8000f88 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e18:	2100      	movs	r1, #0
 8000e1a:	480d      	ldr	r0, [pc, #52]	; (8000e50 <MX_USART2_UART_Init+0x94>)
 8000e1c:	f005 ffdf 	bl	8006dde <HAL_UARTEx_SetTxFifoThreshold>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8000e26:	f000 f8af 	bl	8000f88 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e2a:	2100      	movs	r1, #0
 8000e2c:	4808      	ldr	r0, [pc, #32]	; (8000e50 <MX_USART2_UART_Init+0x94>)
 8000e2e:	f006 f814 	bl	8006e5a <HAL_UARTEx_SetRxFifoThreshold>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8000e38:	f000 f8a6 	bl	8000f88 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000e3c:	4804      	ldr	r0, [pc, #16]	; (8000e50 <MX_USART2_UART_Init+0x94>)
 8000e3e:	f005 ff95 	bl	8006d6c <HAL_UARTEx_DisableFifoMode>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8000e48:	f000 f89e 	bl	8000f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	200002f8 	.word	0x200002f8
 8000e54:	40004400 	.word	0x40004400

08000e58 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000e5e:	4b12      	ldr	r3, [pc, #72]	; (8000ea8 <MX_DMA_Init+0x50>)
 8000e60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e62:	4a11      	ldr	r2, [pc, #68]	; (8000ea8 <MX_DMA_Init+0x50>)
 8000e64:	f043 0304 	orr.w	r3, r3, #4
 8000e68:	6493      	str	r3, [r2, #72]	; 0x48
 8000e6a:	4b0f      	ldr	r3, [pc, #60]	; (8000ea8 <MX_DMA_Init+0x50>)
 8000e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e6e:	f003 0304 	and.w	r3, r3, #4
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e76:	4b0c      	ldr	r3, [pc, #48]	; (8000ea8 <MX_DMA_Init+0x50>)
 8000e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ea8 <MX_DMA_Init+0x50>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	6493      	str	r3, [r2, #72]	; 0x48
 8000e82:	4b09      	ldr	r3, [pc, #36]	; (8000ea8 <MX_DMA_Init+0x50>)
 8000e84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e86:	f003 0301 	and.w	r3, r3, #1
 8000e8a:	603b      	str	r3, [r7, #0]
 8000e8c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	200b      	movs	r0, #11
 8000e94:	f000 fb2b 	bl	80014ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000e98:	200b      	movs	r0, #11
 8000e9a:	f000 fb42 	bl	8001522 <HAL_NVIC_EnableIRQ>

}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40021000 	.word	0x40021000

08000eac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ec2:	4b2f      	ldr	r3, [pc, #188]	; (8000f80 <MX_GPIO_Init+0xd4>)
 8000ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec6:	4a2e      	ldr	r2, [pc, #184]	; (8000f80 <MX_GPIO_Init+0xd4>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ece:	4b2c      	ldr	r3, [pc, #176]	; (8000f80 <MX_GPIO_Init+0xd4>)
 8000ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	613b      	str	r3, [r7, #16]
 8000ed8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000eda:	4b29      	ldr	r3, [pc, #164]	; (8000f80 <MX_GPIO_Init+0xd4>)
 8000edc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ede:	4a28      	ldr	r2, [pc, #160]	; (8000f80 <MX_GPIO_Init+0xd4>)
 8000ee0:	f043 0320 	orr.w	r3, r3, #32
 8000ee4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ee6:	4b26      	ldr	r3, [pc, #152]	; (8000f80 <MX_GPIO_Init+0xd4>)
 8000ee8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eea:	f003 0320 	and.w	r3, r3, #32
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	4b23      	ldr	r3, [pc, #140]	; (8000f80 <MX_GPIO_Init+0xd4>)
 8000ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ef6:	4a22      	ldr	r2, [pc, #136]	; (8000f80 <MX_GPIO_Init+0xd4>)
 8000ef8:	f043 0301 	orr.w	r3, r3, #1
 8000efc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000efe:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <MX_GPIO_Init+0xd4>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60bb      	str	r3, [r7, #8]
 8000f08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <MX_GPIO_Init+0xd4>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	4a1c      	ldr	r2, [pc, #112]	; (8000f80 <MX_GPIO_Init+0xd4>)
 8000f10:	f043 0302 	orr.w	r3, r3, #2
 8000f14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f16:	4b1a      	ldr	r3, [pc, #104]	; (8000f80 <MX_GPIO_Init+0xd4>)
 8000f18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	607b      	str	r3, [r7, #4]
 8000f20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f22:	2200      	movs	r2, #0
 8000f24:	2120      	movs	r1, #32
 8000f26:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f2a:	f000 ffd5 	bl	8001ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f34:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000f38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	480f      	ldr	r0, [pc, #60]	; (8000f84 <MX_GPIO_Init+0xd8>)
 8000f46:	f000 fe45 	bl	8001bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f4a:	2320      	movs	r3, #32
 8000f4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4e:	2301      	movs	r3, #1
 8000f50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	4619      	mov	r1, r3
 8000f60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f64:	f000 fe36 	bl	8001bd4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	2028      	movs	r0, #40	; 0x28
 8000f6e:	f000 fabe 	bl	80014ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f72:	2028      	movs	r0, #40	; 0x28
 8000f74:	f000 fad5 	bl	8001522 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f78:	bf00      	nop
 8000f7a:	3728      	adds	r7, #40	; 0x28
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40021000 	.word	0x40021000
 8000f84:	48000800 	.word	0x48000800

08000f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f8c:	b672      	cpsid	i
}
 8000f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <Error_Handler+0x8>
	...

08000f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <HAL_MspInit+0x44>)
 8000f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9e:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6613      	str	r3, [r2, #96]	; 0x60
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb6:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	6593      	str	r3, [r2, #88]	; 0x58
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	603b      	str	r3, [r7, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000fca:	f001 f865 	bl	8002098 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40021000 	.word	0x40021000

08000fdc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM16)
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a0d      	ldr	r2, [pc, #52]	; (8001020 <HAL_TIM_Base_MspInit+0x44>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d113      	bne.n	8001016 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM16_MspInit 0 */

  /* USER CODE END TIM16_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000fee:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <HAL_TIM_Base_MspInit+0x48>)
 8000ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff2:	4a0c      	ldr	r2, [pc, #48]	; (8001024 <HAL_TIM_Base_MspInit+0x48>)
 8000ff4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ff8:	6613      	str	r3, [r2, #96]	; 0x60
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <HAL_TIM_Base_MspInit+0x48>)
 8000ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
    /* TIM16 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001006:	2200      	movs	r2, #0
 8001008:	2100      	movs	r1, #0
 800100a:	2019      	movs	r0, #25
 800100c:	f000 fa6f 	bl	80014ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001010:	2019      	movs	r0, #25
 8001012:	f000 fa86 	bl	8001522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40014400 	.word	0x40014400
 8001024:	40021000 	.word	0x40021000

08001028 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b09e      	sub	sp, #120	; 0x78
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001030:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]
 8001038:	605a      	str	r2, [r3, #4]
 800103a:	609a      	str	r2, [r3, #8]
 800103c:	60da      	str	r2, [r3, #12]
 800103e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001040:	f107 0310 	add.w	r3, r7, #16
 8001044:	2254      	movs	r2, #84	; 0x54
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f005 ff93 	bl	8006f74 <memset>
  if(huart->Instance==USART2)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a37      	ldr	r2, [pc, #220]	; (8001130 <HAL_UART_MspInit+0x108>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d167      	bne.n	8001128 <HAL_UART_MspInit+0x100>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001058:	2302      	movs	r3, #2
 800105a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800105c:	2300      	movs	r3, #0
 800105e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001060:	f107 0310 	add.w	r3, r7, #16
 8001064:	4618      	mov	r0, r3
 8001066:	f001 fd55 	bl	8002b14 <HAL_RCCEx_PeriphCLKConfig>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001070:	f7ff ff8a 	bl	8000f88 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001074:	4b2f      	ldr	r3, [pc, #188]	; (8001134 <HAL_UART_MspInit+0x10c>)
 8001076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001078:	4a2e      	ldr	r2, [pc, #184]	; (8001134 <HAL_UART_MspInit+0x10c>)
 800107a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800107e:	6593      	str	r3, [r2, #88]	; 0x58
 8001080:	4b2c      	ldr	r3, [pc, #176]	; (8001134 <HAL_UART_MspInit+0x10c>)
 8001082:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001084:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001088:	60fb      	str	r3, [r7, #12]
 800108a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108c:	4b29      	ldr	r3, [pc, #164]	; (8001134 <HAL_UART_MspInit+0x10c>)
 800108e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001090:	4a28      	ldr	r2, [pc, #160]	; (8001134 <HAL_UART_MspInit+0x10c>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001098:	4b26      	ldr	r3, [pc, #152]	; (8001134 <HAL_UART_MspInit+0x10c>)
 800109a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80010a4:	230c      	movs	r3, #12
 80010a6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a8:	2302      	movs	r3, #2
 80010aa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ac:	2300      	movs	r3, #0
 80010ae:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010b0:	2300      	movs	r3, #0
 80010b2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010b4:	2307      	movs	r3, #7
 80010b6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80010bc:	4619      	mov	r1, r3
 80010be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010c2:	f000 fd87 	bl	8001bd4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 80010c6:	4b1c      	ldr	r3, [pc, #112]	; (8001138 <HAL_UART_MspInit+0x110>)
 80010c8:	4a1c      	ldr	r2, [pc, #112]	; (800113c <HAL_UART_MspInit+0x114>)
 80010ca:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 80010cc:	4b1a      	ldr	r3, [pc, #104]	; (8001138 <HAL_UART_MspInit+0x110>)
 80010ce:	221b      	movs	r2, #27
 80010d0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010d2:	4b19      	ldr	r3, [pc, #100]	; (8001138 <HAL_UART_MspInit+0x110>)
 80010d4:	2210      	movs	r2, #16
 80010d6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010d8:	4b17      	ldr	r3, [pc, #92]	; (8001138 <HAL_UART_MspInit+0x110>)
 80010da:	2200      	movs	r2, #0
 80010dc:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010de:	4b16      	ldr	r3, [pc, #88]	; (8001138 <HAL_UART_MspInit+0x110>)
 80010e0:	2280      	movs	r2, #128	; 0x80
 80010e2:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010e4:	4b14      	ldr	r3, [pc, #80]	; (8001138 <HAL_UART_MspInit+0x110>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010ea:	4b13      	ldr	r3, [pc, #76]	; (8001138 <HAL_UART_MspInit+0x110>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80010f0:	4b11      	ldr	r3, [pc, #68]	; (8001138 <HAL_UART_MspInit+0x110>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <HAL_UART_MspInit+0x110>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80010fc:	480e      	ldr	r0, [pc, #56]	; (8001138 <HAL_UART_MspInit+0x110>)
 80010fe:	f000 fa2b 	bl	8001558 <HAL_DMA_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8001108:	f7ff ff3e 	bl	8000f88 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <HAL_UART_MspInit+0x110>)
 8001110:	67da      	str	r2, [r3, #124]	; 0x7c
 8001112:	4a09      	ldr	r2, [pc, #36]	; (8001138 <HAL_UART_MspInit+0x110>)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001118:	2200      	movs	r2, #0
 800111a:	2100      	movs	r1, #0
 800111c:	2026      	movs	r0, #38	; 0x26
 800111e:	f000 f9e6 	bl	80014ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001122:	2026      	movs	r0, #38	; 0x26
 8001124:	f000 f9fd 	bl	8001522 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001128:	bf00      	nop
 800112a:	3778      	adds	r7, #120	; 0x78
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40004400 	.word	0x40004400
 8001134:	40021000 	.word	0x40021000
 8001138:	200003c4 	.word	0x200003c4
 800113c:	40020008 	.word	0x40020008

08001140 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001144:	e7fe      	b.n	8001144 <NMI_Handler+0x4>

08001146 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001146:	b480      	push	{r7}
 8001148:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800114a:	e7fe      	b.n	800114a <HardFault_Handler+0x4>

0800114c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001150:	e7fe      	b.n	8001150 <MemManage_Handler+0x4>

08001152 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001156:	e7fe      	b.n	8001156 <BusFault_Handler+0x4>

08001158 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001158:	b480      	push	{r7}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800115c:	e7fe      	b.n	800115c <UsageFault_Handler+0x4>

0800115e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800115e:	b480      	push	{r7}
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001162:	bf00      	nop
 8001164:	46bd      	mov	sp, r7
 8001166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116a:	4770      	bx	lr

0800116c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001170:	bf00      	nop
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr

0800117a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800117a:	b480      	push	{r7}
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800117e:	bf00      	nop
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800118c:	f000 f8b6 	bl	80012fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	bd80      	pop	{r7, pc}

08001194 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001198:	4802      	ldr	r0, [pc, #8]	; (80011a4 <DMA1_Channel1_IRQHandler+0x10>)
 800119a:	f000 fbc0 	bl	800191e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	200003c4 	.word	0x200003c4

080011a8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80011ac:	4802      	ldr	r0, [pc, #8]	; (80011b8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80011ae:	f002 f93f 	bl	8003430 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	2000022c 	.word	0x2000022c

080011bc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011c0:	4802      	ldr	r0, [pc, #8]	; (80011cc <USART2_IRQHandler+0x10>)
 80011c2:	f003 fce7 	bl	8004b94 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200002f8 	.word	0x200002f8

080011d0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80011d4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80011d8:	f000 fe96 	bl	8001f08 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80011dc:	bf00      	nop
 80011de:	bd80      	pop	{r7, pc}

080011e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80011e4:	4b06      	ldr	r3, [pc, #24]	; (8001200 <SystemInit+0x20>)
 80011e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ea:	4a05      	ldr	r2, [pc, #20]	; (8001200 <SystemInit+0x20>)
 80011ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f4:	bf00      	nop
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	e000ed00 	.word	0xe000ed00

08001204 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001204:	480d      	ldr	r0, [pc, #52]	; (800123c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001206:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001208:	f7ff ffea 	bl	80011e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <LoopForever+0x6>)
  ldr r1, =_edata
 800120e:	490d      	ldr	r1, [pc, #52]	; (8001244 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001210:	4a0d      	ldr	r2, [pc, #52]	; (8001248 <LoopForever+0xe>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001214:	e002      	b.n	800121c <LoopCopyDataInit>

08001216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121a:	3304      	adds	r3, #4

0800121c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800121c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001220:	d3f9      	bcc.n	8001216 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001222:	4a0a      	ldr	r2, [pc, #40]	; (800124c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001224:	4c0a      	ldr	r4, [pc, #40]	; (8001250 <LoopForever+0x16>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001228:	e001      	b.n	800122e <LoopFillZerobss>

0800122a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800122c:	3204      	adds	r2, #4

0800122e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001230:	d3fb      	bcc.n	800122a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001232:	f005 fea7 	bl	8006f84 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001236:	f7ff fcc5 	bl	8000bc4 <main>

0800123a <LoopForever>:

LoopForever:
    b LoopForever
 800123a:	e7fe      	b.n	800123a <LoopForever>
  ldr   r0, =_estack
 800123c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001240:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001244:	2000020c 	.word	0x2000020c
  ldr r2, =_sidata
 8001248:	08007050 	.word	0x08007050
  ldr r2, =_sbss
 800124c:	2000020c 	.word	0x2000020c
  ldr r4, =_ebss
 8001250:	20000a90 	.word	0x20000a90

08001254 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001254:	e7fe      	b.n	8001254 <ADC1_2_IRQHandler>

08001256 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b082      	sub	sp, #8
 800125a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800125c:	2300      	movs	r3, #0
 800125e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001260:	2003      	movs	r0, #3
 8001262:	f000 f939 	bl	80014d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001266:	2000      	movs	r0, #0
 8001268:	f000 f80e 	bl	8001288 <HAL_InitTick>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d002      	beq.n	8001278 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	71fb      	strb	r3, [r7, #7]
 8001276:	e001      	b.n	800127c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001278:	f7ff fe8c 	bl	8000f94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800127c:	79fb      	ldrb	r3, [r7, #7]

}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b084      	sub	sp, #16
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001290:	2300      	movs	r3, #0
 8001292:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001294:	4b16      	ldr	r3, [pc, #88]	; (80012f0 <HAL_InitTick+0x68>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d022      	beq.n	80012e2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800129c:	4b15      	ldr	r3, [pc, #84]	; (80012f4 <HAL_InitTick+0x6c>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b13      	ldr	r3, [pc, #76]	; (80012f0 <HAL_InitTick+0x68>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80012ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b0:	4618      	mov	r0, r3
 80012b2:	f000 f944 	bl	800153e <HAL_SYSTICK_Config>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d10f      	bne.n	80012dc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2b0f      	cmp	r3, #15
 80012c0:	d809      	bhi.n	80012d6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c2:	2200      	movs	r2, #0
 80012c4:	6879      	ldr	r1, [r7, #4]
 80012c6:	f04f 30ff 	mov.w	r0, #4294967295
 80012ca:	f000 f910 	bl	80014ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012ce:	4a0a      	ldr	r2, [pc, #40]	; (80012f8 <HAL_InitTick+0x70>)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6013      	str	r3, [r2, #0]
 80012d4:	e007      	b.n	80012e6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80012d6:	2301      	movs	r3, #1
 80012d8:	73fb      	strb	r3, [r7, #15]
 80012da:	e004      	b.n	80012e6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	73fb      	strb	r3, [r7, #15]
 80012e0:	e001      	b.n	80012e6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000208 	.word	0x20000208
 80012f4:	20000200 	.word	0x20000200
 80012f8:	20000204 	.word	0x20000204

080012fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <HAL_IncTick+0x1c>)
 8001302:	681a      	ldr	r2, [r3, #0]
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <HAL_IncTick+0x20>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4413      	add	r3, r2
 800130a:	4a03      	ldr	r2, [pc, #12]	; (8001318 <HAL_IncTick+0x1c>)
 800130c:	6013      	str	r3, [r2, #0]
}
 800130e:	bf00      	nop
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	20000a8c 	.word	0x20000a8c
 800131c:	20000208 	.word	0x20000208

08001320 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return uwTick;
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <HAL_GetTick+0x14>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000a8c 	.word	0x20000a8c

08001338 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001338:	b480      	push	{r7}
 800133a:	b085      	sub	sp, #20
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	f003 0307 	and.w	r3, r3, #7
 8001346:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001348:	4b0c      	ldr	r3, [pc, #48]	; (800137c <__NVIC_SetPriorityGrouping+0x44>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800134e:	68ba      	ldr	r2, [r7, #8]
 8001350:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001354:	4013      	ands	r3, r2
 8001356:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001360:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001368:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800136a:	4a04      	ldr	r2, [pc, #16]	; (800137c <__NVIC_SetPriorityGrouping+0x44>)
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	60d3      	str	r3, [r2, #12]
}
 8001370:	bf00      	nop
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001384:	4b04      	ldr	r3, [pc, #16]	; (8001398 <__NVIC_GetPriorityGrouping+0x18>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	0a1b      	lsrs	r3, r3, #8
 800138a:	f003 0307 	and.w	r3, r3, #7
}
 800138e:	4618      	mov	r0, r3
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	db0b      	blt.n	80013c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	f003 021f 	and.w	r2, r3, #31
 80013b4:	4907      	ldr	r1, [pc, #28]	; (80013d4 <__NVIC_EnableIRQ+0x38>)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	095b      	lsrs	r3, r3, #5
 80013bc:	2001      	movs	r0, #1
 80013be:	fa00 f202 	lsl.w	r2, r0, r2
 80013c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013c6:	bf00      	nop
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	e000e100 	.word	0xe000e100

080013d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	6039      	str	r1, [r7, #0]
 80013e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	db0a      	blt.n	8001402 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	b2da      	uxtb	r2, r3
 80013f0:	490c      	ldr	r1, [pc, #48]	; (8001424 <__NVIC_SetPriority+0x4c>)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	0112      	lsls	r2, r2, #4
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	440b      	add	r3, r1
 80013fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001400:	e00a      	b.n	8001418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001402:	683b      	ldr	r3, [r7, #0]
 8001404:	b2da      	uxtb	r2, r3
 8001406:	4908      	ldr	r1, [pc, #32]	; (8001428 <__NVIC_SetPriority+0x50>)
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	f003 030f 	and.w	r3, r3, #15
 800140e:	3b04      	subs	r3, #4
 8001410:	0112      	lsls	r2, r2, #4
 8001412:	b2d2      	uxtb	r2, r2
 8001414:	440b      	add	r3, r1
 8001416:	761a      	strb	r2, [r3, #24]
}
 8001418:	bf00      	nop
 800141a:	370c      	adds	r7, #12
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr
 8001424:	e000e100 	.word	0xe000e100
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800142c:	b480      	push	{r7}
 800142e:	b089      	sub	sp, #36	; 0x24
 8001430:	af00      	add	r7, sp, #0
 8001432:	60f8      	str	r0, [r7, #12]
 8001434:	60b9      	str	r1, [r7, #8]
 8001436:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001438:	68fb      	ldr	r3, [r7, #12]
 800143a:	f003 0307 	and.w	r3, r3, #7
 800143e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f1c3 0307 	rsb	r3, r3, #7
 8001446:	2b04      	cmp	r3, #4
 8001448:	bf28      	it	cs
 800144a:	2304      	movcs	r3, #4
 800144c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	3304      	adds	r3, #4
 8001452:	2b06      	cmp	r3, #6
 8001454:	d902      	bls.n	800145c <NVIC_EncodePriority+0x30>
 8001456:	69fb      	ldr	r3, [r7, #28]
 8001458:	3b03      	subs	r3, #3
 800145a:	e000      	b.n	800145e <NVIC_EncodePriority+0x32>
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001460:	f04f 32ff 	mov.w	r2, #4294967295
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43da      	mvns	r2, r3
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	401a      	ands	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001474:	f04f 31ff 	mov.w	r1, #4294967295
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	fa01 f303 	lsl.w	r3, r1, r3
 800147e:	43d9      	mvns	r1, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001484:	4313      	orrs	r3, r2
         );
}
 8001486:	4618      	mov	r0, r3
 8001488:	3724      	adds	r7, #36	; 0x24
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
	...

08001494 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	3b01      	subs	r3, #1
 80014a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014a4:	d301      	bcc.n	80014aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014a6:	2301      	movs	r3, #1
 80014a8:	e00f      	b.n	80014ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014aa:	4a0a      	ldr	r2, [pc, #40]	; (80014d4 <SysTick_Config+0x40>)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3b01      	subs	r3, #1
 80014b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014b2:	210f      	movs	r1, #15
 80014b4:	f04f 30ff 	mov.w	r0, #4294967295
 80014b8:	f7ff ff8e 	bl	80013d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <SysTick_Config+0x40>)
 80014be:	2200      	movs	r2, #0
 80014c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014c2:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <SysTick_Config+0x40>)
 80014c4:	2207      	movs	r2, #7
 80014c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	e000e010 	.word	0xe000e010

080014d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014e0:	6878      	ldr	r0, [r7, #4]
 80014e2:	f7ff ff29 	bl	8001338 <__NVIC_SetPriorityGrouping>
}
 80014e6:	bf00      	nop
 80014e8:	3708      	adds	r7, #8
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ee:	b580      	push	{r7, lr}
 80014f0:	b086      	sub	sp, #24
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	4603      	mov	r3, r0
 80014f6:	60b9      	str	r1, [r7, #8]
 80014f8:	607a      	str	r2, [r7, #4]
 80014fa:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014fc:	f7ff ff40 	bl	8001380 <__NVIC_GetPriorityGrouping>
 8001500:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	68b9      	ldr	r1, [r7, #8]
 8001506:	6978      	ldr	r0, [r7, #20]
 8001508:	f7ff ff90 	bl	800142c <NVIC_EncodePriority>
 800150c:	4602      	mov	r2, r0
 800150e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001512:	4611      	mov	r1, r2
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff5f 	bl	80013d8 <__NVIC_SetPriority>
}
 800151a:	bf00      	nop
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}

08001522 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001522:	b580      	push	{r7, lr}
 8001524:	b082      	sub	sp, #8
 8001526:	af00      	add	r7, sp, #0
 8001528:	4603      	mov	r3, r0
 800152a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800152c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ff33 	bl	800139c <__NVIC_EnableIRQ>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}

0800153e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800153e:	b580      	push	{r7, lr}
 8001540:	b082      	sub	sp, #8
 8001542:	af00      	add	r7, sp, #0
 8001544:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f7ff ffa4 	bl	8001494 <SysTick_Config>
 800154c:	4603      	mov	r3, r0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b084      	sub	sp, #16
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e08d      	b.n	8001686 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	461a      	mov	r2, r3
 8001570:	4b47      	ldr	r3, [pc, #284]	; (8001690 <HAL_DMA_Init+0x138>)
 8001572:	429a      	cmp	r2, r3
 8001574:	d80f      	bhi.n	8001596 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	461a      	mov	r2, r3
 800157c:	4b45      	ldr	r3, [pc, #276]	; (8001694 <HAL_DMA_Init+0x13c>)
 800157e:	4413      	add	r3, r2
 8001580:	4a45      	ldr	r2, [pc, #276]	; (8001698 <HAL_DMA_Init+0x140>)
 8001582:	fba2 2303 	umull	r2, r3, r2, r3
 8001586:	091b      	lsrs	r3, r3, #4
 8001588:	009a      	lsls	r2, r3, #2
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a42      	ldr	r2, [pc, #264]	; (800169c <HAL_DMA_Init+0x144>)
 8001592:	641a      	str	r2, [r3, #64]	; 0x40
 8001594:	e00e      	b.n	80015b4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	461a      	mov	r2, r3
 800159c:	4b40      	ldr	r3, [pc, #256]	; (80016a0 <HAL_DMA_Init+0x148>)
 800159e:	4413      	add	r3, r2
 80015a0:	4a3d      	ldr	r2, [pc, #244]	; (8001698 <HAL_DMA_Init+0x140>)
 80015a2:	fba2 2303 	umull	r2, r3, r2, r3
 80015a6:	091b      	lsrs	r3, r3, #4
 80015a8:	009a      	lsls	r2, r3, #2
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a3c      	ldr	r2, [pc, #240]	; (80016a4 <HAL_DMA_Init+0x14c>)
 80015b2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2202      	movs	r2, #2
 80015b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80015ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80015ce:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80015d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	699b      	ldr	r3, [r3, #24]
 80015ea:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015f8:	68fa      	ldr	r2, [r7, #12]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	68fa      	ldr	r2, [r7, #12]
 8001604:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f000 fa82 	bl	8001b10 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	689b      	ldr	r3, [r3, #8]
 8001610:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001614:	d102      	bne.n	800161c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2200      	movs	r2, #0
 800161a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001630:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	2b00      	cmp	r3, #0
 8001638:	d010      	beq.n	800165c <HAL_DMA_Init+0x104>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b04      	cmp	r3, #4
 8001640:	d80c      	bhi.n	800165c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f000 faa2 	bl	8001b8c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164c:	2200      	movs	r2, #0
 800164e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	e008      	b.n	800166e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2200      	movs	r2, #0
 8001660:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	2200      	movs	r2, #0
 800166c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2200      	movs	r2, #0
 8001672:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2201      	movs	r2, #1
 8001678:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001684:	2300      	movs	r3, #0
}
 8001686:	4618      	mov	r0, r3
 8001688:	3710      	adds	r7, #16
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	40020407 	.word	0x40020407
 8001694:	bffdfff8 	.word	0xbffdfff8
 8001698:	cccccccd 	.word	0xcccccccd
 800169c:	40020000 	.word	0x40020000
 80016a0:	bffdfbf8 	.word	0xbffdfbf8
 80016a4:	40020400 	.word	0x40020400

080016a8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
 80016b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016b6:	2300      	movs	r3, #0
 80016b8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016ba:	68fb      	ldr	r3, [r7, #12]
 80016bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d101      	bne.n	80016c8 <HAL_DMA_Start_IT+0x20>
 80016c4:	2302      	movs	r3, #2
 80016c6:	e066      	b.n	8001796 <HAL_DMA_Start_IT+0xee>
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	2201      	movs	r2, #1
 80016cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d155      	bne.n	8001788 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2202      	movs	r2, #2
 80016e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	2200      	movs	r2, #0
 80016e8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f022 0201 	bic.w	r2, r2, #1
 80016f8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	68b9      	ldr	r1, [r7, #8]
 8001700:	68f8      	ldr	r0, [r7, #12]
 8001702:	f000 f9c7 	bl	8001a94 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	2b00      	cmp	r3, #0
 800170c:	d008      	beq.n	8001720 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f042 020e 	orr.w	r2, r2, #14
 800171c:	601a      	str	r2, [r3, #0]
 800171e:	e00f      	b.n	8001740 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0204 	bic.w	r2, r2, #4
 800172e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f042 020a 	orr.w	r2, r2, #10
 800173e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800174a:	2b00      	cmp	r3, #0
 800174c:	d007      	beq.n	800175e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001758:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800175c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001762:	2b00      	cmp	r3, #0
 8001764:	d007      	beq.n	8001776 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001770:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001774:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f042 0201 	orr.w	r2, r2, #1
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	e005      	b.n	8001794 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001790:	2302      	movs	r3, #2
 8001792:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001794:	7dfb      	ldrb	r3, [r7, #23]
}
 8001796:	4618      	mov	r0, r3
 8001798:	3718      	adds	r7, #24
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800179e:	b480      	push	{r7}
 80017a0:	b085      	sub	sp, #20
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017a6:	2300      	movs	r3, #0
 80017a8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	2b02      	cmp	r3, #2
 80017b4:	d005      	beq.n	80017c2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2204      	movs	r2, #4
 80017ba:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	73fb      	strb	r3, [r7, #15]
 80017c0:	e037      	b.n	8001832 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f022 020e 	bic.w	r2, r2, #14
 80017d0:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017d6:	681a      	ldr	r2, [r3, #0]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017e0:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f022 0201 	bic.w	r2, r2, #1
 80017f0:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017f6:	f003 021f 	and.w	r2, r3, #31
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	2101      	movs	r1, #1
 8001800:	fa01 f202 	lsl.w	r2, r1, r2
 8001804:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800180e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001814:	2b00      	cmp	r3, #0
 8001816:	d00c      	beq.n	8001832 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001822:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001826:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182c:	687a      	ldr	r2, [r7, #4]
 800182e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001830:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2201      	movs	r2, #1
 8001836:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2200      	movs	r2, #0
 800183e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001842:	7bfb      	ldrb	r3, [r7, #15]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3714      	adds	r7, #20
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b084      	sub	sp, #16
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001858:	2300      	movs	r3, #0
 800185a:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001862:	b2db      	uxtb	r3, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d00d      	beq.n	8001884 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2204      	movs	r2, #4
 800186c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	2200      	movs	r2, #0
 800187a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	73fb      	strb	r3, [r7, #15]
 8001882:	e047      	b.n	8001914 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 020e 	bic.w	r2, r2, #14
 8001892:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 0201 	bic.w	r2, r2, #1
 80018a2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b8:	f003 021f 	and.w	r2, r3, #31
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c0:	2101      	movs	r1, #1
 80018c2:	fa01 f202 	lsl.w	r2, r1, r2
 80018c6:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80018d0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d00c      	beq.n	80018f4 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018de:	681a      	ldr	r2, [r3, #0]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018e8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80018f2:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2200      	movs	r2, #0
 8001900:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	4798      	blx	r3
    }
  }
  return status;
 8001914:	7bfb      	ldrb	r3, [r7, #15]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b084      	sub	sp, #16
 8001922:	af00      	add	r7, sp, #0
 8001924:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	f003 031f 	and.w	r3, r3, #31
 800193e:	2204      	movs	r2, #4
 8001940:	409a      	lsls	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	4013      	ands	r3, r2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d026      	beq.n	8001998 <HAL_DMA_IRQHandler+0x7a>
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d021      	beq.n	8001998 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0320 	and.w	r3, r3, #32
 800195e:	2b00      	cmp	r3, #0
 8001960:	d107      	bne.n	8001972 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 0204 	bic.w	r2, r2, #4
 8001970:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001976:	f003 021f 	and.w	r2, r3, #31
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	2104      	movs	r1, #4
 8001980:	fa01 f202 	lsl.w	r2, r1, r2
 8001984:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	2b00      	cmp	r3, #0
 800198c:	d071      	beq.n	8001a72 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001996:	e06c      	b.n	8001a72 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800199c:	f003 031f 	and.w	r3, r3, #31
 80019a0:	2202      	movs	r2, #2
 80019a2:	409a      	lsls	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4013      	ands	r3, r2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d02e      	beq.n	8001a0a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d029      	beq.n	8001a0a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0320 	and.w	r3, r3, #32
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10b      	bne.n	80019dc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	681a      	ldr	r2, [r3, #0]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 020a 	bic.w	r2, r2, #10
 80019d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e0:	f003 021f 	and.w	r2, r3, #31
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	2102      	movs	r1, #2
 80019ea:	fa01 f202 	lsl.w	r2, r1, r2
 80019ee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d038      	beq.n	8001a72 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a04:	6878      	ldr	r0, [r7, #4]
 8001a06:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001a08:	e033      	b.n	8001a72 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	f003 031f 	and.w	r3, r3, #31
 8001a12:	2208      	movs	r2, #8
 8001a14:	409a      	lsls	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d02a      	beq.n	8001a74 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	f003 0308 	and.w	r3, r3, #8
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d025      	beq.n	8001a74 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 020e 	bic.w	r2, r2, #14
 8001a36:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3c:	f003 021f 	and.w	r2, r3, #31
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a44:	2101      	movs	r1, #1
 8001a46:	fa01 f202 	lsl.w	r2, r1, r2
 8001a4a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2201      	movs	r2, #1
 8001a50:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d004      	beq.n	8001a74 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a6e:	6878      	ldr	r0, [r7, #4]
 8001a70:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001a72:	bf00      	nop
 8001a74:	bf00      	nop
}
 8001a76:	3710      	adds	r7, #16
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}

08001a7c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	370c      	adds	r7, #12
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr

08001a94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b085      	sub	sp, #20
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
 8001aa0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001aa6:	68fa      	ldr	r2, [r7, #12]
 8001aa8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001aaa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d004      	beq.n	8001abe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001abc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f003 021f 	and.w	r2, r3, #31
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	2101      	movs	r1, #1
 8001acc:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2b10      	cmp	r3, #16
 8001ae0:	d108      	bne.n	8001af4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	68ba      	ldr	r2, [r7, #8]
 8001af0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001af2:	e007      	b.n	8001b04 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	60da      	str	r2, [r3, #12]
}
 8001b04:	bf00      	nop
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b087      	sub	sp, #28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	4b16      	ldr	r3, [pc, #88]	; (8001b78 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d802      	bhi.n	8001b2a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001b24:	4b15      	ldr	r3, [pc, #84]	; (8001b7c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001b26:	617b      	str	r3, [r7, #20]
 8001b28:	e001      	b.n	8001b2e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001b2a:	4b15      	ldr	r3, [pc, #84]	; (8001b80 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001b2c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	3b08      	subs	r3, #8
 8001b3a:	4a12      	ldr	r2, [pc, #72]	; (8001b84 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b48:	089b      	lsrs	r3, r3, #2
 8001b4a:	009a      	lsls	r2, r3, #2
 8001b4c:	693b      	ldr	r3, [r7, #16]
 8001b4e:	4413      	add	r3, r2
 8001b50:	461a      	mov	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001b5a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 031f 	and.w	r3, r3, #31
 8001b62:	2201      	movs	r2, #1
 8001b64:	409a      	lsls	r2, r3
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001b6a:	bf00      	nop
 8001b6c:	371c      	adds	r7, #28
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40020407 	.word	0x40020407
 8001b7c:	40020800 	.word	0x40020800
 8001b80:	40020820 	.word	0x40020820
 8001b84:	cccccccd 	.word	0xcccccccd
 8001b88:	40020880 	.word	0x40020880

08001b8c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b085      	sub	sp, #20
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001b9c:	68fa      	ldr	r2, [r7, #12]
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001ba0:	4413      	add	r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4a08      	ldr	r2, [pc, #32]	; (8001bd0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001bae:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	f003 031f 	and.w	r3, r3, #31
 8001bb8:	2201      	movs	r2, #1
 8001bba:	409a      	lsls	r2, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001bc0:	bf00      	nop
 8001bc2:	3714      	adds	r7, #20
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	1000823f 	.word	0x1000823f
 8001bd0:	40020940 	.word	0x40020940

08001bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b087      	sub	sp, #28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001be2:	e15a      	b.n	8001e9a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	2101      	movs	r1, #1
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	fa01 f303 	lsl.w	r3, r1, r3
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	f000 814c 	beq.w	8001e94 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 0303 	and.w	r3, r3, #3
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d005      	beq.n	8001c14 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d130      	bne.n	8001c76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	2203      	movs	r2, #3
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	43db      	mvns	r3, r3
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	68da      	ldr	r2, [r3, #12]
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c52:	43db      	mvns	r3, r3
 8001c54:	693a      	ldr	r2, [r7, #16]
 8001c56:	4013      	ands	r3, r2
 8001c58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	091b      	lsrs	r3, r3, #4
 8001c60:	f003 0201 	and.w	r2, r3, #1
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	693a      	ldr	r2, [r7, #16]
 8001c74:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	2b03      	cmp	r3, #3
 8001c80:	d017      	beq.n	8001cb2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	005b      	lsls	r3, r3, #1
 8001c8c:	2203      	movs	r2, #3
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43db      	mvns	r3, r3
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	4013      	ands	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	689a      	ldr	r2, [r3, #8]
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	005b      	lsls	r3, r3, #1
 8001ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca6:	693a      	ldr	r2, [r7, #16]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	693a      	ldr	r2, [r7, #16]
 8001cb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f003 0303 	and.w	r3, r3, #3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d123      	bne.n	8001d06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	08da      	lsrs	r2, r3, #3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	3208      	adds	r2, #8
 8001cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	220f      	movs	r2, #15
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	691a      	ldr	r2, [r3, #16]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f003 0307 	and.w	r3, r3, #7
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	08da      	lsrs	r2, r3, #3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3208      	adds	r2, #8
 8001d00:	6939      	ldr	r1, [r7, #16]
 8001d02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	2203      	movs	r2, #3
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 0203 	and.w	r2, r3, #3
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	005b      	lsls	r3, r3, #1
 8001d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f000 80a6 	beq.w	8001e94 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d48:	4b5b      	ldr	r3, [pc, #364]	; (8001eb8 <HAL_GPIO_Init+0x2e4>)
 8001d4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d4c:	4a5a      	ldr	r2, [pc, #360]	; (8001eb8 <HAL_GPIO_Init+0x2e4>)
 8001d4e:	f043 0301 	orr.w	r3, r3, #1
 8001d52:	6613      	str	r3, [r2, #96]	; 0x60
 8001d54:	4b58      	ldr	r3, [pc, #352]	; (8001eb8 <HAL_GPIO_Init+0x2e4>)
 8001d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	60bb      	str	r3, [r7, #8]
 8001d5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d60:	4a56      	ldr	r2, [pc, #344]	; (8001ebc <HAL_GPIO_Init+0x2e8>)
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	089b      	lsrs	r3, r3, #2
 8001d66:	3302      	adds	r3, #2
 8001d68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	220f      	movs	r2, #15
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4013      	ands	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d8a:	d01f      	beq.n	8001dcc <HAL_GPIO_Init+0x1f8>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	4a4c      	ldr	r2, [pc, #304]	; (8001ec0 <HAL_GPIO_Init+0x2ec>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d019      	beq.n	8001dc8 <HAL_GPIO_Init+0x1f4>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	4a4b      	ldr	r2, [pc, #300]	; (8001ec4 <HAL_GPIO_Init+0x2f0>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d013      	beq.n	8001dc4 <HAL_GPIO_Init+0x1f0>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a4a      	ldr	r2, [pc, #296]	; (8001ec8 <HAL_GPIO_Init+0x2f4>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d00d      	beq.n	8001dc0 <HAL_GPIO_Init+0x1ec>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	4a49      	ldr	r2, [pc, #292]	; (8001ecc <HAL_GPIO_Init+0x2f8>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d007      	beq.n	8001dbc <HAL_GPIO_Init+0x1e8>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a48      	ldr	r2, [pc, #288]	; (8001ed0 <HAL_GPIO_Init+0x2fc>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d101      	bne.n	8001db8 <HAL_GPIO_Init+0x1e4>
 8001db4:	2305      	movs	r3, #5
 8001db6:	e00a      	b.n	8001dce <HAL_GPIO_Init+0x1fa>
 8001db8:	2306      	movs	r3, #6
 8001dba:	e008      	b.n	8001dce <HAL_GPIO_Init+0x1fa>
 8001dbc:	2304      	movs	r3, #4
 8001dbe:	e006      	b.n	8001dce <HAL_GPIO_Init+0x1fa>
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	e004      	b.n	8001dce <HAL_GPIO_Init+0x1fa>
 8001dc4:	2302      	movs	r3, #2
 8001dc6:	e002      	b.n	8001dce <HAL_GPIO_Init+0x1fa>
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <HAL_GPIO_Init+0x1fa>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	f002 0203 	and.w	r2, r2, #3
 8001dd4:	0092      	lsls	r2, r2, #2
 8001dd6:	4093      	lsls	r3, r2
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dde:	4937      	ldr	r1, [pc, #220]	; (8001ebc <HAL_GPIO_Init+0x2e8>)
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	089b      	lsrs	r3, r3, #2
 8001de4:	3302      	adds	r3, #2
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001dec:	4b39      	ldr	r3, [pc, #228]	; (8001ed4 <HAL_GPIO_Init+0x300>)
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	43db      	mvns	r3, r3
 8001df6:	693a      	ldr	r2, [r7, #16]
 8001df8:	4013      	ands	r3, r2
 8001dfa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e10:	4a30      	ldr	r2, [pc, #192]	; (8001ed4 <HAL_GPIO_Init+0x300>)
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e16:	4b2f      	ldr	r3, [pc, #188]	; (8001ed4 <HAL_GPIO_Init+0x300>)
 8001e18:	68db      	ldr	r3, [r3, #12]
 8001e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	693a      	ldr	r2, [r7, #16]
 8001e22:	4013      	ands	r3, r2
 8001e24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d003      	beq.n	8001e3a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001e32:	693a      	ldr	r2, [r7, #16]
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e3a:	4a26      	ldr	r2, [pc, #152]	; (8001ed4 <HAL_GPIO_Init+0x300>)
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001e40:	4b24      	ldr	r3, [pc, #144]	; (8001ed4 <HAL_GPIO_Init+0x300>)
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d003      	beq.n	8001e64 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e64:	4a1b      	ldr	r2, [pc, #108]	; (8001ed4 <HAL_GPIO_Init+0x300>)
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001e6a:	4b1a      	ldr	r3, [pc, #104]	; (8001ed4 <HAL_GPIO_Init+0x300>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	693a      	ldr	r2, [r7, #16]
 8001e76:	4013      	ands	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d003      	beq.n	8001e8e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001e86:	693a      	ldr	r2, [r7, #16]
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	4313      	orrs	r3, r2
 8001e8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001e8e:	4a11      	ldr	r2, [pc, #68]	; (8001ed4 <HAL_GPIO_Init+0x300>)
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	3301      	adds	r3, #1
 8001e98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	681a      	ldr	r2, [r3, #0]
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f47f ae9d 	bne.w	8001be4 <HAL_GPIO_Init+0x10>
  }
}
 8001eaa:	bf00      	nop
 8001eac:	bf00      	nop
 8001eae:	371c      	adds	r7, #28
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr
 8001eb8:	40021000 	.word	0x40021000
 8001ebc:	40010000 	.word	0x40010000
 8001ec0:	48000400 	.word	0x48000400
 8001ec4:	48000800 	.word	0x48000800
 8001ec8:	48000c00 	.word	0x48000c00
 8001ecc:	48001000 	.word	0x48001000
 8001ed0:	48001400 	.word	0x48001400
 8001ed4:	40010400 	.word	0x40010400

08001ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	807b      	strh	r3, [r7, #2]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ee8:	787b      	ldrb	r3, [r7, #1]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001eee:	887a      	ldrh	r2, [r7, #2]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ef4:	e002      	b.n	8001efc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ef6:	887a      	ldrh	r2, [r7, #2]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f12:	4b08      	ldr	r3, [pc, #32]	; (8001f34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f14:	695a      	ldr	r2, [r3, #20]
 8001f16:	88fb      	ldrh	r3, [r7, #6]
 8001f18:	4013      	ands	r3, r2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d006      	beq.n	8001f2c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f1e:	4a05      	ldr	r2, [pc, #20]	; (8001f34 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f20:	88fb      	ldrh	r3, [r7, #6]
 8001f22:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f24:	88fb      	ldrh	r3, [r7, #6]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 f806 	bl	8001f38 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f2c:	bf00      	nop
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	40010400 	.word	0x40010400

08001f38 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	4603      	mov	r3, r0
 8001f40:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
	...

08001f50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f50:	b480      	push	{r7}
 8001f52:	b085      	sub	sp, #20
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d141      	bne.n	8001fe2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f5e:	4b4b      	ldr	r3, [pc, #300]	; (800208c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f6a:	d131      	bne.n	8001fd0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f6c:	4b47      	ldr	r3, [pc, #284]	; (800208c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f72:	4a46      	ldr	r2, [pc, #280]	; (800208c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f7c:	4b43      	ldr	r3, [pc, #268]	; (800208c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f84:	4a41      	ldr	r2, [pc, #260]	; (800208c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f8a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f8c:	4b40      	ldr	r3, [pc, #256]	; (8002090 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2232      	movs	r2, #50	; 0x32
 8001f92:	fb02 f303 	mul.w	r3, r2, r3
 8001f96:	4a3f      	ldr	r2, [pc, #252]	; (8002094 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001f98:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9c:	0c9b      	lsrs	r3, r3, #18
 8001f9e:	3301      	adds	r3, #1
 8001fa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fa2:	e002      	b.n	8001faa <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001faa:	4b38      	ldr	r3, [pc, #224]	; (800208c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fb6:	d102      	bne.n	8001fbe <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f2      	bne.n	8001fa4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fbe:	4b33      	ldr	r3, [pc, #204]	; (800208c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fca:	d158      	bne.n	800207e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fcc:	2303      	movs	r3, #3
 8001fce:	e057      	b.n	8002080 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fd0:	4b2e      	ldr	r3, [pc, #184]	; (800208c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fd6:	4a2d      	ldr	r2, [pc, #180]	; (800208c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fdc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001fe0:	e04d      	b.n	800207e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fe8:	d141      	bne.n	800206e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fea:	4b28      	ldr	r3, [pc, #160]	; (800208c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ff2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ff6:	d131      	bne.n	800205c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ff8:	4b24      	ldr	r3, [pc, #144]	; (800208c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ffa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ffe:	4a23      	ldr	r2, [pc, #140]	; (800208c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002004:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002008:	4b20      	ldr	r3, [pc, #128]	; (800208c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002010:	4a1e      	ldr	r2, [pc, #120]	; (800208c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002012:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002016:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002018:	4b1d      	ldr	r3, [pc, #116]	; (8002090 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2232      	movs	r2, #50	; 0x32
 800201e:	fb02 f303 	mul.w	r3, r2, r3
 8002022:	4a1c      	ldr	r2, [pc, #112]	; (8002094 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002024:	fba2 2303 	umull	r2, r3, r2, r3
 8002028:	0c9b      	lsrs	r3, r3, #18
 800202a:	3301      	adds	r3, #1
 800202c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800202e:	e002      	b.n	8002036 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	3b01      	subs	r3, #1
 8002034:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002036:	4b15      	ldr	r3, [pc, #84]	; (800208c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002038:	695b      	ldr	r3, [r3, #20]
 800203a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800203e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002042:	d102      	bne.n	800204a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f2      	bne.n	8002030 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800204a:	4b10      	ldr	r3, [pc, #64]	; (800208c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800204c:	695b      	ldr	r3, [r3, #20]
 800204e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002056:	d112      	bne.n	800207e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002058:	2303      	movs	r3, #3
 800205a:	e011      	b.n	8002080 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800205e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002062:	4a0a      	ldr	r2, [pc, #40]	; (800208c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002068:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800206c:	e007      	b.n	800207e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800206e:	4b07      	ldr	r3, [pc, #28]	; (800208c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002076:	4a05      	ldr	r2, [pc, #20]	; (800208c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002078:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800207c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	3714      	adds	r7, #20
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	40007000 	.word	0x40007000
 8002090:	20000200 	.word	0x20000200
 8002094:	431bde83 	.word	0x431bde83

08002098 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002098:	b480      	push	{r7}
 800209a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800209c:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4a04      	ldr	r2, [pc, #16]	; (80020b4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80020a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80020a6:	6093      	str	r3, [r2, #8]
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40007000 	.word	0x40007000

080020b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b088      	sub	sp, #32
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e2fe      	b.n	80026c8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d075      	beq.n	80021c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020d6:	4b97      	ldr	r3, [pc, #604]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	f003 030c 	and.w	r3, r3, #12
 80020de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020e0:	4b94      	ldr	r3, [pc, #592]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	2b0c      	cmp	r3, #12
 80020ee:	d102      	bne.n	80020f6 <HAL_RCC_OscConfig+0x3e>
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	d002      	beq.n	80020fc <HAL_RCC_OscConfig+0x44>
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	2b08      	cmp	r3, #8
 80020fa:	d10b      	bne.n	8002114 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fc:	4b8d      	ldr	r3, [pc, #564]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d05b      	beq.n	80021c0 <HAL_RCC_OscConfig+0x108>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d157      	bne.n	80021c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e2d9      	b.n	80026c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211c:	d106      	bne.n	800212c <HAL_RCC_OscConfig+0x74>
 800211e:	4b85      	ldr	r3, [pc, #532]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a84      	ldr	r2, [pc, #528]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 8002124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	e01d      	b.n	8002168 <HAL_RCC_OscConfig+0xb0>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002134:	d10c      	bne.n	8002150 <HAL_RCC_OscConfig+0x98>
 8002136:	4b7f      	ldr	r3, [pc, #508]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a7e      	ldr	r2, [pc, #504]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 800213c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	4b7c      	ldr	r3, [pc, #496]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a7b      	ldr	r2, [pc, #492]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 8002148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e00b      	b.n	8002168 <HAL_RCC_OscConfig+0xb0>
 8002150:	4b78      	ldr	r3, [pc, #480]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a77      	ldr	r2, [pc, #476]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 8002156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	4b75      	ldr	r3, [pc, #468]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a74      	ldr	r2, [pc, #464]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 8002162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d013      	beq.n	8002198 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002170:	f7ff f8d6 	bl	8001320 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002178:	f7ff f8d2 	bl	8001320 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b64      	cmp	r3, #100	; 0x64
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e29e      	b.n	80026c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800218a:	4b6a      	ldr	r3, [pc, #424]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f0      	beq.n	8002178 <HAL_RCC_OscConfig+0xc0>
 8002196:	e014      	b.n	80021c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002198:	f7ff f8c2 	bl	8001320 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a0:	f7ff f8be 	bl	8001320 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b64      	cmp	r3, #100	; 0x64
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e28a      	b.n	80026c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021b2:	4b60      	ldr	r3, [pc, #384]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0xe8>
 80021be:	e000      	b.n	80021c2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d075      	beq.n	80022ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ce:	4b59      	ldr	r3, [pc, #356]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021d8:	4b56      	ldr	r3, [pc, #344]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	f003 0303 	and.w	r3, r3, #3
 80021e0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	2b0c      	cmp	r3, #12
 80021e6:	d102      	bne.n	80021ee <HAL_RCC_OscConfig+0x136>
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	2b02      	cmp	r3, #2
 80021ec:	d002      	beq.n	80021f4 <HAL_RCC_OscConfig+0x13c>
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	2b04      	cmp	r3, #4
 80021f2:	d11f      	bne.n	8002234 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021f4:	4b4f      	ldr	r3, [pc, #316]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d005      	beq.n	800220c <HAL_RCC_OscConfig+0x154>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d101      	bne.n	800220c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e25d      	b.n	80026c8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220c:	4b49      	ldr	r3, [pc, #292]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	691b      	ldr	r3, [r3, #16]
 8002218:	061b      	lsls	r3, r3, #24
 800221a:	4946      	ldr	r1, [pc, #280]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 800221c:	4313      	orrs	r3, r2
 800221e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002220:	4b45      	ldr	r3, [pc, #276]	; (8002338 <HAL_RCC_OscConfig+0x280>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff f82f 	bl	8001288 <HAL_InitTick>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d043      	beq.n	80022b8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e249      	b.n	80026c8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	68db      	ldr	r3, [r3, #12]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d023      	beq.n	8002284 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800223c:	4b3d      	ldr	r3, [pc, #244]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a3c      	ldr	r2, [pc, #240]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 8002242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002246:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002248:	f7ff f86a 	bl	8001320 <HAL_GetTick>
 800224c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800224e:	e008      	b.n	8002262 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002250:	f7ff f866 	bl	8001320 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d901      	bls.n	8002262 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e232      	b.n	80026c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002262:	4b34      	ldr	r3, [pc, #208]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800226a:	2b00      	cmp	r3, #0
 800226c:	d0f0      	beq.n	8002250 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226e:	4b31      	ldr	r3, [pc, #196]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	691b      	ldr	r3, [r3, #16]
 800227a:	061b      	lsls	r3, r3, #24
 800227c:	492d      	ldr	r1, [pc, #180]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 800227e:	4313      	orrs	r3, r2
 8002280:	604b      	str	r3, [r1, #4]
 8002282:	e01a      	b.n	80022ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002284:	4b2b      	ldr	r3, [pc, #172]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a2a      	ldr	r2, [pc, #168]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 800228a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800228e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002290:	f7ff f846 	bl	8001320 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002298:	f7ff f842 	bl	8001320 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e20e      	b.n	80026c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022aa:	4b22      	ldr	r3, [pc, #136]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d1f0      	bne.n	8002298 <HAL_RCC_OscConfig+0x1e0>
 80022b6:	e000      	b.n	80022ba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f003 0308 	and.w	r3, r3, #8
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d041      	beq.n	800234a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d01c      	beq.n	8002308 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ce:	4b19      	ldr	r3, [pc, #100]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 80022d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022d4:	4a17      	ldr	r2, [pc, #92]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022de:	f7ff f81f 	bl	8001320 <HAL_GetTick>
 80022e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022e4:	e008      	b.n	80022f8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022e6:	f7ff f81b 	bl	8001320 <HAL_GetTick>
 80022ea:	4602      	mov	r2, r0
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	2b02      	cmp	r3, #2
 80022f2:	d901      	bls.n	80022f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80022f4:	2303      	movs	r3, #3
 80022f6:	e1e7      	b.n	80026c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022f8:	4b0e      	ldr	r3, [pc, #56]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 80022fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d0ef      	beq.n	80022e6 <HAL_RCC_OscConfig+0x22e>
 8002306:	e020      	b.n	800234a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002308:	4b0a      	ldr	r3, [pc, #40]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 800230a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800230e:	4a09      	ldr	r2, [pc, #36]	; (8002334 <HAL_RCC_OscConfig+0x27c>)
 8002310:	f023 0301 	bic.w	r3, r3, #1
 8002314:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002318:	f7ff f802 	bl	8001320 <HAL_GetTick>
 800231c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800231e:	e00d      	b.n	800233c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002320:	f7fe fffe 	bl	8001320 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	693b      	ldr	r3, [r7, #16]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d906      	bls.n	800233c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e1ca      	b.n	80026c8 <HAL_RCC_OscConfig+0x610>
 8002332:	bf00      	nop
 8002334:	40021000 	.word	0x40021000
 8002338:	20000204 	.word	0x20000204
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800233c:	4b8c      	ldr	r3, [pc, #560]	; (8002570 <HAL_RCC_OscConfig+0x4b8>)
 800233e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1ea      	bne.n	8002320 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	2b00      	cmp	r3, #0
 8002354:	f000 80a6 	beq.w	80024a4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002358:	2300      	movs	r3, #0
 800235a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800235c:	4b84      	ldr	r3, [pc, #528]	; (8002570 <HAL_RCC_OscConfig+0x4b8>)
 800235e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002360:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d101      	bne.n	800236c <HAL_RCC_OscConfig+0x2b4>
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <HAL_RCC_OscConfig+0x2b6>
 800236c:	2300      	movs	r3, #0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00d      	beq.n	800238e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002372:	4b7f      	ldr	r3, [pc, #508]	; (8002570 <HAL_RCC_OscConfig+0x4b8>)
 8002374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002376:	4a7e      	ldr	r2, [pc, #504]	; (8002570 <HAL_RCC_OscConfig+0x4b8>)
 8002378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800237c:	6593      	str	r3, [r2, #88]	; 0x58
 800237e:	4b7c      	ldr	r3, [pc, #496]	; (8002570 <HAL_RCC_OscConfig+0x4b8>)
 8002380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800238a:	2301      	movs	r3, #1
 800238c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800238e:	4b79      	ldr	r3, [pc, #484]	; (8002574 <HAL_RCC_OscConfig+0x4bc>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002396:	2b00      	cmp	r3, #0
 8002398:	d118      	bne.n	80023cc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800239a:	4b76      	ldr	r3, [pc, #472]	; (8002574 <HAL_RCC_OscConfig+0x4bc>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a75      	ldr	r2, [pc, #468]	; (8002574 <HAL_RCC_OscConfig+0x4bc>)
 80023a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a6:	f7fe ffbb 	bl	8001320 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ae:	f7fe ffb7 	bl	8001320 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e183      	b.n	80026c8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023c0:	4b6c      	ldr	r3, [pc, #432]	; (8002574 <HAL_RCC_OscConfig+0x4bc>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0f0      	beq.n	80023ae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	689b      	ldr	r3, [r3, #8]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d108      	bne.n	80023e6 <HAL_RCC_OscConfig+0x32e>
 80023d4:	4b66      	ldr	r3, [pc, #408]	; (8002570 <HAL_RCC_OscConfig+0x4b8>)
 80023d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023da:	4a65      	ldr	r2, [pc, #404]	; (8002570 <HAL_RCC_OscConfig+0x4b8>)
 80023dc:	f043 0301 	orr.w	r3, r3, #1
 80023e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023e4:	e024      	b.n	8002430 <HAL_RCC_OscConfig+0x378>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	2b05      	cmp	r3, #5
 80023ec:	d110      	bne.n	8002410 <HAL_RCC_OscConfig+0x358>
 80023ee:	4b60      	ldr	r3, [pc, #384]	; (8002570 <HAL_RCC_OscConfig+0x4b8>)
 80023f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f4:	4a5e      	ldr	r2, [pc, #376]	; (8002570 <HAL_RCC_OscConfig+0x4b8>)
 80023f6:	f043 0304 	orr.w	r3, r3, #4
 80023fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023fe:	4b5c      	ldr	r3, [pc, #368]	; (8002570 <HAL_RCC_OscConfig+0x4b8>)
 8002400:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002404:	4a5a      	ldr	r2, [pc, #360]	; (8002570 <HAL_RCC_OscConfig+0x4b8>)
 8002406:	f043 0301 	orr.w	r3, r3, #1
 800240a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800240e:	e00f      	b.n	8002430 <HAL_RCC_OscConfig+0x378>
 8002410:	4b57      	ldr	r3, [pc, #348]	; (8002570 <HAL_RCC_OscConfig+0x4b8>)
 8002412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002416:	4a56      	ldr	r2, [pc, #344]	; (8002570 <HAL_RCC_OscConfig+0x4b8>)
 8002418:	f023 0301 	bic.w	r3, r3, #1
 800241c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002420:	4b53      	ldr	r3, [pc, #332]	; (8002570 <HAL_RCC_OscConfig+0x4b8>)
 8002422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002426:	4a52      	ldr	r2, [pc, #328]	; (8002570 <HAL_RCC_OscConfig+0x4b8>)
 8002428:	f023 0304 	bic.w	r3, r3, #4
 800242c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	689b      	ldr	r3, [r3, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d016      	beq.n	8002466 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002438:	f7fe ff72 	bl	8001320 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800243e:	e00a      	b.n	8002456 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002440:	f7fe ff6e 	bl	8001320 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	f241 3288 	movw	r2, #5000	; 0x1388
 800244e:	4293      	cmp	r3, r2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e138      	b.n	80026c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002456:	4b46      	ldr	r3, [pc, #280]	; (8002570 <HAL_RCC_OscConfig+0x4b8>)
 8002458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0ed      	beq.n	8002440 <HAL_RCC_OscConfig+0x388>
 8002464:	e015      	b.n	8002492 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002466:	f7fe ff5b 	bl	8001320 <HAL_GetTick>
 800246a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800246c:	e00a      	b.n	8002484 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246e:	f7fe ff57 	bl	8001320 <HAL_GetTick>
 8002472:	4602      	mov	r2, r0
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	f241 3288 	movw	r2, #5000	; 0x1388
 800247c:	4293      	cmp	r3, r2
 800247e:	d901      	bls.n	8002484 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002480:	2303      	movs	r3, #3
 8002482:	e121      	b.n	80026c8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002484:	4b3a      	ldr	r3, [pc, #232]	; (8002570 <HAL_RCC_OscConfig+0x4b8>)
 8002486:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d1ed      	bne.n	800246e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002492:	7ffb      	ldrb	r3, [r7, #31]
 8002494:	2b01      	cmp	r3, #1
 8002496:	d105      	bne.n	80024a4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002498:	4b35      	ldr	r3, [pc, #212]	; (8002570 <HAL_RCC_OscConfig+0x4b8>)
 800249a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249c:	4a34      	ldr	r2, [pc, #208]	; (8002570 <HAL_RCC_OscConfig+0x4b8>)
 800249e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0320 	and.w	r3, r3, #32
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d03c      	beq.n	800252a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d01c      	beq.n	80024f2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024b8:	4b2d      	ldr	r3, [pc, #180]	; (8002570 <HAL_RCC_OscConfig+0x4b8>)
 80024ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024be:	4a2c      	ldr	r2, [pc, #176]	; (8002570 <HAL_RCC_OscConfig+0x4b8>)
 80024c0:	f043 0301 	orr.w	r3, r3, #1
 80024c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024c8:	f7fe ff2a 	bl	8001320 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024d0:	f7fe ff26 	bl	8001320 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e0f2      	b.n	80026c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024e2:	4b23      	ldr	r3, [pc, #140]	; (8002570 <HAL_RCC_OscConfig+0x4b8>)
 80024e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0ef      	beq.n	80024d0 <HAL_RCC_OscConfig+0x418>
 80024f0:	e01b      	b.n	800252a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024f2:	4b1f      	ldr	r3, [pc, #124]	; (8002570 <HAL_RCC_OscConfig+0x4b8>)
 80024f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024f8:	4a1d      	ldr	r2, [pc, #116]	; (8002570 <HAL_RCC_OscConfig+0x4b8>)
 80024fa:	f023 0301 	bic.w	r3, r3, #1
 80024fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002502:	f7fe ff0d 	bl	8001320 <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800250a:	f7fe ff09 	bl	8001320 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e0d5      	b.n	80026c8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800251c:	4b14      	ldr	r3, [pc, #80]	; (8002570 <HAL_RCC_OscConfig+0x4b8>)
 800251e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d1ef      	bne.n	800250a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69db      	ldr	r3, [r3, #28]
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 80c9 	beq.w	80026c6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002534:	4b0e      	ldr	r3, [pc, #56]	; (8002570 <HAL_RCC_OscConfig+0x4b8>)
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f003 030c 	and.w	r3, r3, #12
 800253c:	2b0c      	cmp	r3, #12
 800253e:	f000 8083 	beq.w	8002648 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	2b02      	cmp	r3, #2
 8002548:	d15e      	bne.n	8002608 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800254a:	4b09      	ldr	r3, [pc, #36]	; (8002570 <HAL_RCC_OscConfig+0x4b8>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a08      	ldr	r2, [pc, #32]	; (8002570 <HAL_RCC_OscConfig+0x4b8>)
 8002550:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002554:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002556:	f7fe fee3 	bl	8001320 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800255c:	e00c      	b.n	8002578 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800255e:	f7fe fedf 	bl	8001320 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b02      	cmp	r3, #2
 800256a:	d905      	bls.n	8002578 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800256c:	2303      	movs	r3, #3
 800256e:	e0ab      	b.n	80026c8 <HAL_RCC_OscConfig+0x610>
 8002570:	40021000 	.word	0x40021000
 8002574:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002578:	4b55      	ldr	r3, [pc, #340]	; (80026d0 <HAL_RCC_OscConfig+0x618>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d1ec      	bne.n	800255e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002584:	4b52      	ldr	r3, [pc, #328]	; (80026d0 <HAL_RCC_OscConfig+0x618>)
 8002586:	68da      	ldr	r2, [r3, #12]
 8002588:	4b52      	ldr	r3, [pc, #328]	; (80026d4 <HAL_RCC_OscConfig+0x61c>)
 800258a:	4013      	ands	r3, r2
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6a11      	ldr	r1, [r2, #32]
 8002590:	687a      	ldr	r2, [r7, #4]
 8002592:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002594:	3a01      	subs	r2, #1
 8002596:	0112      	lsls	r2, r2, #4
 8002598:	4311      	orrs	r1, r2
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800259e:	0212      	lsls	r2, r2, #8
 80025a0:	4311      	orrs	r1, r2
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80025a6:	0852      	lsrs	r2, r2, #1
 80025a8:	3a01      	subs	r2, #1
 80025aa:	0552      	lsls	r2, r2, #21
 80025ac:	4311      	orrs	r1, r2
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80025b2:	0852      	lsrs	r2, r2, #1
 80025b4:	3a01      	subs	r2, #1
 80025b6:	0652      	lsls	r2, r2, #25
 80025b8:	4311      	orrs	r1, r2
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80025be:	06d2      	lsls	r2, r2, #27
 80025c0:	430a      	orrs	r2, r1
 80025c2:	4943      	ldr	r1, [pc, #268]	; (80026d0 <HAL_RCC_OscConfig+0x618>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025c8:	4b41      	ldr	r3, [pc, #260]	; (80026d0 <HAL_RCC_OscConfig+0x618>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a40      	ldr	r2, [pc, #256]	; (80026d0 <HAL_RCC_OscConfig+0x618>)
 80025ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025d2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025d4:	4b3e      	ldr	r3, [pc, #248]	; (80026d0 <HAL_RCC_OscConfig+0x618>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	4a3d      	ldr	r2, [pc, #244]	; (80026d0 <HAL_RCC_OscConfig+0x618>)
 80025da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025de:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e0:	f7fe fe9e 	bl	8001320 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e8:	f7fe fe9a 	bl	8001320 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e066      	b.n	80026c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025fa:	4b35      	ldr	r3, [pc, #212]	; (80026d0 <HAL_RCC_OscConfig+0x618>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0f0      	beq.n	80025e8 <HAL_RCC_OscConfig+0x530>
 8002606:	e05e      	b.n	80026c6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002608:	4b31      	ldr	r3, [pc, #196]	; (80026d0 <HAL_RCC_OscConfig+0x618>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a30      	ldr	r2, [pc, #192]	; (80026d0 <HAL_RCC_OscConfig+0x618>)
 800260e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002614:	f7fe fe84 	bl	8001320 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261c:	f7fe fe80 	bl	8001320 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e04c      	b.n	80026c8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800262e:	4b28      	ldr	r3, [pc, #160]	; (80026d0 <HAL_RCC_OscConfig+0x618>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f0      	bne.n	800261c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800263a:	4b25      	ldr	r3, [pc, #148]	; (80026d0 <HAL_RCC_OscConfig+0x618>)
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	4924      	ldr	r1, [pc, #144]	; (80026d0 <HAL_RCC_OscConfig+0x618>)
 8002640:	4b25      	ldr	r3, [pc, #148]	; (80026d8 <HAL_RCC_OscConfig+0x620>)
 8002642:	4013      	ands	r3, r2
 8002644:	60cb      	str	r3, [r1, #12]
 8002646:	e03e      	b.n	80026c6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69db      	ldr	r3, [r3, #28]
 800264c:	2b01      	cmp	r3, #1
 800264e:	d101      	bne.n	8002654 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e039      	b.n	80026c8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002654:	4b1e      	ldr	r3, [pc, #120]	; (80026d0 <HAL_RCC_OscConfig+0x618>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f003 0203 	and.w	r2, r3, #3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6a1b      	ldr	r3, [r3, #32]
 8002664:	429a      	cmp	r2, r3
 8002666:	d12c      	bne.n	80026c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	3b01      	subs	r3, #1
 8002674:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002676:	429a      	cmp	r2, r3
 8002678:	d123      	bne.n	80026c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002684:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002686:	429a      	cmp	r2, r3
 8002688:	d11b      	bne.n	80026c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002694:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002696:	429a      	cmp	r2, r3
 8002698:	d113      	bne.n	80026c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800269a:	697b      	ldr	r3, [r7, #20]
 800269c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026a4:	085b      	lsrs	r3, r3, #1
 80026a6:	3b01      	subs	r3, #1
 80026a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d109      	bne.n	80026c2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026b8:	085b      	lsrs	r3, r3, #1
 80026ba:	3b01      	subs	r3, #1
 80026bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026be:	429a      	cmp	r2, r3
 80026c0:	d001      	beq.n	80026c6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e000      	b.n	80026c8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3720      	adds	r7, #32
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40021000 	.word	0x40021000
 80026d4:	019f800c 	.word	0x019f800c
 80026d8:	feeefffc 	.word	0xfeeefffc

080026dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b086      	sub	sp, #24
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
 80026e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80026e6:	2300      	movs	r3, #0
 80026e8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e11e      	b.n	8002932 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026f4:	4b91      	ldr	r3, [pc, #580]	; (800293c <HAL_RCC_ClockConfig+0x260>)
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 030f 	and.w	r3, r3, #15
 80026fc:	683a      	ldr	r2, [r7, #0]
 80026fe:	429a      	cmp	r2, r3
 8002700:	d910      	bls.n	8002724 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002702:	4b8e      	ldr	r3, [pc, #568]	; (800293c <HAL_RCC_ClockConfig+0x260>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 020f 	bic.w	r2, r3, #15
 800270a:	498c      	ldr	r1, [pc, #560]	; (800293c <HAL_RCC_ClockConfig+0x260>)
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	4313      	orrs	r3, r2
 8002710:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002712:	4b8a      	ldr	r3, [pc, #552]	; (800293c <HAL_RCC_ClockConfig+0x260>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	429a      	cmp	r2, r3
 800271e:	d001      	beq.n	8002724 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002720:	2301      	movs	r3, #1
 8002722:	e106      	b.n	8002932 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b00      	cmp	r3, #0
 800272e:	d073      	beq.n	8002818 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b03      	cmp	r3, #3
 8002736:	d129      	bne.n	800278c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002738:	4b81      	ldr	r3, [pc, #516]	; (8002940 <HAL_RCC_ClockConfig+0x264>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002740:	2b00      	cmp	r3, #0
 8002742:	d101      	bne.n	8002748 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e0f4      	b.n	8002932 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002748:	f000 f99e 	bl	8002a88 <RCC_GetSysClockFreqFromPLLSource>
 800274c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4a7c      	ldr	r2, [pc, #496]	; (8002944 <HAL_RCC_ClockConfig+0x268>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d93f      	bls.n	80027d6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002756:	4b7a      	ldr	r3, [pc, #488]	; (8002940 <HAL_RCC_ClockConfig+0x264>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d009      	beq.n	8002776 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800276a:	2b00      	cmp	r3, #0
 800276c:	d033      	beq.n	80027d6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002772:	2b00      	cmp	r3, #0
 8002774:	d12f      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002776:	4b72      	ldr	r3, [pc, #456]	; (8002940 <HAL_RCC_ClockConfig+0x264>)
 8002778:	689b      	ldr	r3, [r3, #8]
 800277a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800277e:	4a70      	ldr	r2, [pc, #448]	; (8002940 <HAL_RCC_ClockConfig+0x264>)
 8002780:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002784:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002786:	2380      	movs	r3, #128	; 0x80
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	e024      	b.n	80027d6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b02      	cmp	r3, #2
 8002792:	d107      	bne.n	80027a4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002794:	4b6a      	ldr	r3, [pc, #424]	; (8002940 <HAL_RCC_ClockConfig+0x264>)
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d109      	bne.n	80027b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e0c6      	b.n	8002932 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027a4:	4b66      	ldr	r3, [pc, #408]	; (8002940 <HAL_RCC_ClockConfig+0x264>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d101      	bne.n	80027b4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e0be      	b.n	8002932 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80027b4:	f000 f8ce 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 80027b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4a61      	ldr	r2, [pc, #388]	; (8002944 <HAL_RCC_ClockConfig+0x268>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d909      	bls.n	80027d6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027c2:	4b5f      	ldr	r3, [pc, #380]	; (8002940 <HAL_RCC_ClockConfig+0x264>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80027ca:	4a5d      	ldr	r2, [pc, #372]	; (8002940 <HAL_RCC_ClockConfig+0x264>)
 80027cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027d0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80027d2:	2380      	movs	r3, #128	; 0x80
 80027d4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027d6:	4b5a      	ldr	r3, [pc, #360]	; (8002940 <HAL_RCC_ClockConfig+0x264>)
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f023 0203 	bic.w	r2, r3, #3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	4957      	ldr	r1, [pc, #348]	; (8002940 <HAL_RCC_ClockConfig+0x264>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027e8:	f7fe fd9a 	bl	8001320 <HAL_GetTick>
 80027ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027ee:	e00a      	b.n	8002806 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027f0:	f7fe fd96 	bl	8001320 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80027fe:	4293      	cmp	r3, r2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e095      	b.n	8002932 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002806:	4b4e      	ldr	r3, [pc, #312]	; (8002940 <HAL_RCC_ClockConfig+0x264>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f003 020c 	and.w	r2, r3, #12
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	429a      	cmp	r2, r3
 8002816:	d1eb      	bne.n	80027f0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d023      	beq.n	800286c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002830:	4b43      	ldr	r3, [pc, #268]	; (8002940 <HAL_RCC_ClockConfig+0x264>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	4a42      	ldr	r2, [pc, #264]	; (8002940 <HAL_RCC_ClockConfig+0x264>)
 8002836:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800283a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b00      	cmp	r3, #0
 8002846:	d007      	beq.n	8002858 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002848:	4b3d      	ldr	r3, [pc, #244]	; (8002940 <HAL_RCC_ClockConfig+0x264>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002850:	4a3b      	ldr	r2, [pc, #236]	; (8002940 <HAL_RCC_ClockConfig+0x264>)
 8002852:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002856:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002858:	4b39      	ldr	r3, [pc, #228]	; (8002940 <HAL_RCC_ClockConfig+0x264>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	4936      	ldr	r1, [pc, #216]	; (8002940 <HAL_RCC_ClockConfig+0x264>)
 8002866:	4313      	orrs	r3, r2
 8002868:	608b      	str	r3, [r1, #8]
 800286a:	e008      	b.n	800287e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800286c:	697b      	ldr	r3, [r7, #20]
 800286e:	2b80      	cmp	r3, #128	; 0x80
 8002870:	d105      	bne.n	800287e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002872:	4b33      	ldr	r3, [pc, #204]	; (8002940 <HAL_RCC_ClockConfig+0x264>)
 8002874:	689b      	ldr	r3, [r3, #8]
 8002876:	4a32      	ldr	r2, [pc, #200]	; (8002940 <HAL_RCC_ClockConfig+0x264>)
 8002878:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800287c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800287e:	4b2f      	ldr	r3, [pc, #188]	; (800293c <HAL_RCC_ClockConfig+0x260>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f003 030f 	and.w	r3, r3, #15
 8002886:	683a      	ldr	r2, [r7, #0]
 8002888:	429a      	cmp	r2, r3
 800288a:	d21d      	bcs.n	80028c8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800288c:	4b2b      	ldr	r3, [pc, #172]	; (800293c <HAL_RCC_ClockConfig+0x260>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f023 020f 	bic.w	r2, r3, #15
 8002894:	4929      	ldr	r1, [pc, #164]	; (800293c <HAL_RCC_ClockConfig+0x260>)
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	4313      	orrs	r3, r2
 800289a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800289c:	f7fe fd40 	bl	8001320 <HAL_GetTick>
 80028a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028a2:	e00a      	b.n	80028ba <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a4:	f7fe fd3c 	bl	8001320 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e03b      	b.n	8002932 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ba:	4b20      	ldr	r3, [pc, #128]	; (800293c <HAL_RCC_ClockConfig+0x260>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d1ed      	bne.n	80028a4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0304 	and.w	r3, r3, #4
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d008      	beq.n	80028e6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028d4:	4b1a      	ldr	r3, [pc, #104]	; (8002940 <HAL_RCC_ClockConfig+0x264>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	68db      	ldr	r3, [r3, #12]
 80028e0:	4917      	ldr	r1, [pc, #92]	; (8002940 <HAL_RCC_ClockConfig+0x264>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0308 	and.w	r3, r3, #8
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d009      	beq.n	8002906 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028f2:	4b13      	ldr	r3, [pc, #76]	; (8002940 <HAL_RCC_ClockConfig+0x264>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	490f      	ldr	r1, [pc, #60]	; (8002940 <HAL_RCC_ClockConfig+0x264>)
 8002902:	4313      	orrs	r3, r2
 8002904:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002906:	f000 f825 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 800290a:	4602      	mov	r2, r0
 800290c:	4b0c      	ldr	r3, [pc, #48]	; (8002940 <HAL_RCC_ClockConfig+0x264>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	091b      	lsrs	r3, r3, #4
 8002912:	f003 030f 	and.w	r3, r3, #15
 8002916:	490c      	ldr	r1, [pc, #48]	; (8002948 <HAL_RCC_ClockConfig+0x26c>)
 8002918:	5ccb      	ldrb	r3, [r1, r3]
 800291a:	f003 031f 	and.w	r3, r3, #31
 800291e:	fa22 f303 	lsr.w	r3, r2, r3
 8002922:	4a0a      	ldr	r2, [pc, #40]	; (800294c <HAL_RCC_ClockConfig+0x270>)
 8002924:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002926:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <HAL_RCC_ClockConfig+0x274>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f7fe fcac 	bl	8001288 <HAL_InitTick>
 8002930:	4603      	mov	r3, r0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	40022000 	.word	0x40022000
 8002940:	40021000 	.word	0x40021000
 8002944:	04c4b400 	.word	0x04c4b400
 8002948:	08007000 	.word	0x08007000
 800294c:	20000200 	.word	0x20000200
 8002950:	20000204 	.word	0x20000204

08002954 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002954:	b480      	push	{r7}
 8002956:	b087      	sub	sp, #28
 8002958:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800295a:	4b2c      	ldr	r3, [pc, #176]	; (8002a0c <HAL_RCC_GetSysClockFreq+0xb8>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 030c 	and.w	r3, r3, #12
 8002962:	2b04      	cmp	r3, #4
 8002964:	d102      	bne.n	800296c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002966:	4b2a      	ldr	r3, [pc, #168]	; (8002a10 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	e047      	b.n	80029fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800296c:	4b27      	ldr	r3, [pc, #156]	; (8002a0c <HAL_RCC_GetSysClockFreq+0xb8>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 030c 	and.w	r3, r3, #12
 8002974:	2b08      	cmp	r3, #8
 8002976:	d102      	bne.n	800297e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002978:	4b26      	ldr	r3, [pc, #152]	; (8002a14 <HAL_RCC_GetSysClockFreq+0xc0>)
 800297a:	613b      	str	r3, [r7, #16]
 800297c:	e03e      	b.n	80029fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800297e:	4b23      	ldr	r3, [pc, #140]	; (8002a0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b0c      	cmp	r3, #12
 8002988:	d136      	bne.n	80029f8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800298a:	4b20      	ldr	r3, [pc, #128]	; (8002a0c <HAL_RCC_GetSysClockFreq+0xb8>)
 800298c:	68db      	ldr	r3, [r3, #12]
 800298e:	f003 0303 	and.w	r3, r3, #3
 8002992:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002994:	4b1d      	ldr	r3, [pc, #116]	; (8002a0c <HAL_RCC_GetSysClockFreq+0xb8>)
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	f003 030f 	and.w	r3, r3, #15
 800299e:	3301      	adds	r3, #1
 80029a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2b03      	cmp	r3, #3
 80029a6:	d10c      	bne.n	80029c2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029a8:	4a1a      	ldr	r2, [pc, #104]	; (8002a14 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b0:	4a16      	ldr	r2, [pc, #88]	; (8002a0c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029b2:	68d2      	ldr	r2, [r2, #12]
 80029b4:	0a12      	lsrs	r2, r2, #8
 80029b6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029ba:	fb02 f303 	mul.w	r3, r2, r3
 80029be:	617b      	str	r3, [r7, #20]
      break;
 80029c0:	e00c      	b.n	80029dc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029c2:	4a13      	ldr	r2, [pc, #76]	; (8002a10 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ca:	4a10      	ldr	r2, [pc, #64]	; (8002a0c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029cc:	68d2      	ldr	r2, [r2, #12]
 80029ce:	0a12      	lsrs	r2, r2, #8
 80029d0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80029d4:	fb02 f303 	mul.w	r3, r2, r3
 80029d8:	617b      	str	r3, [r7, #20]
      break;
 80029da:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029dc:	4b0b      	ldr	r3, [pc, #44]	; (8002a0c <HAL_RCC_GetSysClockFreq+0xb8>)
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	0e5b      	lsrs	r3, r3, #25
 80029e2:	f003 0303 	and.w	r3, r3, #3
 80029e6:	3301      	adds	r3, #1
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80029ec:	697a      	ldr	r2, [r7, #20]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80029f4:	613b      	str	r3, [r7, #16]
 80029f6:	e001      	b.n	80029fc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80029f8:	2300      	movs	r3, #0
 80029fa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80029fc:	693b      	ldr	r3, [r7, #16]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	371c      	adds	r7, #28
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	40021000 	.word	0x40021000
 8002a10:	00f42400 	.word	0x00f42400
 8002a14:	016e3600 	.word	0x016e3600

08002a18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a1c:	4b03      	ldr	r3, [pc, #12]	; (8002a2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	20000200 	.word	0x20000200

08002a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a34:	f7ff fff0 	bl	8002a18 <HAL_RCC_GetHCLKFreq>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	4b06      	ldr	r3, [pc, #24]	; (8002a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	0a1b      	lsrs	r3, r3, #8
 8002a40:	f003 0307 	and.w	r3, r3, #7
 8002a44:	4904      	ldr	r1, [pc, #16]	; (8002a58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a46:	5ccb      	ldrb	r3, [r1, r3]
 8002a48:	f003 031f 	and.w	r3, r3, #31
 8002a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	bd80      	pop	{r7, pc}
 8002a54:	40021000 	.word	0x40021000
 8002a58:	08007010 	.word	0x08007010

08002a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a60:	f7ff ffda 	bl	8002a18 <HAL_RCC_GetHCLKFreq>
 8002a64:	4602      	mov	r2, r0
 8002a66:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	0adb      	lsrs	r3, r3, #11
 8002a6c:	f003 0307 	and.w	r3, r3, #7
 8002a70:	4904      	ldr	r1, [pc, #16]	; (8002a84 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a72:	5ccb      	ldrb	r3, [r1, r3]
 8002a74:	f003 031f 	and.w	r3, r3, #31
 8002a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40021000 	.word	0x40021000
 8002a84:	08007010 	.word	0x08007010

08002a88 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a8e:	4b1e      	ldr	r3, [pc, #120]	; (8002b08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a90:	68db      	ldr	r3, [r3, #12]
 8002a92:	f003 0303 	and.w	r3, r3, #3
 8002a96:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a98:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	091b      	lsrs	r3, r3, #4
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	3301      	adds	r3, #1
 8002aa4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	2b03      	cmp	r3, #3
 8002aaa:	d10c      	bne.n	8002ac6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002aac:	4a17      	ldr	r2, [pc, #92]	; (8002b0c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ab4:	4a14      	ldr	r2, [pc, #80]	; (8002b08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ab6:	68d2      	ldr	r2, [r2, #12]
 8002ab8:	0a12      	lsrs	r2, r2, #8
 8002aba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002abe:	fb02 f303 	mul.w	r3, r2, r3
 8002ac2:	617b      	str	r3, [r7, #20]
    break;
 8002ac4:	e00c      	b.n	8002ae0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ac6:	4a12      	ldr	r2, [pc, #72]	; (8002b10 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ace:	4a0e      	ldr	r2, [pc, #56]	; (8002b08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ad0:	68d2      	ldr	r2, [r2, #12]
 8002ad2:	0a12      	lsrs	r2, r2, #8
 8002ad4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ad8:	fb02 f303 	mul.w	r3, r2, r3
 8002adc:	617b      	str	r3, [r7, #20]
    break;
 8002ade:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ae0:	4b09      	ldr	r3, [pc, #36]	; (8002b08 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	0e5b      	lsrs	r3, r3, #25
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	3301      	adds	r3, #1
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002af0:	697a      	ldr	r2, [r7, #20]
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002afa:	687b      	ldr	r3, [r7, #4]
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	371c      	adds	r7, #28
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	016e3600 	.word	0x016e3600
 8002b10:	00f42400 	.word	0x00f42400

08002b14 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b086      	sub	sp, #24
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b20:	2300      	movs	r3, #0
 8002b22:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f000 8098 	beq.w	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b32:	2300      	movs	r3, #0
 8002b34:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b36:	4b43      	ldr	r3, [pc, #268]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d10d      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b42:	4b40      	ldr	r3, [pc, #256]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b46:	4a3f      	ldr	r2, [pc, #252]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b4c:	6593      	str	r3, [r2, #88]	; 0x58
 8002b4e:	4b3d      	ldr	r3, [pc, #244]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b56:	60bb      	str	r3, [r7, #8]
 8002b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b5e:	4b3a      	ldr	r3, [pc, #232]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a39      	ldr	r2, [pc, #228]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b68:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b6a:	f7fe fbd9 	bl	8001320 <HAL_GetTick>
 8002b6e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b70:	e009      	b.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b72:	f7fe fbd5 	bl	8001320 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d902      	bls.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	74fb      	strb	r3, [r7, #19]
        break;
 8002b84:	e005      	b.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b86:	4b30      	ldr	r3, [pc, #192]	; (8002c48 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d0ef      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002b92:	7cfb      	ldrb	r3, [r7, #19]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d159      	bne.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b98:	4b2a      	ldr	r3, [pc, #168]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ba2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d01e      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bae:	697a      	ldr	r2, [r7, #20]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d019      	beq.n	8002be8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bb4:	4b23      	ldr	r3, [pc, #140]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bbe:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bc0:	4b20      	ldr	r3, [pc, #128]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bc6:	4a1f      	ldr	r2, [pc, #124]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bd0:	4b1c      	ldr	r3, [pc, #112]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bd6:	4a1b      	ldr	r2, [pc, #108]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bdc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002be0:	4a18      	ldr	r2, [pc, #96]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	f003 0301 	and.w	r3, r3, #1
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d016      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf2:	f7fe fb95 	bl	8001320 <HAL_GetTick>
 8002bf6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bf8:	e00b      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bfa:	f7fe fb91 	bl	8001320 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d902      	bls.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	74fb      	strb	r3, [r7, #19]
            break;
 8002c10:	e006      	b.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c12:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c18:	f003 0302 	and.w	r3, r3, #2
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d0ec      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002c20:	7cfb      	ldrb	r3, [r7, #19]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d10b      	bne.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c26:	4b07      	ldr	r3, [pc, #28]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c34:	4903      	ldr	r1, [pc, #12]	; (8002c44 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002c3c:	e008      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c3e:	7cfb      	ldrb	r3, [r7, #19]
 8002c40:	74bb      	strb	r3, [r7, #18]
 8002c42:	e005      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002c44:	40021000 	.word	0x40021000
 8002c48:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c4c:	7cfb      	ldrb	r3, [r7, #19]
 8002c4e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c50:	7c7b      	ldrb	r3, [r7, #17]
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d105      	bne.n	8002c62 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c56:	4ba7      	ldr	r3, [pc, #668]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5a:	4aa6      	ldr	r2, [pc, #664]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c60:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00a      	beq.n	8002c84 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c6e:	4ba1      	ldr	r3, [pc, #644]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c74:	f023 0203 	bic.w	r2, r3, #3
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	499d      	ldr	r1, [pc, #628]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f003 0302 	and.w	r3, r3, #2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00a      	beq.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c90:	4b98      	ldr	r3, [pc, #608]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c96:	f023 020c 	bic.w	r2, r3, #12
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	4995      	ldr	r1, [pc, #596]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0304 	and.w	r3, r3, #4
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00a      	beq.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cb2:	4b90      	ldr	r3, [pc, #576]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	498c      	ldr	r1, [pc, #560]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0308 	and.w	r3, r3, #8
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00a      	beq.n	8002cea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cd4:	4b87      	ldr	r3, [pc, #540]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cda:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	4984      	ldr	r1, [pc, #528]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0310 	and.w	r3, r3, #16
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d00a      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cf6:	4b7f      	ldr	r3, [pc, #508]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cfc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	497b      	ldr	r1, [pc, #492]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d06:	4313      	orrs	r3, r2
 8002d08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d00a      	beq.n	8002d2e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d18:	4b76      	ldr	r3, [pc, #472]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	4973      	ldr	r1, [pc, #460]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00a      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d3a:	4b6e      	ldr	r3, [pc, #440]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d40:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	496a      	ldr	r1, [pc, #424]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00a      	beq.n	8002d72 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d5c:	4b65      	ldr	r3, [pc, #404]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d62:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	4962      	ldr	r1, [pc, #392]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00a      	beq.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d7e:	4b5d      	ldr	r3, [pc, #372]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d84:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8c:	4959      	ldr	r1, [pc, #356]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00a      	beq.n	8002db6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002da0:	4b54      	ldr	r3, [pc, #336]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002da2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002da6:	f023 0203 	bic.w	r2, r3, #3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dae:	4951      	ldr	r1, [pc, #324]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00a      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dc2:	4b4c      	ldr	r3, [pc, #304]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd0:	4948      	ldr	r1, [pc, #288]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d015      	beq.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002de4:	4b43      	ldr	r3, [pc, #268]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	4940      	ldr	r1, [pc, #256]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e02:	d105      	bne.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e04:	4b3b      	ldr	r3, [pc, #236]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	4a3a      	ldr	r2, [pc, #232]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e0e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d015      	beq.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e1c:	4b35      	ldr	r3, [pc, #212]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e22:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e2a:	4932      	ldr	r1, [pc, #200]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e3a:	d105      	bne.n	8002e48 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e3c:	4b2d      	ldr	r3, [pc, #180]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4a2c      	ldr	r2, [pc, #176]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e46:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d015      	beq.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e54:	4b27      	ldr	r3, [pc, #156]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e5a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e62:	4924      	ldr	r1, [pc, #144]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e6e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e72:	d105      	bne.n	8002e80 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e74:	4b1f      	ldr	r3, [pc, #124]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	4a1e      	ldr	r2, [pc, #120]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e7e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d015      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e8c:	4b19      	ldr	r3, [pc, #100]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e9a:	4916      	ldr	r1, [pc, #88]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eaa:	d105      	bne.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002eac:	4b11      	ldr	r3, [pc, #68]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	4a10      	ldr	r2, [pc, #64]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eb6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d019      	beq.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	4908      	ldr	r1, [pc, #32]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ee2:	d109      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ee4:	4b03      	ldr	r3, [pc, #12]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4a02      	ldr	r2, [pc, #8]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eee:	60d3      	str	r3, [r2, #12]
 8002ef0:	e002      	b.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002ef2:	bf00      	nop
 8002ef4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d015      	beq.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f04:	4b29      	ldr	r3, [pc, #164]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f0a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	4926      	ldr	r1, [pc, #152]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f14:	4313      	orrs	r3, r2
 8002f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f1e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f22:	d105      	bne.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f24:	4b21      	ldr	r3, [pc, #132]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	4a20      	ldr	r2, [pc, #128]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f2e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d015      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002f3c:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f42:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f4a:	4918      	ldr	r1, [pc, #96]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f5a:	d105      	bne.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f5c:	4b13      	ldr	r3, [pc, #76]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	4a12      	ldr	r2, [pc, #72]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f66:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d015      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002f74:	4b0d      	ldr	r3, [pc, #52]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f82:	490a      	ldr	r1, [pc, #40]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f84:	4313      	orrs	r3, r2
 8002f86:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f8e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002f92:	d105      	bne.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f94:	4b05      	ldr	r3, [pc, #20]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	4a04      	ldr	r2, [pc, #16]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f9e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002fa0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	40021000 	.word	0x40021000

08002fb0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e054      	b.n	800306c <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d111      	bne.n	8002ff2 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f001 f9e6 	bl	80043a8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d102      	bne.n	8002fea <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	4a23      	ldr	r2, [pc, #140]	; (8003074 <HAL_TIM_Base_Init+0xc4>)
 8002fe8:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2202      	movs	r2, #2
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3304      	adds	r3, #4
 8003002:	4619      	mov	r1, r3
 8003004:	4610      	mov	r0, r2
 8003006:	f000 fdcb 	bl	8003ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	2201      	movs	r2, #1
 800300e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2201      	movs	r2, #1
 8003016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2201      	movs	r2, #1
 8003036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2201      	movs	r2, #1
 800303e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	08000fdd 	.word	0x08000fdd

08003078 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b01      	cmp	r3, #1
 800308a:	d001      	beq.n	8003090 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e054      	b.n	800313a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f042 0201 	orr.w	r2, r2, #1
 80030a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a26      	ldr	r2, [pc, #152]	; (8003148 <HAL_TIM_Base_Start_IT+0xd0>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d022      	beq.n	80030f8 <HAL_TIM_Base_Start_IT+0x80>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ba:	d01d      	beq.n	80030f8 <HAL_TIM_Base_Start_IT+0x80>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a22      	ldr	r2, [pc, #136]	; (800314c <HAL_TIM_Base_Start_IT+0xd4>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d018      	beq.n	80030f8 <HAL_TIM_Base_Start_IT+0x80>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a21      	ldr	r2, [pc, #132]	; (8003150 <HAL_TIM_Base_Start_IT+0xd8>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d013      	beq.n	80030f8 <HAL_TIM_Base_Start_IT+0x80>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a1f      	ldr	r2, [pc, #124]	; (8003154 <HAL_TIM_Base_Start_IT+0xdc>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d00e      	beq.n	80030f8 <HAL_TIM_Base_Start_IT+0x80>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a1e      	ldr	r2, [pc, #120]	; (8003158 <HAL_TIM_Base_Start_IT+0xe0>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d009      	beq.n	80030f8 <HAL_TIM_Base_Start_IT+0x80>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a1c      	ldr	r2, [pc, #112]	; (800315c <HAL_TIM_Base_Start_IT+0xe4>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d004      	beq.n	80030f8 <HAL_TIM_Base_Start_IT+0x80>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a1b      	ldr	r2, [pc, #108]	; (8003160 <HAL_TIM_Base_Start_IT+0xe8>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d115      	bne.n	8003124 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	4b19      	ldr	r3, [pc, #100]	; (8003164 <HAL_TIM_Base_Start_IT+0xec>)
 8003100:	4013      	ands	r3, r2
 8003102:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2b06      	cmp	r3, #6
 8003108:	d015      	beq.n	8003136 <HAL_TIM_Base_Start_IT+0xbe>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003110:	d011      	beq.n	8003136 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f042 0201 	orr.w	r2, r2, #1
 8003120:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003122:	e008      	b.n	8003136 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	681a      	ldr	r2, [r3, #0]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f042 0201 	orr.w	r2, r2, #1
 8003132:	601a      	str	r2, [r3, #0]
 8003134:	e000      	b.n	8003138 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003136:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003138:	2300      	movs	r3, #0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3714      	adds	r7, #20
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	40012c00 	.word	0x40012c00
 800314c:	40000400 	.word	0x40000400
 8003150:	40000800 	.word	0x40000800
 8003154:	40000c00 	.word	0x40000c00
 8003158:	40013400 	.word	0x40013400
 800315c:	40014000 	.word	0x40014000
 8003160:	40015000 	.word	0x40015000
 8003164:	00010007 	.word	0x00010007

08003168 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d101      	bne.n	800317a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e054      	b.n	8003224 <HAL_TIM_OC_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003180:	b2db      	uxtb	r3, r3
 8003182:	2b00      	cmp	r3, #0
 8003184:	d111      	bne.n	80031aa <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f001 f90a 	bl	80043a8 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003198:	2b00      	cmp	r3, #0
 800319a:	d102      	bne.n	80031a2 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a23      	ldr	r2, [pc, #140]	; (800322c <HAL_TIM_OC_Init+0xc4>)
 80031a0:	65da      	str	r2, [r3, #92]	; 0x5c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a6:	6878      	ldr	r0, [r7, #4]
 80031a8:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2202      	movs	r2, #2
 80031ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	3304      	adds	r3, #4
 80031ba:	4619      	mov	r1, r3
 80031bc:	4610      	mov	r0, r2
 80031be:	f000 fcef 	bl	8003ba0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003222:	2300      	movs	r3, #0
}
 8003224:	4618      	mov	r0, r3
 8003226:	3708      	adds	r7, #8
 8003228:	46bd      	mov	sp, r7
 800322a:	bd80      	pop	{r7, pc}
 800322c:	08003231 	.word	0x08003231

08003230 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8003238:	bf00      	nop
 800323a:	370c      	adds	r7, #12
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr

08003244 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	b082      	sub	sp, #8
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
 800324c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d101      	bne.n	8003258 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	e04c      	b.n	80032f2 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d111      	bne.n	8003288 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2200      	movs	r2, #0
 8003268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f001 f89b 	bl	80043a8 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003276:	2b00      	cmp	r3, #0
 8003278:	d102      	bne.n	8003280 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	4a1f      	ldr	r2, [pc, #124]	; (80032fc <HAL_TIM_OnePulse_Init+0xb8>)
 800327e:	66da      	str	r2, [r3, #108]	; 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	3304      	adds	r3, #4
 8003298:	4619      	mov	r1, r3
 800329a:	4610      	mov	r0, r2
 800329c:	f000 fc80 	bl	8003ba0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f022 0208 	bic.w	r2, r2, #8
 80032ae:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6819      	ldr	r1, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032f0:	2300      	movs	r3, #0
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	08003301 	.word	0x08003301

08003300 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003308:	bf00      	nop
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003324:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800332c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003334:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800333c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800333e:	7bfb      	ldrb	r3, [r7, #15]
 8003340:	2b01      	cmp	r3, #1
 8003342:	d108      	bne.n	8003356 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003344:	7bbb      	ldrb	r3, [r7, #14]
 8003346:	2b01      	cmp	r3, #1
 8003348:	d105      	bne.n	8003356 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800334a:	7b7b      	ldrb	r3, [r7, #13]
 800334c:	2b01      	cmp	r3, #1
 800334e:	d102      	bne.n	8003356 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003350:	7b3b      	ldrb	r3, [r7, #12]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d001      	beq.n	800335a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e059      	b.n	800340e <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2202      	movs	r2, #2
 800335e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2202      	movs	r2, #2
 8003366:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2202      	movs	r2, #2
 800336e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2202      	movs	r2, #2
 8003376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f042 0202 	orr.w	r2, r2, #2
 8003388:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f042 0204 	orr.w	r2, r2, #4
 8003398:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2201      	movs	r2, #1
 80033a0:	2100      	movs	r1, #0
 80033a2:	4618      	mov	r0, r3
 80033a4:	f000 ffda 	bl	800435c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2201      	movs	r2, #1
 80033ae:	2104      	movs	r1, #4
 80033b0:	4618      	mov	r0, r3
 80033b2:	f000 ffd3 	bl	800435c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a17      	ldr	r2, [pc, #92]	; (8003418 <HAL_TIM_OnePulse_Start_IT+0x104>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d018      	beq.n	80033f2 <HAL_TIM_OnePulse_Start_IT+0xde>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a15      	ldr	r2, [pc, #84]	; (800341c <HAL_TIM_OnePulse_Start_IT+0x108>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d013      	beq.n	80033f2 <HAL_TIM_OnePulse_Start_IT+0xde>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a14      	ldr	r2, [pc, #80]	; (8003420 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d00e      	beq.n	80033f2 <HAL_TIM_OnePulse_Start_IT+0xde>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a12      	ldr	r2, [pc, #72]	; (8003424 <HAL_TIM_OnePulse_Start_IT+0x110>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d009      	beq.n	80033f2 <HAL_TIM_OnePulse_Start_IT+0xde>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a11      	ldr	r2, [pc, #68]	; (8003428 <HAL_TIM_OnePulse_Start_IT+0x114>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d004      	beq.n	80033f2 <HAL_TIM_OnePulse_Start_IT+0xde>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a0f      	ldr	r2, [pc, #60]	; (800342c <HAL_TIM_OnePulse_Start_IT+0x118>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d101      	bne.n	80033f6 <HAL_TIM_OnePulse_Start_IT+0xe2>
 80033f2:	2301      	movs	r3, #1
 80033f4:	e000      	b.n	80033f8 <HAL_TIM_OnePulse_Start_IT+0xe4>
 80033f6:	2300      	movs	r3, #0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d007      	beq.n	800340c <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800340a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3710      	adds	r7, #16
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40012c00 	.word	0x40012c00
 800341c:	40013400 	.word	0x40013400
 8003420:	40014000 	.word	0x40014000
 8003424:	40014400 	.word	0x40014400
 8003428:	40014800 	.word	0x40014800
 800342c:	40015000 	.word	0x40015000

08003430 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003448:	68bb      	ldr	r3, [r7, #8]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d026      	beq.n	80034a0 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	f003 0302 	and.w	r3, r3, #2
 8003458:	2b00      	cmp	r3, #0
 800345a:	d021      	beq.n	80034a0 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f06f 0202 	mvn.w	r2, #2
 8003464:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	f003 0303 	and.w	r3, r3, #3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d005      	beq.n	8003486 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	4798      	blx	r3
 8003484:	e009      	b.n	800349a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	f003 0304 	and.w	r3, r3, #4
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d026      	beq.n	80034f8 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f003 0304 	and.w	r3, r3, #4
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d021      	beq.n	80034f8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f06f 0204 	mvn.w	r2, #4
 80034bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2202      	movs	r2, #2
 80034c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d005      	beq.n	80034de <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	4798      	blx	r3
 80034dc:	e009      	b.n	80034f2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034e4:	6878      	ldr	r0, [r7, #4]
 80034e6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f003 0308 	and.w	r3, r3, #8
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d026      	beq.n	8003550 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	2b00      	cmp	r3, #0
 800350a:	d021      	beq.n	8003550 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f06f 0208 	mvn.w	r2, #8
 8003514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2204      	movs	r2, #4
 800351a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	f003 0303 	and.w	r3, r3, #3
 8003526:	2b00      	cmp	r3, #0
 8003528:	d005      	beq.n	8003536 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	4798      	blx	r3
 8003534:	e009      	b.n	800354a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f003 0310 	and.w	r3, r3, #16
 8003556:	2b00      	cmp	r3, #0
 8003558:	d026      	beq.n	80035a8 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f003 0310 	and.w	r3, r3, #16
 8003560:	2b00      	cmp	r3, #0
 8003562:	d021      	beq.n	80035a8 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f06f 0210 	mvn.w	r2, #16
 800356c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2208      	movs	r2, #8
 8003572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	69db      	ldr	r3, [r3, #28]
 800357a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800357e:	2b00      	cmp	r3, #0
 8003580:	d005      	beq.n	800358e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	4798      	blx	r3
 800358c:	e009      	b.n	80035a2 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d00e      	beq.n	80035d0 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f003 0301 	and.w	r3, r3, #1
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d009      	beq.n	80035d0 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f06f 0201 	mvn.w	r2, #1
 80035c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035cc:	6878      	ldr	r0, [r7, #4]
 80035ce:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d104      	bne.n	80035e4 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00e      	beq.n	8003602 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d009      	beq.n	8003602 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80035f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003608:	2b00      	cmp	r3, #0
 800360a:	d00e      	beq.n	800362a <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003612:	2b00      	cmp	r3, #0
 8003614:	d009      	beq.n	800362a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800361e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00e      	beq.n	8003652 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363a:	2b00      	cmp	r3, #0
 800363c:	d009      	beq.n	8003652 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003646:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	f003 0320 	and.w	r3, r3, #32
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00e      	beq.n	800367a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f003 0320 	and.w	r3, r3, #32
 8003662:	2b00      	cmp	r3, #0
 8003664:	d009      	beq.n	800367a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f06f 0220 	mvn.w	r2, #32
 800366e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00e      	beq.n	80036a2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800368a:	2b00      	cmp	r3, #0
 800368c:	d009      	beq.n	80036a2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8003696:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00e      	beq.n	80036ca <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d009      	beq.n	80036ca <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80036be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00e      	beq.n	80036f2 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d009      	beq.n	80036f2 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80036e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d00e      	beq.n	800371a <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d009      	beq.n	800371a <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800370e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800371a:	bf00      	nop
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
	...

08003724 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b086      	sub	sp, #24
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003730:	2300      	movs	r3, #0
 8003732:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_CHANNEL_MODE(sConfig->OCMode, Channel));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800373a:	2b01      	cmp	r3, #1
 800373c:	d101      	bne.n	8003742 <HAL_TIM_OC_ConfigChannel+0x1e>
 800373e:	2302      	movs	r3, #2
 8003740:	e066      	b.n	8003810 <HAL_TIM_OC_ConfigChannel+0xec>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2201      	movs	r2, #1
 8003746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2b14      	cmp	r3, #20
 800374e:	d857      	bhi.n	8003800 <HAL_TIM_OC_ConfigChannel+0xdc>
 8003750:	a201      	add	r2, pc, #4	; (adr r2, 8003758 <HAL_TIM_OC_ConfigChannel+0x34>)
 8003752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003756:	bf00      	nop
 8003758:	080037ad 	.word	0x080037ad
 800375c:	08003801 	.word	0x08003801
 8003760:	08003801 	.word	0x08003801
 8003764:	08003801 	.word	0x08003801
 8003768:	080037bb 	.word	0x080037bb
 800376c:	08003801 	.word	0x08003801
 8003770:	08003801 	.word	0x08003801
 8003774:	08003801 	.word	0x08003801
 8003778:	080037c9 	.word	0x080037c9
 800377c:	08003801 	.word	0x08003801
 8003780:	08003801 	.word	0x08003801
 8003784:	08003801 	.word	0x08003801
 8003788:	080037d7 	.word	0x080037d7
 800378c:	08003801 	.word	0x08003801
 8003790:	08003801 	.word	0x08003801
 8003794:	08003801 	.word	0x08003801
 8003798:	080037e5 	.word	0x080037e5
 800379c:	08003801 	.word	0x08003801
 80037a0:	08003801 	.word	0x08003801
 80037a4:	08003801 	.word	0x08003801
 80037a8:	080037f3 	.word	0x080037f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68b9      	ldr	r1, [r7, #8]
 80037b2:	4618      	mov	r0, r3
 80037b4:	f000 faa8 	bl	8003d08 <TIM_OC1_SetConfig>
      break;
 80037b8:	e025      	b.n	8003806 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	68b9      	ldr	r1, [r7, #8]
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 fb3b 	bl	8003e3c <TIM_OC2_SetConfig>
      break;
 80037c6:	e01e      	b.n	8003806 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68b9      	ldr	r1, [r7, #8]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f000 fbc8 	bl	8003f64 <TIM_OC3_SetConfig>
      break;
 80037d4:	e017      	b.n	8003806 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	68b9      	ldr	r1, [r7, #8]
 80037dc:	4618      	mov	r0, r3
 80037de:	f000 fc53 	bl	8004088 <TIM_OC4_SetConfig>
      break;
 80037e2:	e010      	b.n	8003806 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	68b9      	ldr	r1, [r7, #8]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fce0 	bl	80041b0 <TIM_OC5_SetConfig>
      break;
 80037f0:	e009      	b.n	8003806 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68b9      	ldr	r1, [r7, #8]
 80037f8:	4618      	mov	r0, r3
 80037fa:	f000 fd43 	bl	8004284 <TIM_OC6_SetConfig>
      break;
 80037fe:	e002      	b.n	8003806 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	75fb      	strb	r3, [r7, #23]
      break;
 8003804:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800380e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003818:	b480      	push	{r7}
 800381a:	b083      	sub	sp, #12
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003820:	bf00      	nop
 8003822:	370c      	adds	r7, #12
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr

0800382c <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800382c:	b480      	push	{r7}
 800382e:	b083      	sub	sp, #12
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8003834:	bf00      	nop
 8003836:	370c      	adds	r7, #12
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003848:	bf00      	nop
 800384a:	370c      	adds	r7, #12
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80038ac:	bf00      	nop
 80038ae:	370c      	adds	r7, #12
 80038b0:	46bd      	mov	sp, r7
 80038b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b6:	4770      	bx	lr

080038b8 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b083      	sub	sp, #12
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80038c0:	bf00      	nop
 80038c2:	370c      	adds	r7, #12
 80038c4:	46bd      	mov	sp, r7
 80038c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ca:	4770      	bx	lr

080038cc <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b083      	sub	sp, #12
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80038d4:	bf00      	nop
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr

080038e0 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b087      	sub	sp, #28
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	460b      	mov	r3, r1
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e14a      	b.n	8003b92 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003902:	b2db      	uxtb	r3, r3
 8003904:	2b01      	cmp	r3, #1
 8003906:	f040 80dd 	bne.w	8003ac4 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 800390a:	7afb      	ldrb	r3, [r7, #11]
 800390c:	2b1f      	cmp	r3, #31
 800390e:	f200 80d6 	bhi.w	8003abe <HAL_TIM_RegisterCallback+0x1de>
 8003912:	a201      	add	r2, pc, #4	; (adr r2, 8003918 <HAL_TIM_RegisterCallback+0x38>)
 8003914:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003918:	08003999 	.word	0x08003999
 800391c:	080039a1 	.word	0x080039a1
 8003920:	080039a9 	.word	0x080039a9
 8003924:	080039b1 	.word	0x080039b1
 8003928:	080039b9 	.word	0x080039b9
 800392c:	080039c1 	.word	0x080039c1
 8003930:	080039c9 	.word	0x080039c9
 8003934:	080039d1 	.word	0x080039d1
 8003938:	080039d9 	.word	0x080039d9
 800393c:	080039e1 	.word	0x080039e1
 8003940:	080039e9 	.word	0x080039e9
 8003944:	080039f1 	.word	0x080039f1
 8003948:	080039f9 	.word	0x080039f9
 800394c:	08003a01 	.word	0x08003a01
 8003950:	08003a0b 	.word	0x08003a0b
 8003954:	08003a15 	.word	0x08003a15
 8003958:	08003a1f 	.word	0x08003a1f
 800395c:	08003a29 	.word	0x08003a29
 8003960:	08003a33 	.word	0x08003a33
 8003964:	08003a3d 	.word	0x08003a3d
 8003968:	08003a47 	.word	0x08003a47
 800396c:	08003a51 	.word	0x08003a51
 8003970:	08003a5b 	.word	0x08003a5b
 8003974:	08003a65 	.word	0x08003a65
 8003978:	08003a6f 	.word	0x08003a6f
 800397c:	08003a79 	.word	0x08003a79
 8003980:	08003a83 	.word	0x08003a83
 8003984:	08003a8d 	.word	0x08003a8d
 8003988:	08003a97 	.word	0x08003a97
 800398c:	08003aa1 	.word	0x08003aa1
 8003990:	08003aab 	.word	0x08003aab
 8003994:	08003ab5 	.word	0x08003ab5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800399e:	e0f7      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 80039a6:	e0f3      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 80039ae:	e0ef      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 80039b6:	e0eb      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 80039be:	e0e7      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 80039c6:	e0e3      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 80039ce:	e0df      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 80039d6:	e0db      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 80039de:	e0d7      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 80039e6:	e0d3      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 80039ee:	e0cf      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 80039f6:	e0cb      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	687a      	ldr	r2, [r7, #4]
 80039fc:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 80039fe:	e0c7      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8003a08:	e0c2      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	687a      	ldr	r2, [r7, #4]
 8003a0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8003a12:	e0bd      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 8003a1c:	e0b8      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	687a      	ldr	r2, [r7, #4]
 8003a22:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 8003a26:	e0b3      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 8003a30:	e0ae      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 8003a3a:	e0a9      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	687a      	ldr	r2, [r7, #4]
 8003a40:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 8003a44:	e0a4      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 8003a4e:	e09f      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 8003a58:	e09a      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 8003a62:	e095      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 8003a6c:	e090      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 8003a76:	e08b      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	687a      	ldr	r2, [r7, #4]
 8003a7c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 8003a80:	e086      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	687a      	ldr	r2, [r7, #4]
 8003a86:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 8003a8a:	e081      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 8003a94:	e07c      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        break;
 8003a9e:	e077      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
        break;
 8003aa8:	e072      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 8003ab2:	e06d      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 8003abc:	e068      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	75fb      	strb	r3, [r7, #23]
        break;
 8003ac2:	e065      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aca:	b2db      	uxtb	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d15d      	bne.n	8003b8c <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8003ad0:	7afb      	ldrb	r3, [r7, #11]
 8003ad2:	2b0d      	cmp	r3, #13
 8003ad4:	d857      	bhi.n	8003b86 <HAL_TIM_RegisterCallback+0x2a6>
 8003ad6:	a201      	add	r2, pc, #4	; (adr r2, 8003adc <HAL_TIM_RegisterCallback+0x1fc>)
 8003ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003adc:	08003b15 	.word	0x08003b15
 8003ae0:	08003b1d 	.word	0x08003b1d
 8003ae4:	08003b25 	.word	0x08003b25
 8003ae8:	08003b2d 	.word	0x08003b2d
 8003aec:	08003b35 	.word	0x08003b35
 8003af0:	08003b3d 	.word	0x08003b3d
 8003af4:	08003b45 	.word	0x08003b45
 8003af8:	08003b4d 	.word	0x08003b4d
 8003afc:	08003b55 	.word	0x08003b55
 8003b00:	08003b5d 	.word	0x08003b5d
 8003b04:	08003b65 	.word	0x08003b65
 8003b08:	08003b6d 	.word	0x08003b6d
 8003b0c:	08003b75 	.word	0x08003b75
 8003b10:	08003b7d 	.word	0x08003b7d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	687a      	ldr	r2, [r7, #4]
 8003b18:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8003b1a:	e039      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8003b22:	e035      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8003b2a:	e031      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8003b32:	e02d      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8003b3a:	e029      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8003b42:	e025      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8003b4a:	e021      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8003b52:	e01d      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	687a      	ldr	r2, [r7, #4]
 8003b58:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8003b5a:	e019      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8003b62:	e015      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8003b6a:	e011      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8003b72:	e00d      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	687a      	ldr	r2, [r7, #4]
 8003b78:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8003b7a:	e009      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	687a      	ldr	r2, [r7, #4]
 8003b80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8003b84:	e004      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	75fb      	strb	r3, [r7, #23]
        break;
 8003b8a:	e001      	b.n	8003b90 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	371c      	adds	r7, #28
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop

08003ba0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b085      	sub	sp, #20
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	4a4c      	ldr	r2, [pc, #304]	; (8003ce4 <TIM_Base_SetConfig+0x144>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d017      	beq.n	8003be8 <TIM_Base_SetConfig+0x48>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bbe:	d013      	beq.n	8003be8 <TIM_Base_SetConfig+0x48>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a49      	ldr	r2, [pc, #292]	; (8003ce8 <TIM_Base_SetConfig+0x148>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d00f      	beq.n	8003be8 <TIM_Base_SetConfig+0x48>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a48      	ldr	r2, [pc, #288]	; (8003cec <TIM_Base_SetConfig+0x14c>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00b      	beq.n	8003be8 <TIM_Base_SetConfig+0x48>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a47      	ldr	r2, [pc, #284]	; (8003cf0 <TIM_Base_SetConfig+0x150>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d007      	beq.n	8003be8 <TIM_Base_SetConfig+0x48>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a46      	ldr	r2, [pc, #280]	; (8003cf4 <TIM_Base_SetConfig+0x154>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d003      	beq.n	8003be8 <TIM_Base_SetConfig+0x48>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a45      	ldr	r2, [pc, #276]	; (8003cf8 <TIM_Base_SetConfig+0x158>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d108      	bne.n	8003bfa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a39      	ldr	r2, [pc, #228]	; (8003ce4 <TIM_Base_SetConfig+0x144>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d023      	beq.n	8003c4a <TIM_Base_SetConfig+0xaa>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c08:	d01f      	beq.n	8003c4a <TIM_Base_SetConfig+0xaa>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a36      	ldr	r2, [pc, #216]	; (8003ce8 <TIM_Base_SetConfig+0x148>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d01b      	beq.n	8003c4a <TIM_Base_SetConfig+0xaa>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a35      	ldr	r2, [pc, #212]	; (8003cec <TIM_Base_SetConfig+0x14c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d017      	beq.n	8003c4a <TIM_Base_SetConfig+0xaa>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a34      	ldr	r2, [pc, #208]	; (8003cf0 <TIM_Base_SetConfig+0x150>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d013      	beq.n	8003c4a <TIM_Base_SetConfig+0xaa>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a33      	ldr	r2, [pc, #204]	; (8003cf4 <TIM_Base_SetConfig+0x154>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d00f      	beq.n	8003c4a <TIM_Base_SetConfig+0xaa>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a33      	ldr	r2, [pc, #204]	; (8003cfc <TIM_Base_SetConfig+0x15c>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00b      	beq.n	8003c4a <TIM_Base_SetConfig+0xaa>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a32      	ldr	r2, [pc, #200]	; (8003d00 <TIM_Base_SetConfig+0x160>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d007      	beq.n	8003c4a <TIM_Base_SetConfig+0xaa>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a31      	ldr	r2, [pc, #196]	; (8003d04 <TIM_Base_SetConfig+0x164>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d003      	beq.n	8003c4a <TIM_Base_SetConfig+0xaa>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a2c      	ldr	r2, [pc, #176]	; (8003cf8 <TIM_Base_SetConfig+0x158>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d108      	bne.n	8003c5c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	4313      	orrs	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	689a      	ldr	r2, [r3, #8]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	4a18      	ldr	r2, [pc, #96]	; (8003ce4 <TIM_Base_SetConfig+0x144>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d013      	beq.n	8003cb0 <TIM_Base_SetConfig+0x110>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a1a      	ldr	r2, [pc, #104]	; (8003cf4 <TIM_Base_SetConfig+0x154>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d00f      	beq.n	8003cb0 <TIM_Base_SetConfig+0x110>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a1a      	ldr	r2, [pc, #104]	; (8003cfc <TIM_Base_SetConfig+0x15c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d00b      	beq.n	8003cb0 <TIM_Base_SetConfig+0x110>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a19      	ldr	r2, [pc, #100]	; (8003d00 <TIM_Base_SetConfig+0x160>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d007      	beq.n	8003cb0 <TIM_Base_SetConfig+0x110>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a18      	ldr	r2, [pc, #96]	; (8003d04 <TIM_Base_SetConfig+0x164>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d003      	beq.n	8003cb0 <TIM_Base_SetConfig+0x110>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a13      	ldr	r2, [pc, #76]	; (8003cf8 <TIM_Base_SetConfig+0x158>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d103      	bne.n	8003cb8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	691a      	ldr	r2, [r3, #16]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d105      	bne.n	8003cd6 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	f023 0201 	bic.w	r2, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	611a      	str	r2, [r3, #16]
  }
}
 8003cd6:	bf00      	nop
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr
 8003ce2:	bf00      	nop
 8003ce4:	40012c00 	.word	0x40012c00
 8003ce8:	40000400 	.word	0x40000400
 8003cec:	40000800 	.word	0x40000800
 8003cf0:	40000c00 	.word	0x40000c00
 8003cf4:	40013400 	.word	0x40013400
 8003cf8:	40015000 	.word	0x40015000
 8003cfc:	40014000 	.word	0x40014000
 8003d00:	40014400 	.word	0x40014400
 8003d04:	40014800 	.word	0x40014800

08003d08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b087      	sub	sp, #28
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6a1b      	ldr	r3, [r3, #32]
 8003d16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	f023 0201 	bic.w	r2, r3, #1
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f023 0303 	bic.w	r3, r3, #3
 8003d42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68fa      	ldr	r2, [r7, #12]
 8003d4a:	4313      	orrs	r3, r2
 8003d4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f023 0302 	bic.w	r3, r3, #2
 8003d54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	4a30      	ldr	r2, [pc, #192]	; (8003e24 <TIM_OC1_SetConfig+0x11c>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d013      	beq.n	8003d90 <TIM_OC1_SetConfig+0x88>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a2f      	ldr	r2, [pc, #188]	; (8003e28 <TIM_OC1_SetConfig+0x120>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d00f      	beq.n	8003d90 <TIM_OC1_SetConfig+0x88>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a2e      	ldr	r2, [pc, #184]	; (8003e2c <TIM_OC1_SetConfig+0x124>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d00b      	beq.n	8003d90 <TIM_OC1_SetConfig+0x88>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a2d      	ldr	r2, [pc, #180]	; (8003e30 <TIM_OC1_SetConfig+0x128>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d007      	beq.n	8003d90 <TIM_OC1_SetConfig+0x88>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a2c      	ldr	r2, [pc, #176]	; (8003e34 <TIM_OC1_SetConfig+0x12c>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d003      	beq.n	8003d90 <TIM_OC1_SetConfig+0x88>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a2b      	ldr	r2, [pc, #172]	; (8003e38 <TIM_OC1_SetConfig+0x130>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d10c      	bne.n	8003daa <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f023 0308 	bic.w	r3, r3, #8
 8003d96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f023 0304 	bic.w	r3, r3, #4
 8003da8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a1d      	ldr	r2, [pc, #116]	; (8003e24 <TIM_OC1_SetConfig+0x11c>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d013      	beq.n	8003dda <TIM_OC1_SetConfig+0xd2>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	4a1c      	ldr	r2, [pc, #112]	; (8003e28 <TIM_OC1_SetConfig+0x120>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d00f      	beq.n	8003dda <TIM_OC1_SetConfig+0xd2>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a1b      	ldr	r2, [pc, #108]	; (8003e2c <TIM_OC1_SetConfig+0x124>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d00b      	beq.n	8003dda <TIM_OC1_SetConfig+0xd2>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	4a1a      	ldr	r2, [pc, #104]	; (8003e30 <TIM_OC1_SetConfig+0x128>)
 8003dc6:	4293      	cmp	r3, r2
 8003dc8:	d007      	beq.n	8003dda <TIM_OC1_SetConfig+0xd2>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a19      	ldr	r2, [pc, #100]	; (8003e34 <TIM_OC1_SetConfig+0x12c>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d003      	beq.n	8003dda <TIM_OC1_SetConfig+0xd2>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a18      	ldr	r2, [pc, #96]	; (8003e38 <TIM_OC1_SetConfig+0x130>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d111      	bne.n	8003dfe <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003de0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003de8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	695b      	ldr	r3, [r3, #20]
 8003dee:	693a      	ldr	r2, [r7, #16]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	699b      	ldr	r3, [r3, #24]
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	693a      	ldr	r2, [r7, #16]
 8003e02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	68fa      	ldr	r2, [r7, #12]
 8003e08:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	685a      	ldr	r2, [r3, #4]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	697a      	ldr	r2, [r7, #20]
 8003e16:	621a      	str	r2, [r3, #32]
}
 8003e18:	bf00      	nop
 8003e1a:	371c      	adds	r7, #28
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	40012c00 	.word	0x40012c00
 8003e28:	40013400 	.word	0x40013400
 8003e2c:	40014000 	.word	0x40014000
 8003e30:	40014400 	.word	0x40014400
 8003e34:	40014800 	.word	0x40014800
 8003e38:	40015000 	.word	0x40015000

08003e3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b087      	sub	sp, #28
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6a1b      	ldr	r3, [r3, #32]
 8003e4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a1b      	ldr	r3, [r3, #32]
 8003e50:	f023 0210 	bic.w	r2, r3, #16
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	685b      	ldr	r3, [r3, #4]
 8003e5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e78:	683b      	ldr	r3, [r7, #0]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	021b      	lsls	r3, r3, #8
 8003e7e:	68fa      	ldr	r2, [r7, #12]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	f023 0320 	bic.w	r3, r3, #32
 8003e8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	689b      	ldr	r3, [r3, #8]
 8003e90:	011b      	lsls	r3, r3, #4
 8003e92:	697a      	ldr	r2, [r7, #20]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a2c      	ldr	r2, [pc, #176]	; (8003f4c <TIM_OC2_SetConfig+0x110>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d007      	beq.n	8003eb0 <TIM_OC2_SetConfig+0x74>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a2b      	ldr	r2, [pc, #172]	; (8003f50 <TIM_OC2_SetConfig+0x114>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d003      	beq.n	8003eb0 <TIM_OC2_SetConfig+0x74>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a2a      	ldr	r2, [pc, #168]	; (8003f54 <TIM_OC2_SetConfig+0x118>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d10d      	bne.n	8003ecc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003eb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	68db      	ldr	r3, [r3, #12]
 8003ebc:	011b      	lsls	r3, r3, #4
 8003ebe:	697a      	ldr	r2, [r7, #20]
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003eca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	4a1f      	ldr	r2, [pc, #124]	; (8003f4c <TIM_OC2_SetConfig+0x110>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d013      	beq.n	8003efc <TIM_OC2_SetConfig+0xc0>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	4a1e      	ldr	r2, [pc, #120]	; (8003f50 <TIM_OC2_SetConfig+0x114>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d00f      	beq.n	8003efc <TIM_OC2_SetConfig+0xc0>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	4a1e      	ldr	r2, [pc, #120]	; (8003f58 <TIM_OC2_SetConfig+0x11c>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d00b      	beq.n	8003efc <TIM_OC2_SetConfig+0xc0>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	4a1d      	ldr	r2, [pc, #116]	; (8003f5c <TIM_OC2_SetConfig+0x120>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d007      	beq.n	8003efc <TIM_OC2_SetConfig+0xc0>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a1c      	ldr	r2, [pc, #112]	; (8003f60 <TIM_OC2_SetConfig+0x124>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d003      	beq.n	8003efc <TIM_OC2_SetConfig+0xc0>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a17      	ldr	r2, [pc, #92]	; (8003f54 <TIM_OC2_SetConfig+0x118>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d113      	bne.n	8003f24 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	695b      	ldr	r3, [r3, #20]
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	693a      	ldr	r2, [r7, #16]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685a      	ldr	r2, [r3, #4]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	697a      	ldr	r2, [r7, #20]
 8003f3c:	621a      	str	r2, [r3, #32]
}
 8003f3e:	bf00      	nop
 8003f40:	371c      	adds	r7, #28
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	40012c00 	.word	0x40012c00
 8003f50:	40013400 	.word	0x40013400
 8003f54:	40015000 	.word	0x40015000
 8003f58:	40014000 	.word	0x40014000
 8003f5c:	40014400 	.word	0x40014400
 8003f60:	40014800 	.word	0x40014800

08003f64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b087      	sub	sp, #28
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
 8003f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
 8003f72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a1b      	ldr	r3, [r3, #32]
 8003f78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	69db      	ldr	r3, [r3, #28]
 8003f8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f023 0303 	bic.w	r3, r3, #3
 8003f9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003fb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	021b      	lsls	r3, r3, #8
 8003fb8:	697a      	ldr	r2, [r7, #20]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4a2b      	ldr	r2, [pc, #172]	; (8004070 <TIM_OC3_SetConfig+0x10c>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d007      	beq.n	8003fd6 <TIM_OC3_SetConfig+0x72>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a2a      	ldr	r2, [pc, #168]	; (8004074 <TIM_OC3_SetConfig+0x110>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d003      	beq.n	8003fd6 <TIM_OC3_SetConfig+0x72>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a29      	ldr	r2, [pc, #164]	; (8004078 <TIM_OC3_SetConfig+0x114>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d10d      	bne.n	8003ff2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003fdc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	68db      	ldr	r3, [r3, #12]
 8003fe2:	021b      	lsls	r3, r3, #8
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ff0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a1e      	ldr	r2, [pc, #120]	; (8004070 <TIM_OC3_SetConfig+0x10c>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d013      	beq.n	8004022 <TIM_OC3_SetConfig+0xbe>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a1d      	ldr	r2, [pc, #116]	; (8004074 <TIM_OC3_SetConfig+0x110>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d00f      	beq.n	8004022 <TIM_OC3_SetConfig+0xbe>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a1d      	ldr	r2, [pc, #116]	; (800407c <TIM_OC3_SetConfig+0x118>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d00b      	beq.n	8004022 <TIM_OC3_SetConfig+0xbe>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a1c      	ldr	r2, [pc, #112]	; (8004080 <TIM_OC3_SetConfig+0x11c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d007      	beq.n	8004022 <TIM_OC3_SetConfig+0xbe>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a1b      	ldr	r2, [pc, #108]	; (8004084 <TIM_OC3_SetConfig+0x120>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d003      	beq.n	8004022 <TIM_OC3_SetConfig+0xbe>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a16      	ldr	r2, [pc, #88]	; (8004078 <TIM_OC3_SetConfig+0x114>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d113      	bne.n	800404a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004028:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004030:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	011b      	lsls	r3, r3, #4
 8004038:	693a      	ldr	r2, [r7, #16]
 800403a:	4313      	orrs	r3, r2
 800403c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	699b      	ldr	r3, [r3, #24]
 8004042:	011b      	lsls	r3, r3, #4
 8004044:	693a      	ldr	r2, [r7, #16]
 8004046:	4313      	orrs	r3, r2
 8004048:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	693a      	ldr	r2, [r7, #16]
 800404e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	685a      	ldr	r2, [r3, #4]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	697a      	ldr	r2, [r7, #20]
 8004062:	621a      	str	r2, [r3, #32]
}
 8004064:	bf00      	nop
 8004066:	371c      	adds	r7, #28
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr
 8004070:	40012c00 	.word	0x40012c00
 8004074:	40013400 	.word	0x40013400
 8004078:	40015000 	.word	0x40015000
 800407c:	40014000 	.word	0x40014000
 8004080:	40014400 	.word	0x40014400
 8004084:	40014800 	.word	0x40014800

08004088 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	021b      	lsls	r3, r3, #8
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	031b      	lsls	r3, r3, #12
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a2c      	ldr	r2, [pc, #176]	; (8004198 <TIM_OC4_SetConfig+0x110>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d007      	beq.n	80040fc <TIM_OC4_SetConfig+0x74>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a2b      	ldr	r2, [pc, #172]	; (800419c <TIM_OC4_SetConfig+0x114>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d003      	beq.n	80040fc <TIM_OC4_SetConfig+0x74>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a2a      	ldr	r2, [pc, #168]	; (80041a0 <TIM_OC4_SetConfig+0x118>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d10d      	bne.n	8004118 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	031b      	lsls	r3, r3, #12
 800410a:	697a      	ldr	r2, [r7, #20]
 800410c:	4313      	orrs	r3, r2
 800410e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004116:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	4a1f      	ldr	r2, [pc, #124]	; (8004198 <TIM_OC4_SetConfig+0x110>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d013      	beq.n	8004148 <TIM_OC4_SetConfig+0xc0>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	4a1e      	ldr	r2, [pc, #120]	; (800419c <TIM_OC4_SetConfig+0x114>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d00f      	beq.n	8004148 <TIM_OC4_SetConfig+0xc0>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	4a1e      	ldr	r2, [pc, #120]	; (80041a4 <TIM_OC4_SetConfig+0x11c>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d00b      	beq.n	8004148 <TIM_OC4_SetConfig+0xc0>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a1d      	ldr	r2, [pc, #116]	; (80041a8 <TIM_OC4_SetConfig+0x120>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d007      	beq.n	8004148 <TIM_OC4_SetConfig+0xc0>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a1c      	ldr	r2, [pc, #112]	; (80041ac <TIM_OC4_SetConfig+0x124>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d003      	beq.n	8004148 <TIM_OC4_SetConfig+0xc0>
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	4a17      	ldr	r2, [pc, #92]	; (80041a0 <TIM_OC4_SetConfig+0x118>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d113      	bne.n	8004170 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800414e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004156:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	695b      	ldr	r3, [r3, #20]
 800415c:	019b      	lsls	r3, r3, #6
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	4313      	orrs	r3, r2
 8004162:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	699b      	ldr	r3, [r3, #24]
 8004168:	019b      	lsls	r3, r3, #6
 800416a:	693a      	ldr	r2, [r7, #16]
 800416c:	4313      	orrs	r3, r2
 800416e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68fa      	ldr	r2, [r7, #12]
 800417a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	697a      	ldr	r2, [r7, #20]
 8004188:	621a      	str	r2, [r3, #32]
}
 800418a:	bf00      	nop
 800418c:	371c      	adds	r7, #28
 800418e:	46bd      	mov	sp, r7
 8004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004194:	4770      	bx	lr
 8004196:	bf00      	nop
 8004198:	40012c00 	.word	0x40012c00
 800419c:	40013400 	.word	0x40013400
 80041a0:	40015000 	.word	0x40015000
 80041a4:	40014000 	.word	0x40014000
 80041a8:	40014400 	.word	0x40014400
 80041ac:	40014800 	.word	0x40014800

080041b0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b087      	sub	sp, #28
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6a1b      	ldr	r3, [r3, #32]
 80041c4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80041f4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	041b      	lsls	r3, r3, #16
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	4313      	orrs	r3, r2
 8004200:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	4a19      	ldr	r2, [pc, #100]	; (800426c <TIM_OC5_SetConfig+0xbc>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d013      	beq.n	8004232 <TIM_OC5_SetConfig+0x82>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a18      	ldr	r2, [pc, #96]	; (8004270 <TIM_OC5_SetConfig+0xc0>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d00f      	beq.n	8004232 <TIM_OC5_SetConfig+0x82>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a17      	ldr	r2, [pc, #92]	; (8004274 <TIM_OC5_SetConfig+0xc4>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d00b      	beq.n	8004232 <TIM_OC5_SetConfig+0x82>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a16      	ldr	r2, [pc, #88]	; (8004278 <TIM_OC5_SetConfig+0xc8>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d007      	beq.n	8004232 <TIM_OC5_SetConfig+0x82>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a15      	ldr	r2, [pc, #84]	; (800427c <TIM_OC5_SetConfig+0xcc>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d003      	beq.n	8004232 <TIM_OC5_SetConfig+0x82>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a14      	ldr	r2, [pc, #80]	; (8004280 <TIM_OC5_SetConfig+0xd0>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d109      	bne.n	8004246 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004238:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	021b      	lsls	r3, r3, #8
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	4313      	orrs	r3, r2
 8004244:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	621a      	str	r2, [r3, #32]
}
 8004260:	bf00      	nop
 8004262:	371c      	adds	r7, #28
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr
 800426c:	40012c00 	.word	0x40012c00
 8004270:	40013400 	.word	0x40013400
 8004274:	40014000 	.word	0x40014000
 8004278:	40014400 	.word	0x40014400
 800427c:	40014800 	.word	0x40014800
 8004280:	40015000 	.word	0x40015000

08004284 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	021b      	lsls	r3, r3, #8
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	051b      	lsls	r3, r3, #20
 80042d2:	693a      	ldr	r2, [r7, #16]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a1a      	ldr	r2, [pc, #104]	; (8004344 <TIM_OC6_SetConfig+0xc0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d013      	beq.n	8004308 <TIM_OC6_SetConfig+0x84>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a19      	ldr	r2, [pc, #100]	; (8004348 <TIM_OC6_SetConfig+0xc4>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d00f      	beq.n	8004308 <TIM_OC6_SetConfig+0x84>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a18      	ldr	r2, [pc, #96]	; (800434c <TIM_OC6_SetConfig+0xc8>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d00b      	beq.n	8004308 <TIM_OC6_SetConfig+0x84>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a17      	ldr	r2, [pc, #92]	; (8004350 <TIM_OC6_SetConfig+0xcc>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d007      	beq.n	8004308 <TIM_OC6_SetConfig+0x84>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a16      	ldr	r2, [pc, #88]	; (8004354 <TIM_OC6_SetConfig+0xd0>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d003      	beq.n	8004308 <TIM_OC6_SetConfig+0x84>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a15      	ldr	r2, [pc, #84]	; (8004358 <TIM_OC6_SetConfig+0xd4>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d109      	bne.n	800431c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800430e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	029b      	lsls	r3, r3, #10
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	4313      	orrs	r3, r2
 800431a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	697a      	ldr	r2, [r7, #20]
 8004320:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	68fa      	ldr	r2, [r7, #12]
 8004326:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	621a      	str	r2, [r3, #32]
}
 8004336:	bf00      	nop
 8004338:	371c      	adds	r7, #28
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	40012c00 	.word	0x40012c00
 8004348:	40013400 	.word	0x40013400
 800434c:	40014000 	.word	0x40014000
 8004350:	40014400 	.word	0x40014400
 8004354:	40014800 	.word	0x40014800
 8004358:	40015000 	.word	0x40015000

0800435c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800435c:	b480      	push	{r7}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	f003 031f 	and.w	r3, r3, #31
 800436e:	2201      	movs	r2, #1
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6a1a      	ldr	r2, [r3, #32]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	43db      	mvns	r3, r3
 800437e:	401a      	ands	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a1a      	ldr	r2, [r3, #32]
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	f003 031f 	and.w	r3, r3, #31
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	fa01 f303 	lsl.w	r3, r1, r3
 8004394:	431a      	orrs	r2, r3
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	621a      	str	r2, [r3, #32]
}
 800439a:	bf00      	nop
 800439c:	371c      	adds	r7, #28
 800439e:	46bd      	mov	sp, r7
 80043a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a4:	4770      	bx	lr
	...

080043a8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4a26      	ldr	r2, [pc, #152]	; (800444c <TIM_ResetCallback+0xa4>)
 80043b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	4a25      	ldr	r2, [pc, #148]	; (8004450 <TIM_ResetCallback+0xa8>)
 80043bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	4a24      	ldr	r2, [pc, #144]	; (8004454 <TIM_ResetCallback+0xac>)
 80043c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a23      	ldr	r2, [pc, #140]	; (8004458 <TIM_ResetCallback+0xb0>)
 80043cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a22      	ldr	r2, [pc, #136]	; (800445c <TIM_ResetCallback+0xb4>)
 80043d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	4a21      	ldr	r2, [pc, #132]	; (8004460 <TIM_ResetCallback+0xb8>)
 80043dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a20      	ldr	r2, [pc, #128]	; (8004464 <TIM_ResetCallback+0xbc>)
 80043e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a1f      	ldr	r2, [pc, #124]	; (8004468 <TIM_ResetCallback+0xc0>)
 80043ec:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a1e      	ldr	r2, [pc, #120]	; (800446c <TIM_ResetCallback+0xc4>)
 80043f4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	4a1d      	ldr	r2, [pc, #116]	; (8004470 <TIM_ResetCallback+0xc8>)
 80043fc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4a1c      	ldr	r2, [pc, #112]	; (8004474 <TIM_ResetCallback+0xcc>)
 8004404:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	4a1b      	ldr	r2, [pc, #108]	; (8004478 <TIM_ResetCallback+0xd0>)
 800440c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a1a      	ldr	r2, [pc, #104]	; (800447c <TIM_ResetCallback+0xd4>)
 8004414:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	4a19      	ldr	r2, [pc, #100]	; (8004480 <TIM_ResetCallback+0xd8>)
 800441c:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a18      	ldr	r2, [pc, #96]	; (8004484 <TIM_ResetCallback+0xdc>)
 8004424:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4a17      	ldr	r2, [pc, #92]	; (8004488 <TIM_ResetCallback+0xe0>)
 800442c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a16      	ldr	r2, [pc, #88]	; (800448c <TIM_ResetCallback+0xe4>)
 8004434:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a15      	ldr	r2, [pc, #84]	; (8004490 <TIM_ResetCallback+0xe8>)
 800443c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	08003819 	.word	0x08003819
 8004450:	0800382d 	.word	0x0800382d
 8004454:	080038a5 	.word	0x080038a5
 8004458:	080038b9 	.word	0x080038b9
 800445c:	08003855 	.word	0x08003855
 8004460:	08003869 	.word	0x08003869
 8004464:	08003841 	.word	0x08003841
 8004468:	0800387d 	.word	0x0800387d
 800446c:	08003891 	.word	0x08003891
 8004470:	080038cd 	.word	0x080038cd
 8004474:	080045bd 	.word	0x080045bd
 8004478:	080045d1 	.word	0x080045d1
 800447c:	080045e5 	.word	0x080045e5
 8004480:	080045f9 	.word	0x080045f9
 8004484:	0800460d 	.word	0x0800460d
 8004488:	08004621 	.word	0x08004621
 800448c:	08004635 	.word	0x08004635
 8004490:	08004649 	.word	0x08004649

08004494 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004494:	b480      	push	{r7}
 8004496:	b085      	sub	sp, #20
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80044ac:	2302      	movs	r3, #2
 80044ae:	e078      	b.n	80045a2 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	4313      	orrs	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	4313      	orrs	r3, r2
 80044fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	4313      	orrs	r3, r2
 800450a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004516:	4313      	orrs	r3, r2
 8004518:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	041b      	lsls	r3, r3, #16
 8004526:	4313      	orrs	r3, r2
 8004528:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	69db      	ldr	r3, [r3, #28]
 8004534:	4313      	orrs	r3, r2
 8004536:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a1c      	ldr	r2, [pc, #112]	; (80045b0 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d009      	beq.n	8004556 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	4a1b      	ldr	r2, [pc, #108]	; (80045b4 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004548:	4293      	cmp	r3, r2
 800454a:	d004      	beq.n	8004556 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a19      	ldr	r2, [pc, #100]	; (80045b8 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d11c      	bne.n	8004590 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004560:	051b      	lsls	r3, r3, #20
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	4313      	orrs	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800458c:	4313      	orrs	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	68fa      	ldr	r2, [r7, #12]
 8004596:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2200      	movs	r2, #0
 800459c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045a0:	2300      	movs	r3, #0
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3714      	adds	r7, #20
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	40012c00 	.word	0x40012c00
 80045b4:	40013400 	.word	0x40013400
 80045b8:	40015000 	.word	0x40015000

080045bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b083      	sub	sp, #12
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004600:	bf00      	nop
 8004602:	370c      	adds	r7, #12
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr

0800460c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004632:	4770      	bx	lr

08004634 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800463c:	bf00      	nop
 800463e:	370c      	adds	r7, #12
 8004640:	46bd      	mov	sp, r7
 8004642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004646:	4770      	bx	lr

08004648 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004648:	b480      	push	{r7}
 800464a:	b083      	sub	sp, #12
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004650:	bf00      	nop
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b082      	sub	sp, #8
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e050      	b.n	8004710 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004674:	2b00      	cmp	r3, #0
 8004676:	d114      	bne.n	80046a2 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f000 fe6d 	bl	8005360 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800468c:	2b00      	cmp	r3, #0
 800468e:	d103      	bne.n	8004698 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a21      	ldr	r2, [pc, #132]	; (8004718 <HAL_UART_Init+0xbc>)
 8004694:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2224      	movs	r2, #36	; 0x24
 80046a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f022 0201 	bic.w	r2, r2, #1
 80046b8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d002      	beq.n	80046c8 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f001 f99a 	bl	80059fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f000 fe9b 	bl	8005404 <UART_SetConfig>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e01b      	b.n	8004710 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	685a      	ldr	r2, [r3, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80046e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689a      	ldr	r2, [r3, #8]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80046f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681a      	ldr	r2, [r3, #0]
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f042 0201 	orr.w	r2, r2, #1
 8004706:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f001 fa19 	bl	8005b40 <UART_CheckIdleState>
 800470e:	4603      	mov	r3, r0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	08001029 	.word	0x08001029

0800471c <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800471c:	b480      	push	{r7}
 800471e:	b087      	sub	sp, #28
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	460b      	mov	r3, r1
 8004726:	607a      	str	r2, [r7, #4]
 8004728:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800472a:	2300      	movs	r3, #0
 800472c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d109      	bne.n	8004748 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    return HAL_ERROR;
 8004744:	2301      	movs	r3, #1
 8004746:	e09c      	b.n	8004882 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800474e:	2b20      	cmp	r3, #32
 8004750:	d16c      	bne.n	800482c <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8004752:	7afb      	ldrb	r3, [r7, #11]
 8004754:	2b0c      	cmp	r3, #12
 8004756:	d85e      	bhi.n	8004816 <HAL_UART_RegisterCallback+0xfa>
 8004758:	a201      	add	r2, pc, #4	; (adr r2, 8004760 <HAL_UART_RegisterCallback+0x44>)
 800475a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475e:	bf00      	nop
 8004760:	08004795 	.word	0x08004795
 8004764:	0800479f 	.word	0x0800479f
 8004768:	080047a9 	.word	0x080047a9
 800476c:	080047b3 	.word	0x080047b3
 8004770:	080047bd 	.word	0x080047bd
 8004774:	080047c7 	.word	0x080047c7
 8004778:	080047d1 	.word	0x080047d1
 800477c:	080047db 	.word	0x080047db
 8004780:	080047e5 	.word	0x080047e5
 8004784:	080047ef 	.word	0x080047ef
 8004788:	080047f9 	.word	0x080047f9
 800478c:	08004803 	.word	0x08004803
 8004790:	0800480d 	.word	0x0800480d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800479c:	e070      	b.n	8004880 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 80047a6:	e06b      	b.n	8004880 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 80047b0:	e066      	b.n	8004880 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 80047ba:	e061      	b.n	8004880 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 80047c4:	e05c      	b.n	8004880 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 80047ce:	e057      	b.n	8004880 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 80047d8:	e052      	b.n	8004880 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 80047e2:	e04d      	b.n	8004880 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
        break;
 80047ec:	e048      	b.n	8004880 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	687a      	ldr	r2, [r7, #4]
 80047f2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
        break;
 80047f6:	e043      	b.n	8004880 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	687a      	ldr	r2, [r7, #4]
 80047fc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
        break;
 8004800:	e03e      	b.n	8004880 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	687a      	ldr	r2, [r7, #4]
 8004806:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 800480a:	e039      	b.n	8004880 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 8004814:	e034      	b.n	8004880 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        status =  HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	75fb      	strb	r3, [r7, #23]
        break;
 800482a:	e029      	b.n	8004880 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004832:	2b00      	cmp	r3, #0
 8004834:	d11a      	bne.n	800486c <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8004836:	7afb      	ldrb	r3, [r7, #11]
 8004838:	2b0b      	cmp	r3, #11
 800483a:	d002      	beq.n	8004842 <HAL_UART_RegisterCallback+0x126>
 800483c:	2b0c      	cmp	r3, #12
 800483e:	d005      	beq.n	800484c <HAL_UART_RegisterCallback+0x130>
 8004840:	e009      	b.n	8004856 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
        break;
 800484a:	e019      	b.n	8004880 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
        break;
 8004854:	e014      	b.n	8004880 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800485c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        status =  HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	75fb      	strb	r3, [r7, #23]
        break;
 800486a:	e009      	b.n	8004880 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004872:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

    status =  HAL_ERROR;
 800487c:	2301      	movs	r3, #1
 800487e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004880:	7dfb      	ldrb	r3, [r7, #23]
}
 8004882:	4618      	mov	r0, r3
 8004884:	371c      	adds	r7, #28
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop

08004890 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b08a      	sub	sp, #40	; 0x28
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	4613      	mov	r3, r2
 800489c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048a4:	2b20      	cmp	r3, #32
 80048a6:	d137      	bne.n	8004918 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d002      	beq.n	80048b4 <HAL_UART_Receive_IT+0x24>
 80048ae:	88fb      	ldrh	r3, [r7, #6]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	e030      	b.n	800491a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a18      	ldr	r2, [pc, #96]	; (8004924 <HAL_UART_Receive_IT+0x94>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d01f      	beq.n	8004908 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d018      	beq.n	8004908 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	e853 3f00 	ldrex	r3, [r3]
 80048e2:	613b      	str	r3, [r7, #16]
   return(result);
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80048ea:	627b      	str	r3, [r7, #36]	; 0x24
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	461a      	mov	r2, r3
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	623b      	str	r3, [r7, #32]
 80048f6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f8:	69f9      	ldr	r1, [r7, #28]
 80048fa:	6a3a      	ldr	r2, [r7, #32]
 80048fc:	e841 2300 	strex	r3, r2, [r1]
 8004900:	61bb      	str	r3, [r7, #24]
   return(result);
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1e6      	bne.n	80048d6 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004908:	88fb      	ldrh	r3, [r7, #6]
 800490a:	461a      	mov	r2, r3
 800490c:	68b9      	ldr	r1, [r7, #8]
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f001 fa2e 	bl	8005d70 <UART_Start_Receive_IT>
 8004914:	4603      	mov	r3, r0
 8004916:	e000      	b.n	800491a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004918:	2302      	movs	r3, #2
  }
}
 800491a:	4618      	mov	r0, r3
 800491c:	3728      	adds	r7, #40	; 0x28
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	40008000 	.word	0x40008000

08004928 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b08a      	sub	sp, #40	; 0x28
 800492c:	af00      	add	r7, sp, #0
 800492e:	60f8      	str	r0, [r7, #12]
 8004930:	60b9      	str	r1, [r7, #8]
 8004932:	4613      	mov	r3, r2
 8004934:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800493c:	2b20      	cmp	r3, #32
 800493e:	d167      	bne.n	8004a10 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d002      	beq.n	800494c <HAL_UART_Transmit_DMA+0x24>
 8004946:	88fb      	ldrh	r3, [r7, #6]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e060      	b.n	8004a12 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	88fa      	ldrh	r2, [r7, #6]
 800495a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	88fa      	ldrh	r2, [r7, #6]
 8004962:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2200      	movs	r2, #0
 800496a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2221      	movs	r2, #33	; 0x21
 8004972:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    if (huart->hdmatx != NULL)
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800497a:	2b00      	cmp	r3, #0
 800497c:	d028      	beq.n	80049d0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004982:	4a26      	ldr	r2, [pc, #152]	; (8004a1c <HAL_UART_Transmit_DMA+0xf4>)
 8004984:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800498a:	4a25      	ldr	r2, [pc, #148]	; (8004a20 <HAL_UART_Transmit_DMA+0xf8>)
 800498c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004992:	4a24      	ldr	r2, [pc, #144]	; (8004a24 <HAL_UART_Transmit_DMA+0xfc>)
 8004994:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800499a:	2200      	movs	r2, #0
 800499c:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049a6:	4619      	mov	r1, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	3328      	adds	r3, #40	; 0x28
 80049ae:	461a      	mov	r2, r3
 80049b0:	88fb      	ldrh	r3, [r7, #6]
 80049b2:	f7fc fe79 	bl	80016a8 <HAL_DMA_Start_IT>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d009      	beq.n	80049d0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2210      	movs	r2, #16
 80049c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2220      	movs	r2, #32
 80049c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e020      	b.n	8004a12 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	2240      	movs	r2, #64	; 0x40
 80049d6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3308      	adds	r3, #8
 80049de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	e853 3f00 	ldrex	r3, [r3]
 80049e6:	613b      	str	r3, [r7, #16]
   return(result);
 80049e8:	693b      	ldr	r3, [r7, #16]
 80049ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ee:	627b      	str	r3, [r7, #36]	; 0x24
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3308      	adds	r3, #8
 80049f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049f8:	623a      	str	r2, [r7, #32]
 80049fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fc:	69f9      	ldr	r1, [r7, #28]
 80049fe:	6a3a      	ldr	r2, [r7, #32]
 8004a00:	e841 2300 	strex	r3, r2, [r1]
 8004a04:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d1e5      	bne.n	80049d8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	e000      	b.n	8004a12 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8004a10:	2302      	movs	r3, #2
  }
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3728      	adds	r7, #40	; 0x28
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}
 8004a1a:	bf00      	nop
 8004a1c:	08006103 	.word	0x08006103
 8004a20:	080061a1 	.word	0x080061a1
 8004a24:	080061c1 	.word	0x080061c1

08004a28 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b09a      	sub	sp, #104	; 0x68
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Disable PEIE, EIE, RXNEIE and RXFTIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a38:	e853 3f00 	ldrex	r3, [r3]
 8004a3c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004a3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a44:	667b      	str	r3, [r7, #100]	; 0x64
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a4e:	657b      	str	r3, [r7, #84]	; 0x54
 8004a50:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a52:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a54:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004a56:	e841 2300 	strex	r3, r2, [r1]
 8004a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004a5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d1e6      	bne.n	8004a30 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	3308      	adds	r3, #8
 8004a68:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a6c:	e853 3f00 	ldrex	r3, [r3]
 8004a70:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a78:	f023 0301 	bic.w	r3, r3, #1
 8004a7c:	663b      	str	r3, [r7, #96]	; 0x60
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	3308      	adds	r3, #8
 8004a84:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004a86:	643a      	str	r2, [r7, #64]	; 0x40
 8004a88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004a8c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004a8e:	e841 2300 	strex	r3, r2, [r1]
 8004a92:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004a94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1e3      	bne.n	8004a62 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d118      	bne.n	8004ad4 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aa8:	6a3b      	ldr	r3, [r7, #32]
 8004aaa:	e853 3f00 	ldrex	r3, [r3]
 8004aae:	61fb      	str	r3, [r7, #28]
   return(result);
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	f023 0310 	bic.w	r3, r3, #16
 8004ab6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	461a      	mov	r2, r3
 8004abe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004ac2:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004ac6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ac8:	e841 2300 	strex	r3, r2, [r1]
 8004acc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d1e6      	bne.n	8004aa2 <HAL_UART_AbortReceive+0x7a>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ade:	2b40      	cmp	r3, #64	; 0x40
 8004ae0:	d13b      	bne.n	8004b5a <HAL_UART_AbortReceive+0x132>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	3308      	adds	r3, #8
 8004ae8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	e853 3f00 	ldrex	r3, [r3]
 8004af0:	60bb      	str	r3, [r7, #8]
   return(result);
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004af8:	65bb      	str	r3, [r7, #88]	; 0x58
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	3308      	adds	r3, #8
 8004b00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b02:	61ba      	str	r2, [r7, #24]
 8004b04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b06:	6979      	ldr	r1, [r7, #20]
 8004b08:	69ba      	ldr	r2, [r7, #24]
 8004b0a:	e841 2300 	strex	r3, r2, [r1]
 8004b0e:	613b      	str	r3, [r7, #16]
   return(result);
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1e5      	bne.n	8004ae2 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d01c      	beq.n	8004b5a <HAL_UART_AbortReceive+0x132>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b26:	2200      	movs	r2, #0
 8004b28:	639a      	str	r2, [r3, #56]	; 0x38

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fc fe34 	bl	800179e <HAL_DMA_Abort>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d00e      	beq.n	8004b5a <HAL_UART_AbortReceive+0x132>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b42:	4618      	mov	r0, r3
 8004b44:	f7fc ff9a 	bl	8001a7c <HAL_DMA_GetError>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b20      	cmp	r3, #32
 8004b4c:	d105      	bne.n	8004b5a <HAL_UART_AbortReceive+0x132>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2210      	movs	r2, #16
 8004b52:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          return HAL_TIMEOUT;
 8004b56:	2303      	movs	r3, #3
 8004b58:	e017      	b.n	8004b8a <HAL_UART_AbortReceive+0x162>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	220f      	movs	r2, #15
 8004b68:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	699a      	ldr	r2, [r3, #24]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f042 0208 	orr.w	r2, r2, #8
 8004b78:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	66da      	str	r2, [r3, #108]	; 0x6c

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3768      	adds	r7, #104	; 0x68
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
	...

08004b94 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b0ba      	sub	sp, #232	; 0xe8
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	69db      	ldr	r3, [r3, #28]
 8004ba2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004bba:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004bbe:	f640 030f 	movw	r3, #2063	; 0x80f
 8004bc2:	4013      	ands	r3, r2
 8004bc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004bc8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d11b      	bne.n	8004c08 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bd4:	f003 0320 	and.w	r3, r3, #32
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d015      	beq.n	8004c08 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d105      	bne.n	8004bf4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d009      	beq.n	8004c08 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	f000 82f3 	beq.w	80051e4 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	4798      	blx	r3
      }
      return;
 8004c06:	e2ed      	b.n	80051e4 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004c08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 8129 	beq.w	8004e64 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004c12:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004c16:	4b90      	ldr	r3, [pc, #576]	; (8004e58 <HAL_UART_IRQHandler+0x2c4>)
 8004c18:	4013      	ands	r3, r2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d106      	bne.n	8004c2c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8004c1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004c22:	4b8e      	ldr	r3, [pc, #568]	; (8004e5c <HAL_UART_IRQHandler+0x2c8>)
 8004c24:	4013      	ands	r3, r2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	f000 811c 	beq.w	8004e64 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004c2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c30:	f003 0301 	and.w	r3, r3, #1
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d011      	beq.n	8004c5c <HAL_UART_IRQHandler+0xc8>
 8004c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d00b      	beq.n	8004c5c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	2201      	movs	r2, #1
 8004c4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c52:	f043 0201 	orr.w	r2, r3, #1
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d011      	beq.n	8004c8c <HAL_UART_IRQHandler+0xf8>
 8004c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c6c:	f003 0301 	and.w	r3, r3, #1
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d00b      	beq.n	8004c8c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2202      	movs	r2, #2
 8004c7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004c82:	f043 0204 	orr.w	r2, r3, #4
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d011      	beq.n	8004cbc <HAL_UART_IRQHandler+0x128>
 8004c98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c9c:	f003 0301 	and.w	r3, r3, #1
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00b      	beq.n	8004cbc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2204      	movs	r2, #4
 8004caa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cb2:	f043 0202 	orr.w	r2, r3, #2
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004cbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cc0:	f003 0308 	and.w	r3, r3, #8
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d017      	beq.n	8004cf8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004cc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ccc:	f003 0320 	and.w	r3, r3, #32
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d105      	bne.n	8004ce0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004cd4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004cd8:	4b5f      	ldr	r3, [pc, #380]	; (8004e58 <HAL_UART_IRQHandler+0x2c4>)
 8004cda:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00b      	beq.n	8004cf8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2208      	movs	r2, #8
 8004ce6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004cee:	f043 0208 	orr.w	r2, r3, #8
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d012      	beq.n	8004d2a <HAL_UART_IRQHandler+0x196>
 8004d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d00c      	beq.n	8004d2a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d20:	f043 0220 	orr.w	r2, r3, #32
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	f000 8259 	beq.w	80051e8 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004d36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d3a:	f003 0320 	and.w	r3, r3, #32
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d013      	beq.n	8004d6a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004d42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d46:	f003 0320 	and.w	r3, r3, #32
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d105      	bne.n	8004d5a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004d4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d007      	beq.n	8004d6a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004d70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7e:	2b40      	cmp	r3, #64	; 0x40
 8004d80:	d005      	beq.n	8004d8e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004d82:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d86:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d058      	beq.n	8004e40 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f001 f951 	bl	8006036 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	689b      	ldr	r3, [r3, #8]
 8004d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d9e:	2b40      	cmp	r3, #64	; 0x40
 8004da0:	d148      	bne.n	8004e34 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3308      	adds	r3, #8
 8004da8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004db0:	e853 3f00 	ldrex	r3, [r3]
 8004db4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004db8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	3308      	adds	r3, #8
 8004dca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004dce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004dd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004dda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004dde:	e841 2300 	strex	r3, r2, [r1]
 8004de2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004de6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1d9      	bne.n	8004da2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d017      	beq.n	8004e28 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dfe:	4a18      	ldr	r2, [pc, #96]	; (8004e60 <HAL_UART_IRQHandler+0x2cc>)
 8004e00:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f7fc fd21 	bl	8001850 <HAL_DMA_Abort_IT>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d01f      	beq.n	8004e54 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8004e22:	4610      	mov	r0, r2
 8004e24:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e26:	e015      	b.n	8004e54 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e32:	e00f      	b.n	8004e54 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e3e:	e009      	b.n	8004e54 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004e46:	6878      	ldr	r0, [r7, #4]
 8004e48:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8004e52:	e1c9      	b.n	80051e8 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e54:	bf00      	nop
    return;
 8004e56:	e1c7      	b.n	80051e8 <HAL_UART_IRQHandler+0x654>
 8004e58:	10000001 	.word	0x10000001
 8004e5c:	04000120 	.word	0x04000120
 8004e60:	08006245 	.word	0x08006245

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	f040 8157 	bne.w	800511c <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004e6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e72:	f003 0310 	and.w	r3, r3, #16
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 8150 	beq.w	800511c <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e80:	f003 0310 	and.w	r3, r3, #16
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	f000 8149 	beq.w	800511c <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2210      	movs	r2, #16
 8004e90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e9c:	2b40      	cmp	r3, #64	; 0x40
 8004e9e:	f040 80bd 	bne.w	800501c <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004eb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f000 8199 	beq.w	80051ec <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004ec0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	f080 8191 	bcs.w	80051ec <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ed0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f003 0320 	and.w	r3, r3, #32
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f040 8087 	bne.w	8004ff6 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ef4:	e853 3f00 	ldrex	r3, [r3]
 8004ef8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004efc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f04:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004f12:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004f16:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f1a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004f1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f22:	e841 2300 	strex	r3, r2, [r1]
 8004f26:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004f2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1da      	bne.n	8004ee8 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	3308      	adds	r3, #8
 8004f38:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f3c:	e853 3f00 	ldrex	r3, [r3]
 8004f40:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f44:	f023 0301 	bic.w	r3, r3, #1
 8004f48:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3308      	adds	r3, #8
 8004f52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f56:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004f5a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f5e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f62:	e841 2300 	strex	r3, r2, [r1]
 8004f66:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f68:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e1      	bne.n	8004f32 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3308      	adds	r3, #8
 8004f74:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f78:	e853 3f00 	ldrex	r3, [r3]
 8004f7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f80:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f84:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	3308      	adds	r3, #8
 8004f8e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f92:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f94:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f96:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f9a:	e841 2300 	strex	r3, r2, [r1]
 8004f9e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004fa0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1e3      	bne.n	8004f6e <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2220      	movs	r2, #32
 8004faa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fbc:	e853 3f00 	ldrex	r3, [r3]
 8004fc0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004fc2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004fc4:	f023 0310 	bic.w	r3, r3, #16
 8004fc8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004fd6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004fd8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fda:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004fdc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fde:	e841 2300 	strex	r3, r2, [r1]
 8004fe2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004fe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1e4      	bne.n	8004fb4 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f7fc fbd4 	bl	800179e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	f8b2 105c 	ldrh.w	r1, [r2, #92]	; 0x5c
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	; 0x5e
 800500e:	b292      	uxth	r2, r2
 8005010:	1a8a      	subs	r2, r1, r2
 8005012:	b292      	uxth	r2, r2
 8005014:	4611      	mov	r1, r2
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800501a:	e0e7      	b.n	80051ec <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005028:	b29b      	uxth	r3, r3
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005036:	b29b      	uxth	r3, r3
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 80d9 	beq.w	80051f0 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 800503e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005042:	2b00      	cmp	r3, #0
 8005044:	f000 80d4 	beq.w	80051f0 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005050:	e853 3f00 	ldrex	r3, [r3]
 8005054:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005056:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005058:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800505c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	461a      	mov	r2, r3
 8005066:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800506a:	647b      	str	r3, [r7, #68]	; 0x44
 800506c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005070:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005072:	e841 2300 	strex	r3, r2, [r1]
 8005076:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005078:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1e4      	bne.n	8005048 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	3308      	adds	r3, #8
 8005084:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005088:	e853 3f00 	ldrex	r3, [r3]
 800508c:	623b      	str	r3, [r7, #32]
   return(result);
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005094:	f023 0301 	bic.w	r3, r3, #1
 8005098:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	3308      	adds	r3, #8
 80050a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80050a6:	633a      	str	r2, [r7, #48]	; 0x30
 80050a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80050ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050ae:	e841 2300 	strex	r3, r2, [r1]
 80050b2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80050b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1e1      	bne.n	800507e <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2220      	movs	r2, #32
 80050be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2200      	movs	r2, #0
 80050c6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d4:	693b      	ldr	r3, [r7, #16]
 80050d6:	e853 3f00 	ldrex	r3, [r3]
 80050da:	60fb      	str	r3, [r7, #12]
   return(result);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 0310 	bic.w	r3, r3, #16
 80050e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	461a      	mov	r2, r3
 80050ec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80050f0:	61fb      	str	r3, [r7, #28]
 80050f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f4:	69b9      	ldr	r1, [r7, #24]
 80050f6:	69fa      	ldr	r2, [r7, #28]
 80050f8:	e841 2300 	strex	r3, r2, [r1]
 80050fc:	617b      	str	r3, [r7, #20]
   return(result);
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1e4      	bne.n	80050ce <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2202      	movs	r2, #2
 8005108:	671a      	str	r2, [r3, #112]	; 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005110:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8005114:	4611      	mov	r1, r2
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800511a:	e069      	b.n	80051f0 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800511c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005120:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d010      	beq.n	800514a <HAL_UART_IRQHandler+0x5b6>
 8005128:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800512c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d00a      	beq.n	800514a <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800513c:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8005144:	6878      	ldr	r0, [r7, #4]
 8005146:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005148:	e055      	b.n	80051f6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800514a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800514e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005152:	2b00      	cmp	r3, #0
 8005154:	d014      	beq.n	8005180 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005156:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800515a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800515e:	2b00      	cmp	r3, #0
 8005160:	d105      	bne.n	800516e <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005162:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005166:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800516a:	2b00      	cmp	r3, #0
 800516c:	d008      	beq.n	8005180 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005172:	2b00      	cmp	r3, #0
 8005174:	d03e      	beq.n	80051f4 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	4798      	blx	r3
    }
    return;
 800517e:	e039      	b.n	80051f4 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005180:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005188:	2b00      	cmp	r3, #0
 800518a:	d009      	beq.n	80051a0 <HAL_UART_IRQHandler+0x60c>
 800518c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005194:	2b00      	cmp	r3, #0
 8005196:	d003      	beq.n	80051a0 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8005198:	6878      	ldr	r0, [r7, #4]
 800519a:	f001 f86b 	bl	8006274 <UART_EndTransmit_IT>
    return;
 800519e:	e02a      	b.n	80051f6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80051a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051a4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00b      	beq.n	80051c4 <HAL_UART_IRQHandler+0x630>
 80051ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051b0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d005      	beq.n	80051c4 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051c2:	e018      	b.n	80051f6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80051c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d012      	beq.n	80051f6 <HAL_UART_IRQHandler+0x662>
 80051d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	da0e      	bge.n	80051f6 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80051e2:	e008      	b.n	80051f6 <HAL_UART_IRQHandler+0x662>
      return;
 80051e4:	bf00      	nop
 80051e6:	e006      	b.n	80051f6 <HAL_UART_IRQHandler+0x662>
    return;
 80051e8:	bf00      	nop
 80051ea:	e004      	b.n	80051f6 <HAL_UART_IRQHandler+0x662>
      return;
 80051ec:	bf00      	nop
 80051ee:	e002      	b.n	80051f6 <HAL_UART_IRQHandler+0x662>
      return;
 80051f0:	bf00      	nop
 80051f2:	e000      	b.n	80051f6 <HAL_UART_IRQHandler+0x662>
    return;
 80051f4:	bf00      	nop
  }
}
 80051f6:	37e8      	adds	r7, #232	; 0xe8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005204:	bf00      	nop
 8005206:	370c      	adds	r7, #12
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr

08005210 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005210:	b480      	push	{r7}
 8005212:	b083      	sub	sp, #12
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005218:	bf00      	nop
 800521a:	370c      	adds	r7, #12
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr

08005224 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800522c:	bf00      	nop
 800522e:	370c      	adds	r7, #12
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr

08005238 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005238:	b480      	push	{r7}
 800523a:	b083      	sub	sp, #12
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005240:	bf00      	nop
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524a:	4770      	bx	lr

0800524c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	460b      	mov	r3, r1
 80052a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
 80052bc:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a09      	ldr	r2, [pc, #36]	; (80052e8 <HAL_UART_ReceiverTimeout_Config+0x34>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d009      	beq.n	80052dc <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	695b      	ldr	r3, [r3, #20]
 80052ce:	f003 417f 	and.w	r1, r3, #4278190080	; 0xff000000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	683a      	ldr	r2, [r7, #0]
 80052d8:	430a      	orrs	r2, r1
 80052da:	615a      	str	r2, [r3, #20]
  }
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr
 80052e8:	40008000 	.word	0x40008000

080052ec <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a18      	ldr	r2, [pc, #96]	; (800535c <HAL_UART_EnableReceiverTimeout+0x70>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d027      	beq.n	800534e <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005304:	2b20      	cmp	r3, #32
 8005306:	d120      	bne.n	800534a <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800530e:	2b01      	cmp	r3, #1
 8005310:	d101      	bne.n	8005316 <HAL_UART_EnableReceiverTimeout+0x2a>
 8005312:	2302      	movs	r3, #2
 8005314:	e01c      	b.n	8005350 <HAL_UART_EnableReceiverTimeout+0x64>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2224      	movs	r2, #36	; 0x24
 8005322:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005334:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2220      	movs	r2, #32
 800533a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2200      	movs	r2, #0
 8005342:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      return HAL_OK;
 8005346:	2300      	movs	r3, #0
 8005348:	e002      	b.n	8005350 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800534a:	2302      	movs	r3, #2
 800534c:	e000      	b.n	8005350 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
  }
}
 8005350:	4618      	mov	r0, r3
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr
 800535c:	40008000 	.word	0x40008000

08005360 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	4a1a      	ldr	r2, [pc, #104]	; (80053d4 <UART_InitCallbacksToDefault+0x74>)
 800536c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	4a19      	ldr	r2, [pc, #100]	; (80053d8 <UART_InitCallbacksToDefault+0x78>)
 8005374:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4a18      	ldr	r2, [pc, #96]	; (80053dc <UART_InitCallbacksToDefault+0x7c>)
 800537c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a17      	ldr	r2, [pc, #92]	; (80053e0 <UART_InitCallbacksToDefault+0x80>)
 8005384:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a16      	ldr	r2, [pc, #88]	; (80053e4 <UART_InitCallbacksToDefault+0x84>)
 800538c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a15      	ldr	r2, [pc, #84]	; (80053e8 <UART_InitCallbacksToDefault+0x88>)
 8005394:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a14      	ldr	r2, [pc, #80]	; (80053ec <UART_InitCallbacksToDefault+0x8c>)
 800539c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a13      	ldr	r2, [pc, #76]	; (80053f0 <UART_InitCallbacksToDefault+0x90>)
 80053a4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	4a12      	ldr	r2, [pc, #72]	; (80053f4 <UART_InitCallbacksToDefault+0x94>)
 80053ac:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	4a11      	ldr	r2, [pc, #68]	; (80053f8 <UART_InitCallbacksToDefault+0x98>)
 80053b4:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	4a10      	ldr	r2, [pc, #64]	; (80053fc <UART_InitCallbacksToDefault+0x9c>)
 80053bc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a0f      	ldr	r2, [pc, #60]	; (8005400 <UART_InitCallbacksToDefault+0xa0>)
 80053c4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr
 80053d4:	08005211 	.word	0x08005211
 80053d8:	080051fd 	.word	0x080051fd
 80053dc:	08005239 	.word	0x08005239
 80053e0:	08005225 	.word	0x08005225
 80053e4:	0800524d 	.word	0x0800524d
 80053e8:	08005261 	.word	0x08005261
 80053ec:	08005275 	.word	0x08005275
 80053f0:	08005289 	.word	0x08005289
 80053f4:	08006d31 	.word	0x08006d31
 80053f8:	08006d45 	.word	0x08006d45
 80053fc:	08006d59 	.word	0x08006d59
 8005400:	0800529d 	.word	0x0800529d

08005404 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005408:	b08c      	sub	sp, #48	; 0x30
 800540a:	af00      	add	r7, sp, #0
 800540c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800540e:	2300      	movs	r3, #0
 8005410:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	431a      	orrs	r2, r3
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	431a      	orrs	r2, r3
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	4313      	orrs	r3, r2
 800542a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	4baa      	ldr	r3, [pc, #680]	; (80056dc <UART_SetConfig+0x2d8>)
 8005434:	4013      	ands	r3, r2
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	6812      	ldr	r2, [r2, #0]
 800543a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800543c:	430b      	orrs	r3, r1
 800543e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	68da      	ldr	r2, [r3, #12]
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800545c:	697b      	ldr	r3, [r7, #20]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a9f      	ldr	r2, [pc, #636]	; (80056e0 <UART_SetConfig+0x2dc>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d004      	beq.n	8005470 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800546c:	4313      	orrs	r3, r2
 800546e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800547a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800547e:	697a      	ldr	r2, [r7, #20]
 8005480:	6812      	ldr	r2, [r2, #0]
 8005482:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005484:	430b      	orrs	r3, r1
 8005486:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800548e:	f023 010f 	bic.w	r1, r3, #15
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	430a      	orrs	r2, r1
 800549c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a90      	ldr	r2, [pc, #576]	; (80056e4 <UART_SetConfig+0x2e0>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d125      	bne.n	80054f4 <UART_SetConfig+0xf0>
 80054a8:	4b8f      	ldr	r3, [pc, #572]	; (80056e8 <UART_SetConfig+0x2e4>)
 80054aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ae:	f003 0303 	and.w	r3, r3, #3
 80054b2:	2b03      	cmp	r3, #3
 80054b4:	d81a      	bhi.n	80054ec <UART_SetConfig+0xe8>
 80054b6:	a201      	add	r2, pc, #4	; (adr r2, 80054bc <UART_SetConfig+0xb8>)
 80054b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054bc:	080054cd 	.word	0x080054cd
 80054c0:	080054dd 	.word	0x080054dd
 80054c4:	080054d5 	.word	0x080054d5
 80054c8:	080054e5 	.word	0x080054e5
 80054cc:	2301      	movs	r3, #1
 80054ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054d2:	e116      	b.n	8005702 <UART_SetConfig+0x2fe>
 80054d4:	2302      	movs	r3, #2
 80054d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054da:	e112      	b.n	8005702 <UART_SetConfig+0x2fe>
 80054dc:	2304      	movs	r3, #4
 80054de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054e2:	e10e      	b.n	8005702 <UART_SetConfig+0x2fe>
 80054e4:	2308      	movs	r3, #8
 80054e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054ea:	e10a      	b.n	8005702 <UART_SetConfig+0x2fe>
 80054ec:	2310      	movs	r3, #16
 80054ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80054f2:	e106      	b.n	8005702 <UART_SetConfig+0x2fe>
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	4a7c      	ldr	r2, [pc, #496]	; (80056ec <UART_SetConfig+0x2e8>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d138      	bne.n	8005570 <UART_SetConfig+0x16c>
 80054fe:	4b7a      	ldr	r3, [pc, #488]	; (80056e8 <UART_SetConfig+0x2e4>)
 8005500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005504:	f003 030c 	and.w	r3, r3, #12
 8005508:	2b0c      	cmp	r3, #12
 800550a:	d82d      	bhi.n	8005568 <UART_SetConfig+0x164>
 800550c:	a201      	add	r2, pc, #4	; (adr r2, 8005514 <UART_SetConfig+0x110>)
 800550e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005512:	bf00      	nop
 8005514:	08005549 	.word	0x08005549
 8005518:	08005569 	.word	0x08005569
 800551c:	08005569 	.word	0x08005569
 8005520:	08005569 	.word	0x08005569
 8005524:	08005559 	.word	0x08005559
 8005528:	08005569 	.word	0x08005569
 800552c:	08005569 	.word	0x08005569
 8005530:	08005569 	.word	0x08005569
 8005534:	08005551 	.word	0x08005551
 8005538:	08005569 	.word	0x08005569
 800553c:	08005569 	.word	0x08005569
 8005540:	08005569 	.word	0x08005569
 8005544:	08005561 	.word	0x08005561
 8005548:	2300      	movs	r3, #0
 800554a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800554e:	e0d8      	b.n	8005702 <UART_SetConfig+0x2fe>
 8005550:	2302      	movs	r3, #2
 8005552:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005556:	e0d4      	b.n	8005702 <UART_SetConfig+0x2fe>
 8005558:	2304      	movs	r3, #4
 800555a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800555e:	e0d0      	b.n	8005702 <UART_SetConfig+0x2fe>
 8005560:	2308      	movs	r3, #8
 8005562:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005566:	e0cc      	b.n	8005702 <UART_SetConfig+0x2fe>
 8005568:	2310      	movs	r3, #16
 800556a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800556e:	e0c8      	b.n	8005702 <UART_SetConfig+0x2fe>
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a5e      	ldr	r2, [pc, #376]	; (80056f0 <UART_SetConfig+0x2ec>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d125      	bne.n	80055c6 <UART_SetConfig+0x1c2>
 800557a:	4b5b      	ldr	r3, [pc, #364]	; (80056e8 <UART_SetConfig+0x2e4>)
 800557c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005580:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005584:	2b30      	cmp	r3, #48	; 0x30
 8005586:	d016      	beq.n	80055b6 <UART_SetConfig+0x1b2>
 8005588:	2b30      	cmp	r3, #48	; 0x30
 800558a:	d818      	bhi.n	80055be <UART_SetConfig+0x1ba>
 800558c:	2b20      	cmp	r3, #32
 800558e:	d00a      	beq.n	80055a6 <UART_SetConfig+0x1a2>
 8005590:	2b20      	cmp	r3, #32
 8005592:	d814      	bhi.n	80055be <UART_SetConfig+0x1ba>
 8005594:	2b00      	cmp	r3, #0
 8005596:	d002      	beq.n	800559e <UART_SetConfig+0x19a>
 8005598:	2b10      	cmp	r3, #16
 800559a:	d008      	beq.n	80055ae <UART_SetConfig+0x1aa>
 800559c:	e00f      	b.n	80055be <UART_SetConfig+0x1ba>
 800559e:	2300      	movs	r3, #0
 80055a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055a4:	e0ad      	b.n	8005702 <UART_SetConfig+0x2fe>
 80055a6:	2302      	movs	r3, #2
 80055a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055ac:	e0a9      	b.n	8005702 <UART_SetConfig+0x2fe>
 80055ae:	2304      	movs	r3, #4
 80055b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055b4:	e0a5      	b.n	8005702 <UART_SetConfig+0x2fe>
 80055b6:	2308      	movs	r3, #8
 80055b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055bc:	e0a1      	b.n	8005702 <UART_SetConfig+0x2fe>
 80055be:	2310      	movs	r3, #16
 80055c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055c4:	e09d      	b.n	8005702 <UART_SetConfig+0x2fe>
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a4a      	ldr	r2, [pc, #296]	; (80056f4 <UART_SetConfig+0x2f0>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d125      	bne.n	800561c <UART_SetConfig+0x218>
 80055d0:	4b45      	ldr	r3, [pc, #276]	; (80056e8 <UART_SetConfig+0x2e4>)
 80055d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80055da:	2bc0      	cmp	r3, #192	; 0xc0
 80055dc:	d016      	beq.n	800560c <UART_SetConfig+0x208>
 80055de:	2bc0      	cmp	r3, #192	; 0xc0
 80055e0:	d818      	bhi.n	8005614 <UART_SetConfig+0x210>
 80055e2:	2b80      	cmp	r3, #128	; 0x80
 80055e4:	d00a      	beq.n	80055fc <UART_SetConfig+0x1f8>
 80055e6:	2b80      	cmp	r3, #128	; 0x80
 80055e8:	d814      	bhi.n	8005614 <UART_SetConfig+0x210>
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d002      	beq.n	80055f4 <UART_SetConfig+0x1f0>
 80055ee:	2b40      	cmp	r3, #64	; 0x40
 80055f0:	d008      	beq.n	8005604 <UART_SetConfig+0x200>
 80055f2:	e00f      	b.n	8005614 <UART_SetConfig+0x210>
 80055f4:	2300      	movs	r3, #0
 80055f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80055fa:	e082      	b.n	8005702 <UART_SetConfig+0x2fe>
 80055fc:	2302      	movs	r3, #2
 80055fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005602:	e07e      	b.n	8005702 <UART_SetConfig+0x2fe>
 8005604:	2304      	movs	r3, #4
 8005606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800560a:	e07a      	b.n	8005702 <UART_SetConfig+0x2fe>
 800560c:	2308      	movs	r3, #8
 800560e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005612:	e076      	b.n	8005702 <UART_SetConfig+0x2fe>
 8005614:	2310      	movs	r3, #16
 8005616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800561a:	e072      	b.n	8005702 <UART_SetConfig+0x2fe>
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a35      	ldr	r2, [pc, #212]	; (80056f8 <UART_SetConfig+0x2f4>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d12a      	bne.n	800567c <UART_SetConfig+0x278>
 8005626:	4b30      	ldr	r3, [pc, #192]	; (80056e8 <UART_SetConfig+0x2e4>)
 8005628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800562c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005630:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005634:	d01a      	beq.n	800566c <UART_SetConfig+0x268>
 8005636:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800563a:	d81b      	bhi.n	8005674 <UART_SetConfig+0x270>
 800563c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005640:	d00c      	beq.n	800565c <UART_SetConfig+0x258>
 8005642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005646:	d815      	bhi.n	8005674 <UART_SetConfig+0x270>
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <UART_SetConfig+0x250>
 800564c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005650:	d008      	beq.n	8005664 <UART_SetConfig+0x260>
 8005652:	e00f      	b.n	8005674 <UART_SetConfig+0x270>
 8005654:	2300      	movs	r3, #0
 8005656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800565a:	e052      	b.n	8005702 <UART_SetConfig+0x2fe>
 800565c:	2302      	movs	r3, #2
 800565e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005662:	e04e      	b.n	8005702 <UART_SetConfig+0x2fe>
 8005664:	2304      	movs	r3, #4
 8005666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800566a:	e04a      	b.n	8005702 <UART_SetConfig+0x2fe>
 800566c:	2308      	movs	r3, #8
 800566e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005672:	e046      	b.n	8005702 <UART_SetConfig+0x2fe>
 8005674:	2310      	movs	r3, #16
 8005676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800567a:	e042      	b.n	8005702 <UART_SetConfig+0x2fe>
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a17      	ldr	r2, [pc, #92]	; (80056e0 <UART_SetConfig+0x2dc>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d13a      	bne.n	80056fc <UART_SetConfig+0x2f8>
 8005686:	4b18      	ldr	r3, [pc, #96]	; (80056e8 <UART_SetConfig+0x2e4>)
 8005688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800568c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005690:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005694:	d01a      	beq.n	80056cc <UART_SetConfig+0x2c8>
 8005696:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800569a:	d81b      	bhi.n	80056d4 <UART_SetConfig+0x2d0>
 800569c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056a0:	d00c      	beq.n	80056bc <UART_SetConfig+0x2b8>
 80056a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80056a6:	d815      	bhi.n	80056d4 <UART_SetConfig+0x2d0>
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d003      	beq.n	80056b4 <UART_SetConfig+0x2b0>
 80056ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056b0:	d008      	beq.n	80056c4 <UART_SetConfig+0x2c0>
 80056b2:	e00f      	b.n	80056d4 <UART_SetConfig+0x2d0>
 80056b4:	2300      	movs	r3, #0
 80056b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056ba:	e022      	b.n	8005702 <UART_SetConfig+0x2fe>
 80056bc:	2302      	movs	r3, #2
 80056be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056c2:	e01e      	b.n	8005702 <UART_SetConfig+0x2fe>
 80056c4:	2304      	movs	r3, #4
 80056c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056ca:	e01a      	b.n	8005702 <UART_SetConfig+0x2fe>
 80056cc:	2308      	movs	r3, #8
 80056ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056d2:	e016      	b.n	8005702 <UART_SetConfig+0x2fe>
 80056d4:	2310      	movs	r3, #16
 80056d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80056da:	e012      	b.n	8005702 <UART_SetConfig+0x2fe>
 80056dc:	cfff69f3 	.word	0xcfff69f3
 80056e0:	40008000 	.word	0x40008000
 80056e4:	40013800 	.word	0x40013800
 80056e8:	40021000 	.word	0x40021000
 80056ec:	40004400 	.word	0x40004400
 80056f0:	40004800 	.word	0x40004800
 80056f4:	40004c00 	.word	0x40004c00
 80056f8:	40005000 	.word	0x40005000
 80056fc:	2310      	movs	r3, #16
 80056fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4aae      	ldr	r2, [pc, #696]	; (80059c0 <UART_SetConfig+0x5bc>)
 8005708:	4293      	cmp	r3, r2
 800570a:	f040 8097 	bne.w	800583c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800570e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005712:	2b08      	cmp	r3, #8
 8005714:	d823      	bhi.n	800575e <UART_SetConfig+0x35a>
 8005716:	a201      	add	r2, pc, #4	; (adr r2, 800571c <UART_SetConfig+0x318>)
 8005718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571c:	08005741 	.word	0x08005741
 8005720:	0800575f 	.word	0x0800575f
 8005724:	08005749 	.word	0x08005749
 8005728:	0800575f 	.word	0x0800575f
 800572c:	0800574f 	.word	0x0800574f
 8005730:	0800575f 	.word	0x0800575f
 8005734:	0800575f 	.word	0x0800575f
 8005738:	0800575f 	.word	0x0800575f
 800573c:	08005757 	.word	0x08005757
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005740:	f7fd f976 	bl	8002a30 <HAL_RCC_GetPCLK1Freq>
 8005744:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005746:	e010      	b.n	800576a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005748:	4b9e      	ldr	r3, [pc, #632]	; (80059c4 <UART_SetConfig+0x5c0>)
 800574a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800574c:	e00d      	b.n	800576a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800574e:	f7fd f901 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 8005752:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005754:	e009      	b.n	800576a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005756:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800575a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800575c:	e005      	b.n	800576a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800575e:	2300      	movs	r3, #0
 8005760:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005768:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800576a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 8130 	beq.w	80059d2 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	4a94      	ldr	r2, [pc, #592]	; (80059c8 <UART_SetConfig+0x5c4>)
 8005778:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800577c:	461a      	mov	r2, r3
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	fbb3 f3f2 	udiv	r3, r3, r2
 8005784:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	685a      	ldr	r2, [r3, #4]
 800578a:	4613      	mov	r3, r2
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	4413      	add	r3, r2
 8005790:	69ba      	ldr	r2, [r7, #24]
 8005792:	429a      	cmp	r2, r3
 8005794:	d305      	bcc.n	80057a2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	429a      	cmp	r2, r3
 80057a0:	d903      	bls.n	80057aa <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80057a8:	e113      	b.n	80059d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ac:	2200      	movs	r2, #0
 80057ae:	60bb      	str	r3, [r7, #8]
 80057b0:	60fa      	str	r2, [r7, #12]
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	4a84      	ldr	r2, [pc, #528]	; (80059c8 <UART_SetConfig+0x5c4>)
 80057b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057bc:	b29b      	uxth	r3, r3
 80057be:	2200      	movs	r2, #0
 80057c0:	603b      	str	r3, [r7, #0]
 80057c2:	607a      	str	r2, [r7, #4]
 80057c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80057c8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057cc:	f7fa fd24 	bl	8000218 <__aeabi_uldivmod>
 80057d0:	4602      	mov	r2, r0
 80057d2:	460b      	mov	r3, r1
 80057d4:	4610      	mov	r0, r2
 80057d6:	4619      	mov	r1, r3
 80057d8:	f04f 0200 	mov.w	r2, #0
 80057dc:	f04f 0300 	mov.w	r3, #0
 80057e0:	020b      	lsls	r3, r1, #8
 80057e2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80057e6:	0202      	lsls	r2, r0, #8
 80057e8:	6979      	ldr	r1, [r7, #20]
 80057ea:	6849      	ldr	r1, [r1, #4]
 80057ec:	0849      	lsrs	r1, r1, #1
 80057ee:	2000      	movs	r0, #0
 80057f0:	460c      	mov	r4, r1
 80057f2:	4605      	mov	r5, r0
 80057f4:	eb12 0804 	adds.w	r8, r2, r4
 80057f8:	eb43 0905 	adc.w	r9, r3, r5
 80057fc:	697b      	ldr	r3, [r7, #20]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	2200      	movs	r2, #0
 8005802:	469a      	mov	sl, r3
 8005804:	4693      	mov	fp, r2
 8005806:	4652      	mov	r2, sl
 8005808:	465b      	mov	r3, fp
 800580a:	4640      	mov	r0, r8
 800580c:	4649      	mov	r1, r9
 800580e:	f7fa fd03 	bl	8000218 <__aeabi_uldivmod>
 8005812:	4602      	mov	r2, r0
 8005814:	460b      	mov	r3, r1
 8005816:	4613      	mov	r3, r2
 8005818:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800581a:	6a3b      	ldr	r3, [r7, #32]
 800581c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005820:	d308      	bcc.n	8005834 <UART_SetConfig+0x430>
 8005822:	6a3b      	ldr	r3, [r7, #32]
 8005824:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005828:	d204      	bcs.n	8005834 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	6a3a      	ldr	r2, [r7, #32]
 8005830:	60da      	str	r2, [r3, #12]
 8005832:	e0ce      	b.n	80059d2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800583a:	e0ca      	b.n	80059d2 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	69db      	ldr	r3, [r3, #28]
 8005840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005844:	d166      	bne.n	8005914 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005846:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800584a:	2b08      	cmp	r3, #8
 800584c:	d827      	bhi.n	800589e <UART_SetConfig+0x49a>
 800584e:	a201      	add	r2, pc, #4	; (adr r2, 8005854 <UART_SetConfig+0x450>)
 8005850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005854:	08005879 	.word	0x08005879
 8005858:	08005881 	.word	0x08005881
 800585c:	08005889 	.word	0x08005889
 8005860:	0800589f 	.word	0x0800589f
 8005864:	0800588f 	.word	0x0800588f
 8005868:	0800589f 	.word	0x0800589f
 800586c:	0800589f 	.word	0x0800589f
 8005870:	0800589f 	.word	0x0800589f
 8005874:	08005897 	.word	0x08005897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005878:	f7fd f8da 	bl	8002a30 <HAL_RCC_GetPCLK1Freq>
 800587c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800587e:	e014      	b.n	80058aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005880:	f7fd f8ec 	bl	8002a5c <HAL_RCC_GetPCLK2Freq>
 8005884:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005886:	e010      	b.n	80058aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005888:	4b4e      	ldr	r3, [pc, #312]	; (80059c4 <UART_SetConfig+0x5c0>)
 800588a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800588c:	e00d      	b.n	80058aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800588e:	f7fd f861 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 8005892:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005894:	e009      	b.n	80058aa <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800589a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800589c:	e005      	b.n	80058aa <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800589e:	2300      	movs	r3, #0
 80058a0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80058a8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80058aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f000 8090 	beq.w	80059d2 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80058b2:	697b      	ldr	r3, [r7, #20]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b6:	4a44      	ldr	r2, [pc, #272]	; (80059c8 <UART_SetConfig+0x5c4>)
 80058b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80058bc:	461a      	mov	r2, r3
 80058be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80058c4:	005a      	lsls	r2, r3, #1
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	085b      	lsrs	r3, r3, #1
 80058cc:	441a      	add	r2, r3
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058d8:	6a3b      	ldr	r3, [r7, #32]
 80058da:	2b0f      	cmp	r3, #15
 80058dc:	d916      	bls.n	800590c <UART_SetConfig+0x508>
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058e4:	d212      	bcs.n	800590c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058e6:	6a3b      	ldr	r3, [r7, #32]
 80058e8:	b29b      	uxth	r3, r3
 80058ea:	f023 030f 	bic.w	r3, r3, #15
 80058ee:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80058f0:	6a3b      	ldr	r3, [r7, #32]
 80058f2:	085b      	lsrs	r3, r3, #1
 80058f4:	b29b      	uxth	r3, r3
 80058f6:	f003 0307 	and.w	r3, r3, #7
 80058fa:	b29a      	uxth	r2, r3
 80058fc:	8bfb      	ldrh	r3, [r7, #30]
 80058fe:	4313      	orrs	r3, r2
 8005900:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	8bfa      	ldrh	r2, [r7, #30]
 8005908:	60da      	str	r2, [r3, #12]
 800590a:	e062      	b.n	80059d2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800590c:	2301      	movs	r3, #1
 800590e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005912:	e05e      	b.n	80059d2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005914:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005918:	2b08      	cmp	r3, #8
 800591a:	d828      	bhi.n	800596e <UART_SetConfig+0x56a>
 800591c:	a201      	add	r2, pc, #4	; (adr r2, 8005924 <UART_SetConfig+0x520>)
 800591e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005922:	bf00      	nop
 8005924:	08005949 	.word	0x08005949
 8005928:	08005951 	.word	0x08005951
 800592c:	08005959 	.word	0x08005959
 8005930:	0800596f 	.word	0x0800596f
 8005934:	0800595f 	.word	0x0800595f
 8005938:	0800596f 	.word	0x0800596f
 800593c:	0800596f 	.word	0x0800596f
 8005940:	0800596f 	.word	0x0800596f
 8005944:	08005967 	.word	0x08005967
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005948:	f7fd f872 	bl	8002a30 <HAL_RCC_GetPCLK1Freq>
 800594c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800594e:	e014      	b.n	800597a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005950:	f7fd f884 	bl	8002a5c <HAL_RCC_GetPCLK2Freq>
 8005954:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005956:	e010      	b.n	800597a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005958:	4b1a      	ldr	r3, [pc, #104]	; (80059c4 <UART_SetConfig+0x5c0>)
 800595a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800595c:	e00d      	b.n	800597a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800595e:	f7fc fff9 	bl	8002954 <HAL_RCC_GetSysClockFreq>
 8005962:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005964:	e009      	b.n	800597a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005966:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800596a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800596c:	e005      	b.n	800597a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800596e:	2300      	movs	r3, #0
 8005970:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005978:	bf00      	nop
    }

    if (pclk != 0U)
 800597a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597c:	2b00      	cmp	r3, #0
 800597e:	d028      	beq.n	80059d2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	4a10      	ldr	r2, [pc, #64]	; (80059c8 <UART_SetConfig+0x5c4>)
 8005986:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800598a:	461a      	mov	r2, r3
 800598c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800598e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	085b      	lsrs	r3, r3, #1
 8005998:	441a      	add	r2, r3
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80059a4:	6a3b      	ldr	r3, [r7, #32]
 80059a6:	2b0f      	cmp	r3, #15
 80059a8:	d910      	bls.n	80059cc <UART_SetConfig+0x5c8>
 80059aa:	6a3b      	ldr	r3, [r7, #32]
 80059ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059b0:	d20c      	bcs.n	80059cc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80059b2:	6a3b      	ldr	r3, [r7, #32]
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	697b      	ldr	r3, [r7, #20]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	60da      	str	r2, [r3, #12]
 80059bc:	e009      	b.n	80059d2 <UART_SetConfig+0x5ce>
 80059be:	bf00      	nop
 80059c0:	40008000 	.word	0x40008000
 80059c4:	00f42400 	.word	0x00f42400
 80059c8:	08007018 	.word	0x08007018
      }
      else
      {
        ret = HAL_ERROR;
 80059cc:	2301      	movs	r3, #1
 80059ce:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	2201      	movs	r2, #1
 80059de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	2200      	movs	r2, #0
 80059e6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	2200      	movs	r2, #0
 80059ec:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80059ee:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3730      	adds	r7, #48	; 0x30
 80059f6:	46bd      	mov	sp, r7
 80059f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080059fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a08:	f003 0308 	and.w	r3, r3, #8
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d00a      	beq.n	8005a26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2a:	f003 0301 	and.w	r3, r3, #1
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d00a      	beq.n	8005a48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	430a      	orrs	r2, r1
 8005a46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4c:	f003 0302 	and.w	r3, r3, #2
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00a      	beq.n	8005a6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6e:	f003 0304 	and.w	r3, r3, #4
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d00a      	beq.n	8005a8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	685b      	ldr	r3, [r3, #4]
 8005a7c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	430a      	orrs	r2, r1
 8005a8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a90:	f003 0310 	and.w	r3, r3, #16
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00a      	beq.n	8005aae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab2:	f003 0320 	and.w	r3, r3, #32
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d00a      	beq.n	8005ad0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	689b      	ldr	r3, [r3, #8]
 8005ac0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ad4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d01a      	beq.n	8005b12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005af6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005afa:	d10a      	bne.n	8005b12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	685b      	ldr	r3, [r3, #4]
 8005b02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	430a      	orrs	r2, r1
 8005b10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d00a      	beq.n	8005b34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	430a      	orrs	r2, r1
 8005b32:	605a      	str	r2, [r3, #4]
  }
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b098      	sub	sp, #96	; 0x60
 8005b44:	af02      	add	r7, sp, #8
 8005b46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b50:	f7fb fbe6 	bl	8001320 <HAL_GetTick>
 8005b54:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f003 0308 	and.w	r3, r3, #8
 8005b60:	2b08      	cmp	r3, #8
 8005b62:	d12f      	bne.n	8005bc4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b68:	9300      	str	r3, [sp, #0]
 8005b6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f88e 	bl	8005c94 <UART_WaitOnFlagUntilTimeout>
 8005b78:	4603      	mov	r3, r0
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d022      	beq.n	8005bc4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b86:	e853 3f00 	ldrex	r3, [r3]
 8005b8a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b92:	653b      	str	r3, [r7, #80]	; 0x50
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	461a      	mov	r2, r3
 8005b9a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b9c:	647b      	str	r3, [r7, #68]	; 0x44
 8005b9e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ba0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005ba2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ba4:	e841 2300 	strex	r3, r2, [r1]
 8005ba8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005baa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d1e6      	bne.n	8005b7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2220      	movs	r2, #32
 8005bb4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005bc0:	2303      	movs	r3, #3
 8005bc2:	e063      	b.n	8005c8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0304 	and.w	r3, r3, #4
 8005bce:	2b04      	cmp	r3, #4
 8005bd0:	d149      	bne.n	8005c66 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005bd2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005bd6:	9300      	str	r3, [sp, #0]
 8005bd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 f857 	bl	8005c94 <UART_WaitOnFlagUntilTimeout>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d03c      	beq.n	8005c66 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf4:	e853 3f00 	ldrex	r3, [r3]
 8005bf8:	623b      	str	r3, [r7, #32]
   return(result);
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	461a      	mov	r2, r3
 8005c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c0a:	633b      	str	r3, [r7, #48]	; 0x30
 8005c0c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c12:	e841 2300 	strex	r3, r2, [r1]
 8005c16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1e6      	bne.n	8005bec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	3308      	adds	r3, #8
 8005c24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	e853 3f00 	ldrex	r3, [r3]
 8005c2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f023 0301 	bic.w	r3, r3, #1
 8005c34:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	3308      	adds	r3, #8
 8005c3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c3e:	61fa      	str	r2, [r7, #28]
 8005c40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c42:	69b9      	ldr	r1, [r7, #24]
 8005c44:	69fa      	ldr	r2, [r7, #28]
 8005c46:	e841 2300 	strex	r3, r2, [r1]
 8005c4a:	617b      	str	r3, [r7, #20]
   return(result);
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d1e5      	bne.n	8005c1e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2220      	movs	r2, #32
 8005c56:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c62:	2303      	movs	r3, #3
 8005c64:	e012      	b.n	8005c8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2220      	movs	r2, #32
 8005c72:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3758      	adds	r7, #88	; 0x58
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	603b      	str	r3, [r7, #0]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ca4:	e04f      	b.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cac:	d04b      	beq.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005cae:	f7fb fb37 	bl	8001320 <HAL_GetTick>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	69ba      	ldr	r2, [r7, #24]
 8005cba:	429a      	cmp	r2, r3
 8005cbc:	d302      	bcc.n	8005cc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d101      	bne.n	8005cc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005cc4:	2303      	movs	r3, #3
 8005cc6:	e04e      	b.n	8005d66 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0304 	and.w	r3, r3, #4
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d037      	beq.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	2b80      	cmp	r3, #128	; 0x80
 8005cda:	d034      	beq.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	2b40      	cmp	r3, #64	; 0x40
 8005ce0:	d031      	beq.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	69db      	ldr	r3, [r3, #28]
 8005ce8:	f003 0308 	and.w	r3, r3, #8
 8005cec:	2b08      	cmp	r3, #8
 8005cee:	d110      	bne.n	8005d12 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2208      	movs	r2, #8
 8005cf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f000 f99c 	bl	8006036 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2208      	movs	r2, #8
 8005d02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e029      	b.n	8005d66 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	69db      	ldr	r3, [r3, #28]
 8005d18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d20:	d111      	bne.n	8005d46 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005d2c:	68f8      	ldr	r0, [r7, #12]
 8005d2e:	f000 f982 	bl	8006036 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e00f      	b.n	8005d66 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	69da      	ldr	r2, [r3, #28]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	4013      	ands	r3, r2
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	bf0c      	ite	eq
 8005d56:	2301      	moveq	r3, #1
 8005d58:	2300      	movne	r3, #0
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	79fb      	ldrb	r3, [r7, #7]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d0a0      	beq.n	8005ca6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d64:	2300      	movs	r3, #0
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
	...

08005d70 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b0a3      	sub	sp, #140	; 0x8c
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	4613      	mov	r3, r2
 8005d7c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	68ba      	ldr	r2, [r7, #8]
 8005d82:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	88fa      	ldrh	r2, [r7, #6]
 8005d88:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	88fa      	ldrh	r2, [r7, #6]
 8005d90:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	2200      	movs	r2, #0
 8005d98:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005da2:	d10e      	bne.n	8005dc2 <UART_Start_Receive_IT+0x52>
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	691b      	ldr	r3, [r3, #16]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d105      	bne.n	8005db8 <UART_Start_Receive_IT+0x48>
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005db2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005db6:	e02d      	b.n	8005e14 <UART_Start_Receive_IT+0xa4>
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	22ff      	movs	r2, #255	; 0xff
 8005dbc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005dc0:	e028      	b.n	8005e14 <UART_Start_Receive_IT+0xa4>
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	689b      	ldr	r3, [r3, #8]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10d      	bne.n	8005de6 <UART_Start_Receive_IT+0x76>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d104      	bne.n	8005ddc <UART_Start_Receive_IT+0x6c>
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	22ff      	movs	r2, #255	; 0xff
 8005dd6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005dda:	e01b      	b.n	8005e14 <UART_Start_Receive_IT+0xa4>
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	227f      	movs	r2, #127	; 0x7f
 8005de0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005de4:	e016      	b.n	8005e14 <UART_Start_Receive_IT+0xa4>
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	689b      	ldr	r3, [r3, #8]
 8005dea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005dee:	d10d      	bne.n	8005e0c <UART_Start_Receive_IT+0x9c>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d104      	bne.n	8005e02 <UART_Start_Receive_IT+0x92>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	227f      	movs	r2, #127	; 0x7f
 8005dfc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005e00:	e008      	b.n	8005e14 <UART_Start_Receive_IT+0xa4>
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	223f      	movs	r2, #63	; 0x3f
 8005e06:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005e0a:	e003      	b.n	8005e14 <UART_Start_Receive_IT+0xa4>
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2222      	movs	r2, #34	; 0x22
 8005e20:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3308      	adds	r3, #8
 8005e2a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e2e:	e853 3f00 	ldrex	r3, [r3]
 8005e32:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005e34:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005e36:	f043 0301 	orr.w	r3, r3, #1
 8005e3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	3308      	adds	r3, #8
 8005e44:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005e48:	673a      	str	r2, [r7, #112]	; 0x70
 8005e4a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005e4e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005e50:	e841 2300 	strex	r3, r2, [r1]
 8005e54:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8005e56:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d1e3      	bne.n	8005e24 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e64:	d14f      	bne.n	8005f06 <UART_Start_Receive_IT+0x196>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005e6c:	88fa      	ldrh	r2, [r7, #6]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d349      	bcc.n	8005f06 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e7a:	d107      	bne.n	8005e8c <UART_Start_Receive_IT+0x11c>
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d103      	bne.n	8005e8c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	4a47      	ldr	r2, [pc, #284]	; (8005fa4 <UART_Start_Receive_IT+0x234>)
 8005e88:	675a      	str	r2, [r3, #116]	; 0x74
 8005e8a:	e002      	b.n	8005e92 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	4a46      	ldr	r2, [pc, #280]	; (8005fa8 <UART_Start_Receive_IT+0x238>)
 8005e90:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	691b      	ldr	r3, [r3, #16]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d01a      	beq.n	8005ed0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005ea2:	e853 3f00 	ldrex	r3, [r3]
 8005ea6:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005eaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005eae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005ebc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005ebe:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005ec2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ec4:	e841 2300 	strex	r3, r2, [r1]
 8005ec8:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005eca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1e4      	bne.n	8005e9a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	3308      	adds	r3, #8
 8005ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eda:	e853 3f00 	ldrex	r3, [r3]
 8005ede:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ee0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ee6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3308      	adds	r3, #8
 8005eee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005ef0:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ef2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ef6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ef8:	e841 2300 	strex	r3, r2, [r1]
 8005efc:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005efe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1e5      	bne.n	8005ed0 <UART_Start_Receive_IT+0x160>
 8005f04:	e046      	b.n	8005f94 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f0e:	d107      	bne.n	8005f20 <UART_Start_Receive_IT+0x1b0>
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d103      	bne.n	8005f20 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	4a24      	ldr	r2, [pc, #144]	; (8005fac <UART_Start_Receive_IT+0x23c>)
 8005f1c:	675a      	str	r2, [r3, #116]	; 0x74
 8005f1e:	e002      	b.n	8005f26 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4a23      	ldr	r2, [pc, #140]	; (8005fb0 <UART_Start_Receive_IT+0x240>)
 8005f24:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d019      	beq.n	8005f62 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f36:	e853 3f00 	ldrex	r3, [r3]
 8005f3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005f42:	677b      	str	r3, [r7, #116]	; 0x74
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	461a      	mov	r2, r3
 8005f4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8005f4e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f50:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005f52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f54:	e841 2300 	strex	r3, r2, [r1]
 8005f58:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1e6      	bne.n	8005f2e <UART_Start_Receive_IT+0x1be>
 8005f60:	e018      	b.n	8005f94 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	e853 3f00 	ldrex	r3, [r3]
 8005f6e:	613b      	str	r3, [r7, #16]
   return(result);
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f043 0320 	orr.w	r3, r3, #32
 8005f76:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	461a      	mov	r2, r3
 8005f7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f80:	623b      	str	r3, [r7, #32]
 8005f82:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f84:	69f9      	ldr	r1, [r7, #28]
 8005f86:	6a3a      	ldr	r2, [r7, #32]
 8005f88:	e841 2300 	strex	r3, r2, [r1]
 8005f8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d1e6      	bne.n	8005f62 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	378c      	adds	r7, #140	; 0x8c
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa0:	4770      	bx	lr
 8005fa2:	bf00      	nop
 8005fa4:	080069bd 	.word	0x080069bd
 8005fa8:	08006651 	.word	0x08006651
 8005fac:	08006491 	.word	0x08006491
 8005fb0:	080062d1 	.word	0x080062d1

08005fb4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b08f      	sub	sp, #60	; 0x3c
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	e853 3f00 	ldrex	r3, [r3]
 8005fc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005fd0:	637b      	str	r3, [r7, #52]	; 0x34
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005fdc:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005fe0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005fe2:	e841 2300 	strex	r3, r2, [r1]
 8005fe6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1e6      	bne.n	8005fbc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3308      	adds	r3, #8
 8005ff4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	e853 3f00 	ldrex	r3, [r3]
 8005ffc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006004:	633b      	str	r3, [r7, #48]	; 0x30
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	3308      	adds	r3, #8
 800600c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800600e:	61ba      	str	r2, [r7, #24]
 8006010:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006012:	6979      	ldr	r1, [r7, #20]
 8006014:	69ba      	ldr	r2, [r7, #24]
 8006016:	e841 2300 	strex	r3, r2, [r1]
 800601a:	613b      	str	r3, [r7, #16]
   return(result);
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1e5      	bne.n	8005fee <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2220      	movs	r2, #32
 8006026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
 800602a:	bf00      	nop
 800602c:	373c      	adds	r7, #60	; 0x3c
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr

08006036 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006036:	b480      	push	{r7}
 8006038:	b095      	sub	sp, #84	; 0x54
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006044:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006046:	e853 3f00 	ldrex	r3, [r3]
 800604a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800604c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006052:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	461a      	mov	r2, r3
 800605a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800605c:	643b      	str	r3, [r7, #64]	; 0x40
 800605e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006060:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006062:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006064:	e841 2300 	strex	r3, r2, [r1]
 8006068:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800606a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606c:	2b00      	cmp	r3, #0
 800606e:	d1e6      	bne.n	800603e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	3308      	adds	r3, #8
 8006076:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006078:	6a3b      	ldr	r3, [r7, #32]
 800607a:	e853 3f00 	ldrex	r3, [r3]
 800607e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006086:	f023 0301 	bic.w	r3, r3, #1
 800608a:	64bb      	str	r3, [r7, #72]	; 0x48
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	3308      	adds	r3, #8
 8006092:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006094:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006096:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006098:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800609a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800609c:	e841 2300 	strex	r3, r2, [r1]
 80060a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80060a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d1e3      	bne.n	8006070 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060ac:	2b01      	cmp	r3, #1
 80060ae:	d118      	bne.n	80060e2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	e853 3f00 	ldrex	r3, [r3]
 80060bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	f023 0310 	bic.w	r3, r3, #16
 80060c4:	647b      	str	r3, [r7, #68]	; 0x44
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	461a      	mov	r2, r3
 80060cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060ce:	61bb      	str	r3, [r7, #24]
 80060d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d2:	6979      	ldr	r1, [r7, #20]
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	e841 2300 	strex	r3, r2, [r1]
 80060da:	613b      	str	r3, [r7, #16]
   return(result);
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1e6      	bne.n	80060b0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2220      	movs	r2, #32
 80060e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	675a      	str	r2, [r3, #116]	; 0x74
}
 80060f6:	bf00      	nop
 80060f8:	3754      	adds	r7, #84	; 0x54
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr

08006102 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006102:	b580      	push	{r7, lr}
 8006104:	b090      	sub	sp, #64	; 0x40
 8006106:	af00      	add	r7, sp, #0
 8006108:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800610e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f003 0320 	and.w	r3, r3, #32
 800611a:	2b00      	cmp	r3, #0
 800611c:	d137      	bne.n	800618e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800611e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006120:	2200      	movs	r2, #0
 8006122:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006126:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3308      	adds	r3, #8
 800612c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800612e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006130:	e853 3f00 	ldrex	r3, [r3]
 8006134:	623b      	str	r3, [r7, #32]
   return(result);
 8006136:	6a3b      	ldr	r3, [r7, #32]
 8006138:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800613c:	63bb      	str	r3, [r7, #56]	; 0x38
 800613e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	3308      	adds	r3, #8
 8006144:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006146:	633a      	str	r2, [r7, #48]	; 0x30
 8006148:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800614a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800614c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800614e:	e841 2300 	strex	r3, r2, [r1]
 8006152:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006156:	2b00      	cmp	r3, #0
 8006158:	d1e5      	bne.n	8006126 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800615a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	e853 3f00 	ldrex	r3, [r3]
 8006166:	60fb      	str	r3, [r7, #12]
   return(result);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800616e:	637b      	str	r3, [r7, #52]	; 0x34
 8006170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	461a      	mov	r2, r3
 8006176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006178:	61fb      	str	r3, [r7, #28]
 800617a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800617c:	69b9      	ldr	r1, [r7, #24]
 800617e:	69fa      	ldr	r2, [r7, #28]
 8006180:	e841 2300 	strex	r3, r2, [r1]
 8006184:	617b      	str	r3, [r7, #20]
   return(result);
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d1e6      	bne.n	800615a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800618c:	e004      	b.n	8006198 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 800618e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006190:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006194:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006196:	4798      	blx	r3
}
 8006198:	bf00      	nop
 800619a:	3740      	adds	r7, #64	; 0x40
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}

080061a0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061ac:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061b8:	bf00      	nop
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}

080061c0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b086      	sub	sp, #24
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061cc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80061dc:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e8:	2b80      	cmp	r3, #128	; 0x80
 80061ea:	d109      	bne.n	8006200 <UART_DMAError+0x40>
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	2b21      	cmp	r3, #33	; 0x21
 80061f0:	d106      	bne.n	8006200 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 80061fa:	6978      	ldr	r0, [r7, #20]
 80061fc:	f7ff feda 	bl	8005fb4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006200:	697b      	ldr	r3, [r7, #20]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800620a:	2b40      	cmp	r3, #64	; 0x40
 800620c:	d109      	bne.n	8006222 <UART_DMAError+0x62>
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	2b22      	cmp	r3, #34	; 0x22
 8006212:	d106      	bne.n	8006222 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006214:	697b      	ldr	r3, [r7, #20]
 8006216:	2200      	movs	r2, #0
 8006218:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 800621c:	6978      	ldr	r0, [r7, #20]
 800621e:	f7ff ff0a 	bl	8006036 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006228:	f043 0210 	orr.w	r2, r3, #16
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006238:	6978      	ldr	r0, [r7, #20]
 800623a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800623c:	bf00      	nop
 800623e:	3718      	adds	r7, #24
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006250:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2200      	movs	r2, #0
 8006256:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800626c:	bf00      	nop
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b088      	sub	sp, #32
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	e853 3f00 	ldrex	r3, [r3]
 8006288:	60bb      	str	r3, [r7, #8]
   return(result);
 800628a:	68bb      	ldr	r3, [r7, #8]
 800628c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006290:	61fb      	str	r3, [r7, #28]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	461a      	mov	r2, r3
 8006298:	69fb      	ldr	r3, [r7, #28]
 800629a:	61bb      	str	r3, [r7, #24]
 800629c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800629e:	6979      	ldr	r1, [r7, #20]
 80062a0:	69ba      	ldr	r2, [r7, #24]
 80062a2:	e841 2300 	strex	r3, r2, [r1]
 80062a6:	613b      	str	r3, [r7, #16]
   return(result);
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1e6      	bne.n	800627c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2220      	movs	r2, #32
 80062b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	679a      	str	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80062c2:	6878      	ldr	r0, [r7, #4]
 80062c4:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062c6:	bf00      	nop
 80062c8:	3720      	adds	r7, #32
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
	...

080062d0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b09c      	sub	sp, #112	; 0x70
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80062de:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80062e8:	2b22      	cmp	r3, #34	; 0x22
 80062ea:	f040 80c2 	bne.w	8006472 <UART_RxISR_8BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062f4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80062f8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80062fc:	b2d9      	uxtb	r1, r3
 80062fe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8006302:	b2da      	uxtb	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006308:	400a      	ands	r2, r1
 800630a:	b2d2      	uxtb	r2, r2
 800630c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006312:	1c5a      	adds	r2, r3, #1
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800631e:	b29b      	uxth	r3, r3
 8006320:	3b01      	subs	r3, #1
 8006322:	b29a      	uxth	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006330:	b29b      	uxth	r3, r3
 8006332:	2b00      	cmp	r3, #0
 8006334:	f040 80a5 	bne.w	8006482 <UART_RxISR_8BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006340:	e853 3f00 	ldrex	r3, [r3]
 8006344:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006346:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006348:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800634c:	66bb      	str	r3, [r7, #104]	; 0x68
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	461a      	mov	r2, r3
 8006354:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006356:	65bb      	str	r3, [r7, #88]	; 0x58
 8006358:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800635c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800635e:	e841 2300 	strex	r3, r2, [r1]
 8006362:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006366:	2b00      	cmp	r3, #0
 8006368:	d1e6      	bne.n	8006338 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	3308      	adds	r3, #8
 8006370:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006372:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006374:	e853 3f00 	ldrex	r3, [r3]
 8006378:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800637a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800637c:	f023 0301 	bic.w	r3, r3, #1
 8006380:	667b      	str	r3, [r7, #100]	; 0x64
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	3308      	adds	r3, #8
 8006388:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800638a:	647a      	str	r2, [r7, #68]	; 0x44
 800638c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800638e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006390:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006392:	e841 2300 	strex	r3, r2, [r1]
 8006396:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800639a:	2b00      	cmp	r3, #0
 800639c:	d1e5      	bne.n	800636a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2220      	movs	r2, #32
 80063a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a35      	ldr	r2, [pc, #212]	; (800648c <UART_RxISR_8BIT+0x1bc>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d01f      	beq.n	80063fc <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d018      	beq.n	80063fc <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d2:	e853 3f00 	ldrex	r3, [r3]
 80063d6:	623b      	str	r3, [r7, #32]
   return(result);
 80063d8:	6a3b      	ldr	r3, [r7, #32]
 80063da:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80063de:	663b      	str	r3, [r7, #96]	; 0x60
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	461a      	mov	r2, r3
 80063e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80063e8:	633b      	str	r3, [r7, #48]	; 0x30
 80063ea:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80063f0:	e841 2300 	strex	r3, r2, [r1]
 80063f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80063f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d1e6      	bne.n	80063ca <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006400:	2b01      	cmp	r3, #1
 8006402:	d130      	bne.n	8006466 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2200      	movs	r2, #0
 8006408:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	e853 3f00 	ldrex	r3, [r3]
 8006416:	60fb      	str	r3, [r7, #12]
   return(result);
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	f023 0310 	bic.w	r3, r3, #16
 800641e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	461a      	mov	r2, r3
 8006426:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006428:	61fb      	str	r3, [r7, #28]
 800642a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642c:	69b9      	ldr	r1, [r7, #24]
 800642e:	69fa      	ldr	r2, [r7, #28]
 8006430:	e841 2300 	strex	r3, r2, [r1]
 8006434:	617b      	str	r3, [r7, #20]
   return(result);
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1e6      	bne.n	800640a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	f003 0310 	and.w	r3, r3, #16
 8006446:	2b10      	cmp	r3, #16
 8006448:	d103      	bne.n	8006452 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2210      	movs	r2, #16
 8006450:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800645e:	4611      	mov	r1, r2
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006464:	e00d      	b.n	8006482 <UART_RxISR_8BIT+0x1b2>
        huart->RxCpltCallback(huart);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	4798      	blx	r3
}
 8006470:	e007      	b.n	8006482 <UART_RxISR_8BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	699a      	ldr	r2, [r3, #24]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f042 0208 	orr.w	r2, r2, #8
 8006480:	619a      	str	r2, [r3, #24]
}
 8006482:	bf00      	nop
 8006484:	3770      	adds	r7, #112	; 0x70
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
 800648a:	bf00      	nop
 800648c:	40008000 	.word	0x40008000

08006490 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006490:	b580      	push	{r7, lr}
 8006492:	b09c      	sub	sp, #112	; 0x70
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800649e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064a8:	2b22      	cmp	r3, #34	; 0x22
 80064aa:	f040 80c2 	bne.w	8006632 <UART_RxISR_16BIT+0x1a2>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064bc:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80064be:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80064c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80064c6:	4013      	ands	r3, r2
 80064c8:	b29a      	uxth	r2, r3
 80064ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80064cc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064d2:	1c9a      	adds	r2, r3, #2
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064de:	b29b      	uxth	r3, r3
 80064e0:	3b01      	subs	r3, #1
 80064e2:	b29a      	uxth	r2, r3
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f040 80a5 	bne.w	8006642 <UART_RxISR_16BIT+0x1b2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006500:	e853 3f00 	ldrex	r3, [r3]
 8006504:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006508:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800650c:	667b      	str	r3, [r7, #100]	; 0x64
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	461a      	mov	r2, r3
 8006514:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006516:	657b      	str	r3, [r7, #84]	; 0x54
 8006518:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800651a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800651c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800651e:	e841 2300 	strex	r3, r2, [r1]
 8006522:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006526:	2b00      	cmp	r3, #0
 8006528:	d1e6      	bne.n	80064f8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	3308      	adds	r3, #8
 8006530:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006532:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006534:	e853 3f00 	ldrex	r3, [r3]
 8006538:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800653a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653c:	f023 0301 	bic.w	r3, r3, #1
 8006540:	663b      	str	r3, [r7, #96]	; 0x60
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	3308      	adds	r3, #8
 8006548:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800654a:	643a      	str	r2, [r7, #64]	; 0x40
 800654c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800654e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006550:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006552:	e841 2300 	strex	r3, r2, [r1]
 8006556:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800655a:	2b00      	cmp	r3, #0
 800655c:	d1e5      	bne.n	800652a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2220      	movs	r2, #32
 8006562:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2200      	movs	r2, #0
 800656a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4a35      	ldr	r2, [pc, #212]	; (800664c <UART_RxISR_16BIT+0x1bc>)
 8006578:	4293      	cmp	r3, r2
 800657a:	d01f      	beq.n	80065bc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006586:	2b00      	cmp	r3, #0
 8006588:	d018      	beq.n	80065bc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	e853 3f00 	ldrex	r3, [r3]
 8006596:	61fb      	str	r3, [r7, #28]
   return(result);
 8006598:	69fb      	ldr	r3, [r7, #28]
 800659a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800659e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	461a      	mov	r2, r3
 80065a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80065a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80065aa:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80065b0:	e841 2300 	strex	r3, r2, [r1]
 80065b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1e6      	bne.n	800658a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d130      	bne.n	8006626 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	e853 3f00 	ldrex	r3, [r3]
 80065d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	f023 0310 	bic.w	r3, r3, #16
 80065de:	65bb      	str	r3, [r7, #88]	; 0x58
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	461a      	mov	r2, r3
 80065e6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80065e8:	61bb      	str	r3, [r7, #24]
 80065ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ec:	6979      	ldr	r1, [r7, #20]
 80065ee:	69ba      	ldr	r2, [r7, #24]
 80065f0:	e841 2300 	strex	r3, r2, [r1]
 80065f4:	613b      	str	r3, [r7, #16]
   return(result);
 80065f6:	693b      	ldr	r3, [r7, #16]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1e6      	bne.n	80065ca <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	f003 0310 	and.w	r3, r3, #16
 8006606:	2b10      	cmp	r3, #16
 8006608:	d103      	bne.n	8006612 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2210      	movs	r2, #16
 8006610:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800661e:	4611      	mov	r1, r2
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006624:	e00d      	b.n	8006642 <UART_RxISR_16BIT+0x1b2>
        huart->RxCpltCallback(huart);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	4798      	blx	r3
}
 8006630:	e007      	b.n	8006642 <UART_RxISR_16BIT+0x1b2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	699a      	ldr	r2, [r3, #24]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f042 0208 	orr.w	r2, r2, #8
 8006640:	619a      	str	r2, [r3, #24]
}
 8006642:	bf00      	nop
 8006644:	3770      	adds	r7, #112	; 0x70
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	40008000 	.word	0x40008000

08006650 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b0ac      	sub	sp, #176	; 0xb0
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800665e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	69db      	ldr	r3, [r3, #28]
 8006668:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	689b      	ldr	r3, [r3, #8]
 800667c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006686:	2b22      	cmp	r3, #34	; 0x22
 8006688:	f040 8188 	bne.w	800699c <UART_RxISR_8BIT_FIFOEN+0x34c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006692:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006696:	e12b      	b.n	80068f0 <UART_RxISR_8BIT_FIFOEN+0x2a0>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669e:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80066a2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 80066a6:	b2d9      	uxtb	r1, r3
 80066a8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80066ac:	b2da      	uxtb	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066b2:	400a      	ands	r2, r1
 80066b4:	b2d2      	uxtb	r2, r2
 80066b6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066bc:	1c5a      	adds	r2, r3, #1
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	3b01      	subs	r3, #1
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	69db      	ldr	r3, [r3, #28]
 80066da:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80066de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066e2:	f003 0307 	and.w	r3, r3, #7
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d055      	beq.n	8006796 <UART_RxISR_8BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80066ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066ee:	f003 0301 	and.w	r3, r3, #1
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d011      	beq.n	800671a <UART_RxISR_8BIT_FIFOEN+0xca>
 80066f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80066fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00b      	beq.n	800671a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	2201      	movs	r2, #1
 8006708:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006710:	f043 0201 	orr.w	r2, r3, #1
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800671a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800671e:	f003 0302 	and.w	r3, r3, #2
 8006722:	2b00      	cmp	r3, #0
 8006724:	d011      	beq.n	800674a <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006726:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800672a:	f003 0301 	and.w	r3, r3, #1
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00b      	beq.n	800674a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2202      	movs	r2, #2
 8006738:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006740:	f043 0204 	orr.w	r2, r3, #4
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800674a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800674e:	f003 0304 	and.w	r3, r3, #4
 8006752:	2b00      	cmp	r3, #0
 8006754:	d011      	beq.n	800677a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006756:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800675a:	f003 0301 	and.w	r3, r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	d00b      	beq.n	800677a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2204      	movs	r2, #4
 8006768:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006770:	f043 0202 	orr.w	r2, r3, #2
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006780:	2b00      	cmp	r3, #0
 8006782:	d008      	beq.n	8006796 <UART_RxISR_8BIT_FIFOEN+0x146>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800679c:	b29b      	uxth	r3, r3
 800679e:	2b00      	cmp	r3, #0
 80067a0:	f040 80a6 	bne.w	80068f0 <UART_RxISR_8BIT_FIFOEN+0x2a0>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80067ac:	e853 3f00 	ldrex	r3, [r3]
 80067b0:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 80067b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80067b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	461a      	mov	r2, r3
 80067c2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80067c6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80067c8:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ca:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 80067cc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80067ce:	e841 2300 	strex	r3, r2, [r1]
 80067d2:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 80067d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d1e4      	bne.n	80067a4 <UART_RxISR_8BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	3308      	adds	r3, #8
 80067e0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80067e4:	e853 3f00 	ldrex	r3, [r3]
 80067e8:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80067ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80067f0:	f023 0301 	bic.w	r3, r3, #1
 80067f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3308      	adds	r3, #8
 80067fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006802:	66ba      	str	r2, [r7, #104]	; 0x68
 8006804:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006806:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006808:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800680a:	e841 2300 	strex	r3, r2, [r1]
 800680e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006810:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1e1      	bne.n	80067da <UART_RxISR_8BIT_FIFOEN+0x18a>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	2220      	movs	r2, #32
 800681a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	2200      	movs	r2, #0
 8006822:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2200      	movs	r2, #0
 8006828:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	4a61      	ldr	r2, [pc, #388]	; (80069b4 <UART_RxISR_8BIT_FIFOEN+0x364>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d021      	beq.n	8006878 <UART_RxISR_8BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685b      	ldr	r3, [r3, #4]
 800683a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d01a      	beq.n	8006878 <UART_RxISR_8BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006848:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800684a:	e853 3f00 	ldrex	r3, [r3]
 800684e:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006852:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006856:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	461a      	mov	r2, r3
 8006860:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006864:	657b      	str	r3, [r7, #84]	; 0x54
 8006866:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006868:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800686a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800686c:	e841 2300 	strex	r3, r2, [r1]
 8006870:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006874:	2b00      	cmp	r3, #0
 8006876:	d1e4      	bne.n	8006842 <UART_RxISR_8BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800687c:	2b01      	cmp	r3, #1
 800687e:	d132      	bne.n	80068e6 <UART_RxISR_8BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2200      	movs	r2, #0
 8006884:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800688e:	e853 3f00 	ldrex	r3, [r3]
 8006892:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006896:	f023 0310 	bic.w	r3, r3, #16
 800689a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	461a      	mov	r2, r3
 80068a4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068a8:	643b      	str	r3, [r7, #64]	; 0x40
 80068aa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068b0:	e841 2300 	strex	r3, r2, [r1]
 80068b4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d1e4      	bne.n	8006886 <UART_RxISR_8BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	69db      	ldr	r3, [r3, #28]
 80068c2:	f003 0310 	and.w	r3, r3, #16
 80068c6:	2b10      	cmp	r3, #16
 80068c8:	d103      	bne.n	80068d2 <UART_RxISR_8BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2210      	movs	r2, #16
 80068d0:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80068d8:	687a      	ldr	r2, [r7, #4]
 80068da:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 80068de:	4611      	mov	r1, r2
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	4798      	blx	r3
 80068e4:	e004      	b.n	80068f0 <UART_RxISR_8BIT_FIFOEN+0x2a0>
        else
        {
          /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	4798      	blx	r3
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80068f0:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d006      	beq.n	8006906 <UART_RxISR_8BIT_FIFOEN+0x2b6>
 80068f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80068fc:	f003 0320 	and.w	r3, r3, #32
 8006900:	2b00      	cmp	r3, #0
 8006902:	f47f aec9 	bne.w	8006698 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800690c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006910:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006914:	2b00      	cmp	r3, #0
 8006916:	d049      	beq.n	80069ac <UART_RxISR_8BIT_FIFOEN+0x35c>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800691e:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8006922:	429a      	cmp	r2, r3
 8006924:	d242      	bcs.n	80069ac <UART_RxISR_8BIT_FIFOEN+0x35c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3308      	adds	r3, #8
 800692c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800692e:	6a3b      	ldr	r3, [r7, #32]
 8006930:	e853 3f00 	ldrex	r3, [r3]
 8006934:	61fb      	str	r3, [r7, #28]
   return(result);
 8006936:	69fb      	ldr	r3, [r7, #28]
 8006938:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800693c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	3308      	adds	r3, #8
 8006946:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800694a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800694c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006950:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006952:	e841 2300 	strex	r3, r2, [r1]
 8006956:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695a:	2b00      	cmp	r3, #0
 800695c:	d1e3      	bne.n	8006926 <UART_RxISR_8BIT_FIFOEN+0x2d6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a15      	ldr	r2, [pc, #84]	; (80069b8 <UART_RxISR_8BIT_FIFOEN+0x368>)
 8006962:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	e853 3f00 	ldrex	r3, [r3]
 8006970:	60bb      	str	r3, [r7, #8]
   return(result);
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	f043 0320 	orr.w	r3, r3, #32
 8006978:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	461a      	mov	r2, r3
 8006982:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006986:	61bb      	str	r3, [r7, #24]
 8006988:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698a:	6979      	ldr	r1, [r7, #20]
 800698c:	69ba      	ldr	r2, [r7, #24]
 800698e:	e841 2300 	strex	r3, r2, [r1]
 8006992:	613b      	str	r3, [r7, #16]
   return(result);
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d1e4      	bne.n	8006964 <UART_RxISR_8BIT_FIFOEN+0x314>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800699a:	e007      	b.n	80069ac <UART_RxISR_8BIT_FIFOEN+0x35c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	699a      	ldr	r2, [r3, #24]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f042 0208 	orr.w	r2, r2, #8
 80069aa:	619a      	str	r2, [r3, #24]
}
 80069ac:	bf00      	nop
 80069ae:	37b0      	adds	r7, #176	; 0xb0
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	40008000 	.word	0x40008000
 80069b8:	080062d1 	.word	0x080062d1

080069bc <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b0ae      	sub	sp, #184	; 0xb8
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80069ca:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	69db      	ldr	r3, [r3, #28]
 80069d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80069f2:	2b22      	cmp	r3, #34	; 0x22
 80069f4:	f040 818c 	bne.w	8006d10 <UART_RxISR_16BIT_FIFOEN+0x354>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80069fe:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006a02:	e12f      	b.n	8006c64 <UART_RxISR_16BIT_FIFOEN+0x2a8>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8006a16:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 8006a1a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8006a1e:	4013      	ands	r3, r2
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006a26:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a2c:	1c9a      	adds	r2, r3, #2
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	b29a      	uxth	r2, r3
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	69db      	ldr	r3, [r3, #28]
 8006a4a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006a4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006a52:	f003 0307 	and.w	r3, r3, #7
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d055      	beq.n	8006b06 <UART_RxISR_16BIT_FIFOEN+0x14a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006a5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d011      	beq.n	8006a8a <UART_RxISR_16BIT_FIFOEN+0xce>
 8006a66:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d00b      	beq.n	8006a8a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	2201      	movs	r2, #1
 8006a78:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a80:	f043 0201 	orr.w	r2, r3, #1
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006a8a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006a8e:	f003 0302 	and.w	r3, r3, #2
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d011      	beq.n	8006aba <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006a96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d00b      	beq.n	8006aba <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	2202      	movs	r2, #2
 8006aa8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ab0:	f043 0204 	orr.w	r2, r3, #4
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006aba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006abe:	f003 0304 	and.w	r3, r3, #4
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d011      	beq.n	8006aea <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006ac6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00b      	beq.n	8006aea <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2204      	movs	r2, #4
 8006ad8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ae0:	f043 0202 	orr.w	r2, r3, #2
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d008      	beq.n	8006b06 <UART_RxISR_16BIT_FIFOEN+0x14a>
        {
          /* Non Blocking error : transfer could go on.
          Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	4798      	blx	r3
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f040 80a8 	bne.w	8006c64 <UART_RxISR_16BIT_FIFOEN+0x2a8>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006b1c:	e853 3f00 	ldrex	r3, [r3]
 8006b20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006b22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006b24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	461a      	mov	r2, r3
 8006b32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b3a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b42:	e841 2300 	strex	r3, r2, [r1]
 8006b46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d1e2      	bne.n	8006b14 <UART_RxISR_16BIT_FIFOEN+0x158>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	3308      	adds	r3, #8
 8006b54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b58:	e853 3f00 	ldrex	r3, [r3]
 8006b5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b64:	f023 0301 	bic.w	r3, r3, #1
 8006b68:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	3308      	adds	r3, #8
 8006b72:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8006b76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b7e:	e841 2300 	strex	r3, r2, [r1]
 8006b82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1e1      	bne.n	8006b4e <UART_RxISR_16BIT_FIFOEN+0x192>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2220      	movs	r2, #32
 8006b8e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a61      	ldr	r2, [pc, #388]	; (8006d28 <UART_RxISR_16BIT_FIFOEN+0x36c>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d021      	beq.n	8006bec <UART_RxISR_16BIT_FIFOEN+0x230>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	685b      	ldr	r3, [r3, #4]
 8006bae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d01a      	beq.n	8006bec <UART_RxISR_16BIT_FIFOEN+0x230>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bbe:	e853 3f00 	ldrex	r3, [r3]
 8006bc2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bc6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006bca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006bd8:	65bb      	str	r3, [r7, #88]	; 0x58
 8006bda:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bdc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006bde:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006be0:	e841 2300 	strex	r3, r2, [r1]
 8006be4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1e4      	bne.n	8006bb6 <UART_RxISR_16BIT_FIFOEN+0x1fa>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d132      	bne.n	8006c5a <UART_RxISR_16BIT_FIFOEN+0x29e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c02:	e853 3f00 	ldrex	r3, [r3]
 8006c06:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c0a:	f023 0310 	bic.w	r3, r3, #16
 8006c0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	461a      	mov	r2, r3
 8006c18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c1c:	647b      	str	r3, [r7, #68]	; 0x44
 8006c1e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c20:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c22:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c24:	e841 2300 	strex	r3, r2, [r1]
 8006c28:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d1e4      	bne.n	8006bfa <UART_RxISR_16BIT_FIFOEN+0x23e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	69db      	ldr	r3, [r3, #28]
 8006c36:	f003 0310 	and.w	r3, r3, #16
 8006c3a:	2b10      	cmp	r3, #16
 8006c3c:	d103      	bne.n	8006c46 <UART_RxISR_16BIT_FIFOEN+0x28a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2210      	movs	r2, #16
 8006c44:	621a      	str	r2, [r3, #32]
          }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8006c4c:	687a      	ldr	r2, [r7, #4]
 8006c4e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 8006c52:	4611      	mov	r1, r2
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	4798      	blx	r3
 8006c58:	e004      	b.n	8006c64 <UART_RxISR_16BIT_FIFOEN+0x2a8>
        else
        {
          /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	4798      	blx	r3
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006c64:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d006      	beq.n	8006c7a <UART_RxISR_16BIT_FIFOEN+0x2be>
 8006c6c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006c70:	f003 0320 	and.w	r3, r3, #32
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f47f aec5 	bne.w	8006a04 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c80:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006c84:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d049      	beq.n	8006d20 <UART_RxISR_16BIT_FIFOEN+0x364>
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006c92:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d242      	bcs.n	8006d20 <UART_RxISR_16BIT_FIFOEN+0x364>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	3308      	adds	r3, #8
 8006ca0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca4:	e853 3f00 	ldrex	r3, [r3]
 8006ca8:	623b      	str	r3, [r7, #32]
   return(result);
 8006caa:	6a3b      	ldr	r3, [r7, #32]
 8006cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	3308      	adds	r3, #8
 8006cba:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8006cbe:	633a      	str	r2, [r7, #48]	; 0x30
 8006cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cc6:	e841 2300 	strex	r3, r2, [r1]
 8006cca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1e3      	bne.n	8006c9a <UART_RxISR_16BIT_FIFOEN+0x2de>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	4a15      	ldr	r2, [pc, #84]	; (8006d2c <UART_RxISR_16BIT_FIFOEN+0x370>)
 8006cd6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	e853 3f00 	ldrex	r3, [r3]
 8006ce4:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f043 0320 	orr.w	r3, r3, #32
 8006cec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006cfa:	61fb      	str	r3, [r7, #28]
 8006cfc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfe:	69b9      	ldr	r1, [r7, #24]
 8006d00:	69fa      	ldr	r2, [r7, #28]
 8006d02:	e841 2300 	strex	r3, r2, [r1]
 8006d06:	617b      	str	r3, [r7, #20]
   return(result);
 8006d08:	697b      	ldr	r3, [r7, #20]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d1e4      	bne.n	8006cd8 <UART_RxISR_16BIT_FIFOEN+0x31c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006d0e:	e007      	b.n	8006d20 <UART_RxISR_16BIT_FIFOEN+0x364>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	699a      	ldr	r2, [r3, #24]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f042 0208 	orr.w	r2, r2, #8
 8006d1e:	619a      	str	r2, [r3, #24]
}
 8006d20:	bf00      	nop
 8006d22:	37b8      	adds	r7, #184	; 0xb8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	40008000 	.word	0x40008000
 8006d2c:	08006491 	.word	0x08006491

08006d30 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006d38:	bf00      	nop
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr

08006d44 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006d44:	b480      	push	{r7}
 8006d46:	b083      	sub	sp, #12
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006d4c:	bf00      	nop
 8006d4e:	370c      	adds	r7, #12
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b083      	sub	sp, #12
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006d60:	bf00      	nop
 8006d62:	370c      	adds	r7, #12
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b085      	sub	sp, #20
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d7a:	2b01      	cmp	r3, #1
 8006d7c:	d101      	bne.n	8006d82 <HAL_UARTEx_DisableFifoMode+0x16>
 8006d7e:	2302      	movs	r3, #2
 8006d80:	e027      	b.n	8006dd2 <HAL_UARTEx_DisableFifoMode+0x66>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2201      	movs	r2, #1
 8006d86:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2224      	movs	r2, #36	; 0x24
 8006d8e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f022 0201 	bic.w	r2, r2, #1
 8006da8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006db0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3714      	adds	r7, #20
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ddc:	4770      	bx	lr

08006dde <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b084      	sub	sp, #16
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	6078      	str	r0, [r7, #4]
 8006de6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006dee:	2b01      	cmp	r3, #1
 8006df0:	d101      	bne.n	8006df6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006df2:	2302      	movs	r3, #2
 8006df4:	e02d      	b.n	8006e52 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2201      	movs	r2, #1
 8006dfa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2224      	movs	r2, #36	; 0x24
 8006e02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681a      	ldr	r2, [r3, #0]
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f022 0201 	bic.w	r2, r2, #1
 8006e1c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	683a      	ldr	r2, [r7, #0]
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 f850 	bl	8006ed8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2220      	movs	r2, #32
 8006e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006e50:	2300      	movs	r3, #0
}
 8006e52:	4618      	mov	r0, r3
 8006e54:	3710      	adds	r7, #16
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}

08006e5a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e5a:	b580      	push	{r7, lr}
 8006e5c:	b084      	sub	sp, #16
 8006e5e:	af00      	add	r7, sp, #0
 8006e60:	6078      	str	r0, [r7, #4]
 8006e62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006e6a:	2b01      	cmp	r3, #1
 8006e6c:	d101      	bne.n	8006e72 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e6e:	2302      	movs	r3, #2
 8006e70:	e02d      	b.n	8006ece <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2201      	movs	r2, #1
 8006e76:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2224      	movs	r2, #36	; 0x24
 8006e7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681a      	ldr	r2, [r3, #0]
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f022 0201 	bic.w	r2, r2, #1
 8006e98:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	689b      	ldr	r3, [r3, #8]
 8006ea0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	683a      	ldr	r2, [r7, #0]
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 f812 	bl	8006ed8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	68fa      	ldr	r2, [r7, #12]
 8006eba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2220      	movs	r2, #32
 8006ec0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006ecc:	2300      	movs	r3, #0
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3710      	adds	r7, #16
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
	...

08006ed8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d108      	bne.n	8006efa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2201      	movs	r2, #1
 8006eec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ef8:	e031      	b.n	8006f5e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006efa:	2308      	movs	r3, #8
 8006efc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006efe:	2308      	movs	r3, #8
 8006f00:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	0e5b      	lsrs	r3, r3, #25
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	f003 0307 	and.w	r3, r3, #7
 8006f10:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	681b      	ldr	r3, [r3, #0]
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	0f5b      	lsrs	r3, r3, #29
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	f003 0307 	and.w	r3, r3, #7
 8006f20:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f22:	7bbb      	ldrb	r3, [r7, #14]
 8006f24:	7b3a      	ldrb	r2, [r7, #12]
 8006f26:	4911      	ldr	r1, [pc, #68]	; (8006f6c <UARTEx_SetNbDataToProcess+0x94>)
 8006f28:	5c8a      	ldrb	r2, [r1, r2]
 8006f2a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f2e:	7b3a      	ldrb	r2, [r7, #12]
 8006f30:	490f      	ldr	r1, [pc, #60]	; (8006f70 <UARTEx_SetNbDataToProcess+0x98>)
 8006f32:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f34:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f40:	7bfb      	ldrb	r3, [r7, #15]
 8006f42:	7b7a      	ldrb	r2, [r7, #13]
 8006f44:	4909      	ldr	r1, [pc, #36]	; (8006f6c <UARTEx_SetNbDataToProcess+0x94>)
 8006f46:	5c8a      	ldrb	r2, [r1, r2]
 8006f48:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f4c:	7b7a      	ldrb	r2, [r7, #13]
 8006f4e:	4908      	ldr	r1, [pc, #32]	; (8006f70 <UARTEx_SetNbDataToProcess+0x98>)
 8006f50:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f52:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006f5e:	bf00      	nop
 8006f60:	3714      	adds	r7, #20
 8006f62:	46bd      	mov	sp, r7
 8006f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f68:	4770      	bx	lr
 8006f6a:	bf00      	nop
 8006f6c:	08007030 	.word	0x08007030
 8006f70:	08007038 	.word	0x08007038

08006f74 <memset>:
 8006f74:	4402      	add	r2, r0
 8006f76:	4603      	mov	r3, r0
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d100      	bne.n	8006f7e <memset+0xa>
 8006f7c:	4770      	bx	lr
 8006f7e:	f803 1b01 	strb.w	r1, [r3], #1
 8006f82:	e7f9      	b.n	8006f78 <memset+0x4>

08006f84 <__libc_init_array>:
 8006f84:	b570      	push	{r4, r5, r6, lr}
 8006f86:	4d0d      	ldr	r5, [pc, #52]	; (8006fbc <__libc_init_array+0x38>)
 8006f88:	4c0d      	ldr	r4, [pc, #52]	; (8006fc0 <__libc_init_array+0x3c>)
 8006f8a:	1b64      	subs	r4, r4, r5
 8006f8c:	10a4      	asrs	r4, r4, #2
 8006f8e:	2600      	movs	r6, #0
 8006f90:	42a6      	cmp	r6, r4
 8006f92:	d109      	bne.n	8006fa8 <__libc_init_array+0x24>
 8006f94:	4d0b      	ldr	r5, [pc, #44]	; (8006fc4 <__libc_init_array+0x40>)
 8006f96:	4c0c      	ldr	r4, [pc, #48]	; (8006fc8 <__libc_init_array+0x44>)
 8006f98:	f000 f826 	bl	8006fe8 <_init>
 8006f9c:	1b64      	subs	r4, r4, r5
 8006f9e:	10a4      	asrs	r4, r4, #2
 8006fa0:	2600      	movs	r6, #0
 8006fa2:	42a6      	cmp	r6, r4
 8006fa4:	d105      	bne.n	8006fb2 <__libc_init_array+0x2e>
 8006fa6:	bd70      	pop	{r4, r5, r6, pc}
 8006fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fac:	4798      	blx	r3
 8006fae:	3601      	adds	r6, #1
 8006fb0:	e7ee      	b.n	8006f90 <__libc_init_array+0xc>
 8006fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fb6:	4798      	blx	r3
 8006fb8:	3601      	adds	r6, #1
 8006fba:	e7f2      	b.n	8006fa2 <__libc_init_array+0x1e>
 8006fbc:	08007048 	.word	0x08007048
 8006fc0:	08007048 	.word	0x08007048
 8006fc4:	08007048 	.word	0x08007048
 8006fc8:	0800704c 	.word	0x0800704c

08006fcc <memcpy>:
 8006fcc:	440a      	add	r2, r1
 8006fce:	4291      	cmp	r1, r2
 8006fd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fd4:	d100      	bne.n	8006fd8 <memcpy+0xc>
 8006fd6:	4770      	bx	lr
 8006fd8:	b510      	push	{r4, lr}
 8006fda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fe2:	4291      	cmp	r1, r2
 8006fe4:	d1f9      	bne.n	8006fda <memcpy+0xe>
 8006fe6:	bd10      	pop	{r4, pc}

08006fe8 <_init>:
 8006fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fea:	bf00      	nop
 8006fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fee:	bc08      	pop	{r3}
 8006ff0:	469e      	mov	lr, r3
 8006ff2:	4770      	bx	lr

08006ff4 <_fini>:
 8006ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ff6:	bf00      	nop
 8006ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ffa:	bc08      	pop	{r3}
 8006ffc:	469e      	mov	lr, r3
 8006ffe:	4770      	bx	lr
