
MODBUS2024ALT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009fb4  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800a18c  0800a18c  0000b18c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1cc  0800a1cc  0000c238  2**0
                  CONTENTS
  4 .ARM          00000008  0800a1cc  0800a1cc  0000b1cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a1d4  0800a1d4  0000c238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1d4  0800a1d4  0000b1d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1d8  0800a1d8  0000b1d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0800a1dc  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e7c  20000238  0800a414  0000c238  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200010b4  0800a414  0000d0b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c238  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016850  00000000  00000000  0000c268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a8d  00000000  00000000  00022ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f8  00000000  00000000  00025548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e1b  00000000  00000000  00026740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000270aa  00000000  00000000  0002755b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016477  00000000  00000000  0004e605  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe381  00000000  00000000  00064a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00162dfd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ec4  00000000  00000000  00162e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  00167d04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000238 	.word	0x20000238
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a174 	.word	0x0800a174

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000023c 	.word	0x2000023c
 8000214:	0800a174 	.word	0x0800a174

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b96a 	b.w	8000ee0 <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	460c      	mov	r4, r1
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d14e      	bne.n	8000cce <__udivmoddi4+0xaa>
 8000c30:	4694      	mov	ip, r2
 8000c32:	458c      	cmp	ip, r1
 8000c34:	4686      	mov	lr, r0
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	d962      	bls.n	8000d02 <__udivmoddi4+0xde>
 8000c3c:	b14a      	cbz	r2, 8000c52 <__udivmoddi4+0x2e>
 8000c3e:	f1c2 0320 	rsb	r3, r2, #32
 8000c42:	4091      	lsls	r1, r2
 8000c44:	fa20 f303 	lsr.w	r3, r0, r3
 8000c48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c4c:	4319      	orrs	r1, r3
 8000c4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c56:	fa1f f68c 	uxth.w	r6, ip
 8000c5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c62:	fb07 1114 	mls	r1, r7, r4, r1
 8000c66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6a:	fb04 f106 	mul.w	r1, r4, r6
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x64>
 8000c72:	eb1c 0303 	adds.w	r3, ip, r3
 8000c76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7a:	f080 8112 	bcs.w	8000ea2 <__udivmoddi4+0x27e>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 810f 	bls.w	8000ea2 <__udivmoddi4+0x27e>
 8000c84:	3c02      	subs	r4, #2
 8000c86:	4463      	add	r3, ip
 8000c88:	1a59      	subs	r1, r3, r1
 8000c8a:	fa1f f38e 	uxth.w	r3, lr
 8000c8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c92:	fb07 1110 	mls	r1, r7, r0, r1
 8000c96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9a:	fb00 f606 	mul.w	r6, r0, r6
 8000c9e:	429e      	cmp	r6, r3
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x94>
 8000ca2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000caa:	f080 80fc 	bcs.w	8000ea6 <__udivmoddi4+0x282>
 8000cae:	429e      	cmp	r6, r3
 8000cb0:	f240 80f9 	bls.w	8000ea6 <__udivmoddi4+0x282>
 8000cb4:	4463      	add	r3, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	1b9b      	subs	r3, r3, r6
 8000cba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa6>
 8000cc2:	40d3      	lsrs	r3, r2
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xba>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb4>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa6>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x150>
 8000ce6:	42a3      	cmp	r3, r4
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xcc>
 8000cea:	4290      	cmp	r0, r2
 8000cec:	f0c0 80f0 	bcc.w	8000ed0 <__udivmoddi4+0x2ac>
 8000cf0:	1a86      	subs	r6, r0, r2
 8000cf2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	2d00      	cmp	r5, #0
 8000cfa:	d0e6      	beq.n	8000cca <__udivmoddi4+0xa6>
 8000cfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000d00:	e7e3      	b.n	8000cca <__udivmoddi4+0xa6>
 8000d02:	2a00      	cmp	r2, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x204>
 8000d08:	eba1 040c 	sub.w	r4, r1, ip
 8000d0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d10:	fa1f f78c 	uxth.w	r7, ip
 8000d14:	2101      	movs	r1, #1
 8000d16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb07 f006 	mul.w	r0, r7, r6
 8000d2a:	4298      	cmp	r0, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x11c>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x11a>
 8000d38:	4298      	cmp	r0, r3
 8000d3a:	f200 80cd 	bhi.w	8000ed8 <__udivmoddi4+0x2b4>
 8000d3e:	4626      	mov	r6, r4
 8000d40:	1a1c      	subs	r4, r3, r0
 8000d42:	fa1f f38e 	uxth.w	r3, lr
 8000d46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d52:	fb00 f707 	mul.w	r7, r0, r7
 8000d56:	429f      	cmp	r7, r3
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x148>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x146>
 8000d64:	429f      	cmp	r7, r3
 8000d66:	f200 80b0 	bhi.w	8000eca <__udivmoddi4+0x2a6>
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	1bdb      	subs	r3, r3, r7
 8000d6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x9c>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d84:	fa04 f301 	lsl.w	r3, r4, r1
 8000d88:	ea43 030c 	orr.w	r3, r3, ip
 8000d8c:	40f4      	lsrs	r4, r6
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	0c38      	lsrs	r0, r7, #16
 8000d94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d98:	fbb4 fef0 	udiv	lr, r4, r0
 8000d9c:	fa1f fc87 	uxth.w	ip, r7
 8000da0:	fb00 441e 	mls	r4, r0, lr, r4
 8000da4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da8:	fb0e f90c 	mul.w	r9, lr, ip
 8000dac:	45a1      	cmp	r9, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d90a      	bls.n	8000dca <__udivmoddi4+0x1a6>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dba:	f080 8084 	bcs.w	8000ec6 <__udivmoddi4+0x2a2>
 8000dbe:	45a1      	cmp	r9, r4
 8000dc0:	f240 8081 	bls.w	8000ec6 <__udivmoddi4+0x2a2>
 8000dc4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	eba4 0409 	sub.w	r4, r4, r9
 8000dce:	fa1f f983 	uxth.w	r9, r3
 8000dd2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dd6:	fb00 4413 	mls	r4, r0, r3, r4
 8000dda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dde:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x1d2>
 8000de6:	193c      	adds	r4, r7, r4
 8000de8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dec:	d267      	bcs.n	8000ebe <__udivmoddi4+0x29a>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d965      	bls.n	8000ebe <__udivmoddi4+0x29a>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfa:	fba0 9302 	umull	r9, r3, r0, r2
 8000dfe:	eba4 040c 	sub.w	r4, r4, ip
 8000e02:	429c      	cmp	r4, r3
 8000e04:	46ce      	mov	lr, r9
 8000e06:	469c      	mov	ip, r3
 8000e08:	d351      	bcc.n	8000eae <__udivmoddi4+0x28a>
 8000e0a:	d04e      	beq.n	8000eaa <__udivmoddi4+0x286>
 8000e0c:	b155      	cbz	r5, 8000e24 <__udivmoddi4+0x200>
 8000e0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000e12:	eb64 040c 	sbc.w	r4, r4, ip
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	40cb      	lsrs	r3, r1
 8000e1c:	431e      	orrs	r6, r3
 8000e1e:	40cc      	lsrs	r4, r1
 8000e20:	e9c5 6400 	strd	r6, r4, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	e750      	b.n	8000cca <__udivmoddi4+0xa6>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000e30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e34:	fa24 f303 	lsr.w	r3, r4, r3
 8000e38:	4094      	lsls	r4, r2
 8000e3a:	430c      	orrs	r4, r1
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e44:	fa1f f78c 	uxth.w	r7, ip
 8000e48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e50:	0c23      	lsrs	r3, r4, #16
 8000e52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e56:	fb00 f107 	mul.w	r1, r0, r7
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x24c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e66:	d22c      	bcs.n	8000ec2 <__udivmoddi4+0x29e>
 8000e68:	4299      	cmp	r1, r3
 8000e6a:	d92a      	bls.n	8000ec2 <__udivmoddi4+0x29e>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4463      	add	r3, ip
 8000e70:	1a5b      	subs	r3, r3, r1
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e78:	fb08 3311 	mls	r3, r8, r1, r3
 8000e7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e80:	fb01 f307 	mul.w	r3, r1, r7
 8000e84:	42a3      	cmp	r3, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x276>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e90:	d213      	bcs.n	8000eba <__udivmoddi4+0x296>
 8000e92:	42a3      	cmp	r3, r4
 8000e94:	d911      	bls.n	8000eba <__udivmoddi4+0x296>
 8000e96:	3902      	subs	r1, #2
 8000e98:	4464      	add	r4, ip
 8000e9a:	1ae4      	subs	r4, r4, r3
 8000e9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea0:	e739      	b.n	8000d16 <__udivmoddi4+0xf2>
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	e6f0      	b.n	8000c88 <__udivmoddi4+0x64>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e706      	b.n	8000cb8 <__udivmoddi4+0x94>
 8000eaa:	45c8      	cmp	r8, r9
 8000eac:	d2ae      	bcs.n	8000e0c <__udivmoddi4+0x1e8>
 8000eae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eb6:	3801      	subs	r0, #1
 8000eb8:	e7a8      	b.n	8000e0c <__udivmoddi4+0x1e8>
 8000eba:	4631      	mov	r1, r6
 8000ebc:	e7ed      	b.n	8000e9a <__udivmoddi4+0x276>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	e799      	b.n	8000df6 <__udivmoddi4+0x1d2>
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	e7d4      	b.n	8000e70 <__udivmoddi4+0x24c>
 8000ec6:	46d6      	mov	lr, sl
 8000ec8:	e77f      	b.n	8000dca <__udivmoddi4+0x1a6>
 8000eca:	4463      	add	r3, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e74d      	b.n	8000d6c <__udivmoddi4+0x148>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	4623      	mov	r3, r4
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	e70f      	b.n	8000cf8 <__udivmoddi4+0xd4>
 8000ed8:	3e02      	subs	r6, #2
 8000eda:	4463      	add	r3, ip
 8000edc:	e730      	b.n	8000d40 <__udivmoddi4+0x11c>
 8000ede:	bf00      	nop

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f20 <modbus_1t5_Timeout+0x3c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2201      	movs	r2, #1
 8000eee:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <modbus_1t5_Timeout+0x3c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	691b      	ldr	r3, [r3, #16]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000efc:	4b08      	ldr	r3, [pc, #32]	@ (8000f20 <modbus_1t5_Timeout+0x3c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <modbus_1t5_Timeout+0x3c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	691b      	ldr	r3, [r3, #16]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f042 0201 	orr.w	r2, r2, #1
 8000f12:	601a      	str	r2, [r3, #0]
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	20000254 	.word	0x20000254

08000f24 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000f2c:	4b04      	ldr	r3, [pc, #16]	@ (8000f40 <modbus_3t5_Timeout+0x1c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2201      	movs	r2, #1
 8000f32:	755a      	strb	r2, [r3, #21]

}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	20000254 	.word	0x20000254

08000f44 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f007 ffaf 	bl	8008eb0 <HAL_UART_GetError>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b20      	cmp	r3, #32
 8000f56:	d101      	bne.n	8000f5c <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8000f58:	f7ff ffc4 	bl	8000ee4 <modbus_1t5_Timeout>

	}
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000f6e:	4a25      	ldr	r2, [pc, #148]	@ (8001004 <Modbus_init+0xa0>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000f74:	4b23      	ldr	r3, [pc, #140]	@ (8001004 <Modbus_init+0xa0>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	691b      	ldr	r3, [r3, #16]
 8000f80:	4a21      	ldr	r2, [pc, #132]	@ (8001008 <Modbus_init+0xa4>)
 8000f82:	210e      	movs	r1, #14
 8000f84:	4618      	mov	r0, r3
 8000f86:	f006 f9d7 	bl	8007338 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	2110      	movs	r1, #16
 8000f90:	4618      	mov	r0, r3
 8000f92:	f007 ff37 	bl	8008e04 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f007 ff4e 	bl	8008e3c <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	4a19      	ldr	r2, [pc, #100]	@ (800100c <Modbus_init+0xa8>)
 8000fa6:	2104      	movs	r1, #4
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f007 fa15 	bl	80083d8 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8000fae:	4b15      	ldr	r3, [pc, #84]	@ (8001004 <Modbus_init+0xa0>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8000fb4:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <Modbus_init+0xa0>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <Modbus_init+0xa0>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8000fc0:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000fc4:	4413      	add	r3, r2
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f007 fb3d 	bl	800864c <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <Modbus_init+0xa0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d10c      	bne.n	8000ffc <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000fe2:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <Modbus_init+0xa0>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f005 f981 	bl	80062f0 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000fee:	4b05      	ldr	r3, [pc, #20]	@ (8001004 <Modbus_init+0xa0>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	691b      	ldr	r3, [r3, #16]
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f005 fbd0 	bl	800679c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	20000254 	.word	0x20000254
 8001008:	08000f25 	.word	0x08000f25
 800100c:	08000f45 	.word	0x08000f45

08001010 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 800101c:	23ff      	movs	r3, #255	@ 0xff
 800101e:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001020:	23ff      	movs	r3, #255	@ 0xff
 8001022:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001024:	e013      	b.n	800104e <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	1c5a      	adds	r2, r3, #1
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	781a      	ldrb	r2, [r3, #0]
 800102e:	7bbb      	ldrb	r3, [r7, #14]
 8001030:	4053      	eors	r3, r2
 8001032:	b2db      	uxtb	r3, r3
 8001034:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001036:	4a0f      	ldr	r2, [pc, #60]	@ (8001074 <CRC16+0x64>)
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	4413      	add	r3, r2
 800103c:	781a      	ldrb	r2, [r3, #0]
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	4053      	eors	r3, r2
 8001042:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001044:	4a0c      	ldr	r2, [pc, #48]	@ (8001078 <CRC16+0x68>)
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	4413      	add	r3, r2
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800104e:	883b      	ldrh	r3, [r7, #0]
 8001050:	1e5a      	subs	r2, r3, #1
 8001052:	803a      	strh	r2, [r7, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1e6      	bne.n	8001026 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	b21a      	sxth	r2, r3
 800105e:	7bbb      	ldrb	r3, [r7, #14]
 8001060:	b21b      	sxth	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b21b      	sxth	r3, r3
 8001066:	b29b      	uxth	r3, r3
}
 8001068:	4618      	mov	r0, r3
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	20000100 	.word	0x20000100
 8001078:	20000000 	.word	0x20000000

0800107c <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8001082:	4b7e      	ldr	r3, [pc, #504]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	7ddb      	ldrb	r3, [r3, #23]
 8001088:	3b01      	subs	r3, #1
 800108a:	2b03      	cmp	r3, #3
 800108c:	d80a      	bhi.n	80010a4 <Modbus_Protocal_Worker+0x28>
 800108e:	a201      	add	r2, pc, #4	@ (adr r2, 8001094 <Modbus_Protocal_Worker+0x18>)
 8001090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001094:	080010af 	.word	0x080010af
 8001098:	08001243 	.word	0x08001243
 800109c:	0800113b 	.word	0x0800113b
 80010a0:	0800117f 	.word	0x0800117f
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80010a4:	4b75      	ldr	r3, [pc, #468]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2201      	movs	r2, #1
 80010aa:	75da      	strb	r2, [r3, #23]
		break;
 80010ac:	e0e1      	b.n	8001272 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80010ae:	4b73      	ldr	r3, [pc, #460]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d006      	beq.n	80010c8 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80010ba:	4b70      	ldr	r3, [pc, #448]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2202      	movs	r2, #2
 80010c0:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80010c2:	f000 f9cd 	bl	8001460 <Modbus_Emission>
 80010c6:	e018      	b.n	80010fa <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80010c8:	4b6c      	ldr	r3, [pc, #432]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80010d2:	4b6a      	ldr	r3, [pc, #424]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80010dc:	b29b      	uxth	r3, r3
 80010de:	429a      	cmp	r2, r3
 80010e0:	d00b      	beq.n	80010fa <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80010e2:	4b66      	ldr	r3, [pc, #408]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2200      	movs	r2, #0
 80010e8:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80010ea:	4b64      	ldr	r3, [pc, #400]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2200      	movs	r2, #0
 80010f0:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80010f2:	4b62      	ldr	r3, [pc, #392]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2203      	movs	r2, #3
 80010f8:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80010fa:	4b60      	ldr	r3, [pc, #384]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001104:	2b20      	cmp	r3, #32
 8001106:	f040 80ad 	bne.w	8001264 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800110a:	4b5c      	ldr	r3, [pc, #368]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2200      	movs	r2, #0
 8001110:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001114:	4b59      	ldr	r3, [pc, #356]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800111a:	4b58      	ldr	r3, [pc, #352]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	4b57      	ldr	r3, [pc, #348]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001126:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800112a:	4413      	add	r3, r2
 800112c:	3302      	adds	r3, #2
 800112e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001132:	4619      	mov	r1, r3
 8001134:	f007 fa8a 	bl	800864c <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8001138:	e094      	b.n	8001264 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800113a:	4b50      	ldr	r3, [pc, #320]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	7d1b      	ldrb	r3, [r3, #20]
 8001140:	2b00      	cmp	r3, #0
 8001142:	f000 8091 	beq.w	8001268 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001146:	4b4d      	ldr	r3, [pc, #308]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	22fe      	movs	r2, #254	@ 0xfe
 800114c:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800114e:	4b4b      	ldr	r3, [pc, #300]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001158:	4b48      	ldr	r3, [pc, #288]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001168:	4b44      	ldr	r3, [pc, #272]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 800116a:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800116c:	1a8a      	subs	r2, r1, r2
 800116e:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8001170:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001174:	4b41      	ldr	r3, [pc, #260]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2204      	movs	r2, #4
 800117a:	75da      	strb	r2, [r3, #23]
		}
		break;
 800117c:	e074      	b.n	8001268 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800117e:	4b3f      	ldr	r3, [pc, #252]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001186:	f113 0f02 	cmn.w	r3, #2
 800118a:	d150      	bne.n	800122e <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 800118c:	4b3b      	ldr	r3, [pc, #236]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2200      	movs	r2, #0
 8001192:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001194:	4b39      	ldr	r3, [pc, #228]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f203 2272 	addw	r2, r3, #626	@ 0x272
 800119c:	4b37      	ldr	r3, [pc, #220]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80011a4:	3b02      	subs	r3, #2
 80011a6:	4619      	mov	r1, r3
 80011a8:	4610      	mov	r0, r2
 80011aa:	f7ff ff31 	bl	8001010 <CRC16>
 80011ae:	4603      	mov	r3, r0
 80011b0:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80011b2:	793a      	ldrb	r2, [r7, #4]
 80011b4:	4b31      	ldr	r3, [pc, #196]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 80011b6:	6819      	ldr	r1, [r3, #0]
 80011b8:	4b30      	ldr	r3, [pc, #192]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80011c0:	3b02      	subs	r3, #2
 80011c2:	440b      	add	r3, r1
 80011c4:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d10c      	bne.n	80011e6 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80011cc:	797a      	ldrb	r2, [r7, #5]
 80011ce:	4b2b      	ldr	r3, [pc, #172]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 80011d0:	6819      	ldr	r1, [r3, #0]
 80011d2:	4b2a      	ldr	r3, [pc, #168]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80011da:	3b01      	subs	r3, #1
 80011dc:	440b      	add	r3, r1
 80011de:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d004      	beq.n	80011f0 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80011e6:	4b25      	ldr	r3, [pc, #148]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	22ff      	movs	r2, #255	@ 0xff
 80011ec:	759a      	strb	r2, [r3, #22]
				break;
 80011ee:	e040      	b.n	8001272 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80011f0:	4b22      	ldr	r3, [pc, #136]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 80011f8:	4b20      	ldr	r3, [pc, #128]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d113      	bne.n	800122a <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001202:	4b1e      	ldr	r3, [pc, #120]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800120a:	4b1c      	ldr	r3, [pc, #112]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8001212:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001214:	4b19      	ldr	r3, [pc, #100]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800121c:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800121e:	461a      	mov	r2, r3
 8001220:	f008 ff9a 	bl	800a158 <memcpy>

			//execute command
			Modbus_frame_response();
 8001224:	f000 f904 	bl	8001430 <Modbus_frame_response>
 8001228:	e001      	b.n	800122e <Modbus_Protocal_Worker+0x1b2>
				break;
 800122a:	bf00      	nop
					}
		break;


	}
}
 800122c:	e021      	b.n	8001272 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 800122e:	4b13      	ldr	r3, [pc, #76]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	7d5b      	ldrb	r3, [r3, #21]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d019      	beq.n	800126c <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001238:	4b10      	ldr	r3, [pc, #64]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2201      	movs	r2, #1
 800123e:	75da      	strb	r2, [r3, #23]
		break;
 8001240:	e014      	b.n	800126c <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800124c:	2b20      	cmp	r3, #32
 800124e:	d10f      	bne.n	8001270 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8001250:	4b0a      	ldr	r3, [pc, #40]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800125a:	4b08      	ldr	r3, [pc, #32]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2201      	movs	r2, #1
 8001260:	75da      	strb	r2, [r3, #23]
		break;
 8001262:	e005      	b.n	8001270 <Modbus_Protocal_Worker+0x1f4>
		break;
 8001264:	bf00      	nop
 8001266:	e004      	b.n	8001272 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001268:	bf00      	nop
 800126a:	e002      	b.n	8001272 <Modbus_Protocal_Worker+0x1f6>
		break;
 800126c:	bf00      	nop
 800126e:	e000      	b.n	8001272 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001270:	bf00      	nop
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000254 	.word	0x20000254

08001280 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001286:	4b1d      	ldr	r3, [pc, #116]	@ (80012fc <modbusWrite1Register+0x7c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	7e5b      	ldrb	r3, [r3, #25]
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	b29b      	uxth	r3, r3
 8001290:	4a1a      	ldr	r2, [pc, #104]	@ (80012fc <modbusWrite1Register+0x7c>)
 8001292:	6812      	ldr	r2, [r2, #0]
 8001294:	7e92      	ldrb	r2, [r2, #26]
 8001296:	4413      	add	r3, r2
 8001298:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800129a:	88fa      	ldrh	r2, [r7, #6]
 800129c:	4b17      	ldr	r3, [pc, #92]	@ (80012fc <modbusWrite1Register+0x7c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d903      	bls.n	80012ae <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80012a6:	2002      	movs	r0, #2
 80012a8:	f000 f8a0 	bl	80013ec <ModbusErrorReply>
			 return;
 80012ac:	e023      	b.n	80012f6 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80012ae:	4b13      	ldr	r3, [pc, #76]	@ (80012fc <modbusWrite1Register+0x7c>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <modbusWrite1Register+0x7c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6859      	ldr	r1, [r3, #4]
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	440b      	add	r3, r1
 80012be:	7ed2      	ldrb	r2, [r2, #27]
 80012c0:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80012c2:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <modbusWrite1Register+0x7c>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	4b0d      	ldr	r3, [pc, #52]	@ (80012fc <modbusWrite1Register+0x7c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6859      	ldr	r1, [r3, #4]
 80012cc:	88fb      	ldrh	r3, [r7, #6]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	440b      	add	r3, r1
 80012d2:	7f12      	ldrb	r2, [r2, #28]
 80012d4:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80012d6:	4b09      	ldr	r3, [pc, #36]	@ (80012fc <modbusWrite1Register+0x7c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 80012de:	4b07      	ldr	r3, [pc, #28]	@ (80012fc <modbusWrite1Register+0x7c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 80012e4:	2208      	movs	r2, #8
 80012e6:	4619      	mov	r1, r3
 80012e8:	f008 ff36 	bl	800a158 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80012ec:	4b03      	ldr	r3, [pc, #12]	@ (80012fc <modbusWrite1Register+0x7c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2205      	movs	r2, #5
 80012f2:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20000254 	.word	0x20000254

08001300 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001306:	4b38      	ldr	r3, [pc, #224]	@ (80013e8 <modbusRead1Register+0xe8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	7edb      	ldrb	r3, [r3, #27]
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	b29b      	uxth	r3, r3
 8001310:	4a35      	ldr	r2, [pc, #212]	@ (80013e8 <modbusRead1Register+0xe8>)
 8001312:	6812      	ldr	r2, [r2, #0]
 8001314:	7f12      	ldrb	r2, [r2, #28]
 8001316:	4413      	add	r3, r2
 8001318:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800131a:	4b33      	ldr	r3, [pc, #204]	@ (80013e8 <modbusRead1Register+0xe8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	7e5b      	ldrb	r3, [r3, #25]
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	b29b      	uxth	r3, r3
 8001324:	4a30      	ldr	r2, [pc, #192]	@ (80013e8 <modbusRead1Register+0xe8>)
 8001326:	6812      	ldr	r2, [r2, #0]
 8001328:	7e92      	ldrb	r2, [r2, #26]
 800132a:	4413      	add	r3, r2
 800132c:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d002      	beq.n	800133a <modbusRead1Register+0x3a>
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	2b7d      	cmp	r3, #125	@ 0x7d
 8001338:	d903      	bls.n	8001342 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800133a:	2003      	movs	r0, #3
 800133c:	f000 f856 	bl	80013ec <ModbusErrorReply>
		 return;
 8001340:	e04e      	b.n	80013e0 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8001342:	88ba      	ldrh	r2, [r7, #4]
 8001344:	4b28      	ldr	r3, [pc, #160]	@ (80013e8 <modbusRead1Register+0xe8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	429a      	cmp	r2, r3
 800134c:	d808      	bhi.n	8001360 <modbusRead1Register+0x60>
 800134e:	88ba      	ldrh	r2, [r7, #4]
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	4413      	add	r3, r2
 8001354:	461a      	mov	r2, r3
 8001356:	4b24      	ldr	r3, [pc, #144]	@ (80013e8 <modbusRead1Register+0xe8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	429a      	cmp	r2, r3
 800135e:	d903      	bls.n	8001368 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001360:	2002      	movs	r0, #2
 8001362:	f000 f843 	bl	80013ec <ModbusErrorReply>
		 return;
 8001366:	e03b      	b.n	80013e0 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001368:	4b1f      	ldr	r3, [pc, #124]	@ (80013e8 <modbusRead1Register+0xe8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2203      	movs	r2, #3
 800136e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b1c      	ldr	r3, [pc, #112]	@ (80013e8 <modbusRead1Register+0xe8>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	0052      	lsls	r2, r2, #1
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001382:	2400      	movs	r4, #0
 8001384:	e020      	b.n	80013c8 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001386:	4b18      	ldr	r3, [pc, #96]	@ (80013e8 <modbusRead1Register+0xe8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	88bb      	ldrh	r3, [r7, #4]
 800138e:	4423      	add	r3, r4
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	18d1      	adds	r1, r2, r3
 8001394:	4b14      	ldr	r3, [pc, #80]	@ (80013e8 <modbusRead1Register+0xe8>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	1c63      	adds	r3, r4, #1
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	7849      	ldrb	r1, [r1, #1]
 800139e:	4413      	add	r3, r2
 80013a0:	460a      	mov	r2, r1
 80013a2:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80013a6:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <modbusRead1Register+0xe8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	685a      	ldr	r2, [r3, #4]
 80013ac:	88bb      	ldrh	r3, [r7, #4]
 80013ae:	4423      	add	r3, r4
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	18d1      	adds	r1, r2, r3
 80013b4:	4b0c      	ldr	r3, [pc, #48]	@ (80013e8 <modbusRead1Register+0xe8>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	0063      	lsls	r3, r4, #1
 80013ba:	3303      	adds	r3, #3
 80013bc:	7809      	ldrb	r1, [r1, #0]
 80013be:	4413      	add	r3, r2
 80013c0:	460a      	mov	r2, r1
 80013c2:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80013c6:	3401      	adds	r4, #1
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	429c      	cmp	r4, r3
 80013cc:	dbdb      	blt.n	8001386 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	3301      	adds	r3, #1
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	4b04      	ldr	r3, [pc, #16]	@ (80013e8 <modbusRead1Register+0xe8>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	0052      	lsls	r2, r2, #1
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd90      	pop	{r4, r7, pc}
 80013e6:	bf00      	nop
 80013e8:	20000254 	.word	0x20000254

080013ec <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80013f6:	4b0d      	ldr	r3, [pc, #52]	@ (800142c <ModbusErrorReply+0x40>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	7e1a      	ldrb	r2, [r3, #24]
 80013fc:	4b0b      	ldr	r3, [pc, #44]	@ (800142c <ModbusErrorReply+0x40>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 800140a:	4b08      	ldr	r3, [pc, #32]	@ (800142c <ModbusErrorReply+0x40>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	79fa      	ldrb	r2, [r7, #7]
 8001410:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001414:	4b05      	ldr	r3, [pc, #20]	@ (800142c <ModbusErrorReply+0x40>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2202      	movs	r2, #2
 800141a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	20000254 	.word	0x20000254

08001430 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001434:	4b09      	ldr	r3, [pc, #36]	@ (800145c <Modbus_frame_response+0x2c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	7e1b      	ldrb	r3, [r3, #24]
 800143a:	2b03      	cmp	r3, #3
 800143c:	d004      	beq.n	8001448 <Modbus_frame_response+0x18>
 800143e:	2b06      	cmp	r3, #6
 8001440:	d105      	bne.n	800144e <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001442:	f7ff ff1d 	bl	8001280 <modbusWrite1Register>
		break;
 8001446:	e006      	b.n	8001456 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001448:	f7ff ff5a 	bl	8001300 <modbusRead1Register>
		break;
 800144c:	e003      	b.n	8001456 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800144e:	2001      	movs	r0, #1
 8001450:	f7ff ffcc 	bl	80013ec <ModbusErrorReply>
		break;
 8001454:	bf00      	nop

	}
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000254 	.word	0x20000254

08001460 <Modbus_Emission>:

void Modbus_Emission()
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001466:	4b38      	ldr	r3, [pc, #224]	@ (8001548 <Modbus_Emission+0xe8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001470:	2b20      	cmp	r3, #32
 8001472:	d15d      	bne.n	8001530 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001474:	4b34      	ldr	r3, [pc, #208]	@ (8001548 <Modbus_Emission+0xe8>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b33      	ldr	r3, [pc, #204]	@ (8001548 <Modbus_Emission+0xe8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	7812      	ldrb	r2, [r2, #0]
 800147e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001482:	4b31      	ldr	r3, [pc, #196]	@ (8001548 <Modbus_Emission+0xe8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 800148a:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800148c:	4b2e      	ldr	r3, [pc, #184]	@ (8001548 <Modbus_Emission+0xe8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8001494:	4b2c      	ldr	r3, [pc, #176]	@ (8001548 <Modbus_Emission+0xe8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 800149c:	461a      	mov	r2, r3
 800149e:	f008 fe5b 	bl	800a158 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80014a2:	4b29      	ldr	r3, [pc, #164]	@ (8001548 <Modbus_Emission+0xe8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b26      	ldr	r3, [pc, #152]	@ (8001548 <Modbus_Emission+0xe8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	3203      	adds	r2, #3
 80014b2:	b292      	uxth	r2, r2
 80014b4:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80014b8:	4b23      	ldr	r3, [pc, #140]	@ (8001548 <Modbus_Emission+0xe8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80014c0:	4b21      	ldr	r3, [pc, #132]	@ (8001548 <Modbus_Emission+0xe8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80014c8:	3b02      	subs	r3, #2
 80014ca:	4619      	mov	r1, r3
 80014cc:	4610      	mov	r0, r2
 80014ce:	f7ff fd9f 	bl	8001010 <CRC16>
 80014d2:	4603      	mov	r3, r0
 80014d4:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80014d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001548 <Modbus_Emission+0xe8>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4b1b      	ldr	r3, [pc, #108]	@ (8001548 <Modbus_Emission+0xe8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80014e2:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80014e4:	7939      	ldrb	r1, [r7, #4]
 80014e6:	4413      	add	r3, r2
 80014e8:	460a      	mov	r2, r1
 80014ea:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80014ee:	4b16      	ldr	r3, [pc, #88]	@ (8001548 <Modbus_Emission+0xe8>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <Modbus_Emission+0xe8>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80014fa:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80014fc:	7979      	ldrb	r1, [r7, #5]
 80014fe:	4413      	add	r3, r2
 8001500:	460a      	mov	r2, r1
 8001502:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001506:	4b10      	ldr	r3, [pc, #64]	@ (8001548 <Modbus_Emission+0xe8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001510:	2b20      	cmp	r3, #32
 8001512:	d10d      	bne.n	8001530 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001514:	4b0c      	ldr	r3, [pc, #48]	@ (8001548 <Modbus_Emission+0xe8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 800151a:	4b0b      	ldr	r3, [pc, #44]	@ (8001548 <Modbus_Emission+0xe8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001522:	4b09      	ldr	r3, [pc, #36]	@ (8001548 <Modbus_Emission+0xe8>)
 8001524:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001526:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800152a:	461a      	mov	r2, r3
 800152c:	f007 f80e 	bl	800854c <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001530:	4b05      	ldr	r3, [pc, #20]	@ (8001548 <Modbus_Emission+0xe8>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2200      	movs	r2, #0
 8001536:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001538:	4b03      	ldr	r3, [pc, #12]	@ (8001548 <Modbus_Emission+0xe8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2200      	movs	r2, #0
 800153e:	755a      	strb	r2, [r3, #21]

}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	20000254 	.word	0x20000254

0800154c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800154c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001550:	b086      	sub	sp, #24
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001554:	f002 ff03 	bl	800435e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001558:	f000 fc0c 	bl	8001d74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800155c:	f000 feda 	bl	8002314 <MX_GPIO_Init>
  MX_DMA_Init();
 8001560:	f000 fea6 	bl	80022b0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001564:	f000 fe56 	bl	8002214 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8001568:	f000 fe24 	bl	80021b4 <MX_TIM16_Init>
  MX_TIM5_Init();
 800156c:	f000 fdd4 	bl	8002118 <MX_TIM5_Init>
  MX_TIM1_Init();
 8001570:	f000 fc4c 	bl	8001e0c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001574:	f000 fcde 	bl	8001f34 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001578:	f000 fd2a 	bl	8001fd0 <MX_TIM3_Init>
  MX_TIM4_Init();
 800157c:	f000 fd7e 	bl	800207c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  //pwm setup
  	 relay[0] = 1;
 8001580:	4b75      	ldr	r3, [pc, #468]	@ (8001758 <main+0x20c>)
 8001582:	2201      	movs	r2, #1
 8001584:	701a      	strb	r2, [r3, #0]
  	 relay[1] = 0;
 8001586:	4b74      	ldr	r3, [pc, #464]	@ (8001758 <main+0x20c>)
 8001588:	2200      	movs	r2, #0
 800158a:	705a      	strb	r2, [r3, #1]
  	 relay[2] = 0;
 800158c:	4b72      	ldr	r3, [pc, #456]	@ (8001758 <main+0x20c>)
 800158e:	2200      	movs	r2, #0
 8001590:	709a      	strb	r2, [r3, #2]

	HAL_TIM_Base_Start(&htim1);
 8001592:	4872      	ldr	r0, [pc, #456]	@ (800175c <main+0x210>)
 8001594:	f004 fe3c 	bl	8006210 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001598:	2100      	movs	r1, #0
 800159a:	4870      	ldr	r0, [pc, #448]	@ (800175c <main+0x210>)
 800159c:	f004 ff84 	bl	80064a8 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80015a0:	4b6e      	ldr	r3, [pc, #440]	@ (800175c <main+0x210>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2200      	movs	r2, #0
 80015a6:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80015a8:	213c      	movs	r1, #60	@ 0x3c
 80015aa:	486d      	ldr	r0, [pc, #436]	@ (8001760 <main+0x214>)
 80015ac:	f005 fa38 	bl	8006a20 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 80015b0:	486c      	ldr	r0, [pc, #432]	@ (8001764 <main+0x218>)
 80015b2:	f004 fe9d 	bl	80062f0 <HAL_TIM_Base_Start_IT>
	upper = 0;
 80015b6:	496c      	ldr	r1, [pc, #432]	@ (8001768 <main+0x21c>)
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	e9c1 2300 	strd	r2, r3, [r1]
	PID_init(&pid_control, pid_p, pid_i, pid_d ,timerange);
 80015c4:	4b69      	ldr	r3, [pc, #420]	@ (800176c <main+0x220>)
 80015c6:	edd3 7a00 	vldr	s15, [r3]
 80015ca:	4b69      	ldr	r3, [pc, #420]	@ (8001770 <main+0x224>)
 80015cc:	ed93 7a00 	vldr	s14, [r3]
 80015d0:	4b68      	ldr	r3, [pc, #416]	@ (8001774 <main+0x228>)
 80015d2:	edd3 6a00 	vldr	s13, [r3]
 80015d6:	4b68      	ldr	r3, [pc, #416]	@ (8001778 <main+0x22c>)
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	ee06 3a10 	vmov	s12, r3
 80015de:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 80015e2:	eef0 1a46 	vmov.f32	s3, s12
 80015e6:	eeb0 1a66 	vmov.f32	s2, s13
 80015ea:	eef0 0a47 	vmov.f32	s1, s14
 80015ee:	eeb0 0a67 	vmov.f32	s0, s15
 80015f2:	4862      	ldr	r0, [pc, #392]	@ (800177c <main+0x230>)
 80015f4:	f002 faa2 	bl	8003b3c <PID_init>

	hmodbus.huart = &huart2;
 80015f8:	4b61      	ldr	r3, [pc, #388]	@ (8001780 <main+0x234>)
 80015fa:	4a62      	ldr	r2, [pc, #392]	@ (8001784 <main+0x238>)
 80015fc:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 80015fe:	4b60      	ldr	r3, [pc, #384]	@ (8001780 <main+0x234>)
 8001600:	4a61      	ldr	r2, [pc, #388]	@ (8001788 <main+0x23c>)
 8001602:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8001604:	4b5e      	ldr	r3, [pc, #376]	@ (8001780 <main+0x234>)
 8001606:	2215      	movs	r2, #21
 8001608:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize =200;
 800160a:	4b5d      	ldr	r3, [pc, #372]	@ (8001780 <main+0x234>)
 800160c:	22c8      	movs	r2, #200	@ 0xc8
 800160e:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 8001610:	495e      	ldr	r1, [pc, #376]	@ (800178c <main+0x240>)
 8001612:	485b      	ldr	r0, [pc, #364]	@ (8001780 <main+0x234>)
 8001614:	f7ff fca6 	bl	8000f64 <Modbus_init>

	HAL_TIM_Base_Start_IT(&htim5);
 8001618:	485d      	ldr	r0, [pc, #372]	@ (8001790 <main+0x244>)
 800161a:	f004 fe69 	bl	80062f0 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(flagstart == 0){
 800161e:	4b5d      	ldr	r3, [pc, #372]	@ (8001794 <main+0x248>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10b      	bne.n	800163e <main+0xf2>
		relay[0] = 0;
 8001626:	4b4c      	ldr	r3, [pc, #304]	@ (8001758 <main+0x20c>)
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
		relay[1] = 0;
 800162c:	4b4a      	ldr	r3, [pc, #296]	@ (8001758 <main+0x20c>)
 800162e:	2200      	movs	r2, #0
 8001630:	705a      	strb	r2, [r3, #1]
		relay[2] = 0;
 8001632:	4b49      	ldr	r3, [pc, #292]	@ (8001758 <main+0x20c>)
 8001634:	2200      	movs	r2, #0
 8001636:	709a      	strb	r2, [r3, #2]
		flagstart = 1;
 8001638:	4b56      	ldr	r3, [pc, #344]	@ (8001794 <main+0x248>)
 800163a:	2201      	movs	r2, #1
 800163c:	701a      	strb	r2, [r3, #0]
	}


	Modbus_Protocal_Worker();
 800163e:	f7ff fd1d 	bl	800107c <Modbus_Protocal_Worker>
	registerFrame[0x11].U16 = QEIdata.TotalPos[NEW]*10; //ZPos
 8001642:	4b55      	ldr	r3, [pc, #340]	@ (8001798 <main+0x24c>)
 8001644:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001648:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800164c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001650:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001654:	ee17 3a90 	vmov	r3, s15
 8001658:	b29a      	uxth	r2, r3
 800165a:	4b4c      	ldr	r3, [pc, #304]	@ (800178c <main+0x240>)
 800165c:	845a      	strh	r2, [r3, #34]	@ 0x22
	//registerFrame[0x11].U16 = b_check[0];
	registerFrame[0x12].U16 = fabs(linearspeed[NEW]*10); //ZSpeed
 800165e:	4b4f      	ldr	r3, [pc, #316]	@ (800179c <main+0x250>)
 8001660:	edd3 7a00 	vldr	s15, [r3]
 8001664:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001668:	ee67 7a87 	vmul.f32	s15, s15, s14
 800166c:	eef0 7ae7 	vabs.f32	s15, s15
 8001670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001674:	ee17 3a90 	vmov	r3, s15
 8001678:	b29a      	uxth	r2, r3
 800167a:	4b44      	ldr	r3, [pc, #272]	@ (800178c <main+0x240>)
 800167c:	849a      	strh	r2, [r3, #36]	@ 0x24
	registerFrame[0x13].U16 = fabs(linearacc); //ZAccel
 800167e:	4b48      	ldr	r3, [pc, #288]	@ (80017a0 <main+0x254>)
 8001680:	edd3 7a00 	vldr	s15, [r3]
 8001684:	eef0 7ae7 	vabs.f32	s15, s15
 8001688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800168c:	ee17 3a90 	vmov	r3, s15
 8001690:	b29a      	uxth	r2, r3
 8001692:	4b3e      	ldr	r3, [pc, #248]	@ (800178c <main+0x240>)
 8001694:	84da      	strh	r2, [r3, #38]	@ 0x26
	registerFrame[0x40].U16 = Z[3]/10; //XPos
 8001696:	4b43      	ldr	r3, [pc, #268]	@ (80017a4 <main+0x258>)
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	4a43      	ldr	r2, [pc, #268]	@ (80017a8 <main+0x25c>)
 800169c:	fb82 1203 	smull	r1, r2, r2, r3
 80016a0:	1092      	asrs	r2, r2, #2
 80016a2:	17db      	asrs	r3, r3, #31
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	4b38      	ldr	r3, [pc, #224]	@ (800178c <main+0x240>)
 80016aa:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
	BaseVacuum = registerFrame[2].U16; // 0 = off , 1 = on
 80016ae:	4b37      	ldr	r3, [pc, #220]	@ (800178c <main+0x240>)
 80016b0:	889b      	ldrh	r3, [r3, #4]
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	4b3d      	ldr	r3, [pc, #244]	@ (80017ac <main+0x260>)
 80016b6:	701a      	strb	r2, [r3, #0]
	BaseGripper = registerFrame[3].U16; // 0 = Backward , 1 = Forward
 80016b8:	4b34      	ldr	r3, [pc, #208]	@ (800178c <main+0x240>)
 80016ba:	88db      	ldrh	r3, [r3, #6]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4b3c      	ldr	r3, [pc, #240]	@ (80017b0 <main+0x264>)
 80016c0:	701a      	strb	r2, [r3, #0]

	//re counter
	if (LimitBottomFlag == 1) {
 80016c2:	4b3c      	ldr	r3, [pc, #240]	@ (80017b4 <main+0x268>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d11f      	bne.n	800170a <main+0x1be>
		memset(&QEIdata, 0, sizeof(QEIdata));
 80016ca:	2238      	movs	r2, #56	@ 0x38
 80016cc:	2100      	movs	r1, #0
 80016ce:	4832      	ldr	r0, [pc, #200]	@ (8001798 <main+0x24c>)
 80016d0:	f008 fd16 	bl	800a100 <memset>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 500);
 80016d4:	4b21      	ldr	r3, [pc, #132]	@ (800175c <main+0x210>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80016dc:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2108      	movs	r1, #8
 80016e2:	4835      	ldr	r0, [pc, #212]	@ (80017b8 <main+0x26c>)
 80016e4:	f003 fcaa 	bl	800503c <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80016e8:	20c8      	movs	r0, #200	@ 0xc8
 80016ea:	f002 fea9 	bl	8004440 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80016ee:	4b1b      	ldr	r3, [pc, #108]	@ (800175c <main+0x210>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2200      	movs	r2, #0
 80016f4:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COUNTER(&htim3,0);
 80016f6:	4b1a      	ldr	r3, [pc, #104]	@ (8001760 <main+0x214>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2200      	movs	r2, #0
 80016fc:	625a      	str	r2, [r3, #36]	@ 0x24
		registerFrame[0x10].U16 = 0;
 80016fe:	4b23      	ldr	r3, [pc, #140]	@ (800178c <main+0x240>)
 8001700:	2200      	movs	r2, #0
 8001702:	841a      	strh	r2, [r3, #32]
		LimitBottomFlag = 0;
 8001704:	4b2b      	ldr	r3, [pc, #172]	@ (80017b4 <main+0x268>)
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]
	}

	if(Lo4 == 0  && flagEmer==0){
 800170a:	4b2c      	ldr	r3, [pc, #176]	@ (80017bc <main+0x270>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d113      	bne.n	800173a <main+0x1ee>
 8001712:	4b2b      	ldr	r3, [pc, #172]	@ (80017c0 <main+0x274>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10f      	bne.n	800173a <main+0x1ee>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800171a:	4b10      	ldr	r3, [pc, #64]	@ (800175c <main+0x210>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2200      	movs	r2, #0
 8001720:	635a      	str	r2, [r3, #52]	@ 0x34
		relay[0] = 0; //Gripper pull
 8001722:	4b0d      	ldr	r3, [pc, #52]	@ (8001758 <main+0x20c>)
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
		relay[1] = 0;
 8001728:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <main+0x20c>)
 800172a:	2200      	movs	r2, #0
 800172c:	705a      	strb	r2, [r3, #1]
		relay[2] = 0;
 800172e:	4b0a      	ldr	r3, [pc, #40]	@ (8001758 <main+0x20c>)
 8001730:	2200      	movs	r2, #0
 8001732:	709a      	strb	r2, [r3, #2]
		flagEmer = 1;
 8001734:	4b22      	ldr	r3, [pc, #136]	@ (80017c0 <main+0x274>)
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
	}
	if((Lo4 == 1) && (flagEmer == 1)){
 800173a:	4b20      	ldr	r3, [pc, #128]	@ (80017bc <main+0x270>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d142      	bne.n	80017c8 <main+0x27c>
 8001742:	4b1f      	ldr	r3, [pc, #124]	@ (80017c0 <main+0x274>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d13e      	bne.n	80017c8 <main+0x27c>
		MotorDriveFlag = 1;
 800174a:	4b1e      	ldr	r3, [pc, #120]	@ (80017c4 <main+0x278>)
 800174c:	2201      	movs	r2, #1
 800174e:	701a      	strb	r2, [r3, #0]
		flagEmer = 0;
 8001750:	4b1b      	ldr	r3, [pc, #108]	@ (80017c0 <main+0x274>)
 8001752:	2200      	movs	r2, #0
 8001754:	701a      	strb	r2, [r3, #0]
 8001756:	e04c      	b.n	80017f2 <main+0x2a6>
 8001758:	200008c4 	.word	0x200008c4
 800175c:	20000258 	.word	0x20000258
 8001760:	200003f0 	.word	0x200003f0
 8001764:	200004bc 	.word	0x200004bc
 8001768:	200008b0 	.word	0x200008b0
 800176c:	20000208 	.word	0x20000208
 8001770:	2000020c 	.word	0x2000020c
 8001774:	20000210 	.word	0x20000210
 8001778:	20000200 	.word	0x20000200
 800177c:	20000940 	.word	0x20000940
 8001780:	20000958 	.word	0x20000958
 8001784:	20000720 	.word	0x20000720
 8001788:	20000654 	.word	0x20000654
 800178c:	20000e30 	.word	0x20000e30
 8001790:	20000588 	.word	0x20000588
 8001794:	2000105a 	.word	0x2000105a
 8001798:	200008f0 	.word	0x200008f0
 800179c:	200008b8 	.word	0x200008b8
 80017a0:	200008c0 	.word	0x200008c0
 80017a4:	20000fd4 	.word	0x20000fd4
 80017a8:	66666667 	.word	0x66666667
 80017ac:	20000fe4 	.word	0x20000fe4
 80017b0:	20000fe5 	.word	0x20000fe5
 80017b4:	20001054 	.word	0x20001054
 80017b8:	48000800 	.word	0x48000800
 80017bc:	20000204 	.word	0x20000204
 80017c0:	20001059 	.word	0x20001059
 80017c4:	20001040 	.word	0x20001040
	}else if((flagEmer == 1)&&(bt5 == 0)){
 80017c8:	4b8f      	ldr	r3, [pc, #572]	@ (8001a08 <main+0x4bc>)
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d110      	bne.n	80017f2 <main+0x2a6>
 80017d0:	4b8e      	ldr	r3, [pc, #568]	@ (8001a0c <main+0x4c0>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d10c      	bne.n	80017f2 <main+0x2a6>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80017d8:	4b8d      	ldr	r3, [pc, #564]	@ (8001a10 <main+0x4c4>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	2200      	movs	r2, #0
 80017de:	635a      	str	r2, [r3, #52]	@ 0x34
		registerFrame[0x10].U16 = 0;
 80017e0:	4b8c      	ldr	r3, [pc, #560]	@ (8001a14 <main+0x4c8>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	841a      	strh	r2, [r3, #32]
		registerFrame[0x01].U16 = 0;
 80017e6:	4b8b      	ldr	r3, [pc, #556]	@ (8001a14 <main+0x4c8>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	805a      	strh	r2, [r3, #2]

		flagEmer = 0;
 80017ec:	4b86      	ldr	r3, [pc, #536]	@ (8001a08 <main+0x4bc>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
	}


	static uint64_t timestamp = 0;
	int64_t currentTime = Micros();
 80017f2:	f001 f831 	bl	8002858 <Micros>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (currentTime > timestamp) {
 80017fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001802:	4985      	ldr	r1, [pc, #532]	@ (8001a18 <main+0x4cc>)
 8001804:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001808:	4290      	cmp	r0, r2
 800180a:	eb71 0303 	sbcs.w	r3, r1, r3
 800180e:	d212      	bcs.n	8001836 <main+0x2ea>
		timestamp = currentTime + timerange;	 //us
 8001810:	4b82      	ldr	r3, [pc, #520]	@ (8001a1c <main+0x4d0>)
 8001812:	881b      	ldrh	r3, [r3, #0]
 8001814:	b29b      	uxth	r3, r3
 8001816:	2200      	movs	r2, #0
 8001818:	461c      	mov	r4, r3
 800181a:	4615      	mov	r5, r2
 800181c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001820:	eb14 0a02 	adds.w	sl, r4, r2
 8001824:	eb45 0b03 	adc.w	fp, r5, r3
 8001828:	4652      	mov	r2, sl
 800182a:	465b      	mov	r3, fp
 800182c:	497a      	ldr	r1, [pc, #488]	@ (8001a18 <main+0x4cc>)
 800182e:	e9c1 2300 	strd	r2, r3, [r1]
		QEIEncoderPosVel_Update();
 8001832:	f001 f845 	bl	80028c0 <QEIEncoderPosVel_Update>
	}

	RelayDrive();
 8001836:	f002 f84b 	bl	80038d0 <RelayDrive>
	ReadButton();
 800183a:	f001 fa5f 	bl	8002cfc <ReadButton>
	ReadLogicConv();
 800183e:	f001 fa13 	bl	8002c68 <ReadLogicConv>
	ReadLimit();
 8001842:	f002 f86d 	bl	8003920 <ReadLimit>
	if (mode == 0){
 8001846:	4b76      	ldr	r3, [pc, #472]	@ (8001a20 <main+0x4d4>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d101      	bne.n	8001852 <main+0x306>
		MotorDrive();
 800184e:	f001 fa97 	bl	8002d80 <MotorDrive>
	}


	if (LimitBottom == 0) {
 8001852:	4b74      	ldr	r3, [pc, #464]	@ (8001a24 <main+0x4d8>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d102      	bne.n	8001860 <main+0x314>
		LimitBottomFlag = 1;
 800185a:	4b73      	ldr	r3, [pc, #460]	@ (8001a28 <main+0x4dc>)
 800185c:	2201      	movs	r2, #1
 800185e:	701a      	strb	r2, [r3, #0]
	}

	if (LimitTop == 0) {
 8001860:	4b72      	ldr	r3, [pc, #456]	@ (8001a2c <main+0x4e0>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d106      	bne.n	8001876 <main+0x32a>
		mode = 1;
 8001868:	4b6d      	ldr	r3, [pc, #436]	@ (8001a20 <main+0x4d4>)
 800186a:	2201      	movs	r2, #1
 800186c:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800186e:	4b68      	ldr	r3, [pc, #416]	@ (8001a10 <main+0x4c4>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2200      	movs	r2, #0
 8001874:	635a      	str	r2, [r3, #52]	@ 0x34
	}

	if (Lo3 == 1 && mode !=0) { //joy manual
 8001876:	4b6e      	ldr	r3, [pc, #440]	@ (8001a30 <main+0x4e4>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b01      	cmp	r3, #1
 800187c:	d13d      	bne.n	80018fa <main+0x3ae>
 800187e:	4b68      	ldr	r3, [pc, #416]	@ (8001a20 <main+0x4d4>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d039      	beq.n	80018fa <main+0x3ae>
			if (bt3 == 0) {
 8001886:	4b6b      	ldr	r3, [pc, #428]	@ (8001a34 <main+0x4e8>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d10a      	bne.n	80018a4 <main+0x358>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 800188e:	2201      	movs	r2, #1
 8001890:	2108      	movs	r1, #8
 8001892:	4869      	ldr	r0, [pc, #420]	@ (8001a38 <main+0x4ec>)
 8001894:	f003 fbd2 	bl	800503c <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);
 8001898:	4b68      	ldr	r3, [pc, #416]	@ (8001a3c <main+0x4f0>)
 800189a:	881a      	ldrh	r2, [r3, #0]
 800189c:	4b5c      	ldr	r3, [pc, #368]	@ (8001a10 <main+0x4c4>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	635a      	str	r2, [r3, #52]	@ 0x34
 80018a2:	e026      	b.n	80018f2 <main+0x3a6>
			} else if (bt2 == 0) {
 80018a4:	4b66      	ldr	r3, [pc, #408]	@ (8001a40 <main+0x4f4>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d10a      	bne.n	80018c2 <main+0x376>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 80018ac:	2200      	movs	r2, #0
 80018ae:	2108      	movs	r1, #8
 80018b0:	4861      	ldr	r0, [pc, #388]	@ (8001a38 <main+0x4ec>)
 80018b2:	f003 fbc3 	bl	800503c <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);
 80018b6:	4b61      	ldr	r3, [pc, #388]	@ (8001a3c <main+0x4f0>)
 80018b8:	881a      	ldrh	r2, [r3, #0]
 80018ba:	4b55      	ldr	r3, [pc, #340]	@ (8001a10 <main+0x4c4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	635a      	str	r2, [r3, #52]	@ 0x34
 80018c0:	e017      	b.n	80018f2 <main+0x3a6>
			} else if (bt1 == 0){
 80018c2:	4b60      	ldr	r3, [pc, #384]	@ (8001a44 <main+0x4f8>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d105      	bne.n	80018d6 <main+0x38a>
				Z[3] = Z[3] + 1 ;
 80018ca:	4b5f      	ldr	r3, [pc, #380]	@ (8001a48 <main+0x4fc>)
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	3301      	adds	r3, #1
 80018d0:	4a5d      	ldr	r2, [pc, #372]	@ (8001a48 <main+0x4fc>)
 80018d2:	60d3      	str	r3, [r2, #12]
 80018d4:	e00d      	b.n	80018f2 <main+0x3a6>
			}else if(bt4 == 0){
 80018d6:	4b5d      	ldr	r3, [pc, #372]	@ (8001a4c <main+0x500>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d105      	bne.n	80018ea <main+0x39e>
				Z[3] = Z[3] - 1 ;
 80018de:	4b5a      	ldr	r3, [pc, #360]	@ (8001a48 <main+0x4fc>)
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	4a58      	ldr	r2, [pc, #352]	@ (8001a48 <main+0x4fc>)
 80018e6:	60d3      	str	r3, [r2, #12]
 80018e8:	e003      	b.n	80018f2 <main+0x3a6>
			}else {
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80018ea:	4b49      	ldr	r3, [pc, #292]	@ (8001a10 <main+0x4c4>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2200      	movs	r2, #0
 80018f0:	635a      	str	r2, [r3, #52]	@ 0x34
			}

			relay[3] = 0;
 80018f2:	4b57      	ldr	r3, [pc, #348]	@ (8001a50 <main+0x504>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	70da      	strb	r2, [r3, #3]
 80018f8:	e232      	b.n	8001d60 <main+0x814>
		} else if (Lo3 == 0 && mode!=0) {
 80018fa:	4b4d      	ldr	r3, [pc, #308]	@ (8001a30 <main+0x4e4>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	f47f ae8d 	bne.w	800161e <main+0xd2>
 8001904:	4b46      	ldr	r3, [pc, #280]	@ (8001a20 <main+0x4d4>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b00      	cmp	r3, #0
 800190a:	f43f ae88 	beq.w	800161e <main+0xd2>
			relay[3] = 1;
 800190e:	4b50      	ldr	r3, [pc, #320]	@ (8001a50 <main+0x504>)
 8001910:	2201      	movs	r2, #1
 8001912:	70da      	strb	r2, [r3, #3]
			 if (bt1 == 0){
 8001914:	4b4b      	ldr	r3, [pc, #300]	@ (8001a44 <main+0x4f8>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d105      	bne.n	8001928 <main+0x3dc>
				 Z[3] = Z[3] + 1 ;
 800191c:	4b4a      	ldr	r3, [pc, #296]	@ (8001a48 <main+0x4fc>)
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	3301      	adds	r3, #1
 8001922:	4a49      	ldr	r2, [pc, #292]	@ (8001a48 <main+0x4fc>)
 8001924:	60d3      	str	r3, [r2, #12]
 8001926:	e008      	b.n	800193a <main+0x3ee>
			}else if(bt4 == 0){
 8001928:	4b48      	ldr	r3, [pc, #288]	@ (8001a4c <main+0x500>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d104      	bne.n	800193a <main+0x3ee>
				Z[3] = Z[3] - 1 ;
 8001930:	4b45      	ldr	r3, [pc, #276]	@ (8001a48 <main+0x4fc>)
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	3b01      	subs	r3, #1
 8001936:	4a44      	ldr	r2, [pc, #272]	@ (8001a48 <main+0x4fc>)
 8001938:	60d3      	str	r3, [r2, #12]
			}
			if(registerFrame[0x10].U16 == 0){
 800193a:	4b36      	ldr	r3, [pc, #216]	@ (8001a14 <main+0x4c8>)
 800193c:	8c1b      	ldrh	r3, [r3, #32]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d123      	bne.n	800198a <main+0x43e>

				if(BaseGripper==1){
 8001942:	4b44      	ldr	r3, [pc, #272]	@ (8001a54 <main+0x508>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d106      	bne.n	8001958 <main+0x40c>
					relay[0] = 0; //Gripper push
 800194a:	4b41      	ldr	r3, [pc, #260]	@ (8001a50 <main+0x504>)
 800194c:	2200      	movs	r2, #0
 800194e:	701a      	strb	r2, [r3, #0]
					relay[1] = 1;
 8001950:	4b3f      	ldr	r3, [pc, #252]	@ (8001a50 <main+0x504>)
 8001952:	2201      	movs	r2, #1
 8001954:	705a      	strb	r2, [r3, #1]
 8001956:	e009      	b.n	800196c <main+0x420>
				}else if(BaseGripper == 0){
 8001958:	4b3e      	ldr	r3, [pc, #248]	@ (8001a54 <main+0x508>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d105      	bne.n	800196c <main+0x420>
					relay[0] = 1; //Gripper push
 8001960:	4b3b      	ldr	r3, [pc, #236]	@ (8001a50 <main+0x504>)
 8001962:	2201      	movs	r2, #1
 8001964:	701a      	strb	r2, [r3, #0]
					relay[1] = 0;
 8001966:	4b3a      	ldr	r3, [pc, #232]	@ (8001a50 <main+0x504>)
 8001968:	2200      	movs	r2, #0
 800196a:	705a      	strb	r2, [r3, #1]
				}
				if(BaseVacuum==1){
 800196c:	4b3a      	ldr	r3, [pc, #232]	@ (8001a58 <main+0x50c>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d103      	bne.n	800197c <main+0x430>
					relay[2] = 1;
 8001974:	4b36      	ldr	r3, [pc, #216]	@ (8001a50 <main+0x504>)
 8001976:	2201      	movs	r2, #1
 8001978:	709a      	strb	r2, [r3, #2]
 800197a:	e006      	b.n	800198a <main+0x43e>
				}else if(BaseVacuum == 0){
 800197c:	4b36      	ldr	r3, [pc, #216]	@ (8001a58 <main+0x50c>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d102      	bne.n	800198a <main+0x43e>
					relay[2] = 0;
 8001984:	4b32      	ldr	r3, [pc, #200]	@ (8001a50 <main+0x504>)
 8001986:	2200      	movs	r2, #0
 8001988:	709a      	strb	r2, [r3, #2]
				}
			}


			//Set Home
			if(registerFrame[0x01].U16 == 2){
 800198a:	4b22      	ldr	r3, [pc, #136]	@ (8001a14 <main+0x4c8>)
 800198c:	885b      	ldrh	r3, [r3, #2]
 800198e:	2b02      	cmp	r3, #2
 8001990:	d105      	bne.n	800199e <main+0x452>
				registerFrame[0x10].U16 = 2;
 8001992:	4b20      	ldr	r3, [pc, #128]	@ (8001a14 <main+0x4c8>)
 8001994:	2202      	movs	r2, #2
 8001996:	841a      	strh	r2, [r3, #32]
				registerFrame[0x01].U16 = 0;
 8001998:	4b1e      	ldr	r3, [pc, #120]	@ (8001a14 <main+0x4c8>)
 800199a:	2200      	movs	r2, #0
 800199c:	805a      	strh	r2, [r3, #2]
			}
			//Set Shelves
			if (registerFrame[0x01].U16 == 1){
 800199e:	4b1d      	ldr	r3, [pc, #116]	@ (8001a14 <main+0x4c8>)
 80019a0:	885b      	ldrh	r3, [r3, #2]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d105      	bne.n	80019b2 <main+0x466>
				registerFrame[0x01].U16 = 0;
 80019a6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a14 <main+0x4c8>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	805a      	strh	r2, [r3, #2]
				registerFrame[0x10].U16 = 1;
 80019ac:	4b19      	ldr	r3, [pc, #100]	@ (8001a14 <main+0x4c8>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	841a      	strh	r2, [r3, #32]
			}


			//Set Shelves
			if(registerFrame[0x10].U16 == 1){
 80019b2:	4b18      	ldr	r3, [pc, #96]	@ (8001a14 <main+0x4c8>)
 80019b4:	8c1b      	ldrh	r3, [r3, #32]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	f040 80e9 	bne.w	8001b8e <main+0x642>

				if ((bt2 == 0) && (bt1 == 1)) {
 80019bc:	4b20      	ldr	r3, [pc, #128]	@ (8001a40 <main+0x4f4>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d10e      	bne.n	80019e2 <main+0x496>
 80019c4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a44 <main+0x4f8>)
 80019c6:	781b      	ldrb	r3, [r3, #0]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d10a      	bne.n	80019e2 <main+0x496>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0); //Go Up
 80019cc:	2200      	movs	r2, #0
 80019ce:	2108      	movs	r1, #8
 80019d0:	4819      	ldr	r0, [pc, #100]	@ (8001a38 <main+0x4ec>)
 80019d2:	f003 fb33 	bl	800503c <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 700);
 80019d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001a10 <main+0x4c4>)
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 80019de:	635a      	str	r2, [r3, #52]	@ 0x34
 80019e0:	e040      	b.n	8001a64 <main+0x518>
				} else if((bt2 == 1) && (bt1 == 0)){
 80019e2:	4b17      	ldr	r3, [pc, #92]	@ (8001a40 <main+0x4f4>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d138      	bne.n	8001a5c <main+0x510>
 80019ea:	4b16      	ldr	r3, [pc, #88]	@ (8001a44 <main+0x4f8>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d134      	bne.n	8001a5c <main+0x510>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1); //Go Down
 80019f2:	2201      	movs	r2, #1
 80019f4:	2108      	movs	r1, #8
 80019f6:	4810      	ldr	r0, [pc, #64]	@ (8001a38 <main+0x4ec>)
 80019f8:	f003 fb20 	bl	800503c <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 500);
 80019fc:	4b04      	ldr	r3, [pc, #16]	@ (8001a10 <main+0x4c4>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001a04:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a06:	e02d      	b.n	8001a64 <main+0x518>
 8001a08:	20001059 	.word	0x20001059
 8001a0c:	2000092f 	.word	0x2000092f
 8001a10:	20000258 	.word	0x20000258
 8001a14:	20000e30 	.word	0x20000e30
 8001a18:	20001060 	.word	0x20001060
 8001a1c:	20000200 	.word	0x20000200
 8001a20:	20000205 	.word	0x20000205
 8001a24:	20000932 	.word	0x20000932
 8001a28:	20001054 	.word	0x20001054
 8001a2c:	20000931 	.word	0x20000931
 8001a30:	2000092a 	.word	0x2000092a
 8001a34:	2000092d 	.word	0x2000092d
 8001a38:	48000800 	.word	0x48000800
 8001a3c:	20000202 	.word	0x20000202
 8001a40:	2000092c 	.word	0x2000092c
 8001a44:	2000092b 	.word	0x2000092b
 8001a48:	20000fd4 	.word	0x20000fd4
 8001a4c:	2000092e 	.word	0x2000092e
 8001a50:	200008c4 	.word	0x200008c4
 8001a54:	20000fe5 	.word	0x20000fe5
 8001a58:	20000fe4 	.word	0x20000fe4
				} else{
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001a5c:	4ba2      	ldr	r3, [pc, #648]	@ (8001ce8 <main+0x79c>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2200      	movs	r2, #0
 8001a62:	635a      	str	r2, [r3, #52]	@ 0x34
				}

				// Handle bt5 press, to ensure that this function only trigger once.
				static uint8_t flagbt5 = 0;
				if(bt5 == 0) {
 8001a64:	4ba1      	ldr	r3, [pc, #644]	@ (8001cec <main+0x7a0>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d130      	bne.n	8001ace <main+0x582>
					static uint64_t timestampbt5 = 0;
					if(HAL_GetTick() > timestampbt5 && flagbt5 == 0) {
 8001a6c:	f002 fcdc 	bl	8004428 <HAL_GetTick>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2200      	movs	r2, #0
 8001a74:	4698      	mov	r8, r3
 8001a76:	4691      	mov	r9, r2
 8001a78:	4b9d      	ldr	r3, [pc, #628]	@ (8001cf0 <main+0x7a4>)
 8001a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7e:	4542      	cmp	r2, r8
 8001a80:	eb73 0309 	sbcs.w	r3, r3, r9
 8001a84:	d226      	bcs.n	8001ad4 <main+0x588>
 8001a86:	4b9b      	ldr	r3, [pc, #620]	@ (8001cf4 <main+0x7a8>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d122      	bne.n	8001ad4 <main+0x588>
						timestampbt5 = HAL_GetTick() + 1000;
 8001a8e:	f002 fccb 	bl	8004428 <HAL_GetTick>
 8001a92:	4603      	mov	r3, r0
 8001a94:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001a98:	2200      	movs	r2, #0
 8001a9a:	603b      	str	r3, [r7, #0]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	4b94      	ldr	r3, [pc, #592]	@ (8001cf0 <main+0x7a4>)
 8001aa0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001aa4:	e9c3 1200 	strd	r1, r2, [r3]
						ShelvePos[i] = QEIdata.TotalPos[NEW];
 8001aa8:	4b93      	ldr	r3, [pc, #588]	@ (8001cf8 <main+0x7ac>)
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	4b93      	ldr	r3, [pc, #588]	@ (8001cfc <main+0x7b0>)
 8001ab0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ab2:	4993      	ldr	r1, [pc, #588]	@ (8001d00 <main+0x7b4>)
 8001ab4:	0083      	lsls	r3, r0, #2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	601a      	str	r2, [r3, #0]
						i+=1;
 8001aba:	4b8f      	ldr	r3, [pc, #572]	@ (8001cf8 <main+0x7ac>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	b2da      	uxtb	r2, r3
 8001ac2:	4b8d      	ldr	r3, [pc, #564]	@ (8001cf8 <main+0x7ac>)
 8001ac4:	701a      	strb	r2, [r3, #0]
						flagbt5 = 1;
 8001ac6:	4b8b      	ldr	r3, [pc, #556]	@ (8001cf4 <main+0x7a8>)
 8001ac8:	2201      	movs	r2, #1
 8001aca:	701a      	strb	r2, [r3, #0]
 8001acc:	e002      	b.n	8001ad4 <main+0x588>
					}
				} else {
					flagbt5 = 0;
 8001ace:	4b89      	ldr	r3, [pc, #548]	@ (8001cf4 <main+0x7a8>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	701a      	strb	r2, [r3, #0]
				}

				// Set registerFrame 0x10 to 0 (idle) if finish running
				if(i > 4){
 8001ad4:	4b88      	ldr	r3, [pc, #544]	@ (8001cf8 <main+0x7ac>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d909      	bls.n	8001af0 <main+0x5a4>
					i = 0;
 8001adc:	4b86      	ldr	r3, [pc, #536]	@ (8001cf8 <main+0x7ac>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001ae2:	4b81      	ldr	r3, [pc, #516]	@ (8001ce8 <main+0x79c>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	635a      	str	r2, [r3, #52]	@ 0x34
					registerFrame[0x10].U16 = 0;
 8001aea:	4b86      	ldr	r3, [pc, #536]	@ (8001d04 <main+0x7b8>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	841a      	strh	r2, [r3, #32]
				}


				bt5prev = bt5;
 8001af0:	4b7e      	ldr	r3, [pc, #504]	@ (8001cec <main+0x7a0>)
 8001af2:	781a      	ldrb	r2, [r3, #0]
 8001af4:	4b84      	ldr	r3, [pc, #528]	@ (8001d08 <main+0x7bc>)
 8001af6:	701a      	strb	r2, [r3, #0]
				registerFrame[0x23].U16 = ShelvePos[0]*10;
 8001af8:	4b81      	ldr	r3, [pc, #516]	@ (8001d00 <main+0x7b4>)
 8001afa:	edd3 7a00 	vldr	s15, [r3]
 8001afe:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001b02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b0a:	ee17 3a90 	vmov	r3, s15
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	4b7c      	ldr	r3, [pc, #496]	@ (8001d04 <main+0x7b8>)
 8001b12:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
				registerFrame[0x24].U16 = ShelvePos[1]*10;
 8001b16:	4b7a      	ldr	r3, [pc, #488]	@ (8001d00 <main+0x7b4>)
 8001b18:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b1c:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001b20:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b28:	ee17 3a90 	vmov	r3, s15
 8001b2c:	b29a      	uxth	r2, r3
 8001b2e:	4b75      	ldr	r3, [pc, #468]	@ (8001d04 <main+0x7b8>)
 8001b30:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
				registerFrame[0x25].U16 = ShelvePos[2]*10;
 8001b34:	4b72      	ldr	r3, [pc, #456]	@ (8001d00 <main+0x7b4>)
 8001b36:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b3a:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001b3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b46:	ee17 3a90 	vmov	r3, s15
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	4b6d      	ldr	r3, [pc, #436]	@ (8001d04 <main+0x7b8>)
 8001b4e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
				registerFrame[0x26].U16 = ShelvePos[3]*10;
 8001b52:	4b6b      	ldr	r3, [pc, #428]	@ (8001d00 <main+0x7b4>)
 8001b54:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b58:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001b5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b64:	ee17 3a90 	vmov	r3, s15
 8001b68:	b29a      	uxth	r2, r3
 8001b6a:	4b66      	ldr	r3, [pc, #408]	@ (8001d04 <main+0x7b8>)
 8001b6c:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
				registerFrame[0x27].U16 = ShelvePos[4]*10;
 8001b70:	4b63      	ldr	r3, [pc, #396]	@ (8001d00 <main+0x7b4>)
 8001b72:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b76:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001b7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b82:	ee17 3a90 	vmov	r3, s15
 8001b86:	b29a      	uxth	r2, r3
 8001b88:	4b5e      	ldr	r3, [pc, #376]	@ (8001d04 <main+0x7b8>)
 8001b8a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
				//timestamp = HAL_GetTick()+2000;
			}


			//Set Home Run To limit switch
			if(registerFrame[0x10].U16 == 2){
 8001b8e:	4b5d      	ldr	r3, [pc, #372]	@ (8001d04 <main+0x7b8>)
 8001b90:	8c1b      	ldrh	r3, [r3, #32]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d109      	bne.n	8001baa <main+0x65e>

				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 800);
 8001b96:	4b54      	ldr	r3, [pc, #336]	@ (8001ce8 <main+0x79c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001b9e:	635a      	str	r2, [r3, #52]	@ 0x34
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1); //End effector Go Down
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	2108      	movs	r1, #8
 8001ba4:	4859      	ldr	r0, [pc, #356]	@ (8001d0c <main+0x7c0>)
 8001ba6:	f003 fa49 	bl	800503c <HAL_GPIO_WritePin>

			}

			//Run Point Mode
				if(registerFrame[0x01].U16 == 8) {
 8001baa:	4b56      	ldr	r3, [pc, #344]	@ (8001d04 <main+0x7b8>)
 8001bac:	885b      	ldrh	r3, [r3, #2]
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d11a      	bne.n	8001be8 <main+0x69c>
					registerFrame[0x01].U16 = 0;
 8001bb2:	4b54      	ldr	r3, [pc, #336]	@ (8001d04 <main+0x7b8>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	805a      	strh	r2, [r3, #2]
					registerFrame[0x10].U16 = 16;
 8001bb8:	4b52      	ldr	r3, [pc, #328]	@ (8001d04 <main+0x7b8>)
 8001bba:	2210      	movs	r2, #16
 8001bbc:	841a      	strh	r2, [r3, #32]
					Arrived = 0;
 8001bbe:	4b54      	ldr	r3, [pc, #336]	@ (8001d10 <main+0x7c4>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	701a      	strb	r2, [r3, #0]
					MotorDriveFlag = 0;
 8001bc4:	4b53      	ldr	r3, [pc, #332]	@ (8001d14 <main+0x7c8>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
					Goal = registerFrame[48].U16/10;
 8001bca:	4b4e      	ldr	r3, [pc, #312]	@ (8001d04 <main+0x7b8>)
 8001bcc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8001bd0:	4a51      	ldr	r2, [pc, #324]	@ (8001d18 <main+0x7cc>)
 8001bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8001bd6:	08db      	lsrs	r3, r3, #3
 8001bd8:	b29b      	uxth	r3, r3
 8001bda:	ee07 3a90 	vmov	s15, r3
 8001bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be2:	4b4e      	ldr	r3, [pc, #312]	@ (8001d1c <main+0x7d0>)
 8001be4:	edc3 7a00 	vstr	s15, [r3]

				}

				if(registerFrame[0x10].U16 == 16){
 8001be8:	4b46      	ldr	r3, [pc, #280]	@ (8001d04 <main+0x7b8>)
 8001bea:	8c1b      	ldrh	r3, [r3, #32]
 8001bec:	2b10      	cmp	r3, #16
 8001bee:	d101      	bne.n	8001bf4 <main+0x6a8>
					MotorDrivePoint();
 8001bf0:	f001 fb6a 	bl	80032c8 <MotorDrivePoint>
				}
				if(Arrived == 1 && registerFrame[0x10].U16 == 16) {
 8001bf4:	4b46      	ldr	r3, [pc, #280]	@ (8001d10 <main+0x7c4>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b01      	cmp	r3, #1
 8001bfa:	d109      	bne.n	8001c10 <main+0x6c4>
 8001bfc:	4b41      	ldr	r3, [pc, #260]	@ (8001d04 <main+0x7b8>)
 8001bfe:	8c1b      	ldrh	r3, [r3, #32]
 8001c00:	2b10      	cmp	r3, #16
 8001c02:	d105      	bne.n	8001c10 <main+0x6c4>
					registerFrame[0x10].U16 = 0;
 8001c04:	4b3f      	ldr	r3, [pc, #252]	@ (8001d04 <main+0x7b8>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	841a      	strh	r2, [r3, #32]
					MotorDriveFlag = 0;
 8001c0a:	4b42      	ldr	r3, [pc, #264]	@ (8001d14 <main+0x7c8>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
				}

			//Run Jog Mode
			if(registerFrame[0x01].U16 == 4){
 8001c10:	4b3c      	ldr	r3, [pc, #240]	@ (8001d04 <main+0x7b8>)
 8001c12:	885b      	ldrh	r3, [r3, #2]
 8001c14:	2b04      	cmp	r3, #4
 8001c16:	d146      	bne.n	8001ca6 <main+0x75a>
				convert_to_string(registerFrame[0x21].U16, PickOrder, sizeof(PickOrder));
 8001c18:	4b3a      	ldr	r3, [pc, #232]	@ (8001d04 <main+0x7b8>)
 8001c1a:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001c1e:	2206      	movs	r2, #6
 8001c20:	493f      	ldr	r1, [pc, #252]	@ (8001d20 <main+0x7d4>)
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 fc80 	bl	8002528 <convert_to_string>
				convert_to_string(registerFrame[0x22].U16, PlaceOrder, sizeof(PlaceOrder));
 8001c28:	4b36      	ldr	r3, [pc, #216]	@ (8001d04 <main+0x7b8>)
 8001c2a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001c2e:	2206      	movs	r2, #6
 8001c30:	493c      	ldr	r1, [pc, #240]	@ (8001d24 <main+0x7d8>)
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 fc78 	bl	8002528 <convert_to_string>
				registerFrame[0x01].U16 = 0;
 8001c38:	4b32      	ldr	r3, [pc, #200]	@ (8001d04 <main+0x7b8>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	805a      	strh	r2, [r3, #2]
				registerFrame[0x10].U16 = 4;
 8001c3e:	4b31      	ldr	r3, [pc, #196]	@ (8001d04 <main+0x7b8>)
 8001c40:	2204      	movs	r2, #4
 8001c42:	841a      	strh	r2, [r3, #32]
				for(int i = 0;i<=4;i++){
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
 8001c48:	e02a      	b.n	8001ca0 <main+0x754>

					GoalPick[i] = ShelvePos[PickOrder[4-i]-'0'-1];
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	f1c3 0304 	rsb	r3, r3, #4
 8001c50:	4a33      	ldr	r2, [pc, #204]	@ (8001d20 <main+0x7d4>)
 8001c52:	5cd3      	ldrb	r3, [r2, r3]
 8001c54:	3b31      	subs	r3, #49	@ 0x31
 8001c56:	4a2a      	ldr	r2, [pc, #168]	@ (8001d00 <main+0x7b4>)
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	4413      	add	r3, r2
 8001c5c:	edd3 7a00 	vldr	s15, [r3]
 8001c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c64:	ee17 3a90 	vmov	r3, s15
 8001c68:	b299      	uxth	r1, r3
 8001c6a:	4a2f      	ldr	r2, [pc, #188]	@ (8001d28 <main+0x7dc>)
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					GoalPlace[i] = ShelvePos[PlaceOrder[4-i]-'0'-1];
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	f1c3 0304 	rsb	r3, r3, #4
 8001c78:	4a2a      	ldr	r2, [pc, #168]	@ (8001d24 <main+0x7d8>)
 8001c7a:	5cd3      	ldrb	r3, [r2, r3]
 8001c7c:	3b31      	subs	r3, #49	@ 0x31
 8001c7e:	4a20      	ldr	r2, [pc, #128]	@ (8001d00 <main+0x7b4>)
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	4413      	add	r3, r2
 8001c84:	edd3 7a00 	vldr	s15, [r3]
 8001c88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c8c:	ee17 3a90 	vmov	r3, s15
 8001c90:	b299      	uxth	r1, r3
 8001c92:	4a26      	ldr	r2, [pc, #152]	@ (8001d2c <main+0x7e0>)
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(int i = 0;i<=4;i++){
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	617b      	str	r3, [r7, #20]
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	ddd1      	ble.n	8001c4a <main+0x6fe>
//					GoalPlace[i] =(i+1)*100 +10;
				}
			}

		/////////////////START JOG////////////////////////////////////////////////////////////
			if(registerFrame[0x10].U16 == 4 && j < 5){
 8001ca6:	4b17      	ldr	r3, [pc, #92]	@ (8001d04 <main+0x7b8>)
 8001ca8:	8c1b      	ldrh	r3, [r3, #32]
 8001caa:	2b04      	cmp	r3, #4
 8001cac:	d106      	bne.n	8001cbc <main+0x770>
 8001cae:	4b20      	ldr	r3, [pc, #128]	@ (8001d30 <main+0x7e4>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	2b04      	cmp	r3, #4
 8001cb4:	dc02      	bgt.n	8001cbc <main+0x770>
				GoPick();
 8001cb6:	f000 fc6d 	bl	8002594 <GoPick>
 8001cba:	e051      	b.n	8001d60 <main+0x814>
			}else if(registerFrame[0x10].U16 == 8 && j < 5){
 8001cbc:	4b11      	ldr	r3, [pc, #68]	@ (8001d04 <main+0x7b8>)
 8001cbe:	8c1b      	ldrh	r3, [r3, #32]
 8001cc0:	2b08      	cmp	r3, #8
 8001cc2:	d106      	bne.n	8001cd2 <main+0x786>
 8001cc4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d30 <main+0x7e4>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2b04      	cmp	r3, #4
 8001cca:	dc02      	bgt.n	8001cd2 <main+0x786>
				GoPlace();
 8001ccc:	f000 fd0a 	bl	80026e4 <GoPlace>
 8001cd0:	e046      	b.n	8001d60 <main+0x814>
			}else if(j==5){
 8001cd2:	4b17      	ldr	r3, [pc, #92]	@ (8001d30 <main+0x7e4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2b05      	cmp	r3, #5
 8001cd8:	f47f aca1 	bne.w	800161e <main+0xd2>
				registerFrame[0x10].U16 = 0;
 8001cdc:	4b09      	ldr	r3, [pc, #36]	@ (8001d04 <main+0x7b8>)
 8001cde:	2200      	movs	r2, #0
 8001ce0:	841a      	strh	r2, [r3, #32]
				for(int i = 0;i<=4;i++){
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	e032      	b.n	8001d4e <main+0x802>
 8001ce8:	20000258 	.word	0x20000258
 8001cec:	2000092f 	.word	0x2000092f
 8001cf0:	20001068 	.word	0x20001068
 8001cf4:	20001070 	.word	0x20001070
 8001cf8:	20001015 	.word	0x20001015
 8001cfc:	200008f0 	.word	0x200008f0
 8001d00:	20000fc0 	.word	0x20000fc0
 8001d04:	20000e30 	.word	0x20000e30
 8001d08:	20000930 	.word	0x20000930
 8001d0c:	48000800 	.word	0x48000800
 8001d10:	20001014 	.word	0x20001014
 8001d14:	20001040 	.word	0x20001040
 8001d18:	cccccccd 	.word	0xcccccccd
 8001d1c:	20000938 	.word	0x20000938
 8001d20:	20000fe8 	.word	0x20000fe8
 8001d24:	20000ff0 	.word	0x20000ff0
 8001d28:	20000ff8 	.word	0x20000ff8
 8001d2c:	20001004 	.word	0x20001004
 8001d30:	20001010 	.word	0x20001010
					GoalPick[i] = 0;
 8001d34:	4a0b      	ldr	r2, [pc, #44]	@ (8001d64 <main+0x818>)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	2100      	movs	r1, #0
 8001d3a:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					GoalPlace[i] = 0;
 8001d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d68 <main+0x81c>)
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	2100      	movs	r1, #0
 8001d44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(int i = 0;i<=4;i++){
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	3301      	adds	r3, #1
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	ddef      	ble.n	8001d34 <main+0x7e8>
			}


				j = 0;
 8001d54:	4b05      	ldr	r3, [pc, #20]	@ (8001d6c <main+0x820>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	601a      	str	r2, [r3, #0]
				a = 7;
 8001d5a:	4b05      	ldr	r3, [pc, #20]	@ (8001d70 <main+0x824>)
 8001d5c:	2207      	movs	r2, #7
 8001d5e:	701a      	strb	r2, [r3, #0]
  {
 8001d60:	e45d      	b.n	800161e <main+0xd2>
 8001d62:	bf00      	nop
 8001d64:	20000ff8 	.word	0x20000ff8
 8001d68:	20001004 	.word	0x20001004
 8001d6c:	20001010 	.word	0x20001010
 8001d70:	20001016 	.word	0x20001016

08001d74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b094      	sub	sp, #80	@ 0x50
 8001d78:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d7a:	f107 0318 	add.w	r3, r7, #24
 8001d7e:	2238      	movs	r2, #56	@ 0x38
 8001d80:	2100      	movs	r1, #0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f008 f9bc 	bl	800a100 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d88:	1d3b      	adds	r3, r7, #4
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	601a      	str	r2, [r3, #0]
 8001d8e:	605a      	str	r2, [r3, #4]
 8001d90:	609a      	str	r2, [r3, #8]
 8001d92:	60da      	str	r2, [r3, #12]
 8001d94:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001d96:	2000      	movs	r0, #0
 8001d98:	f003 f9a6 	bl	80050e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001da0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001da4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001da6:	2340      	movs	r3, #64	@ 0x40
 8001da8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001daa:	2302      	movs	r3, #2
 8001dac:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dae:	2302      	movs	r3, #2
 8001db0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001db2:	2304      	movs	r3, #4
 8001db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001db6:	2355      	movs	r3, #85	@ 0x55
 8001db8:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dba:	2302      	movs	r3, #2
 8001dbc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dc6:	f107 0318 	add.w	r3, r7, #24
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f003 fa40 	bl	8005250 <HAL_RCC_OscConfig>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001dd6:	f001 feab 	bl	8003b30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dda:	230f      	movs	r3, #15
 8001ddc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dde:	2303      	movs	r3, #3
 8001de0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001de2:	2300      	movs	r3, #0
 8001de4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001de6:	2300      	movs	r3, #0
 8001de8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dea:	2300      	movs	r3, #0
 8001dec:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001dee:	1d3b      	adds	r3, r7, #4
 8001df0:	2104      	movs	r1, #4
 8001df2:	4618      	mov	r0, r3
 8001df4:	f003 fd3e 	bl	8005874 <HAL_RCC_ClockConfig>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d001      	beq.n	8001e02 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001dfe:	f001 fe97 	bl	8003b30 <Error_Handler>
  }
}
 8001e02:	bf00      	nop
 8001e04:	3750      	adds	r7, #80	@ 0x50
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b098      	sub	sp, #96	@ 0x60
 8001e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e12:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e16:	2200      	movs	r2, #0
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	605a      	str	r2, [r3, #4]
 8001e1c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e1e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
 8001e26:	605a      	str	r2, [r3, #4]
 8001e28:	609a      	str	r2, [r3, #8]
 8001e2a:	60da      	str	r2, [r3, #12]
 8001e2c:	611a      	str	r2, [r3, #16]
 8001e2e:	615a      	str	r2, [r3, #20]
 8001e30:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e32:	1d3b      	adds	r3, r7, #4
 8001e34:	2234      	movs	r2, #52	@ 0x34
 8001e36:	2100      	movs	r1, #0
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f008 f961 	bl	800a100 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e3e:	4b3b      	ldr	r3, [pc, #236]	@ (8001f2c <MX_TIM1_Init+0x120>)
 8001e40:	4a3b      	ldr	r2, [pc, #236]	@ (8001f30 <MX_TIM1_Init+0x124>)
 8001e42:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8001e44:	4b39      	ldr	r3, [pc, #228]	@ (8001f2c <MX_TIM1_Init+0x120>)
 8001e46:	22a9      	movs	r2, #169	@ 0xa9
 8001e48:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e4a:	4b38      	ldr	r3, [pc, #224]	@ (8001f2c <MX_TIM1_Init+0x120>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 8001e50:	4b36      	ldr	r3, [pc, #216]	@ (8001f2c <MX_TIM1_Init+0x120>)
 8001e52:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8001e56:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e58:	4b34      	ldr	r3, [pc, #208]	@ (8001f2c <MX_TIM1_Init+0x120>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e5e:	4b33      	ldr	r3, [pc, #204]	@ (8001f2c <MX_TIM1_Init+0x120>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e64:	4b31      	ldr	r3, [pc, #196]	@ (8001f2c <MX_TIM1_Init+0x120>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e6a:	4830      	ldr	r0, [pc, #192]	@ (8001f2c <MX_TIM1_Init+0x120>)
 8001e6c:	f004 fab8 	bl	80063e0 <HAL_TIM_PWM_Init>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d001      	beq.n	8001e7a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001e76:	f001 fe5b 	bl	8003b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e82:	2300      	movs	r3, #0
 8001e84:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e86:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4827      	ldr	r0, [pc, #156]	@ (8001f2c <MX_TIM1_Init+0x120>)
 8001e8e:	f006 f8c9 	bl	8008024 <HAL_TIMEx_MasterConfigSynchronization>
 8001e92:	4603      	mov	r3, r0
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d001      	beq.n	8001e9c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e98:	f001 fe4a 	bl	8003b30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e9c:	2360      	movs	r3, #96	@ 0x60
 8001e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eac:	2300      	movs	r3, #0
 8001eae:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001eb8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	481a      	ldr	r0, [pc, #104]	@ (8001f2c <MX_TIM1_Init+0x120>)
 8001ec2:	f004 ffb5 	bl	8006e30 <HAL_TIM_PWM_ConfigChannel>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001ecc:	f001 fe30 	bl	8003b30 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ee4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ee8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001ef6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001efa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001f00:	2300      	movs	r3, #0
 8001f02:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f04:	2300      	movs	r3, #0
 8001f06:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f08:	1d3b      	adds	r3, r7, #4
 8001f0a:	4619      	mov	r1, r3
 8001f0c:	4807      	ldr	r0, [pc, #28]	@ (8001f2c <MX_TIM1_Init+0x120>)
 8001f0e:	f006 f91f 	bl	8008150 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001f18:	f001 fe0a 	bl	8003b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f1c:	4803      	ldr	r0, [pc, #12]	@ (8001f2c <MX_TIM1_Init+0x120>)
 8001f1e:	f002 f877 	bl	8004010 <HAL_TIM_MspPostInit>

}
 8001f22:	bf00      	nop
 8001f24:	3760      	adds	r7, #96	@ 0x60
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	20000258 	.word	0x20000258
 8001f30:	40012c00 	.word	0x40012c00

08001f34 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b088      	sub	sp, #32
 8001f38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f3a:	f107 0310 	add.w	r3, r7, #16
 8001f3e:	2200      	movs	r2, #0
 8001f40:	601a      	str	r2, [r3, #0]
 8001f42:	605a      	str	r2, [r3, #4]
 8001f44:	609a      	str	r2, [r3, #8]
 8001f46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f48:	1d3b      	adds	r3, r7, #4
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
 8001f50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f52:	4b1e      	ldr	r3, [pc, #120]	@ (8001fcc <MX_TIM2_Init+0x98>)
 8001f54:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f58:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f5a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fcc <MX_TIM2_Init+0x98>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f60:	4b1a      	ldr	r3, [pc, #104]	@ (8001fcc <MX_TIM2_Init+0x98>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f66:	4b19      	ldr	r3, [pc, #100]	@ (8001fcc <MX_TIM2_Init+0x98>)
 8001f68:	f04f 32ff 	mov.w	r2, #4294967295
 8001f6c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f6e:	4b17      	ldr	r3, [pc, #92]	@ (8001fcc <MX_TIM2_Init+0x98>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f74:	4b15      	ldr	r3, [pc, #84]	@ (8001fcc <MX_TIM2_Init+0x98>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f7a:	4814      	ldr	r0, [pc, #80]	@ (8001fcc <MX_TIM2_Init+0x98>)
 8001f7c:	f004 f8e4 	bl	8006148 <HAL_TIM_Base_Init>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001f86:	f001 fdd3 	bl	8003b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f8a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f90:	f107 0310 	add.w	r3, r7, #16
 8001f94:	4619      	mov	r1, r3
 8001f96:	480d      	ldr	r0, [pc, #52]	@ (8001fcc <MX_TIM2_Init+0x98>)
 8001f98:	f005 f85e 	bl	8007058 <HAL_TIM_ConfigClockSource>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d001      	beq.n	8001fa6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001fa2:	f001 fdc5 	bl	8003b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001faa:	2300      	movs	r3, #0
 8001fac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fae:	1d3b      	adds	r3, r7, #4
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4806      	ldr	r0, [pc, #24]	@ (8001fcc <MX_TIM2_Init+0x98>)
 8001fb4:	f006 f836 	bl	8008024 <HAL_TIMEx_MasterConfigSynchronization>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001fbe:	f001 fdb7 	bl	8003b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fc2:	bf00      	nop
 8001fc4:	3720      	adds	r7, #32
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000324 	.word	0x20000324

08001fd0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08c      	sub	sp, #48	@ 0x30
 8001fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fd6:	f107 030c 	add.w	r3, r7, #12
 8001fda:	2224      	movs	r2, #36	@ 0x24
 8001fdc:	2100      	movs	r1, #0
 8001fde:	4618      	mov	r0, r3
 8001fe0:	f008 f88e 	bl	800a100 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe4:	463b      	mov	r3, r7
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	605a      	str	r2, [r3, #4]
 8001fec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fee:	4b21      	ldr	r3, [pc, #132]	@ (8002074 <MX_TIM3_Init+0xa4>)
 8001ff0:	4a21      	ldr	r2, [pc, #132]	@ (8002078 <MX_TIM3_Init+0xa8>)
 8001ff2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ff4:	4b1f      	ldr	r3, [pc, #124]	@ (8002074 <MX_TIM3_Init+0xa4>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ffa:	4b1e      	ldr	r3, [pc, #120]	@ (8002074 <MX_TIM3_Init+0xa4>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64799;
 8002000:	4b1c      	ldr	r3, [pc, #112]	@ (8002074 <MX_TIM3_Init+0xa4>)
 8002002:	f64f 521f 	movw	r2, #64799	@ 0xfd1f
 8002006:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002008:	4b1a      	ldr	r3, [pc, #104]	@ (8002074 <MX_TIM3_Init+0xa4>)
 800200a:	2200      	movs	r2, #0
 800200c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800200e:	4b19      	ldr	r3, [pc, #100]	@ (8002074 <MX_TIM3_Init+0xa4>)
 8002010:	2200      	movs	r2, #0
 8002012:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002014:	2303      	movs	r3, #3
 8002016:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002018:	2300      	movs	r3, #0
 800201a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800201c:	2301      	movs	r3, #1
 800201e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002020:	2300      	movs	r3, #0
 8002022:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 3;
 8002024:	2303      	movs	r3, #3
 8002026:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002028:	2300      	movs	r3, #0
 800202a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800202c:	2301      	movs	r3, #1
 800202e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002030:	2300      	movs	r3, #0
 8002032:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 3;
 8002034:	2303      	movs	r3, #3
 8002036:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002038:	f107 030c 	add.w	r3, r7, #12
 800203c:	4619      	mov	r1, r3
 800203e:	480d      	ldr	r0, [pc, #52]	@ (8002074 <MX_TIM3_Init+0xa4>)
 8002040:	f004 fc3a 	bl	80068b8 <HAL_TIM_Encoder_Init>
 8002044:	4603      	mov	r3, r0
 8002046:	2b00      	cmp	r3, #0
 8002048:	d001      	beq.n	800204e <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800204a:	f001 fd71 	bl	8003b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800204e:	2300      	movs	r3, #0
 8002050:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002052:	2300      	movs	r3, #0
 8002054:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002056:	463b      	mov	r3, r7
 8002058:	4619      	mov	r1, r3
 800205a:	4806      	ldr	r0, [pc, #24]	@ (8002074 <MX_TIM3_Init+0xa4>)
 800205c:	f005 ffe2 	bl	8008024 <HAL_TIMEx_MasterConfigSynchronization>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d001      	beq.n	800206a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8002066:	f001 fd63 	bl	8003b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800206a:	bf00      	nop
 800206c:	3730      	adds	r7, #48	@ 0x30
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	200003f0 	.word	0x200003f0
 8002078:	40000400 	.word	0x40000400

0800207c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b088      	sub	sp, #32
 8002080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002082:	f107 0310 	add.w	r3, r7, #16
 8002086:	2200      	movs	r2, #0
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	605a      	str	r2, [r3, #4]
 800208c:	609a      	str	r2, [r3, #8]
 800208e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002090:	1d3b      	adds	r3, r7, #4
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	605a      	str	r2, [r3, #4]
 8002098:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800209a:	4b1d      	ldr	r3, [pc, #116]	@ (8002110 <MX_TIM4_Init+0x94>)
 800209c:	4a1d      	ldr	r2, [pc, #116]	@ (8002114 <MX_TIM4_Init+0x98>)
 800209e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 80020a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002110 <MX_TIM4_Init+0x94>)
 80020a2:	22a9      	movs	r2, #169	@ 0xa9
 80020a4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a6:	4b1a      	ldr	r3, [pc, #104]	@ (8002110 <MX_TIM4_Init+0x94>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4999;
 80020ac:	4b18      	ldr	r3, [pc, #96]	@ (8002110 <MX_TIM4_Init+0x94>)
 80020ae:	f241 3287 	movw	r2, #4999	@ 0x1387
 80020b2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b4:	4b16      	ldr	r3, [pc, #88]	@ (8002110 <MX_TIM4_Init+0x94>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020ba:	4b15      	ldr	r3, [pc, #84]	@ (8002110 <MX_TIM4_Init+0x94>)
 80020bc:	2200      	movs	r2, #0
 80020be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80020c0:	4813      	ldr	r0, [pc, #76]	@ (8002110 <MX_TIM4_Init+0x94>)
 80020c2:	f004 f841 	bl	8006148 <HAL_TIM_Base_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80020cc:	f001 fd30 	bl	8003b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80020d6:	f107 0310 	add.w	r3, r7, #16
 80020da:	4619      	mov	r1, r3
 80020dc:	480c      	ldr	r0, [pc, #48]	@ (8002110 <MX_TIM4_Init+0x94>)
 80020de:	f004 ffbb 	bl	8007058 <HAL_TIM_ConfigClockSource>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d001      	beq.n	80020ec <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80020e8:	f001 fd22 	bl	8003b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020ec:	2300      	movs	r3, #0
 80020ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f0:	2300      	movs	r3, #0
 80020f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020f4:	1d3b      	adds	r3, r7, #4
 80020f6:	4619      	mov	r1, r3
 80020f8:	4805      	ldr	r0, [pc, #20]	@ (8002110 <MX_TIM4_Init+0x94>)
 80020fa:	f005 ff93 	bl	8008024 <HAL_TIMEx_MasterConfigSynchronization>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b00      	cmp	r3, #0
 8002102:	d001      	beq.n	8002108 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002104:	f001 fd14 	bl	8003b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002108:	bf00      	nop
 800210a:	3720      	adds	r7, #32
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	200004bc 	.word	0x200004bc
 8002114:	40000800 	.word	0x40000800

08002118 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800211e:	f107 0310 	add.w	r3, r7, #16
 8002122:	2200      	movs	r2, #0
 8002124:	601a      	str	r2, [r3, #0]
 8002126:	605a      	str	r2, [r3, #4]
 8002128:	609a      	str	r2, [r3, #8]
 800212a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800212c:	1d3b      	adds	r3, r7, #4
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]
 8002132:	605a      	str	r2, [r3, #4]
 8002134:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002136:	4b1d      	ldr	r3, [pc, #116]	@ (80021ac <MX_TIM5_Init+0x94>)
 8002138:	4a1d      	ldr	r2, [pc, #116]	@ (80021b0 <MX_TIM5_Init+0x98>)
 800213a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 800213c:	4b1b      	ldr	r3, [pc, #108]	@ (80021ac <MX_TIM5_Init+0x94>)
 800213e:	22a9      	movs	r2, #169	@ 0xa9
 8002140:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002142:	4b1a      	ldr	r3, [pc, #104]	@ (80021ac <MX_TIM5_Init+0x94>)
 8002144:	2200      	movs	r2, #0
 8002146:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002148:	4b18      	ldr	r3, [pc, #96]	@ (80021ac <MX_TIM5_Init+0x94>)
 800214a:	f04f 32ff 	mov.w	r2, #4294967295
 800214e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002150:	4b16      	ldr	r3, [pc, #88]	@ (80021ac <MX_TIM5_Init+0x94>)
 8002152:	2200      	movs	r2, #0
 8002154:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002156:	4b15      	ldr	r3, [pc, #84]	@ (80021ac <MX_TIM5_Init+0x94>)
 8002158:	2200      	movs	r2, #0
 800215a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800215c:	4813      	ldr	r0, [pc, #76]	@ (80021ac <MX_TIM5_Init+0x94>)
 800215e:	f003 fff3 	bl	8006148 <HAL_TIM_Base_Init>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d001      	beq.n	800216c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002168:	f001 fce2 	bl	8003b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800216c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002170:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002172:	f107 0310 	add.w	r3, r7, #16
 8002176:	4619      	mov	r1, r3
 8002178:	480c      	ldr	r0, [pc, #48]	@ (80021ac <MX_TIM5_Init+0x94>)
 800217a:	f004 ff6d 	bl	8007058 <HAL_TIM_ConfigClockSource>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d001      	beq.n	8002188 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002184:	f001 fcd4 	bl	8003b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002188:	2300      	movs	r3, #0
 800218a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800218c:	2300      	movs	r3, #0
 800218e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002190:	1d3b      	adds	r3, r7, #4
 8002192:	4619      	mov	r1, r3
 8002194:	4805      	ldr	r0, [pc, #20]	@ (80021ac <MX_TIM5_Init+0x94>)
 8002196:	f005 ff45 	bl	8008024 <HAL_TIMEx_MasterConfigSynchronization>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80021a0:	f001 fcc6 	bl	8003b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80021a4:	bf00      	nop
 80021a6:	3720      	adds	r7, #32
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000588 	.word	0x20000588
 80021b0:	40000c00 	.word	0x40000c00

080021b4 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80021b8:	4b14      	ldr	r3, [pc, #80]	@ (800220c <MX_TIM16_Init+0x58>)
 80021ba:	4a15      	ldr	r2, [pc, #84]	@ (8002210 <MX_TIM16_Init+0x5c>)
 80021bc:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 80021be:	4b13      	ldr	r3, [pc, #76]	@ (800220c <MX_TIM16_Init+0x58>)
 80021c0:	22a9      	movs	r2, #169	@ 0xa9
 80021c2:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c4:	4b11      	ldr	r3, [pc, #68]	@ (800220c <MX_TIM16_Init+0x58>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 80021ca:	4b10      	ldr	r3, [pc, #64]	@ (800220c <MX_TIM16_Init+0x58>)
 80021cc:	f240 4279 	movw	r2, #1145	@ 0x479
 80021d0:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021d2:	4b0e      	ldr	r3, [pc, #56]	@ (800220c <MX_TIM16_Init+0x58>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80021d8:	4b0c      	ldr	r3, [pc, #48]	@ (800220c <MX_TIM16_Init+0x58>)
 80021da:	2200      	movs	r2, #0
 80021dc:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021de:	4b0b      	ldr	r3, [pc, #44]	@ (800220c <MX_TIM16_Init+0x58>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80021e4:	4809      	ldr	r0, [pc, #36]	@ (800220c <MX_TIM16_Init+0x58>)
 80021e6:	f003 ffaf 	bl	8006148 <HAL_TIM_Base_Init>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80021f0:	f001 fc9e 	bl	8003b30 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80021f4:	2108      	movs	r1, #8
 80021f6:	4805      	ldr	r0, [pc, #20]	@ (800220c <MX_TIM16_Init+0x58>)
 80021f8:	f004 fa68 	bl	80066cc <HAL_TIM_OnePulse_Init>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8002202:	f001 fc95 	bl	8003b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000654 	.word	0x20000654
 8002210:	40014400 	.word	0x40014400

08002214 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002218:	4b23      	ldr	r3, [pc, #140]	@ (80022a8 <MX_USART2_UART_Init+0x94>)
 800221a:	4a24      	ldr	r2, [pc, #144]	@ (80022ac <MX_USART2_UART_Init+0x98>)
 800221c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800221e:	4b22      	ldr	r3, [pc, #136]	@ (80022a8 <MX_USART2_UART_Init+0x94>)
 8002220:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002224:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002226:	4b20      	ldr	r3, [pc, #128]	@ (80022a8 <MX_USART2_UART_Init+0x94>)
 8002228:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800222c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800222e:	4b1e      	ldr	r3, [pc, #120]	@ (80022a8 <MX_USART2_UART_Init+0x94>)
 8002230:	2200      	movs	r2, #0
 8002232:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002234:	4b1c      	ldr	r3, [pc, #112]	@ (80022a8 <MX_USART2_UART_Init+0x94>)
 8002236:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800223a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800223c:	4b1a      	ldr	r3, [pc, #104]	@ (80022a8 <MX_USART2_UART_Init+0x94>)
 800223e:	220c      	movs	r2, #12
 8002240:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002242:	4b19      	ldr	r3, [pc, #100]	@ (80022a8 <MX_USART2_UART_Init+0x94>)
 8002244:	2200      	movs	r2, #0
 8002246:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002248:	4b17      	ldr	r3, [pc, #92]	@ (80022a8 <MX_USART2_UART_Init+0x94>)
 800224a:	2200      	movs	r2, #0
 800224c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800224e:	4b16      	ldr	r3, [pc, #88]	@ (80022a8 <MX_USART2_UART_Init+0x94>)
 8002250:	2200      	movs	r2, #0
 8002252:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002254:	4b14      	ldr	r3, [pc, #80]	@ (80022a8 <MX_USART2_UART_Init+0x94>)
 8002256:	2200      	movs	r2, #0
 8002258:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800225a:	4b13      	ldr	r3, [pc, #76]	@ (80022a8 <MX_USART2_UART_Init+0x94>)
 800225c:	2200      	movs	r2, #0
 800225e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002260:	4811      	ldr	r0, [pc, #68]	@ (80022a8 <MX_USART2_UART_Init+0x94>)
 8002262:	f006 f859 	bl	8008318 <HAL_UART_Init>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 800226c:	f001 fc60 	bl	8003b30 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002270:	2100      	movs	r1, #0
 8002272:	480d      	ldr	r0, [pc, #52]	@ (80022a8 <MX_USART2_UART_Init+0x94>)
 8002274:	f007 fe79 	bl	8009f6a <HAL_UARTEx_SetTxFifoThreshold>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 800227e:	f001 fc57 	bl	8003b30 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002282:	2100      	movs	r1, #0
 8002284:	4808      	ldr	r0, [pc, #32]	@ (80022a8 <MX_USART2_UART_Init+0x94>)
 8002286:	f007 feae 	bl	8009fe6 <HAL_UARTEx_SetRxFifoThreshold>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8002290:	f001 fc4e 	bl	8003b30 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002294:	4804      	ldr	r0, [pc, #16]	@ (80022a8 <MX_USART2_UART_Init+0x94>)
 8002296:	f007 fe2f 	bl	8009ef8 <HAL_UARTEx_DisableFifoMode>
 800229a:	4603      	mov	r3, r0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d001      	beq.n	80022a4 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80022a0:	f001 fc46 	bl	8003b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022a4:	bf00      	nop
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20000720 	.word	0x20000720
 80022ac:	40004400 	.word	0x40004400

080022b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80022b6:	4b16      	ldr	r3, [pc, #88]	@ (8002310 <MX_DMA_Init+0x60>)
 80022b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022ba:	4a15      	ldr	r2, [pc, #84]	@ (8002310 <MX_DMA_Init+0x60>)
 80022bc:	f043 0304 	orr.w	r3, r3, #4
 80022c0:	6493      	str	r3, [r2, #72]	@ 0x48
 80022c2:	4b13      	ldr	r3, [pc, #76]	@ (8002310 <MX_DMA_Init+0x60>)
 80022c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022c6:	f003 0304 	and.w	r3, r3, #4
 80022ca:	607b      	str	r3, [r7, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022ce:	4b10      	ldr	r3, [pc, #64]	@ (8002310 <MX_DMA_Init+0x60>)
 80022d0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022d2:	4a0f      	ldr	r2, [pc, #60]	@ (8002310 <MX_DMA_Init+0x60>)
 80022d4:	f043 0301 	orr.w	r3, r3, #1
 80022d8:	6493      	str	r3, [r2, #72]	@ 0x48
 80022da:	4b0d      	ldr	r3, [pc, #52]	@ (8002310 <MX_DMA_Init+0x60>)
 80022dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022de:	f003 0301 	and.w	r3, r3, #1
 80022e2:	603b      	str	r3, [r7, #0]
 80022e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80022e6:	2200      	movs	r2, #0
 80022e8:	2100      	movs	r1, #0
 80022ea:	200b      	movs	r0, #11
 80022ec:	f002 f9a5 	bl	800463a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80022f0:	200b      	movs	r0, #11
 80022f2:	f002 f9bc 	bl	800466e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80022f6:	2200      	movs	r2, #0
 80022f8:	2100      	movs	r1, #0
 80022fa:	200c      	movs	r0, #12
 80022fc:	f002 f99d 	bl	800463a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002300:	200c      	movs	r0, #12
 8002302:	f002 f9b4 	bl	800466e <HAL_NVIC_EnableIRQ>

}
 8002306:	bf00      	nop
 8002308:	3708      	adds	r7, #8
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40021000 	.word	0x40021000

08002314 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08a      	sub	sp, #40	@ 0x28
 8002318:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231a:	f107 0314 	add.w	r3, r7, #20
 800231e:	2200      	movs	r2, #0
 8002320:	601a      	str	r2, [r3, #0]
 8002322:	605a      	str	r2, [r3, #4]
 8002324:	609a      	str	r2, [r3, #8]
 8002326:	60da      	str	r2, [r3, #12]
 8002328:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800232a:	4b63      	ldr	r3, [pc, #396]	@ (80024b8 <MX_GPIO_Init+0x1a4>)
 800232c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232e:	4a62      	ldr	r2, [pc, #392]	@ (80024b8 <MX_GPIO_Init+0x1a4>)
 8002330:	f043 0304 	orr.w	r3, r3, #4
 8002334:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002336:	4b60      	ldr	r3, [pc, #384]	@ (80024b8 <MX_GPIO_Init+0x1a4>)
 8002338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800233a:	f003 0304 	and.w	r3, r3, #4
 800233e:	613b      	str	r3, [r7, #16]
 8002340:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002342:	4b5d      	ldr	r3, [pc, #372]	@ (80024b8 <MX_GPIO_Init+0x1a4>)
 8002344:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002346:	4a5c      	ldr	r2, [pc, #368]	@ (80024b8 <MX_GPIO_Init+0x1a4>)
 8002348:	f043 0320 	orr.w	r3, r3, #32
 800234c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800234e:	4b5a      	ldr	r3, [pc, #360]	@ (80024b8 <MX_GPIO_Init+0x1a4>)
 8002350:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002352:	f003 0320 	and.w	r3, r3, #32
 8002356:	60fb      	str	r3, [r7, #12]
 8002358:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800235a:	4b57      	ldr	r3, [pc, #348]	@ (80024b8 <MX_GPIO_Init+0x1a4>)
 800235c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800235e:	4a56      	ldr	r2, [pc, #344]	@ (80024b8 <MX_GPIO_Init+0x1a4>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002366:	4b54      	ldr	r3, [pc, #336]	@ (80024b8 <MX_GPIO_Init+0x1a4>)
 8002368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	60bb      	str	r3, [r7, #8]
 8002370:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002372:	4b51      	ldr	r3, [pc, #324]	@ (80024b8 <MX_GPIO_Init+0x1a4>)
 8002374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002376:	4a50      	ldr	r2, [pc, #320]	@ (80024b8 <MX_GPIO_Init+0x1a4>)
 8002378:	f043 0302 	orr.w	r3, r3, #2
 800237c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800237e:	4b4e      	ldr	r3, [pc, #312]	@ (80024b8 <MX_GPIO_Init+0x1a4>)
 8002380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	607b      	str	r3, [r7, #4]
 8002388:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 800238a:	2200      	movs	r2, #0
 800238c:	210a      	movs	r1, #10
 800238e:	484b      	ldr	r0, [pc, #300]	@ (80024bc <MX_GPIO_Init+0x1a8>)
 8002390:	f002 fe54 	bl	800503c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002394:	2200      	movs	r2, #0
 8002396:	2120      	movs	r1, #32
 8002398:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800239c:	f002 fe4e 	bl	800503c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|Relay4_Pin, GPIO_PIN_RESET);
 80023a0:	2200      	movs	r2, #0
 80023a2:	f240 2106 	movw	r1, #518	@ 0x206
 80023a6:	4846      	ldr	r0, [pc, #280]	@ (80024c0 <MX_GPIO_Init+0x1ac>)
 80023a8:	f002 fe48 	bl	800503c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80023ac:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023b2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80023b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b8:	2300      	movs	r3, #0
 80023ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023bc:	f107 0314 	add.w	r3, r7, #20
 80023c0:	4619      	mov	r1, r3
 80023c2:	483e      	ldr	r0, [pc, #248]	@ (80024bc <MX_GPIO_Init+0x1a8>)
 80023c4:	f002 fca0 	bl	8004d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80023c8:	230a      	movs	r3, #10
 80023ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023cc:	2301      	movs	r3, #1
 80023ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	2300      	movs	r3, #0
 80023d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d4:	2300      	movs	r3, #0
 80023d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	4619      	mov	r1, r3
 80023de:	4837      	ldr	r0, [pc, #220]	@ (80024bc <MX_GPIO_Init+0x1a8>)
 80023e0:	f002 fc92 	bl	8004d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA8
                           PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8
 80023e4:	f240 7313 	movw	r3, #1811	@ 0x713
 80023e8:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ea:	2300      	movs	r3, #0
 80023ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023ee:	2301      	movs	r3, #1
 80023f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f2:	f107 0314 	add.w	r3, r7, #20
 80023f6:	4619      	mov	r1, r3
 80023f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023fc:	f002 fc84 	bl	8004d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002400:	2320      	movs	r3, #32
 8002402:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002404:	2301      	movs	r3, #1
 8002406:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002408:	2300      	movs	r3, #0
 800240a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800240c:	2300      	movs	r3, #0
 800240e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002410:	f107 0314 	add.w	r3, r7, #20
 8002414:	4619      	mov	r1, r3
 8002416:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800241a:	f002 fc75 	bl	8004d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800241e:	2301      	movs	r3, #1
 8002420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002422:	2300      	movs	r3, #0
 8002424:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002426:	2301      	movs	r3, #1
 8002428:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800242a:	f107 0314 	add.w	r3, r7, #20
 800242e:	4619      	mov	r1, r3
 8002430:	4823      	ldr	r0, [pc, #140]	@ (80024c0 <MX_GPIO_Init+0x1ac>)
 8002432:	f002 fc69 	bl	8004d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 Relay4_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|Relay4_Pin;
 8002436:	f240 2306 	movw	r3, #518	@ 0x206
 800243a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800243c:	2301      	movs	r3, #1
 800243e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002440:	2300      	movs	r3, #0
 8002442:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002444:	2300      	movs	r3, #0
 8002446:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	4619      	mov	r1, r3
 800244e:	481c      	ldr	r0, [pc, #112]	@ (80024c0 <MX_GPIO_Init+0x1ac>)
 8002450:	f002 fc5a 	bl	8004d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002454:	2380      	movs	r3, #128	@ 0x80
 8002456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002458:	2300      	movs	r3, #0
 800245a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	4619      	mov	r1, r3
 8002466:	4815      	ldr	r0, [pc, #84]	@ (80024bc <MX_GPIO_Init+0x1a8>)
 8002468:	f002 fc4e 	bl	8004d08 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800246c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002470:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002472:	2300      	movs	r3, #0
 8002474:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002476:	2301      	movs	r3, #1
 8002478:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800247a:	f107 0314 	add.w	r3, r7, #20
 800247e:	4619      	mov	r1, r3
 8002480:	480e      	ldr	r0, [pc, #56]	@ (80024bc <MX_GPIO_Init+0x1a8>)
 8002482:	f002 fc41 	bl	8004d08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002486:	2340      	movs	r3, #64	@ 0x40
 8002488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800248a:	2300      	movs	r3, #0
 800248c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002492:	f107 0314 	add.w	r3, r7, #20
 8002496:	4619      	mov	r1, r3
 8002498:	4809      	ldr	r0, [pc, #36]	@ (80024c0 <MX_GPIO_Init+0x1ac>)
 800249a:	f002 fc35 	bl	8004d08 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800249e:	2200      	movs	r2, #0
 80024a0:	2100      	movs	r1, #0
 80024a2:	2028      	movs	r0, #40	@ 0x28
 80024a4:	f002 f8c9 	bl	800463a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024a8:	2028      	movs	r0, #40	@ 0x28
 80024aa:	f002 f8e0 	bl	800466e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80024ae:	bf00      	nop
 80024b0:	3728      	adds	r7, #40	@ 0x28
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40021000 	.word	0x40021000
 80024bc:	48000800 	.word	0x48000800
 80024c0:	48000400 	.word	0x48000400

080024c4 <HAL_TIM_PeriodElapsedCallback>:
//	}
//
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024c4:	b5b0      	push	{r4, r5, r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	4a11      	ldr	r2, [pc, #68]	@ (8002514 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d108      	bne.n	80024e6 <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		registerFrame[0].U16 = 22881;
 80024d4:	4b10      	ldr	r3, [pc, #64]	@ (8002518 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80024d6:	f645 1261 	movw	r2, #22881	@ 0x5961
 80024da:	801a      	strh	r2, [r3, #0]
		CountGripper += 1;
 80024dc:	4b0f      	ldr	r3, [pc, #60]	@ (800251c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	3301      	adds	r3, #1
 80024e2:	4a0e      	ldr	r2, [pc, #56]	@ (800251c <HAL_TIM_PeriodElapsedCallback+0x58>)
 80024e4:	6013      	str	r3, [r2, #0]
	}
	if (htim == &htim5) {
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002520 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d10d      	bne.n	800250a <HAL_TIM_PeriodElapsedCallback+0x46>
		upper += 1;
 80024ee:	4b0d      	ldr	r3, [pc, #52]	@ (8002524 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80024f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f4:	1c54      	adds	r4, r2, #1
 80024f6:	f143 0500 	adc.w	r5, r3, #0
 80024fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002524 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80024fc:	e9c3 4500 	strd	r4, r5, [r3]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002500:	2120      	movs	r1, #32
 8002502:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002506:	f002 fdb1 	bl	800506c <HAL_GPIO_TogglePin>
	}
}
 800250a:	bf00      	nop
 800250c:	3708      	adds	r7, #8
 800250e:	46bd      	mov	sp, r7
 8002510:	bdb0      	pop	{r4, r5, r7, pc}
 8002512:	bf00      	nop
 8002514:	200004bc 	.word	0x200004bc
 8002518:	20000e30 	.word	0x20000e30
 800251c:	200008d0 	.word	0x200008d0
 8002520:	20000588 	.word	0x20000588
 8002524:	200008b0 	.word	0x200008b0

08002528 <convert_to_string>:

void convert_to_string(uint16_t number, char* buffer, int buffer_size) {
 8002528:	b480      	push	{r7}
 800252a:	b087      	sub	sp, #28
 800252c:	af00      	add	r7, sp, #0
 800252e:	4603      	mov	r3, r0
 8002530:	60b9      	str	r1, [r7, #8]
 8002532:	607a      	str	r2, [r7, #4]
 8002534:	81fb      	strh	r3, [r7, #14]
  if (buffer_size < 6) { // Ensure buffer size is at least 6 (for 5 digits + null terminator)    return; // Handle error (insufficient buffer size)
  }

  int index = 0;
 8002536:	2300      	movs	r3, #0
 8002538:	617b      	str	r3, [r7, #20]
  do {
    uint8_t digit = number % 10;
 800253a:	89fa      	ldrh	r2, [r7, #14]
 800253c:	4b14      	ldr	r3, [pc, #80]	@ (8002590 <convert_to_string+0x68>)
 800253e:	fba3 1302 	umull	r1, r3, r3, r2
 8002542:	08d9      	lsrs	r1, r3, #3
 8002544:	460b      	mov	r3, r1
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	005b      	lsls	r3, r3, #1
 800254c:	1ad3      	subs	r3, r2, r3
 800254e:	b29b      	uxth	r3, r3
 8002550:	74fb      	strb	r3, [r7, #19]
    buffer[index++] = digit + '0';
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	1c5a      	adds	r2, r3, #1
 8002556:	617a      	str	r2, [r7, #20]
 8002558:	461a      	mov	r2, r3
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	4413      	add	r3, r2
 800255e:	7cfa      	ldrb	r2, [r7, #19]
 8002560:	3230      	adds	r2, #48	@ 0x30
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	701a      	strb	r2, [r3, #0]
    number /= 10;
 8002566:	89fb      	ldrh	r3, [r7, #14]
 8002568:	4a09      	ldr	r2, [pc, #36]	@ (8002590 <convert_to_string+0x68>)
 800256a:	fba2 2303 	umull	r2, r3, r2, r3
 800256e:	08db      	lsrs	r3, r3, #3
 8002570:	81fb      	strh	r3, [r7, #14]
  } while (number > 0);
 8002572:	89fb      	ldrh	r3, [r7, #14]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1e0      	bne.n	800253a <convert_to_string+0x12>
  buffer[index] = '\0';
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	4413      	add	r3, r2
 800257e:	2200      	movs	r2, #0
 8002580:	701a      	strb	r2, [r3, #0]
}
 8002582:	bf00      	nop
 8002584:	371c      	adds	r7, #28
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr
 800258e:	bf00      	nop
 8002590:	cccccccd 	.word	0xcccccccd

08002594 <GoPick>:

void GoPick() {
 8002594:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002598:	af00      	add	r7, sp, #0
	//a=0;
	b_check[5] = 1;
 800259a:	4b42      	ldr	r3, [pc, #264]	@ (80026a4 <GoPick+0x110>)
 800259c:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80025a0:	615a      	str	r2, [r3, #20]
	Arrived = 0;
 80025a2:	4b41      	ldr	r3, [pc, #260]	@ (80026a8 <GoPick+0x114>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	701a      	strb	r2, [r3, #0]

	Goal = GoalPick[j];
 80025a8:	4b40      	ldr	r3, [pc, #256]	@ (80026ac <GoPick+0x118>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a40      	ldr	r2, [pc, #256]	@ (80026b0 <GoPick+0x11c>)
 80025ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025b2:	ee07 3a90 	vmov	s15, r3
 80025b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ba:	4b3e      	ldr	r3, [pc, #248]	@ (80026b4 <GoPick+0x120>)
 80025bc:	edc3 7a00 	vstr	s15, [r3]
	MotorDrive();
 80025c0:	f000 fbde 	bl	8002d80 <MotorDrive>

	static uint64_t timestampVacuum = 0;
  //Gripper FW Vacuum On
	if((Arrived == 1)&&(flagpickend ==0)){
 80025c4:	4b38      	ldr	r3, [pc, #224]	@ (80026a8 <GoPick+0x114>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d129      	bne.n	8002620 <GoPick+0x8c>
 80025cc:	4b3a      	ldr	r3, [pc, #232]	@ (80026b8 <GoPick+0x124>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d125      	bne.n	8002620 <GoPick+0x8c>
		relay[2] = 1; //Vacuum On
 80025d4:	4b39      	ldr	r3, [pc, #228]	@ (80026bc <GoPick+0x128>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	709a      	strb	r2, [r3, #2]

		relay[0] = 0; //Gripper push
 80025da:	4b38      	ldr	r3, [pc, #224]	@ (80026bc <GoPick+0x128>)
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
		relay[1] = 1;
 80025e0:	4b36      	ldr	r3, [pc, #216]	@ (80026bc <GoPick+0x128>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	705a      	strb	r2, [r3, #1]

		a=1;
 80025e6:	4b36      	ldr	r3, [pc, #216]	@ (80026c0 <GoPick+0x12c>)
 80025e8:	2201      	movs	r2, #1
 80025ea:	701a      	strb	r2, [r3, #0]
		if (GripperFlag == 0) {
 80025ec:	4b35      	ldr	r3, [pc, #212]	@ (80026c4 <GoPick+0x130>)
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d115      	bne.n	8002620 <GoPick+0x8c>
			timestampVacuum = HAL_GetTick()+500;
 80025f4:	f001 ff18 	bl	8004428 <HAL_GetTick>
 80025f8:	4603      	mov	r3, r0
 80025fa:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80025fe:	2200      	movs	r2, #0
 8002600:	4698      	mov	r8, r3
 8002602:	4691      	mov	r9, r2
 8002604:	4b30      	ldr	r3, [pc, #192]	@ (80026c8 <GoPick+0x134>)
 8002606:	e9c3 8900 	strd	r8, r9, [r3]
			WaitGripper = CountGripper+150;
 800260a:	4b30      	ldr	r3, [pc, #192]	@ (80026cc <GoPick+0x138>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	3396      	adds	r3, #150	@ 0x96
 8002610:	4a2f      	ldr	r2, [pc, #188]	@ (80026d0 <GoPick+0x13c>)
 8002612:	6013      	str	r3, [r2, #0]
			GripperFlag = 1;
 8002614:	4b2b      	ldr	r3, [pc, #172]	@ (80026c4 <GoPick+0x130>)
 8002616:	2201      	movs	r2, #1
 8002618:	701a      	strb	r2, [r3, #0]
			flagpickend = 0;
 800261a:	4b27      	ldr	r3, [pc, #156]	@ (80026b8 <GoPick+0x124>)
 800261c:	2200      	movs	r2, #0
 800261e:	701a      	strb	r2, [r3, #0]
		}
	}
	if((ActualGripper == 1) && (flagpickend == 0) && (HAL_GetTick()>= timestampVacuum)){ //leed switch Out And wait 200 ms
 8002620:	4b2c      	ldr	r3, [pc, #176]	@ (80026d4 <GoPick+0x140>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d11f      	bne.n	8002668 <GoPick+0xd4>
 8002628:	4b23      	ldr	r3, [pc, #140]	@ (80026b8 <GoPick+0x124>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d11b      	bne.n	8002668 <GoPick+0xd4>
 8002630:	f001 fefa 	bl	8004428 <HAL_GetTick>
 8002634:	4603      	mov	r3, r0
 8002636:	2200      	movs	r2, #0
 8002638:	461c      	mov	r4, r3
 800263a:	4615      	mov	r5, r2
 800263c:	4b22      	ldr	r3, [pc, #136]	@ (80026c8 <GoPick+0x134>)
 800263e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002642:	4294      	cmp	r4, r2
 8002644:	eb75 0303 	sbcs.w	r3, r5, r3
 8002648:	d30e      	bcc.n	8002668 <GoPick+0xd4>
		relay[0] = 1; //Gripper pull
 800264a:	4b1c      	ldr	r3, [pc, #112]	@ (80026bc <GoPick+0x128>)
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]
		relay[1] = 0;
 8002650:	4b1a      	ldr	r3, [pc, #104]	@ (80026bc <GoPick+0x128>)
 8002652:	2200      	movs	r2, #0
 8002654:	705a      	strb	r2, [r3, #1]
		a=2;
 8002656:	4b1a      	ldr	r3, [pc, #104]	@ (80026c0 <GoPick+0x12c>)
 8002658:	2202      	movs	r2, #2
 800265a:	701a      	strb	r2, [r3, #0]
		flagpick = 1;
 800265c:	4b1e      	ldr	r3, [pc, #120]	@ (80026d8 <GoPick+0x144>)
 800265e:	2201      	movs	r2, #1
 8002660:	701a      	strb	r2, [r3, #0]
		flagpickend = 1;
 8002662:	4b15      	ldr	r3, [pc, #84]	@ (80026b8 <GoPick+0x124>)
 8002664:	2201      	movs	r2, #1
 8002666:	701a      	strb	r2, [r3, #0]
	}

	if((ActualGripper == 0) && (flagpick == 1) && (flagpickend == 1)){
 8002668:	4b1a      	ldr	r3, [pc, #104]	@ (80026d4 <GoPick+0x140>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d116      	bne.n	800269e <GoPick+0x10a>
 8002670:	4b19      	ldr	r3, [pc, #100]	@ (80026d8 <GoPick+0x144>)
 8002672:	781b      	ldrb	r3, [r3, #0]
 8002674:	2b01      	cmp	r3, #1
 8002676:	d112      	bne.n	800269e <GoPick+0x10a>
 8002678:	4b0f      	ldr	r3, [pc, #60]	@ (80026b8 <GoPick+0x124>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d10e      	bne.n	800269e <GoPick+0x10a>
		GripperFlag = 0;
 8002680:	4b10      	ldr	r3, [pc, #64]	@ (80026c4 <GoPick+0x130>)
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]
		registerFrame[0x10].U16 = 8;
 8002686:	4b15      	ldr	r3, [pc, #84]	@ (80026dc <GoPick+0x148>)
 8002688:	2208      	movs	r2, #8
 800268a:	841a      	strh	r2, [r3, #32]
		flagpick = 0;
 800268c:	4b12      	ldr	r3, [pc, #72]	@ (80026d8 <GoPick+0x144>)
 800268e:	2200      	movs	r2, #0
 8002690:	701a      	strb	r2, [r3, #0]
		a=3;
 8002692:	4b0b      	ldr	r3, [pc, #44]	@ (80026c0 <GoPick+0x12c>)
 8002694:	2203      	movs	r2, #3
 8002696:	701a      	strb	r2, [r3, #0]
		MotorDriveFlag = 0;
 8002698:	4b11      	ldr	r3, [pc, #68]	@ (80026e0 <GoPick+0x14c>)
 800269a:	2200      	movs	r2, #0
 800269c:	701a      	strb	r2, [r3, #0]
	}

}
 800269e:	bf00      	nop
 80026a0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80026a4:	20001018 	.word	0x20001018
 80026a8:	20001014 	.word	0x20001014
 80026ac:	20001010 	.word	0x20001010
 80026b0:	20000ff8 	.word	0x20000ff8
 80026b4:	20000938 	.word	0x20000938
 80026b8:	20001056 	.word	0x20001056
 80026bc:	200008c4 	.word	0x200008c4
 80026c0:	20001016 	.word	0x20001016
 80026c4:	200008cc 	.word	0x200008cc
 80026c8:	20001078 	.word	0x20001078
 80026cc:	200008d0 	.word	0x200008d0
 80026d0:	200008c8 	.word	0x200008c8
 80026d4:	20000fe7 	.word	0x20000fe7
 80026d8:	20001055 	.word	0x20001055
 80026dc:	20000e30 	.word	0x20000e30
 80026e0:	20001040 	.word	0x20001040

080026e4 <GoPlace>:

void GoPlace() {
 80026e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026e8:	af00      	add	r7, sp, #0

	static uint64_t timestampVacuum = 0;
	if((ActualGripper == 0)){//Gripper BW before move
 80026ea:	4b4a      	ldr	r3, [pc, #296]	@ (8002814 <GoPlace+0x130>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d114      	bne.n	800271c <GoPlace+0x38>
		Arrived = 0;
 80026f2:	4b49      	ldr	r3, [pc, #292]	@ (8002818 <GoPlace+0x134>)
 80026f4:	2200      	movs	r2, #0
 80026f6:	701a      	strb	r2, [r3, #0]
		Goal = GoalPlace[j]+10;
 80026f8:	4b48      	ldr	r3, [pc, #288]	@ (800281c <GoPlace+0x138>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a48      	ldr	r2, [pc, #288]	@ (8002820 <GoPlace+0x13c>)
 80026fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002702:	330a      	adds	r3, #10
 8002704:	ee07 3a90 	vmov	s15, r3
 8002708:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800270c:	4b45      	ldr	r3, [pc, #276]	@ (8002824 <GoPlace+0x140>)
 800270e:	edc3 7a00 	vstr	s15, [r3]
		MotorDrive();
 8002712:	f000 fb35 	bl	8002d80 <MotorDrive>
		a = 4;
 8002716:	4b44      	ldr	r3, [pc, #272]	@ (8002828 <GoPlace+0x144>)
 8002718:	2204      	movs	r2, #4
 800271a:	701a      	strb	r2, [r3, #0]
	}//Gripper FW Vacuum Off
	if((Arrived == 1)&&(flagplaceend == 0)){
 800271c:	4b3e      	ldr	r3, [pc, #248]	@ (8002818 <GoPlace+0x134>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d126      	bne.n	8002772 <GoPlace+0x8e>
 8002724:	4b41      	ldr	r3, [pc, #260]	@ (800282c <GoPlace+0x148>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b00      	cmp	r3, #0
 800272a:	d122      	bne.n	8002772 <GoPlace+0x8e>
		relay[2] = 0; //Vacuum Off
 800272c:	4b40      	ldr	r3, [pc, #256]	@ (8002830 <GoPlace+0x14c>)
 800272e:	2200      	movs	r2, #0
 8002730:	709a      	strb	r2, [r3, #2]

		relay[0] = 0;
 8002732:	4b3f      	ldr	r3, [pc, #252]	@ (8002830 <GoPlace+0x14c>)
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
		relay[1] = 1; //Gripper push
 8002738:	4b3d      	ldr	r3, [pc, #244]	@ (8002830 <GoPlace+0x14c>)
 800273a:	2201      	movs	r2, #1
 800273c:	705a      	strb	r2, [r3, #1]
		if (GripperFlag == 0) {
 800273e:	4b3d      	ldr	r3, [pc, #244]	@ (8002834 <GoPlace+0x150>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d115      	bne.n	8002772 <GoPlace+0x8e>
			timestampVacuum = HAL_GetTick()+500;
 8002746:	f001 fe6f 	bl	8004428 <HAL_GetTick>
 800274a:	4603      	mov	r3, r0
 800274c:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8002750:	2200      	movs	r2, #0
 8002752:	4698      	mov	r8, r3
 8002754:	4691      	mov	r9, r2
 8002756:	4b38      	ldr	r3, [pc, #224]	@ (8002838 <GoPlace+0x154>)
 8002758:	e9c3 8900 	strd	r8, r9, [r3]
			WaitGripper = CountGripper+8;
 800275c:	4b37      	ldr	r3, [pc, #220]	@ (800283c <GoPlace+0x158>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	3308      	adds	r3, #8
 8002762:	4a37      	ldr	r2, [pc, #220]	@ (8002840 <GoPlace+0x15c>)
 8002764:	6013      	str	r3, [r2, #0]
			GripperFlag = 1;
 8002766:	4b33      	ldr	r3, [pc, #204]	@ (8002834 <GoPlace+0x150>)
 8002768:	2201      	movs	r2, #1
 800276a:	701a      	strb	r2, [r3, #0]
			flagplaceend = 0;
 800276c:	4b2f      	ldr	r3, [pc, #188]	@ (800282c <GoPlace+0x148>)
 800276e:	2200      	movs	r2, #0
 8002770:	701a      	strb	r2, [r3, #0]
		}
	}
	if((ActualGripper == 1) && (ActualVacuum == 0) &&(flagplaceend == 0) && (HAL_GetTick()>= timestampVacuum) ){
 8002772:	4b28      	ldr	r3, [pc, #160]	@ (8002814 <GoPlace+0x130>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b01      	cmp	r3, #1
 8002778:	d123      	bne.n	80027c2 <GoPlace+0xde>
 800277a:	4b32      	ldr	r3, [pc, #200]	@ (8002844 <GoPlace+0x160>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d11f      	bne.n	80027c2 <GoPlace+0xde>
 8002782:	4b2a      	ldr	r3, [pc, #168]	@ (800282c <GoPlace+0x148>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d11b      	bne.n	80027c2 <GoPlace+0xde>
 800278a:	f001 fe4d 	bl	8004428 <HAL_GetTick>
 800278e:	4603      	mov	r3, r0
 8002790:	2200      	movs	r2, #0
 8002792:	461c      	mov	r4, r3
 8002794:	4615      	mov	r5, r2
 8002796:	4b28      	ldr	r3, [pc, #160]	@ (8002838 <GoPlace+0x154>)
 8002798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279c:	4294      	cmp	r4, r2
 800279e:	eb75 0303 	sbcs.w	r3, r5, r3
 80027a2:	d30e      	bcc.n	80027c2 <GoPlace+0xde>
		//wait 400 ms
		flagplace = 1;
 80027a4:	4b28      	ldr	r3, [pc, #160]	@ (8002848 <GoPlace+0x164>)
 80027a6:	2201      	movs	r2, #1
 80027a8:	701a      	strb	r2, [r3, #0]
		a = 5;
 80027aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002828 <GoPlace+0x144>)
 80027ac:	2205      	movs	r2, #5
 80027ae:	701a      	strb	r2, [r3, #0]
		relay[0] = 1; //pull
 80027b0:	4b1f      	ldr	r3, [pc, #124]	@ (8002830 <GoPlace+0x14c>)
 80027b2:	2201      	movs	r2, #1
 80027b4:	701a      	strb	r2, [r3, #0]
		relay[1] = 0; //
 80027b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002830 <GoPlace+0x14c>)
 80027b8:	2200      	movs	r2, #0
 80027ba:	705a      	strb	r2, [r3, #1]
		flagplaceend = 1;
 80027bc:	4b1b      	ldr	r3, [pc, #108]	@ (800282c <GoPlace+0x148>)
 80027be:	2201      	movs	r2, #1
 80027c0:	701a      	strb	r2, [r3, #0]

	}
	if((flagplace == 1) && (ActualGripper == 0)&&(flagplaceend == 1) ){
 80027c2:	4b21      	ldr	r3, [pc, #132]	@ (8002848 <GoPlace+0x164>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d121      	bne.n	800280e <GoPlace+0x12a>
 80027ca:	4b12      	ldr	r3, [pc, #72]	@ (8002814 <GoPlace+0x130>)
 80027cc:	781b      	ldrb	r3, [r3, #0]
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d11d      	bne.n	800280e <GoPlace+0x12a>
 80027d2:	4b16      	ldr	r3, [pc, #88]	@ (800282c <GoPlace+0x148>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d119      	bne.n	800280e <GoPlace+0x12a>
		GripperFlag = 0;
 80027da:	4b16      	ldr	r3, [pc, #88]	@ (8002834 <GoPlace+0x150>)
 80027dc:	2200      	movs	r2, #0
 80027de:	701a      	strb	r2, [r3, #0]
		registerFrame[0x10].U16 = 4;
 80027e0:	4b1a      	ldr	r3, [pc, #104]	@ (800284c <GoPlace+0x168>)
 80027e2:	2204      	movs	r2, #4
 80027e4:	841a      	strh	r2, [r3, #32]
		j += 1; //use
 80027e6:	4b0d      	ldr	r3, [pc, #52]	@ (800281c <GoPlace+0x138>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	3301      	adds	r3, #1
 80027ec:	4a0b      	ldr	r2, [pc, #44]	@ (800281c <GoPlace+0x138>)
 80027ee:	6013      	str	r3, [r2, #0]
		a = 6;
 80027f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002828 <GoPlace+0x144>)
 80027f2:	2206      	movs	r2, #6
 80027f4:	701a      	strb	r2, [r3, #0]
		MotorDriveFlag = 0;
 80027f6:	4b16      	ldr	r3, [pc, #88]	@ (8002850 <GoPlace+0x16c>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	701a      	strb	r2, [r3, #0]
		flagplace = 0;
 80027fc:	4b12      	ldr	r3, [pc, #72]	@ (8002848 <GoPlace+0x164>)
 80027fe:	2200      	movs	r2, #0
 8002800:	701a      	strb	r2, [r3, #0]
		flagplaceend = 0;
 8002802:	4b0a      	ldr	r3, [pc, #40]	@ (800282c <GoPlace+0x148>)
 8002804:	2200      	movs	r2, #0
 8002806:	701a      	strb	r2, [r3, #0]
		flagpickend = 0;
 8002808:	4b12      	ldr	r3, [pc, #72]	@ (8002854 <GoPlace+0x170>)
 800280a:	2200      	movs	r2, #0
 800280c:	701a      	strb	r2, [r3, #0]

	}
}
 800280e:	bf00      	nop
 8002810:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002814:	20000fe7 	.word	0x20000fe7
 8002818:	20001014 	.word	0x20001014
 800281c:	20001010 	.word	0x20001010
 8002820:	20001004 	.word	0x20001004
 8002824:	20000938 	.word	0x20000938
 8002828:	20001016 	.word	0x20001016
 800282c:	20001058 	.word	0x20001058
 8002830:	200008c4 	.word	0x200008c4
 8002834:	200008cc 	.word	0x200008cc
 8002838:	20001080 	.word	0x20001080
 800283c:	200008d0 	.word	0x200008d0
 8002840:	200008c8 	.word	0x200008c8
 8002844:	20000fe6 	.word	0x20000fe6
 8002848:	20001057 	.word	0x20001057
 800284c:	20000e30 	.word	0x20000e30
 8002850:	20001040 	.word	0x20001040
 8002854:	20001056 	.word	0x20001056

08002858 <Micros>:


uint64_t Micros() {
 8002858:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 800285c:	b084      	sub	sp, #16
 800285e:	af00      	add	r7, sp, #0
//	static uint32_t timestamp = 0;
	uint32_t lower = 0;
 8002860:	2300      	movs	r3, #0
 8002862:	60fb      	str	r3, [r7, #12]
	uint64_t time = 0;
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	e9c7 2300 	strd	r2, r3, [r7]
	lower = __HAL_TIM_GET_COUNTER(&htim5);
 8002870:	4b10      	ldr	r3, [pc, #64]	@ (80028b4 <Micros+0x5c>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002876:	60fb      	str	r3, [r7, #12]
	time = (upper << 32) | lower;
 8002878:	4b0f      	ldr	r3, [pc, #60]	@ (80028b8 <Micros+0x60>)
 800287a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	f04f 0300 	mov.w	r3, #0
 8002886:	4643      	mov	r3, r8
 8002888:	2200      	movs	r2, #0
 800288a:	68fe      	ldr	r6, [r7, #12]
 800288c:	f04f 0c00 	mov.w	ip, #0
 8002890:	4630      	mov	r0, r6
 8002892:	4661      	mov	r1, ip
 8002894:	ea42 0400 	orr.w	r4, r2, r0
 8002898:	ea43 0501 	orr.w	r5, r3, r1
 800289c:	e9c7 4500 	strd	r4, r5, [r7]
	return time;
 80028a0:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80028a4:	4610      	mov	r0, r2
 80028a6:	4619      	mov	r1, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80028b0:	4770      	bx	lr
 80028b2:	bf00      	nop
 80028b4:	20000588 	.word	0x20000588
 80028b8:	200008b0 	.word	0x200008b0
 80028bc:	00000000 	.word	0x00000000

080028c0 <QEIEncoderPosVel_Update>:

void QEIEncoderPosVel_Update() {
 80028c0:	b5b0      	push	{r4, r5, r7, lr}
 80028c2:	b086      	sub	sp, #24
 80028c4:	af00      	add	r7, sp, #0
	//CurrentPos = QEIdata.TotalPos-HomePos;
	//collect data
	QEIdata.TimeStamp[NEW] = Micros();
 80028c6:	f7ff ffc7 	bl	8002858 <Micros>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4994      	ldr	r1, [pc, #592]	@ (8002b20 <QEIEncoderPosVel_Update+0x260>)
 80028d0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 80028d4:	4b93      	ldr	r3, [pc, #588]	@ (8002b24 <QEIEncoderPosVel_Update+0x264>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028da:	4a91      	ldr	r2, [pc, #580]	@ (8002b20 <QEIEncoderPosVel_Update+0x260>)
 80028dc:	6013      	str	r3, [r2, #0]

	//Position 1 turn calculation
	QEIdata.QEIPostion_1turn[NEW] = QEIdata.Position[NEW] % 800;
 80028de:	4b90      	ldr	r3, [pc, #576]	@ (8002b20 <QEIEncoderPosVel_Update+0x260>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	4b91      	ldr	r3, [pc, #580]	@ (8002b28 <QEIEncoderPosVel_Update+0x268>)
 80028e4:	fba3 1302 	umull	r1, r3, r3, r2
 80028e8:	0a1b      	lsrs	r3, r3, #8
 80028ea:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80028ee:	fb01 f303 	mul.w	r3, r1, r3
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	ee07 3a90 	vmov	s15, r3
 80028f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028fc:	4b88      	ldr	r3, [pc, #544]	@ (8002b20 <QEIEncoderPosVel_Update+0x260>)
 80028fe:	edc3 7a06 	vstr	s15, [r3, #24]
	QEIdata.Angle = QEIdata.QEIPostion_1turn[NEW] * 360 / 800;
 8002902:	4b87      	ldr	r3, [pc, #540]	@ (8002b20 <QEIEncoderPosVel_Update+0x260>)
 8002904:	edd3 7a06 	vldr	s15, [r3, #24]
 8002908:	ed9f 7a88 	vldr	s14, [pc, #544]	@ 8002b2c <QEIEncoderPosVel_Update+0x26c>
 800290c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002910:	eddf 6a87 	vldr	s13, [pc, #540]	@ 8002b30 <QEIEncoderPosVel_Update+0x270>
 8002914:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002918:	4b81      	ldr	r3, [pc, #516]	@ (8002b20 <QEIEncoderPosVel_Update+0x260>)
 800291a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	//calculate dx
	int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 800291e:	4b80      	ldr	r3, [pc, #512]	@ (8002b20 <QEIEncoderPosVel_Update+0x260>)
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	4b7f      	ldr	r3, [pc, #508]	@ (8002b20 <QEIEncoderPosVel_Update+0x260>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	617b      	str	r3, [r7, #20]
	int32_t diff1turn = QEIdata.QEIPostion_1turn[NEW] - QEIdata.QEIPostion_1turn[OLD];
 800292a:	4b7d      	ldr	r3, [pc, #500]	@ (8002b20 <QEIEncoderPosVel_Update+0x260>)
 800292c:	ed93 7a06 	vldr	s14, [r3, #24]
 8002930:	4b7b      	ldr	r3, [pc, #492]	@ (8002b20 <QEIEncoderPosVel_Update+0x260>)
 8002932:	edd3 7a07 	vldr	s15, [r3, #28]
 8002936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800293a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800293e:	ee17 3a90 	vmov	r3, s15
 8002942:	613b      	str	r3, [r7, #16]

	//Handle Warp around
	if (diffPosition > 32400) {
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	f647 6290 	movw	r2, #32400	@ 0x7e90
 800294a:	4293      	cmp	r3, r2
 800294c:	dd04      	ble.n	8002958 <QEIEncoderPosVel_Update+0x98>
		diffPosition -= 64800;
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	f5a3 437d 	sub.w	r3, r3, #64768	@ 0xfd00
 8002954:	3b20      	subs	r3, #32
 8002956:	617b      	str	r3, [r7, #20]
	}
	if (diffPosition < -32400) {
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	4a76      	ldr	r2, [pc, #472]	@ (8002b34 <QEIEncoderPosVel_Update+0x274>)
 800295c:	4293      	cmp	r3, r2
 800295e:	da04      	bge.n	800296a <QEIEncoderPosVel_Update+0xaa>
		diffPosition += 64800;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	f503 437d 	add.w	r3, r3, #64768	@ 0xfd00
 8002966:	3320      	adds	r3, #32
 8002968:	617b      	str	r3, [r7, #20]
	}
	//Calculate Linear Position in mm unit
	if (diff1turn > 400) {
 800296a:	693b      	ldr	r3, [r7, #16]
 800296c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002970:	dd09      	ble.n	8002986 <QEIEncoderPosVel_Update+0xc6>
		QEIdata.QEIRound -= 1;
 8002972:	4b6b      	ldr	r3, [pc, #428]	@ (8002b20 <QEIEncoderPosVel_Update+0x260>)
 8002974:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002978:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800297c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002980:	4b67      	ldr	r3, [pc, #412]	@ (8002b20 <QEIEncoderPosVel_Update+0x260>)
 8002982:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	}
	if (diff1turn < -400) {
 8002986:	693b      	ldr	r3, [r7, #16]
 8002988:	f513 7fc8 	cmn.w	r3, #400	@ 0x190
 800298c:	da09      	bge.n	80029a2 <QEIEncoderPosVel_Update+0xe2>
		QEIdata.QEIRound += 1;
 800298e:	4b64      	ldr	r3, [pc, #400]	@ (8002b20 <QEIEncoderPosVel_Update+0x260>)
 8002990:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002994:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002998:	ee77 7a87 	vadd.f32	s15, s15, s14
 800299c:	4b60      	ldr	r3, [pc, #384]	@ (8002b20 <QEIEncoderPosVel_Update+0x260>)
 800299e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
	}


	QEIdata.TotalPos[NEW] = ((QEIdata.QEIRound * 14) + QEIdata.QEIPostion_1turn[NEW] * 14 / 800); //linear pos in mm uint
 80029a2:	4b5f      	ldr	r3, [pc, #380]	@ (8002b20 <QEIEncoderPosVel_Update+0x260>)
 80029a4:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80029a8:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 80029ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029b0:	4b5b      	ldr	r3, [pc, #364]	@ (8002b20 <QEIEncoderPosVel_Update+0x260>)
 80029b2:	edd3 7a06 	vldr	s15, [r3, #24]
 80029b6:	eef2 6a0c 	vmov.f32	s13, #44	@ 0x41600000  14.0
 80029ba:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80029be:	ed9f 6a5c 	vldr	s12, [pc, #368]	@ 8002b30 <QEIEncoderPosVel_Update+0x270>
 80029c2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ca:	4b55      	ldr	r3, [pc, #340]	@ (8002b20 <QEIEncoderPosVel_Update+0x260>)
 80029cc:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

			//calculate dt
	float diffTime = (QEIdata.TimeStamp[NEW] - QEIdata.TimeStamp[OLD])
 80029d0:	4b53      	ldr	r3, [pc, #332]	@ (8002b20 <QEIEncoderPosVel_Update+0x260>)
 80029d2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80029d6:	4b52      	ldr	r3, [pc, #328]	@ (8002b20 <QEIEncoderPosVel_Update+0x260>)
 80029d8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80029dc:	1a84      	subs	r4, r0, r2
 80029de:	eb61 0503 	sbc.w	r5, r1, r3
			* 1e-6;
 80029e2:	4620      	mov	r0, r4
 80029e4:	4629      	mov	r1, r5
 80029e6:	f7fd fd9d 	bl	8000524 <__aeabi_ul2d>
 80029ea:	a349      	add	r3, pc, #292	@ (adr r3, 8002b10 <QEIEncoderPosVel_Update+0x250>)
 80029ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f0:	f7fd fdce 	bl	8000590 <__aeabi_dmul>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
	float diffTime = (QEIdata.TimeStamp[NEW] - QEIdata.TimeStamp[OLD])
 80029f8:	4610      	mov	r0, r2
 80029fa:	4619      	mov	r1, r3
 80029fc:	f7fe f8aa 	bl	8000b54 <__aeabi_d2f>
 8002a00:	4603      	mov	r3, r0
 8002a02:	60fb      	str	r3, [r7, #12]

	//calculate angular velocity
	QEIdata.QEIAngularVelocity = diffPosition / diffTime;
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	ee07 3a90 	vmov	s15, r3
 8002a0a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002a0e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a16:	4b42      	ldr	r3, [pc, #264]	@ (8002b20 <QEIEncoderPosVel_Update+0x260>)
 8002a18:	edc3 7a08 	vstr	s15, [r3, #32]
	velodegree = QEIdata.QEIAngularVelocity;
 8002a1c:	4b40      	ldr	r3, [pc, #256]	@ (8002b20 <QEIEncoderPosVel_Update+0x260>)
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	4a45      	ldr	r2, [pc, #276]	@ (8002b38 <QEIEncoderPosVel_Update+0x278>)
 8002a22:	6013      	str	r3, [r2, #0]
	velodegree = (velodegree * 60) / 800;
 8002a24:	4b44      	ldr	r3, [pc, #272]	@ (8002b38 <QEIEncoderPosVel_Update+0x278>)
 8002a26:	edd3 7a00 	vldr	s15, [r3]
 8002a2a:	ed9f 7a44 	vldr	s14, [pc, #272]	@ 8002b3c <QEIEncoderPosVel_Update+0x27c>
 8002a2e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a32:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8002b30 <QEIEncoderPosVel_Update+0x270>
 8002a36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a3a:	4b3f      	ldr	r3, [pc, #252]	@ (8002b38 <QEIEncoderPosVel_Update+0x278>)
 8002a3c:	edc3 7a00 	vstr	s15, [r3]
	linearspeed[NEW] = velodegree * 14 / 60.0;
 8002a40:	4b3d      	ldr	r3, [pc, #244]	@ (8002b38 <QEIEncoderPosVel_Update+0x278>)
 8002a42:	edd3 7a00 	vldr	s15, [r3]
 8002a46:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 8002a4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a4e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8002b3c <QEIEncoderPosVel_Update+0x27c>
 8002a52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a56:	4b3a      	ldr	r3, [pc, #232]	@ (8002b40 <QEIEncoderPosVel_Update+0x280>)
 8002a58:	edc3 7a00 	vstr	s15, [r3]

	float diffPos = QEIdata.TotalPos[NEW] - QEIdata.TotalPos[OLD];
 8002a5c:	4b30      	ldr	r3, [pc, #192]	@ (8002b20 <QEIEncoderPosVel_Update+0x260>)
 8002a5e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002a62:	4b2f      	ldr	r3, [pc, #188]	@ (8002b20 <QEIEncoderPosVel_Update+0x260>)
 8002a64:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002a68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a6c:	edc7 7a02 	vstr	s15, [r7, #8]
	if(((diffPos/diffTime)>-800)&&((diffPos/diffTime)<800)&&((diffPos/diffTime)!=0)){
 8002a70:	edd7 6a02 	vldr	s13, [r7, #8]
 8002a74:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a7c:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8002b44 <QEIEncoderPosVel_Update+0x284>
 8002a80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a88:	dd62      	ble.n	8002b50 <QEIEncoderPosVel_Update+0x290>
 8002a8a:	edd7 6a02 	vldr	s13, [r7, #8]
 8002a8e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002a92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a96:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002b30 <QEIEncoderPosVel_Update+0x270>
 8002a9a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002aa2:	d555      	bpl.n	8002b50 <QEIEncoderPosVel_Update+0x290>
 8002aa4:	edd7 6a02 	vldr	s13, [r7, #8]
 8002aa8:	ed97 7a03 	vldr	s14, [r7, #12]
 8002aac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ab0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002ab4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ab8:	d04a      	beq.n	8002b50 <QEIEncoderPosVel_Update+0x290>
		linearvel[NEW] = (diffPos/diffTime)*1.27;
 8002aba:	ed97 7a02 	vldr	s14, [r7, #8]
 8002abe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002ac2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002ac6:	ee16 0a90 	vmov	r0, s13
 8002aca:	f7fd fd09 	bl	80004e0 <__aeabi_f2d>
 8002ace:	a312      	add	r3, pc, #72	@ (adr r3, 8002b18 <QEIEncoderPosVel_Update+0x258>)
 8002ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad4:	f7fd fd5c 	bl	8000590 <__aeabi_dmul>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4610      	mov	r0, r2
 8002ade:	4619      	mov	r1, r3
 8002ae0:	f7fe f838 	bl	8000b54 <__aeabi_d2f>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	4a18      	ldr	r2, [pc, #96]	@ (8002b48 <QEIEncoderPosVel_Update+0x288>)
 8002ae8:	6013      	str	r3, [r2, #0]
		linearvelkar[NEW] = kalman_filter(linearvel[NEW]);
 8002aea:	4b17      	ldr	r3, [pc, #92]	@ (8002b48 <QEIEncoderPosVel_Update+0x288>)
 8002aec:	edd3 7a00 	vldr	s15, [r3]
 8002af0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002af4:	ee17 0a90 	vmov	r0, s15
 8002af8:	f000 ff2e 	bl	8003958 <kalman_filter>
 8002afc:	ee07 0a90 	vmov	s15, r0
 8002b00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b04:	4b11      	ldr	r3, [pc, #68]	@ (8002b4c <QEIEncoderPosVel_Update+0x28c>)
 8002b06:	edc3 7a00 	vstr	s15, [r3]
 8002b0a:	e046      	b.n	8002b9a <QEIEncoderPosVel_Update+0x2da>
 8002b0c:	f3af 8000 	nop.w
 8002b10:	a0b5ed8d 	.word	0xa0b5ed8d
 8002b14:	3eb0c6f7 	.word	0x3eb0c6f7
 8002b18:	851eb852 	.word	0x851eb852
 8002b1c:	3ff451eb 	.word	0x3ff451eb
 8002b20:	200008f0 	.word	0x200008f0
 8002b24:	200003f0 	.word	0x200003f0
 8002b28:	51eb851f 	.word	0x51eb851f
 8002b2c:	43b40000 	.word	0x43b40000
 8002b30:	44480000 	.word	0x44480000
 8002b34:	ffff8170 	.word	0xffff8170
 8002b38:	200008d4 	.word	0x200008d4
 8002b3c:	42700000 	.word	0x42700000
 8002b40:	200008b8 	.word	0x200008b8
 8002b44:	c4480000 	.word	0xc4480000
 8002b48:	200008d8 	.word	0x200008d8
 8002b4c:	200008e0 	.word	0x200008e0
	}else if(fabs(QEIdata.TotalPos[NEW] - QEIdata.TotalPos[OLD])<1){
 8002b50:	4b3f      	ldr	r3, [pc, #252]	@ (8002c50 <QEIEncoderPosVel_Update+0x390>)
 8002b52:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002b56:	4b3e      	ldr	r3, [pc, #248]	@ (8002c50 <QEIEncoderPosVel_Update+0x390>)
 8002b58:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002b5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b60:	eef0 7ae7 	vabs.f32	s15, s15
 8002b64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b70:	d513      	bpl.n	8002b9a <QEIEncoderPosVel_Update+0x2da>
		linearvel[NEW] = 0;
 8002b72:	4b38      	ldr	r3, [pc, #224]	@ (8002c54 <QEIEncoderPosVel_Update+0x394>)
 8002b74:	f04f 0200 	mov.w	r2, #0
 8002b78:	601a      	str	r2, [r3, #0]
		linearvelkar[NEW] = kalman_filter(linearvel[NEW]);
 8002b7a:	4b36      	ldr	r3, [pc, #216]	@ (8002c54 <QEIEncoderPosVel_Update+0x394>)
 8002b7c:	edd3 7a00 	vldr	s15, [r3]
 8002b80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b84:	ee17 0a90 	vmov	r0, s15
 8002b88:	f000 fee6 	bl	8003958 <kalman_filter>
 8002b8c:	ee07 0a90 	vmov	s15, r0
 8002b90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b94:	4b30      	ldr	r3, [pc, #192]	@ (8002c58 <QEIEncoderPosVel_Update+0x398>)
 8002b96:	edc3 7a00 	vstr	s15, [r3]
	}

	float diffVel = linearvelkar[NEW] - linearvelkar[OLD];
 8002b9a:	4b2f      	ldr	r3, [pc, #188]	@ (8002c58 <QEIEncoderPosVel_Update+0x398>)
 8002b9c:	ed93 7a00 	vldr	s14, [r3]
 8002ba0:	4b2d      	ldr	r3, [pc, #180]	@ (8002c58 <QEIEncoderPosVel_Update+0x398>)
 8002ba2:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ba6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002baa:	edc7 7a01 	vstr	s15, [r7, #4]
	linearacc = (diffVel/diffTime)*0.8;
 8002bae:	ed97 7a01 	vldr	s14, [r7, #4]
 8002bb2:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bb6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002bba:	ee16 0a90 	vmov	r0, s13
 8002bbe:	f7fd fc8f 	bl	80004e0 <__aeabi_f2d>
 8002bc2:	a321      	add	r3, pc, #132	@ (adr r3, 8002c48 <QEIEncoderPosVel_Update+0x388>)
 8002bc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bc8:	f7fd fce2 	bl	8000590 <__aeabi_dmul>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4610      	mov	r0, r2
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	f7fd ffbe 	bl	8000b54 <__aeabi_d2f>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	4a20      	ldr	r2, [pc, #128]	@ (8002c5c <QEIEncoderPosVel_Update+0x39c>)
 8002bdc:	6013      	str	r3, [r2, #0]
	linearacckal = kalman_filter_acc(linearacc);
 8002bde:	4b1f      	ldr	r3, [pc, #124]	@ (8002c5c <QEIEncoderPosVel_Update+0x39c>)
 8002be0:	edd3 7a00 	vldr	s15, [r3]
 8002be4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002be8:	ee17 0a90 	vmov	r0, s15
 8002bec:	f000 ff2a 	bl	8003a44 <kalman_filter_acc>
 8002bf0:	ee07 0a90 	vmov	s15, r0
 8002bf4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bf8:	4b19      	ldr	r3, [pc, #100]	@ (8002c60 <QEIEncoderPosVel_Update+0x3a0>)
 8002bfa:	edc3 7a00 	vstr	s15, [r3]

	//store value for next loop

	linearvelkar[OLD] = linearvelkar[NEW];
 8002bfe:	4b16      	ldr	r3, [pc, #88]	@ (8002c58 <QEIEncoderPosVel_Update+0x398>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4a15      	ldr	r2, [pc, #84]	@ (8002c58 <QEIEncoderPosVel_Update+0x398>)
 8002c04:	6053      	str	r3, [r2, #4]
	linearvel[OLD] = linearvel[NEW];
 8002c06:	4b13      	ldr	r3, [pc, #76]	@ (8002c54 <QEIEncoderPosVel_Update+0x394>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4a12      	ldr	r2, [pc, #72]	@ (8002c54 <QEIEncoderPosVel_Update+0x394>)
 8002c0c:	6053      	str	r3, [r2, #4]
	QEIdata.TotalPos[OLD] = QEIdata.TotalPos[NEW];
 8002c0e:	4b10      	ldr	r3, [pc, #64]	@ (8002c50 <QEIEncoderPosVel_Update+0x390>)
 8002c10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c12:	4a0f      	ldr	r2, [pc, #60]	@ (8002c50 <QEIEncoderPosVel_Update+0x390>)
 8002c14:	62d3      	str	r3, [r2, #44]	@ 0x2c
	QEIdata.Position[OLD] = QEIdata.Position[NEW];
 8002c16:	4b0e      	ldr	r3, [pc, #56]	@ (8002c50 <QEIEncoderPosVel_Update+0x390>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a0d      	ldr	r2, [pc, #52]	@ (8002c50 <QEIEncoderPosVel_Update+0x390>)
 8002c1c:	6053      	str	r3, [r2, #4]
	QEIdata.TimeStamp[OLD] = QEIdata.TimeStamp[NEW];
 8002c1e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c50 <QEIEncoderPosVel_Update+0x390>)
 8002c20:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002c24:	490a      	ldr	r1, [pc, #40]	@ (8002c50 <QEIEncoderPosVel_Update+0x390>)
 8002c26:	e9c1 2304 	strd	r2, r3, [r1, #16]
	QEIdata.QEIPostion_1turn[OLD] = QEIdata.QEIPostion_1turn[NEW];
 8002c2a:	4b09      	ldr	r3, [pc, #36]	@ (8002c50 <QEIEncoderPosVel_Update+0x390>)
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	4a08      	ldr	r2, [pc, #32]	@ (8002c50 <QEIEncoderPosVel_Update+0x390>)
 8002c30:	61d3      	str	r3, [r2, #28]
	linearspeed[OLD] = linearspeed[NEW];
 8002c32:	4b0c      	ldr	r3, [pc, #48]	@ (8002c64 <QEIEncoderPosVel_Update+0x3a4>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a0b      	ldr	r2, [pc, #44]	@ (8002c64 <QEIEncoderPosVel_Update+0x3a4>)
 8002c38:	6053      	str	r3, [r2, #4]

}
 8002c3a:	bf00      	nop
 8002c3c:	3718      	adds	r7, #24
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bdb0      	pop	{r4, r5, r7, pc}
 8002c42:	bf00      	nop
 8002c44:	f3af 8000 	nop.w
 8002c48:	9999999a 	.word	0x9999999a
 8002c4c:	3fe99999 	.word	0x3fe99999
 8002c50:	200008f0 	.word	0x200008f0
 8002c54:	200008d8 	.word	0x200008d8
 8002c58:	200008e0 	.word	0x200008e0
 8002c5c:	200008c0 	.word	0x200008c0
 8002c60:	200008e8 	.word	0x200008e8
 8002c64:	200008b8 	.word	0x200008b8

08002c68 <ReadLogicConv>:

void ReadLogicConv() {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
	Lo1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0); //Lo1 Pull
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c72:	f002 f9cb 	bl	800500c <HAL_GPIO_ReadPin>
 8002c76:	4603      	mov	r3, r0
 8002c78:	461a      	mov	r2, r3
 8002c7a:	4b1a      	ldr	r3, [pc, #104]	@ (8002ce4 <ReadLogicConv+0x7c>)
 8002c7c:	701a      	strb	r2, [r3, #0]
	Lo2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1); //Lo2 Push
 8002c7e:	2102      	movs	r1, #2
 8002c80:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c84:	f002 f9c2 	bl	800500c <HAL_GPIO_ReadPin>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	4b16      	ldr	r3, [pc, #88]	@ (8002ce8 <ReadLogicConv+0x80>)
 8002c8e:	701a      	strb	r2, [r3, #0]
	Lo3 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4); //Lo3
 8002c90:	2110      	movs	r1, #16
 8002c92:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002c96:	f002 f9b9 	bl	800500c <HAL_GPIO_ReadPin>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	461a      	mov	r2, r3
 8002c9e:	4b13      	ldr	r3, [pc, #76]	@ (8002cec <ReadLogicConv+0x84>)
 8002ca0:	701a      	strb	r2, [r3, #0]
	Lo4 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0); //Lo4
 8002ca2:	2101      	movs	r1, #1
 8002ca4:	4812      	ldr	r0, [pc, #72]	@ (8002cf0 <ReadLogicConv+0x88>)
 8002ca6:	f002 f9b1 	bl	800500c <HAL_GPIO_ReadPin>
 8002caa:	4603      	mov	r3, r0
 8002cac:	461a      	mov	r2, r3
 8002cae:	4b11      	ldr	r3, [pc, #68]	@ (8002cf4 <ReadLogicConv+0x8c>)
 8002cb0:	701a      	strb	r2, [r3, #0]
	if(Lo1 == 0 && Lo2 == 1){ //Push
 8002cb2:	4b0c      	ldr	r3, [pc, #48]	@ (8002ce4 <ReadLogicConv+0x7c>)
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d107      	bne.n	8002cca <ReadLogicConv+0x62>
 8002cba:	4b0b      	ldr	r3, [pc, #44]	@ (8002ce8 <ReadLogicConv+0x80>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d103      	bne.n	8002cca <ReadLogicConv+0x62>
		ActualGripper = 1;
 8002cc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf8 <ReadLogicConv+0x90>)
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	701a      	strb	r2, [r3, #0]
	}else if(Lo1 == 1 && Lo2 == 0){ //Pull
		ActualGripper = 0;
	}
}
 8002cc8:	e00a      	b.n	8002ce0 <ReadLogicConv+0x78>
	}else if(Lo1 == 1 && Lo2 == 0){ //Pull
 8002cca:	4b06      	ldr	r3, [pc, #24]	@ (8002ce4 <ReadLogicConv+0x7c>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d106      	bne.n	8002ce0 <ReadLogicConv+0x78>
 8002cd2:	4b05      	ldr	r3, [pc, #20]	@ (8002ce8 <ReadLogicConv+0x80>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d102      	bne.n	8002ce0 <ReadLogicConv+0x78>
		ActualGripper = 0;
 8002cda:	4b07      	ldr	r3, [pc, #28]	@ (8002cf8 <ReadLogicConv+0x90>)
 8002cdc:	2200      	movs	r2, #0
 8002cde:	701a      	strb	r2, [r3, #0]
}
 8002ce0:	bf00      	nop
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	20000928 	.word	0x20000928
 8002ce8:	20000929 	.word	0x20000929
 8002cec:	2000092a 	.word	0x2000092a
 8002cf0:	48000400 	.word	0x48000400
 8002cf4:	20000204 	.word	0x20000204
 8002cf8:	20000fe7 	.word	0x20000fe7

08002cfc <ReadButton>:
void ReadButton() {
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
	bt1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8); //BT1
 8002d00:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d04:	4817      	ldr	r0, [pc, #92]	@ (8002d64 <ReadButton+0x68>)
 8002d06:	f002 f981 	bl	800500c <HAL_GPIO_ReadPin>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	4b16      	ldr	r3, [pc, #88]	@ (8002d68 <ReadButton+0x6c>)
 8002d10:	701a      	strb	r2, [r3, #0]
	bt2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9); //BT2
 8002d12:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002d16:	4813      	ldr	r0, [pc, #76]	@ (8002d64 <ReadButton+0x68>)
 8002d18:	f002 f978 	bl	800500c <HAL_GPIO_ReadPin>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	461a      	mov	r2, r3
 8002d20:	4b12      	ldr	r3, [pc, #72]	@ (8002d6c <ReadButton+0x70>)
 8002d22:	701a      	strb	r2, [r3, #0]
	bt3 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8); //BT3
 8002d24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002d28:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d2c:	f002 f96e 	bl	800500c <HAL_GPIO_ReadPin>
 8002d30:	4603      	mov	r3, r0
 8002d32:	461a      	mov	r2, r3
 8002d34:	4b0e      	ldr	r3, [pc, #56]	@ (8002d70 <ReadButton+0x74>)
 8002d36:	701a      	strb	r2, [r3, #0]
	bt4 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9); //BT4
 8002d38:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002d3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d40:	f002 f964 	bl	800500c <HAL_GPIO_ReadPin>
 8002d44:	4603      	mov	r3, r0
 8002d46:	461a      	mov	r2, r3
 8002d48:	4b0a      	ldr	r3, [pc, #40]	@ (8002d74 <ReadButton+0x78>)
 8002d4a:	701a      	strb	r2, [r3, #0]
	bt5 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10); //BT5
 8002d4c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002d50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002d54:	f002 f95a 	bl	800500c <HAL_GPIO_ReadPin>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	4b06      	ldr	r3, [pc, #24]	@ (8002d78 <ReadButton+0x7c>)
 8002d5e:	701a      	strb	r2, [r3, #0]
}
 8002d60:	bf00      	nop
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	48000800 	.word	0x48000800
 8002d68:	2000092b 	.word	0x2000092b
 8002d6c:	2000092c 	.word	0x2000092c
 8002d70:	2000092d 	.word	0x2000092d
 8002d74:	2000092e 	.word	0x2000092e
 8002d78:	2000092f 	.word	0x2000092f
 8002d7c:	00000000 	.word	0x00000000

08002d80 <MotorDrive>:


void MotorDrive() {
 8002d80:	b5b0      	push	{r4, r5, r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
	if (MotorDriveFlag == 0) {
 8002d86:	4bba      	ldr	r3, [pc, #744]	@ (8003070 <MotorDrive+0x2f0>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d124      	bne.n	8002dd8 <MotorDrive+0x58>
		// Start: This box of code run only one time.
		StartTotalPos = QEIdata.TotalPos[NEW];
 8002d8e:	4bb9      	ldr	r3, [pc, #740]	@ (8003074 <MotorDrive+0x2f4>)
 8002d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d92:	4ab9      	ldr	r2, [pc, #740]	@ (8003078 <MotorDrive+0x2f8>)
 8002d94:	6013      	str	r3, [r2, #0]
		MotorDriveTravelDistance = Goal - QEIdata.TotalPos[NEW];
 8002d96:	4bb9      	ldr	r3, [pc, #740]	@ (800307c <MotorDrive+0x2fc>)
 8002d98:	ed93 7a00 	vldr	s14, [r3]
 8002d9c:	4bb5      	ldr	r3, [pc, #724]	@ (8003074 <MotorDrive+0x2f4>)
 8002d9e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002da2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002da6:	4bb6      	ldr	r3, [pc, #728]	@ (8003080 <MotorDrive+0x300>)
 8002da8:	edc3 7a00 	vstr	s15, [r3]
		MotorDriveDampDistance = MotorDriveTravelDistance * 0.2;
 8002dac:	4bb4      	ldr	r3, [pc, #720]	@ (8003080 <MotorDrive+0x300>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4618      	mov	r0, r3
 8002db2:	f7fd fb95 	bl	80004e0 <__aeabi_f2d>
 8002db6:	a3a8      	add	r3, pc, #672	@ (adr r3, 8003058 <MotorDrive+0x2d8>)
 8002db8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dbc:	f7fd fbe8 	bl	8000590 <__aeabi_dmul>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4610      	mov	r0, r2
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	f7fd fec4 	bl	8000b54 <__aeabi_d2f>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	4aad      	ldr	r2, [pc, #692]	@ (8003084 <MotorDrive+0x304>)
 8002dd0:	6013      	str	r3, [r2, #0]
		// End
		MotorDriveFlag = 1;
 8002dd2:	4ba7      	ldr	r3, [pc, #668]	@ (8003070 <MotorDrive+0x2f0>)
 8002dd4:	2201      	movs	r2, #1
 8002dd6:	701a      	strb	r2, [r3, #0]
	}

	float PosNow = QEIdata.TotalPos[NEW] - StartTotalPos;
 8002dd8:	4ba6      	ldr	r3, [pc, #664]	@ (8003074 <MotorDrive+0x2f4>)
 8002dda:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002dde:	4ba6      	ldr	r3, [pc, #664]	@ (8003078 <MotorDrive+0x2f8>)
 8002de0:	edd3 7a00 	vldr	s15, [r3]
 8002de4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002de8:	edc7 7a00 	vstr	s15, [r7]

	if((MotorDriveTravelDistance-PosNow) > 0.1 || ((MotorDriveTravelDistance-PosNow) < -0.1)){
 8002dec:	4ba4      	ldr	r3, [pc, #656]	@ (8003080 <MotorDrive+0x300>)
 8002dee:	ed93 7a00 	vldr	s14, [r3]
 8002df2:	edd7 7a00 	vldr	s15, [r7]
 8002df6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dfa:	ee17 0a90 	vmov	r0, s15
 8002dfe:	f7fd fb6f 	bl	80004e0 <__aeabi_f2d>
 8002e02:	a397      	add	r3, pc, #604	@ (adr r3, 8003060 <MotorDrive+0x2e0>)
 8002e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e08:	f7fd fe52 	bl	8000ab0 <__aeabi_dcmpgt>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d113      	bne.n	8002e3a <MotorDrive+0xba>
 8002e12:	4b9b      	ldr	r3, [pc, #620]	@ (8003080 <MotorDrive+0x300>)
 8002e14:	ed93 7a00 	vldr	s14, [r3]
 8002e18:	edd7 7a00 	vldr	s15, [r7]
 8002e1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e20:	ee17 0a90 	vmov	r0, s15
 8002e24:	f7fd fb5c 	bl	80004e0 <__aeabi_f2d>
 8002e28:	a38f      	add	r3, pc, #572	@ (adr r3, 8003068 <MotorDrive+0x2e8>)
 8002e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2e:	f7fd fe21 	bl	8000a74 <__aeabi_dcmplt>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 8210 	beq.w	800325a <MotorDrive+0x4da>
		Arrived = 0;
 8002e3a:	4b93      	ldr	r3, [pc, #588]	@ (8003088 <MotorDrive+0x308>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	701a      	strb	r2, [r3, #0]
		b_check[8] = PosNow;
 8002e40:	4a92      	ldr	r2, [pc, #584]	@ (800308c <MotorDrive+0x30c>)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	6213      	str	r3, [r2, #32]
		int8_t DriveDirection = 1; // direction is 1 if up, -1 if down.
 8002e46:	2301      	movs	r3, #1
 8002e48:	71fb      	strb	r3, [r7, #7]
		if (Goal <= StartTotalPos) {
 8002e4a:	4b8c      	ldr	r3, [pc, #560]	@ (800307c <MotorDrive+0x2fc>)
 8002e4c:	ed93 7a00 	vldr	s14, [r3]
 8002e50:	4b89      	ldr	r3, [pc, #548]	@ (8003078 <MotorDrive+0x2f8>)
 8002e52:	edd3 7a00 	vldr	s15, [r3]
 8002e56:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5e:	d805      	bhi.n	8002e6c <MotorDrive+0xec>
			DriveDirection = -1;
 8002e60:	23ff      	movs	r3, #255	@ 0xff
 8002e62:	71fb      	strb	r3, [r7, #7]
			b_check[7] = 1;
 8002e64:	4b89      	ldr	r3, [pc, #548]	@ (800308c <MotorDrive+0x30c>)
 8002e66:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002e6a:	61da      	str	r2, [r3, #28]
		}

		// Trajectory generator
		if(DriveDirection == -1){
 8002e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e74:	f040 8096 	bne.w	8002fa4 <MotorDrive+0x224>
			if ((PosNow <= MotorDriveDampDistance) && (PosNow >= MotorDriveTravelDistance-MotorDriveDampDistance)) { // Middle
 8002e78:	4b82      	ldr	r3, [pc, #520]	@ (8003084 <MotorDrive+0x304>)
 8002e7a:	edd3 7a00 	vldr	s15, [r3]
 8002e7e:	ed97 7a00 	vldr	s14, [r7]
 8002e82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e8a:	d816      	bhi.n	8002eba <MotorDrive+0x13a>
 8002e8c:	4b7c      	ldr	r3, [pc, #496]	@ (8003080 <MotorDrive+0x300>)
 8002e8e:	ed93 7a00 	vldr	s14, [r3]
 8002e92:	4b7c      	ldr	r3, [pc, #496]	@ (8003084 <MotorDrive+0x304>)
 8002e94:	edd3 7a00 	vldr	s15, [r3]
 8002e98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e9c:	ed97 7a00 	vldr	s14, [r7]
 8002ea0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ea8:	db07      	blt.n	8002eba <MotorDrive+0x13a>
				RealVfeedback = 10;
 8002eaa:	4b79      	ldr	r3, [pc, #484]	@ (8003090 <MotorDrive+0x310>)
 8002eac:	4a79      	ldr	r2, [pc, #484]	@ (8003094 <MotorDrive+0x314>)
 8002eae:	601a      	str	r2, [r3, #0]
				b_check[6]= 1;
 8002eb0:	4b76      	ldr	r3, [pc, #472]	@ (800308c <MotorDrive+0x30c>)
 8002eb2:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002eb6:	619a      	str	r2, [r3, #24]
 8002eb8:	e074      	b.n	8002fa4 <MotorDrive+0x224>
			} else if (PosNow > MotorDriveDampDistance) { // Start
 8002eba:	4b72      	ldr	r3, [pc, #456]	@ (8003084 <MotorDrive+0x304>)
 8002ebc:	edd3 7a00 	vldr	s15, [r3]
 8002ec0:	ed97 7a00 	vldr	s14, [r7]
 8002ec4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ec8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ecc:	dd32      	ble.n	8002f34 <MotorDrive+0x1b4>
				//RealVfeedback = 1.5;
				RealVfeedback = (fabs(PosNow)+1)*13 / MotorDriveTravelDistance;
 8002ece:	edd7 7a00 	vldr	s15, [r7]
 8002ed2:	eef0 7ae7 	vabs.f32	s15, s15
 8002ed6:	ee17 0a90 	vmov	r0, s15
 8002eda:	f7fd fb01 	bl	80004e0 <__aeabi_f2d>
 8002ede:	f04f 0200 	mov.w	r2, #0
 8002ee2:	4b6d      	ldr	r3, [pc, #436]	@ (8003098 <MotorDrive+0x318>)
 8002ee4:	f7fd f99e 	bl	8000224 <__adddf3>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	460b      	mov	r3, r1
 8002eec:	4610      	mov	r0, r2
 8002eee:	4619      	mov	r1, r3
 8002ef0:	f04f 0200 	mov.w	r2, #0
 8002ef4:	4b69      	ldr	r3, [pc, #420]	@ (800309c <MotorDrive+0x31c>)
 8002ef6:	f7fd fb4b 	bl	8000590 <__aeabi_dmul>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4614      	mov	r4, r2
 8002f00:	461d      	mov	r5, r3
 8002f02:	4b5f      	ldr	r3, [pc, #380]	@ (8003080 <MotorDrive+0x300>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fd faea 	bl	80004e0 <__aeabi_f2d>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
 8002f10:	4620      	mov	r0, r4
 8002f12:	4629      	mov	r1, r5
 8002f14:	f7fd fc66 	bl	80007e4 <__aeabi_ddiv>
 8002f18:	4602      	mov	r2, r0
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	4610      	mov	r0, r2
 8002f1e:	4619      	mov	r1, r3
 8002f20:	f7fd fe18 	bl	8000b54 <__aeabi_d2f>
 8002f24:	4603      	mov	r3, r0
 8002f26:	4a5a      	ldr	r2, [pc, #360]	@ (8003090 <MotorDrive+0x310>)
 8002f28:	6013      	str	r3, [r2, #0]
				b_check[6]= 2;
 8002f2a:	4b58      	ldr	r3, [pc, #352]	@ (800308c <MotorDrive+0x30c>)
 8002f2c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002f30:	619a      	str	r2, [r3, #24]
 8002f32:	e037      	b.n	8002fa4 <MotorDrive+0x224>
			}  else if (PosNow <= MotorDriveTravelDistance) {  //Hard Stop
 8002f34:	4b52      	ldr	r3, [pc, #328]	@ (8003080 <MotorDrive+0x300>)
 8002f36:	edd3 7a00 	vldr	s15, [r3]
 8002f3a:	ed97 7a00 	vldr	s14, [r7]
 8002f3e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f46:	d807      	bhi.n	8002f58 <MotorDrive+0x1d8>
				RealVfeedback = 0;
 8002f48:	4b51      	ldr	r3, [pc, #324]	@ (8003090 <MotorDrive+0x310>)
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]
				b_check[6]= 3;
 8002f50:	4b4e      	ldr	r3, [pc, #312]	@ (800308c <MotorDrive+0x30c>)
 8002f52:	4a53      	ldr	r2, [pc, #332]	@ (80030a0 <MotorDrive+0x320>)
 8002f54:	619a      	str	r2, [r3, #24]
 8002f56:	e025      	b.n	8002fa4 <MotorDrive+0x224>
			} else if (PosNow < MotorDriveTravelDistance - MotorDriveDampDistance) {  //Stop
 8002f58:	4b49      	ldr	r3, [pc, #292]	@ (8003080 <MotorDrive+0x300>)
 8002f5a:	ed93 7a00 	vldr	s14, [r3]
 8002f5e:	4b49      	ldr	r3, [pc, #292]	@ (8003084 <MotorDrive+0x304>)
 8002f60:	edd3 7a00 	vldr	s15, [r3]
 8002f64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f68:	ed97 7a00 	vldr	s14, [r7]
 8002f6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f74:	d516      	bpl.n	8002fa4 <MotorDrive+0x224>
				//RealVfeedback = 1.5;
				RealVfeedback = (MotorDriveTravelDistance-PosNow)*10 / MotorDriveTravelDistance;
 8002f76:	4b42      	ldr	r3, [pc, #264]	@ (8003080 <MotorDrive+0x300>)
 8002f78:	ed93 7a00 	vldr	s14, [r3]
 8002f7c:	edd7 7a00 	vldr	s15, [r7]
 8002f80:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f84:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002f88:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002f8c:	4b3c      	ldr	r3, [pc, #240]	@ (8003080 <MotorDrive+0x300>)
 8002f8e:	ed93 7a00 	vldr	s14, [r3]
 8002f92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f96:	4b3e      	ldr	r3, [pc, #248]	@ (8003090 <MotorDrive+0x310>)
 8002f98:	edc3 7a00 	vstr	s15, [r3]
				b_check[6]= 4;
 8002f9c:	4b3b      	ldr	r3, [pc, #236]	@ (800308c <MotorDrive+0x30c>)
 8002f9e:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8002fa2:	619a      	str	r2, [r3, #24]
			}
		}
		if(DriveDirection == 1){
 8002fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	f040 80a9 	bne.w	8003100 <MotorDrive+0x380>
			if ((PosNow >= MotorDriveDampDistance) && (PosNow <= MotorDriveTravelDistance-MotorDriveDampDistance)) { // Middle
 8002fae:	4b35      	ldr	r3, [pc, #212]	@ (8003084 <MotorDrive+0x304>)
 8002fb0:	edd3 7a00 	vldr	s15, [r3]
 8002fb4:	ed97 7a00 	vldr	s14, [r7]
 8002fb8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc0:	db15      	blt.n	8002fee <MotorDrive+0x26e>
 8002fc2:	4b2f      	ldr	r3, [pc, #188]	@ (8003080 <MotorDrive+0x300>)
 8002fc4:	ed93 7a00 	vldr	s14, [r3]
 8002fc8:	4b2e      	ldr	r3, [pc, #184]	@ (8003084 <MotorDrive+0x304>)
 8002fca:	edd3 7a00 	vldr	s15, [r3]
 8002fce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fd2:	ed97 7a00 	vldr	s14, [r7]
 8002fd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fde:	d806      	bhi.n	8002fee <MotorDrive+0x26e>
				RealVfeedback = 12;
 8002fe0:	4b2b      	ldr	r3, [pc, #172]	@ (8003090 <MotorDrive+0x310>)
 8002fe2:	4a30      	ldr	r2, [pc, #192]	@ (80030a4 <MotorDrive+0x324>)
 8002fe4:	601a      	str	r2, [r3, #0]
				b_check[6]= 5;
 8002fe6:	4b29      	ldr	r3, [pc, #164]	@ (800308c <MotorDrive+0x30c>)
 8002fe8:	4a2f      	ldr	r2, [pc, #188]	@ (80030a8 <MotorDrive+0x328>)
 8002fea:	619a      	str	r2, [r3, #24]
 8002fec:	e088      	b.n	8003100 <MotorDrive+0x380>
			} else if (PosNow < MotorDriveDampDistance) { // Start
 8002fee:	4b25      	ldr	r3, [pc, #148]	@ (8003084 <MotorDrive+0x304>)
 8002ff0:	edd3 7a00 	vldr	s15, [r3]
 8002ff4:	ed97 7a00 	vldr	s14, [r7]
 8002ff8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003000:	d515      	bpl.n	800302e <MotorDrive+0x2ae>
				//RealVfeedback = 2;
				RealVfeedback = (PosNow+1) * 12/ MotorDriveDampDistance;
 8003002:	edd7 7a00 	vldr	s15, [r7]
 8003006:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800300a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800300e:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8003012:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003016:	4b1b      	ldr	r3, [pc, #108]	@ (8003084 <MotorDrive+0x304>)
 8003018:	ed93 7a00 	vldr	s14, [r3]
 800301c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003020:	4b1b      	ldr	r3, [pc, #108]	@ (8003090 <MotorDrive+0x310>)
 8003022:	edc3 7a00 	vstr	s15, [r3]
				b_check[6]= 6;
 8003026:	4b19      	ldr	r3, [pc, #100]	@ (800308c <MotorDrive+0x30c>)
 8003028:	4a20      	ldr	r2, [pc, #128]	@ (80030ac <MotorDrive+0x32c>)
 800302a:	619a      	str	r2, [r3, #24]
 800302c:	e068      	b.n	8003100 <MotorDrive+0x380>
			} else if (PosNow > MotorDriveTravelDistance) {  //Hard Stop
 800302e:	4b14      	ldr	r3, [pc, #80]	@ (8003080 <MotorDrive+0x300>)
 8003030:	edd3 7a00 	vldr	s15, [r3]
 8003034:	ed97 7a00 	vldr	s14, [r7]
 8003038:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800303c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003040:	dd38      	ble.n	80030b4 <MotorDrive+0x334>
				RealVfeedback = 0;
 8003042:	4b13      	ldr	r3, [pc, #76]	@ (8003090 <MotorDrive+0x310>)
 8003044:	f04f 0200 	mov.w	r2, #0
 8003048:	601a      	str	r2, [r3, #0]
				b_check[6]= 7;
 800304a:	4b10      	ldr	r3, [pc, #64]	@ (800308c <MotorDrive+0x30c>)
 800304c:	4a18      	ldr	r2, [pc, #96]	@ (80030b0 <MotorDrive+0x330>)
 800304e:	619a      	str	r2, [r3, #24]
 8003050:	e056      	b.n	8003100 <MotorDrive+0x380>
 8003052:	bf00      	nop
 8003054:	f3af 8000 	nop.w
 8003058:	9999999a 	.word	0x9999999a
 800305c:	3fc99999 	.word	0x3fc99999
 8003060:	9999999a 	.word	0x9999999a
 8003064:	3fb99999 	.word	0x3fb99999
 8003068:	9999999a 	.word	0x9999999a
 800306c:	bfb99999 	.word	0xbfb99999
 8003070:	20001040 	.word	0x20001040
 8003074:	200008f0 	.word	0x200008f0
 8003078:	2000104c 	.word	0x2000104c
 800307c:	20000938 	.word	0x20000938
 8003080:	20001048 	.word	0x20001048
 8003084:	20001044 	.word	0x20001044
 8003088:	20001014 	.word	0x20001014
 800308c:	20001018 	.word	0x20001018
 8003090:	20000934 	.word	0x20000934
 8003094:	41200000 	.word	0x41200000
 8003098:	3ff00000 	.word	0x3ff00000
 800309c:	402a0000 	.word	0x402a0000
 80030a0:	40400000 	.word	0x40400000
 80030a4:	41400000 	.word	0x41400000
 80030a8:	40a00000 	.word	0x40a00000
 80030ac:	40c00000 	.word	0x40c00000
 80030b0:	40e00000 	.word	0x40e00000
			} else if (PosNow > MotorDriveTravelDistance - MotorDriveDampDistance) {  //Stop
 80030b4:	4b74      	ldr	r3, [pc, #464]	@ (8003288 <MotorDrive+0x508>)
 80030b6:	ed93 7a00 	vldr	s14, [r3]
 80030ba:	4b74      	ldr	r3, [pc, #464]	@ (800328c <MotorDrive+0x50c>)
 80030bc:	edd3 7a00 	vldr	s15, [r3]
 80030c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030c4:	ed97 7a00 	vldr	s14, [r7]
 80030c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80030cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d0:	dd16      	ble.n	8003100 <MotorDrive+0x380>
				//RealVfeedback = 1.5;
				RealVfeedback = (MotorDriveTravelDistance-PosNow) * 12 / MotorDriveDampDistance;
 80030d2:	4b6d      	ldr	r3, [pc, #436]	@ (8003288 <MotorDrive+0x508>)
 80030d4:	ed93 7a00 	vldr	s14, [r3]
 80030d8:	edd7 7a00 	vldr	s15, [r7]
 80030dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030e0:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 80030e4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80030e8:	4b68      	ldr	r3, [pc, #416]	@ (800328c <MotorDrive+0x50c>)
 80030ea:	ed93 7a00 	vldr	s14, [r3]
 80030ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030f2:	4b67      	ldr	r3, [pc, #412]	@ (8003290 <MotorDrive+0x510>)
 80030f4:	edc3 7a00 	vstr	s15, [r3]
				b_check[6]= 8;
 80030f8:	4b66      	ldr	r3, [pc, #408]	@ (8003294 <MotorDrive+0x514>)
 80030fa:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 80030fe:	619a      	str	r2, [r3, #24]
			}
		}

		PIDVFeedback = Update_pid(&pid_control, MotorDriveTravelDistance-PosNow, 10, 12);
 8003100:	4b61      	ldr	r3, [pc, #388]	@ (8003288 <MotorDrive+0x508>)
 8003102:	ed93 7a00 	vldr	s14, [r3]
 8003106:	edd7 7a00 	vldr	s15, [r7]
 800310a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800310e:	eeb2 1a08 	vmov.f32	s2, #40	@ 0x41400000  12.0
 8003112:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8003116:	eeb0 0a67 	vmov.f32	s0, s15
 800311a:	485f      	ldr	r0, [pc, #380]	@ (8003298 <MotorDrive+0x518>)
 800311c:	f000 fd34 	bl	8003b88 <Update_pid>
 8003120:	ee07 0a90 	vmov	s15, r0
 8003124:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003128:	4b5c      	ldr	r3, [pc, #368]	@ (800329c <MotorDrive+0x51c>)
 800312a:	edc3 7a00 	vstr	s15, [r3]

		if (fabs(PIDVFeedback) < fabs(RealVfeedback)) {
 800312e:	4b5b      	ldr	r3, [pc, #364]	@ (800329c <MotorDrive+0x51c>)
 8003130:	edd3 7a00 	vldr	s15, [r3]
 8003134:	eeb0 7ae7 	vabs.f32	s14, s15
 8003138:	4b55      	ldr	r3, [pc, #340]	@ (8003290 <MotorDrive+0x510>)
 800313a:	edd3 7a00 	vldr	s15, [r3]
 800313e:	eef0 7ae7 	vabs.f32	s15, s15
 8003142:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800314a:	d503      	bpl.n	8003154 <MotorDrive+0x3d4>
			RealVfeedback = PIDVFeedback;
 800314c:	4b53      	ldr	r3, [pc, #332]	@ (800329c <MotorDrive+0x51c>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a4f      	ldr	r2, [pc, #316]	@ (8003290 <MotorDrive+0x510>)
 8003152:	6013      	str	r3, [r2, #0]
		}

		RealVfeedback = RealVfeedback * DriveDirection;
 8003154:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003158:	ee07 3a90 	vmov	s15, r3
 800315c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003160:	4b4b      	ldr	r3, [pc, #300]	@ (8003290 <MotorDrive+0x510>)
 8003162:	edd3 7a00 	vldr	s15, [r3]
 8003166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800316a:	4b49      	ldr	r3, [pc, #292]	@ (8003290 <MotorDrive+0x510>)
 800316c:	edc3 7a00 	vstr	s15, [r3]


		if (DriveDirection == 1) {  //go up
 8003170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d109      	bne.n	800318c <MotorDrive+0x40c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8003178:	2200      	movs	r2, #0
 800317a:	2108      	movs	r1, #8
 800317c:	4848      	ldr	r0, [pc, #288]	@ (80032a0 <MotorDrive+0x520>)
 800317e:	f001 ff5d 	bl	800503c <HAL_GPIO_WritePin>
			b_check[9]= 4;
 8003182:	4b44      	ldr	r3, [pc, #272]	@ (8003294 <MotorDrive+0x514>)
 8003184:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8003188:	625a      	str	r2, [r3, #36]	@ 0x24
 800318a:	e00f      	b.n	80031ac <MotorDrive+0x42c>
		} else {  //go down
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 800318c:	2201      	movs	r2, #1
 800318e:	2108      	movs	r1, #8
 8003190:	4843      	ldr	r0, [pc, #268]	@ (80032a0 <MotorDrive+0x520>)
 8003192:	f001 ff53 	bl	800503c <HAL_GPIO_WritePin>
			RealVfeedback = RealVfeedback * (-1);
 8003196:	4b3e      	ldr	r3, [pc, #248]	@ (8003290 <MotorDrive+0x510>)
 8003198:	edd3 7a00 	vldr	s15, [r3]
 800319c:	eef1 7a67 	vneg.f32	s15, s15
 80031a0:	4b3b      	ldr	r3, [pc, #236]	@ (8003290 <MotorDrive+0x510>)
 80031a2:	edc3 7a00 	vstr	s15, [r3]
			b_check[9]= 5;
 80031a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003294 <MotorDrive+0x514>)
 80031a8:	4a3e      	ldr	r2, [pc, #248]	@ (80032a4 <MotorDrive+0x524>)
 80031aa:	625a      	str	r2, [r3, #36]	@ 0x24
		}

		if(fabs(RealVfeedback) < 1.6  && RealVfeedback!=0){
 80031ac:	4b38      	ldr	r3, [pc, #224]	@ (8003290 <MotorDrive+0x510>)
 80031ae:	edd3 7a00 	vldr	s15, [r3]
 80031b2:	eef0 7ae7 	vabs.f32	s15, s15
 80031b6:	ee17 0a90 	vmov	r0, s15
 80031ba:	f7fd f991 	bl	80004e0 <__aeabi_f2d>
 80031be:	a330      	add	r3, pc, #192	@ (adr r3, 8003280 <MotorDrive+0x500>)
 80031c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c4:	f7fd fc56 	bl	8000a74 <__aeabi_dcmplt>
 80031c8:	4603      	mov	r3, r0
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d013      	beq.n	80031f6 <MotorDrive+0x476>
 80031ce:	4b30      	ldr	r3, [pc, #192]	@ (8003290 <MotorDrive+0x510>)
 80031d0:	edd3 7a00 	vldr	s15, [r3]
 80031d4:	eef5 7a40 	vcmp.f32	s15, #0.0
 80031d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031dc:	d00b      	beq.n	80031f6 <MotorDrive+0x476>
			if (DriveDirection == -1) {
 80031de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031e6:	d103      	bne.n	80031f0 <MotorDrive+0x470>
				RealVfeedback = 1.25;
 80031e8:	4b29      	ldr	r3, [pc, #164]	@ (8003290 <MotorDrive+0x510>)
 80031ea:	4a2f      	ldr	r2, [pc, #188]	@ (80032a8 <MotorDrive+0x528>)
 80031ec:	601a      	str	r2, [r3, #0]
 80031ee:	e002      	b.n	80031f6 <MotorDrive+0x476>
			} else {
				RealVfeedback = 1.6;
 80031f0:	4b27      	ldr	r3, [pc, #156]	@ (8003290 <MotorDrive+0x510>)
 80031f2:	4a2e      	ldr	r2, [pc, #184]	@ (80032ac <MotorDrive+0x52c>)
 80031f4:	601a      	str	r2, [r3, #0]
			}
		}

		duty_cycle_pid = fabs(RealVfeedback) * 4000 / 12;
 80031f6:	4b26      	ldr	r3, [pc, #152]	@ (8003290 <MotorDrive+0x510>)
 80031f8:	edd3 7a00 	vldr	s15, [r3]
 80031fc:	eef0 7ae7 	vabs.f32	s15, s15
 8003200:	ee17 0a90 	vmov	r0, s15
 8003204:	f7fd f96c 	bl	80004e0 <__aeabi_f2d>
 8003208:	f04f 0200 	mov.w	r2, #0
 800320c:	4b28      	ldr	r3, [pc, #160]	@ (80032b0 <MotorDrive+0x530>)
 800320e:	f7fd f9bf 	bl	8000590 <__aeabi_dmul>
 8003212:	4602      	mov	r2, r0
 8003214:	460b      	mov	r3, r1
 8003216:	4610      	mov	r0, r2
 8003218:	4619      	mov	r1, r3
 800321a:	f04f 0200 	mov.w	r2, #0
 800321e:	4b25      	ldr	r3, [pc, #148]	@ (80032b4 <MotorDrive+0x534>)
 8003220:	f7fd fae0 	bl	80007e4 <__aeabi_ddiv>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	4610      	mov	r0, r2
 800322a:	4619      	mov	r1, r3
 800322c:	f7fd fc72 	bl	8000b14 <__aeabi_d2uiz>
 8003230:	4603      	mov	r3, r0
 8003232:	b29a      	uxth	r2, r3
 8003234:	4b20      	ldr	r3, [pc, #128]	@ (80032b8 <MotorDrive+0x538>)
 8003236:	801a      	strh	r2, [r3, #0]
		if(RealVfeedback == 0){
 8003238:	4b15      	ldr	r3, [pc, #84]	@ (8003290 <MotorDrive+0x510>)
 800323a:	edd3 7a00 	vldr	s15, [r3]
 800323e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003246:	d102      	bne.n	800324e <MotorDrive+0x4ce>
			duty_cycle_pid = 0;
 8003248:	4b1b      	ldr	r3, [pc, #108]	@ (80032b8 <MotorDrive+0x538>)
 800324a:	2200      	movs	r2, #0
 800324c:	801a      	strh	r2, [r3, #0]
		}

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle_pid);
 800324e:	4b1a      	ldr	r3, [pc, #104]	@ (80032b8 <MotorDrive+0x538>)
 8003250:	881a      	ldrh	r2, [r3, #0]
 8003252:	4b1a      	ldr	r3, [pc, #104]	@ (80032bc <MotorDrive+0x53c>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	635a      	str	r2, [r3, #52]	@ 0x34
	if((MotorDriveTravelDistance-PosNow) > 0.1 || ((MotorDriveTravelDistance-PosNow) < -0.1)){
 8003258:	e00e      	b.n	8003278 <MotorDrive+0x4f8>
	}else{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800325a:	4b18      	ldr	r3, [pc, #96]	@ (80032bc <MotorDrive+0x53c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2200      	movs	r2, #0
 8003260:	635a      	str	r2, [r3, #52]	@ 0x34
		Arrived = 1;
 8003262:	4b17      	ldr	r3, [pc, #92]	@ (80032c0 <MotorDrive+0x540>)
 8003264:	2201      	movs	r2, #1
 8003266:	701a      	strb	r2, [r3, #0]
		RealVfeedback = 0;
 8003268:	4b09      	ldr	r3, [pc, #36]	@ (8003290 <MotorDrive+0x510>)
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	601a      	str	r2, [r3, #0]
		b_check[6] = 6;
 8003270:	4b08      	ldr	r3, [pc, #32]	@ (8003294 <MotorDrive+0x514>)
 8003272:	4a14      	ldr	r2, [pc, #80]	@ (80032c4 <MotorDrive+0x544>)
 8003274:	619a      	str	r2, [r3, #24]

	}
}
 8003276:	bf00      	nop
 8003278:	bf00      	nop
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bdb0      	pop	{r4, r5, r7, pc}
 8003280:	9999999a 	.word	0x9999999a
 8003284:	3ff99999 	.word	0x3ff99999
 8003288:	20001048 	.word	0x20001048
 800328c:	20001044 	.word	0x20001044
 8003290:	20000934 	.word	0x20000934
 8003294:	20001018 	.word	0x20001018
 8003298:	20000940 	.word	0x20000940
 800329c:	20001050 	.word	0x20001050
 80032a0:	48000800 	.word	0x48000800
 80032a4:	40a00000 	.word	0x40a00000
 80032a8:	3fa00000 	.word	0x3fa00000
 80032ac:	3fcccccd 	.word	0x3fcccccd
 80032b0:	40af4000 	.word	0x40af4000
 80032b4:	40280000 	.word	0x40280000
 80032b8:	2000093c 	.word	0x2000093c
 80032bc:	20000258 	.word	0x20000258
 80032c0:	20001014 	.word	0x20001014
 80032c4:	40c00000 	.word	0x40c00000

080032c8 <MotorDrivePoint>:
void MotorDrivePoint() {
 80032c8:	b5b0      	push	{r4, r5, r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af00      	add	r7, sp, #0
	if (MotorDriveFlag == 0) {
 80032ce:	4bc0      	ldr	r3, [pc, #768]	@ (80035d0 <MotorDrivePoint+0x308>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d124      	bne.n	8003320 <MotorDrivePoint+0x58>
		// Start: This box of code run only one time.
		StartTotalPos = QEIdata.TotalPos[NEW];
 80032d6:	4bbf      	ldr	r3, [pc, #764]	@ (80035d4 <MotorDrivePoint+0x30c>)
 80032d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032da:	4abf      	ldr	r2, [pc, #764]	@ (80035d8 <MotorDrivePoint+0x310>)
 80032dc:	6013      	str	r3, [r2, #0]
		MotorDriveTravelDistance = Goal - QEIdata.TotalPos[NEW];
 80032de:	4bbf      	ldr	r3, [pc, #764]	@ (80035dc <MotorDrivePoint+0x314>)
 80032e0:	ed93 7a00 	vldr	s14, [r3]
 80032e4:	4bbb      	ldr	r3, [pc, #748]	@ (80035d4 <MotorDrivePoint+0x30c>)
 80032e6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80032ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032ee:	4bbc      	ldr	r3, [pc, #752]	@ (80035e0 <MotorDrivePoint+0x318>)
 80032f0:	edc3 7a00 	vstr	s15, [r3]
		MotorDriveDampDistance = MotorDriveTravelDistance * 0.3;
 80032f4:	4bba      	ldr	r3, [pc, #744]	@ (80035e0 <MotorDrivePoint+0x318>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4618      	mov	r0, r3
 80032fa:	f7fd f8f1 	bl	80004e0 <__aeabi_f2d>
 80032fe:	a3ae      	add	r3, pc, #696	@ (adr r3, 80035b8 <MotorDrivePoint+0x2f0>)
 8003300:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003304:	f7fd f944 	bl	8000590 <__aeabi_dmul>
 8003308:	4602      	mov	r2, r0
 800330a:	460b      	mov	r3, r1
 800330c:	4610      	mov	r0, r2
 800330e:	4619      	mov	r1, r3
 8003310:	f7fd fc20 	bl	8000b54 <__aeabi_d2f>
 8003314:	4603      	mov	r3, r0
 8003316:	4ab3      	ldr	r2, [pc, #716]	@ (80035e4 <MotorDrivePoint+0x31c>)
 8003318:	6013      	str	r3, [r2, #0]
		// End
		MotorDriveFlag = 1;
 800331a:	4bad      	ldr	r3, [pc, #692]	@ (80035d0 <MotorDrivePoint+0x308>)
 800331c:	2201      	movs	r2, #1
 800331e:	701a      	strb	r2, [r3, #0]
	}

	float PosNow = QEIdata.TotalPos[NEW] - StartTotalPos;
 8003320:	4bac      	ldr	r3, [pc, #688]	@ (80035d4 <MotorDrivePoint+0x30c>)
 8003322:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8003326:	4bac      	ldr	r3, [pc, #688]	@ (80035d8 <MotorDrivePoint+0x310>)
 8003328:	edd3 7a00 	vldr	s15, [r3]
 800332c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003330:	edc7 7a00 	vstr	s15, [r7]

	if((MotorDriveTravelDistance-PosNow) > 0.1 || ((MotorDriveTravelDistance-PosNow) < -0.1)){
 8003334:	4baa      	ldr	r3, [pc, #680]	@ (80035e0 <MotorDrivePoint+0x318>)
 8003336:	ed93 7a00 	vldr	s14, [r3]
 800333a:	edd7 7a00 	vldr	s15, [r7]
 800333e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003342:	ee17 0a90 	vmov	r0, s15
 8003346:	f7fd f8cb 	bl	80004e0 <__aeabi_f2d>
 800334a:	a39d      	add	r3, pc, #628	@ (adr r3, 80035c0 <MotorDrivePoint+0x2f8>)
 800334c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003350:	f7fd fbae 	bl	8000ab0 <__aeabi_dcmpgt>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d113      	bne.n	8003382 <MotorDrivePoint+0xba>
 800335a:	4ba1      	ldr	r3, [pc, #644]	@ (80035e0 <MotorDrivePoint+0x318>)
 800335c:	ed93 7a00 	vldr	s14, [r3]
 8003360:	edd7 7a00 	vldr	s15, [r7]
 8003364:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003368:	ee17 0a90 	vmov	r0, s15
 800336c:	f7fd f8b8 	bl	80004e0 <__aeabi_f2d>
 8003370:	a395      	add	r3, pc, #596	@ (adr r3, 80035c8 <MotorDrivePoint+0x300>)
 8003372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003376:	f7fd fb7d 	bl	8000a74 <__aeabi_dcmplt>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	f000 8234 	beq.w	80037ea <MotorDrivePoint+0x522>
		Arrived = 0;
 8003382:	4b99      	ldr	r3, [pc, #612]	@ (80035e8 <MotorDrivePoint+0x320>)
 8003384:	2200      	movs	r2, #0
 8003386:	701a      	strb	r2, [r3, #0]
		b_check[8] = PosNow;
 8003388:	4a98      	ldr	r2, [pc, #608]	@ (80035ec <MotorDrivePoint+0x324>)
 800338a:	683b      	ldr	r3, [r7, #0]
 800338c:	6213      	str	r3, [r2, #32]
		int8_t DriveDirection = 1; // direction is 1 if up, -1 if down.
 800338e:	2301      	movs	r3, #1
 8003390:	71fb      	strb	r3, [r7, #7]
		if (Goal <= StartTotalPos) {
 8003392:	4b92      	ldr	r3, [pc, #584]	@ (80035dc <MotorDrivePoint+0x314>)
 8003394:	ed93 7a00 	vldr	s14, [r3]
 8003398:	4b8f      	ldr	r3, [pc, #572]	@ (80035d8 <MotorDrivePoint+0x310>)
 800339a:	edd3 7a00 	vldr	s15, [r3]
 800339e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a6:	d805      	bhi.n	80033b4 <MotorDrivePoint+0xec>
			DriveDirection = -1;
 80033a8:	23ff      	movs	r3, #255	@ 0xff
 80033aa:	71fb      	strb	r3, [r7, #7]
			b_check[7] = 1;
 80033ac:	4b8f      	ldr	r3, [pc, #572]	@ (80035ec <MotorDrivePoint+0x324>)
 80033ae:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80033b2:	61da      	str	r2, [r3, #28]
//		if(MotorDriveTravelDistance<=100){
//			RealVfeedback = 3;
//		}

		// Trajectory generator
		if((DriveDirection == -1)&&(MotorDriveTravelDistance<0)){
 80033b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033bc:	f040 80a9 	bne.w	8003512 <MotorDrivePoint+0x24a>
 80033c0:	4b87      	ldr	r3, [pc, #540]	@ (80035e0 <MotorDrivePoint+0x318>)
 80033c2:	edd3 7a00 	vldr	s15, [r3]
 80033c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ce:	f140 80a0 	bpl.w	8003512 <MotorDrivePoint+0x24a>
			if ((PosNow <= MotorDriveDampDistance) && (PosNow >= MotorDriveTravelDistance-MotorDriveDampDistance)) { // Middle
 80033d2:	4b84      	ldr	r3, [pc, #528]	@ (80035e4 <MotorDrivePoint+0x31c>)
 80033d4:	edd3 7a00 	vldr	s15, [r3]
 80033d8:	ed97 7a00 	vldr	s14, [r7]
 80033dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033e4:	d815      	bhi.n	8003412 <MotorDrivePoint+0x14a>
 80033e6:	4b7e      	ldr	r3, [pc, #504]	@ (80035e0 <MotorDrivePoint+0x318>)
 80033e8:	ed93 7a00 	vldr	s14, [r3]
 80033ec:	4b7d      	ldr	r3, [pc, #500]	@ (80035e4 <MotorDrivePoint+0x31c>)
 80033ee:	edd3 7a00 	vldr	s15, [r3]
 80033f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033f6:	ed97 7a00 	vldr	s14, [r7]
 80033fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003402:	db06      	blt.n	8003412 <MotorDrivePoint+0x14a>
				RealVfeedback = 7;
 8003404:	4b7a      	ldr	r3, [pc, #488]	@ (80035f0 <MotorDrivePoint+0x328>)
 8003406:	4a7b      	ldr	r2, [pc, #492]	@ (80035f4 <MotorDrivePoint+0x32c>)
 8003408:	601a      	str	r2, [r3, #0]
				b_check[6]= 9;
 800340a:	4b78      	ldr	r3, [pc, #480]	@ (80035ec <MotorDrivePoint+0x324>)
 800340c:	4a7a      	ldr	r2, [pc, #488]	@ (80035f8 <MotorDrivePoint+0x330>)
 800340e:	619a      	str	r2, [r3, #24]
 8003410:	e07f      	b.n	8003512 <MotorDrivePoint+0x24a>
			} else if (PosNow > MotorDriveDampDistance) { // Start
 8003412:	4b74      	ldr	r3, [pc, #464]	@ (80035e4 <MotorDrivePoint+0x31c>)
 8003414:	edd3 7a00 	vldr	s15, [r3]
 8003418:	ed97 7a00 	vldr	s14, [r7]
 800341c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003420:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003424:	dd3a      	ble.n	800349c <MotorDrivePoint+0x1d4>
				//RealVfeedback = 1.5;
				RealVfeedback = ((fabs(PosNow)+1)*7 / MotorDriveTravelDistance)+1;
 8003426:	edd7 7a00 	vldr	s15, [r7]
 800342a:	eef0 7ae7 	vabs.f32	s15, s15
 800342e:	ee17 0a90 	vmov	r0, s15
 8003432:	f7fd f855 	bl	80004e0 <__aeabi_f2d>
 8003436:	f04f 0200 	mov.w	r2, #0
 800343a:	4b70      	ldr	r3, [pc, #448]	@ (80035fc <MotorDrivePoint+0x334>)
 800343c:	f7fc fef2 	bl	8000224 <__adddf3>
 8003440:	4602      	mov	r2, r0
 8003442:	460b      	mov	r3, r1
 8003444:	4610      	mov	r0, r2
 8003446:	4619      	mov	r1, r3
 8003448:	f04f 0200 	mov.w	r2, #0
 800344c:	4b6c      	ldr	r3, [pc, #432]	@ (8003600 <MotorDrivePoint+0x338>)
 800344e:	f7fd f89f 	bl	8000590 <__aeabi_dmul>
 8003452:	4602      	mov	r2, r0
 8003454:	460b      	mov	r3, r1
 8003456:	4614      	mov	r4, r2
 8003458:	461d      	mov	r5, r3
 800345a:	4b61      	ldr	r3, [pc, #388]	@ (80035e0 <MotorDrivePoint+0x318>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f7fd f83e 	bl	80004e0 <__aeabi_f2d>
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	4620      	mov	r0, r4
 800346a:	4629      	mov	r1, r5
 800346c:	f7fd f9ba 	bl	80007e4 <__aeabi_ddiv>
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4610      	mov	r0, r2
 8003476:	4619      	mov	r1, r3
 8003478:	f04f 0200 	mov.w	r2, #0
 800347c:	4b5f      	ldr	r3, [pc, #380]	@ (80035fc <MotorDrivePoint+0x334>)
 800347e:	f7fc fed1 	bl	8000224 <__adddf3>
 8003482:	4602      	mov	r2, r0
 8003484:	460b      	mov	r3, r1
 8003486:	4610      	mov	r0, r2
 8003488:	4619      	mov	r1, r3
 800348a:	f7fd fb63 	bl	8000b54 <__aeabi_d2f>
 800348e:	4603      	mov	r3, r0
 8003490:	4a57      	ldr	r2, [pc, #348]	@ (80035f0 <MotorDrivePoint+0x328>)
 8003492:	6013      	str	r3, [r2, #0]
				b_check[6]= 10;
 8003494:	4b55      	ldr	r3, [pc, #340]	@ (80035ec <MotorDrivePoint+0x324>)
 8003496:	4a5b      	ldr	r2, [pc, #364]	@ (8003604 <MotorDrivePoint+0x33c>)
 8003498:	619a      	str	r2, [r3, #24]
 800349a:	e03a      	b.n	8003512 <MotorDrivePoint+0x24a>
			}  else if (PosNow <= MotorDriveTravelDistance) {  //Hard Stop
 800349c:	4b50      	ldr	r3, [pc, #320]	@ (80035e0 <MotorDrivePoint+0x318>)
 800349e:	edd3 7a00 	vldr	s15, [r3]
 80034a2:	ed97 7a00 	vldr	s14, [r7]
 80034a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ae:	d807      	bhi.n	80034c0 <MotorDrivePoint+0x1f8>
				RealVfeedback = 0;
 80034b0:	4b4f      	ldr	r3, [pc, #316]	@ (80035f0 <MotorDrivePoint+0x328>)
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
				b_check[6]= 11;
 80034b8:	4b4c      	ldr	r3, [pc, #304]	@ (80035ec <MotorDrivePoint+0x324>)
 80034ba:	4a53      	ldr	r2, [pc, #332]	@ (8003608 <MotorDrivePoint+0x340>)
 80034bc:	619a      	str	r2, [r3, #24]
 80034be:	e028      	b.n	8003512 <MotorDrivePoint+0x24a>
			} else if (PosNow < MotorDriveTravelDistance - MotorDriveDampDistance) {  //Stop
 80034c0:	4b47      	ldr	r3, [pc, #284]	@ (80035e0 <MotorDrivePoint+0x318>)
 80034c2:	ed93 7a00 	vldr	s14, [r3]
 80034c6:	4b47      	ldr	r3, [pc, #284]	@ (80035e4 <MotorDrivePoint+0x31c>)
 80034c8:	edd3 7a00 	vldr	s15, [r3]
 80034cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034d0:	ed97 7a00 	vldr	s14, [r7]
 80034d4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034dc:	d519      	bpl.n	8003512 <MotorDrivePoint+0x24a>
				//RealVfeedback = 1.5;
				RealVfeedback = ((MotorDriveTravelDistance-PosNow)*7 / MotorDriveTravelDistance)+1;
 80034de:	4b40      	ldr	r3, [pc, #256]	@ (80035e0 <MotorDrivePoint+0x318>)
 80034e0:	ed93 7a00 	vldr	s14, [r3]
 80034e4:	edd7 7a00 	vldr	s15, [r7]
 80034e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034ec:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 80034f0:	ee67 6a87 	vmul.f32	s13, s15, s14
 80034f4:	4b3a      	ldr	r3, [pc, #232]	@ (80035e0 <MotorDrivePoint+0x318>)
 80034f6:	ed93 7a00 	vldr	s14, [r3]
 80034fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034fe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003502:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003506:	4b3a      	ldr	r3, [pc, #232]	@ (80035f0 <MotorDrivePoint+0x328>)
 8003508:	edc3 7a00 	vstr	s15, [r3]
				b_check[6]= 12;
 800350c:	4b37      	ldr	r3, [pc, #220]	@ (80035ec <MotorDrivePoint+0x324>)
 800350e:	4a3f      	ldr	r2, [pc, #252]	@ (800360c <MotorDrivePoint+0x344>)
 8003510:	619a      	str	r2, [r3, #24]
			}
		}
		if((DriveDirection == 1)&&(MotorDriveTravelDistance>0)){
 8003512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003516:	2b01      	cmp	r3, #1
 8003518:	f040 80ba 	bne.w	8003690 <MotorDrivePoint+0x3c8>
 800351c:	4b30      	ldr	r3, [pc, #192]	@ (80035e0 <MotorDrivePoint+0x318>)
 800351e:	edd3 7a00 	vldr	s15, [r3]
 8003522:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800352a:	f340 80b1 	ble.w	8003690 <MotorDrivePoint+0x3c8>
			if ((PosNow >= MotorDriveDampDistance) && (PosNow <= MotorDriveTravelDistance-MotorDriveDampDistance)) { // Middle
 800352e:	4b2d      	ldr	r3, [pc, #180]	@ (80035e4 <MotorDrivePoint+0x31c>)
 8003530:	edd3 7a00 	vldr	s15, [r3]
 8003534:	ed97 7a00 	vldr	s14, [r7]
 8003538:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800353c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003540:	db16      	blt.n	8003570 <MotorDrivePoint+0x2a8>
 8003542:	4b27      	ldr	r3, [pc, #156]	@ (80035e0 <MotorDrivePoint+0x318>)
 8003544:	ed93 7a00 	vldr	s14, [r3]
 8003548:	4b26      	ldr	r3, [pc, #152]	@ (80035e4 <MotorDrivePoint+0x31c>)
 800354a:	edd3 7a00 	vldr	s15, [r3]
 800354e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003552:	ed97 7a00 	vldr	s14, [r7]
 8003556:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800355a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800355e:	d807      	bhi.n	8003570 <MotorDrivePoint+0x2a8>
				RealVfeedback = 8;
 8003560:	4b23      	ldr	r3, [pc, #140]	@ (80035f0 <MotorDrivePoint+0x328>)
 8003562:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8003566:	601a      	str	r2, [r3, #0]
				b_check[6]= 13;
 8003568:	4b20      	ldr	r3, [pc, #128]	@ (80035ec <MotorDrivePoint+0x324>)
 800356a:	4a29      	ldr	r2, [pc, #164]	@ (8003610 <MotorDrivePoint+0x348>)
 800356c:	619a      	str	r2, [r3, #24]
 800356e:	e08f      	b.n	8003690 <MotorDrivePoint+0x3c8>
			} else if (PosNow < MotorDriveDampDistance) { // Start
 8003570:	4b1c      	ldr	r3, [pc, #112]	@ (80035e4 <MotorDrivePoint+0x31c>)
 8003572:	edd3 7a00 	vldr	s15, [r3]
 8003576:	ed97 7a00 	vldr	s14, [r7]
 800357a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800357e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003582:	d549      	bpl.n	8003618 <MotorDrivePoint+0x350>
				//RealVfeedback = 2;
				RealVfeedback = ((PosNow+3) * 8/ MotorDriveDampDistance)+1;
 8003584:	edd7 7a00 	vldr	s15, [r7]
 8003588:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 800358c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003590:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 8003594:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003598:	4b12      	ldr	r3, [pc, #72]	@ (80035e4 <MotorDrivePoint+0x31c>)
 800359a:	ed93 7a00 	vldr	s14, [r3]
 800359e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80035a2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80035a6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80035aa:	4b11      	ldr	r3, [pc, #68]	@ (80035f0 <MotorDrivePoint+0x328>)
 80035ac:	edc3 7a00 	vstr	s15, [r3]
				b_check[6]= 14;
 80035b0:	4b0e      	ldr	r3, [pc, #56]	@ (80035ec <MotorDrivePoint+0x324>)
 80035b2:	4a18      	ldr	r2, [pc, #96]	@ (8003614 <MotorDrivePoint+0x34c>)
 80035b4:	619a      	str	r2, [r3, #24]
 80035b6:	e06b      	b.n	8003690 <MotorDrivePoint+0x3c8>
 80035b8:	33333333 	.word	0x33333333
 80035bc:	3fd33333 	.word	0x3fd33333
 80035c0:	9999999a 	.word	0x9999999a
 80035c4:	3fb99999 	.word	0x3fb99999
 80035c8:	9999999a 	.word	0x9999999a
 80035cc:	bfb99999 	.word	0xbfb99999
 80035d0:	20001040 	.word	0x20001040
 80035d4:	200008f0 	.word	0x200008f0
 80035d8:	2000104c 	.word	0x2000104c
 80035dc:	20000938 	.word	0x20000938
 80035e0:	20001048 	.word	0x20001048
 80035e4:	20001044 	.word	0x20001044
 80035e8:	20001014 	.word	0x20001014
 80035ec:	20001018 	.word	0x20001018
 80035f0:	20000934 	.word	0x20000934
 80035f4:	40e00000 	.word	0x40e00000
 80035f8:	41100000 	.word	0x41100000
 80035fc:	3ff00000 	.word	0x3ff00000
 8003600:	401c0000 	.word	0x401c0000
 8003604:	41200000 	.word	0x41200000
 8003608:	41300000 	.word	0x41300000
 800360c:	41400000 	.word	0x41400000
 8003610:	41500000 	.word	0x41500000
 8003614:	41600000 	.word	0x41600000
			} else if (PosNow >= MotorDriveTravelDistance) {  //Hard Stop
 8003618:	4b9b      	ldr	r3, [pc, #620]	@ (8003888 <MotorDrivePoint+0x5c0>)
 800361a:	edd3 7a00 	vldr	s15, [r3]
 800361e:	ed97 7a00 	vldr	s14, [r7]
 8003622:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800362a:	db07      	blt.n	800363c <MotorDrivePoint+0x374>
				RealVfeedback = 0;
 800362c:	4b97      	ldr	r3, [pc, #604]	@ (800388c <MotorDrivePoint+0x5c4>)
 800362e:	f04f 0200 	mov.w	r2, #0
 8003632:	601a      	str	r2, [r3, #0]
				b_check[6]= 15;
 8003634:	4b96      	ldr	r3, [pc, #600]	@ (8003890 <MotorDrivePoint+0x5c8>)
 8003636:	4a97      	ldr	r2, [pc, #604]	@ (8003894 <MotorDrivePoint+0x5cc>)
 8003638:	619a      	str	r2, [r3, #24]
 800363a:	e029      	b.n	8003690 <MotorDrivePoint+0x3c8>
			} else if (PosNow > MotorDriveTravelDistance - MotorDriveDampDistance) {  //Stop
 800363c:	4b92      	ldr	r3, [pc, #584]	@ (8003888 <MotorDrivePoint+0x5c0>)
 800363e:	ed93 7a00 	vldr	s14, [r3]
 8003642:	4b95      	ldr	r3, [pc, #596]	@ (8003898 <MotorDrivePoint+0x5d0>)
 8003644:	edd3 7a00 	vldr	s15, [r3]
 8003648:	ee77 7a67 	vsub.f32	s15, s14, s15
 800364c:	ed97 7a00 	vldr	s14, [r7]
 8003650:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003654:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003658:	dd1a      	ble.n	8003690 <MotorDrivePoint+0x3c8>
				//RealVfeedback = 1.5;
				RealVfeedback = ((MotorDriveTravelDistance-PosNow) * 8 / MotorDriveDampDistance)+1;
 800365a:	4b8b      	ldr	r3, [pc, #556]	@ (8003888 <MotorDrivePoint+0x5c0>)
 800365c:	ed93 7a00 	vldr	s14, [r3]
 8003660:	edd7 7a00 	vldr	s15, [r7]
 8003664:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003668:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800366c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003670:	4b89      	ldr	r3, [pc, #548]	@ (8003898 <MotorDrivePoint+0x5d0>)
 8003672:	ed93 7a00 	vldr	s14, [r3]
 8003676:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800367a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800367e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003682:	4b82      	ldr	r3, [pc, #520]	@ (800388c <MotorDrivePoint+0x5c4>)
 8003684:	edc3 7a00 	vstr	s15, [r3]
				b_check[6]= 16;
 8003688:	4b81      	ldr	r3, [pc, #516]	@ (8003890 <MotorDrivePoint+0x5c8>)
 800368a:	f04f 4283 	mov.w	r2, #1098907648	@ 0x41800000
 800368e:	619a      	str	r2, [r3, #24]
			}
		}

		PIDVFeedback = Update_pid(&pid_control, MotorDriveTravelDistance-PosNow, 10, 12);
 8003690:	4b7d      	ldr	r3, [pc, #500]	@ (8003888 <MotorDrivePoint+0x5c0>)
 8003692:	ed93 7a00 	vldr	s14, [r3]
 8003696:	edd7 7a00 	vldr	s15, [r7]
 800369a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800369e:	eeb2 1a08 	vmov.f32	s2, #40	@ 0x41400000  12.0
 80036a2:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 80036a6:	eeb0 0a67 	vmov.f32	s0, s15
 80036aa:	487c      	ldr	r0, [pc, #496]	@ (800389c <MotorDrivePoint+0x5d4>)
 80036ac:	f000 fa6c 	bl	8003b88 <Update_pid>
 80036b0:	ee07 0a90 	vmov	s15, r0
 80036b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036b8:	4b79      	ldr	r3, [pc, #484]	@ (80038a0 <MotorDrivePoint+0x5d8>)
 80036ba:	edc3 7a00 	vstr	s15, [r3]

		if (fabs(PIDVFeedback) < fabs(RealVfeedback)) {
 80036be:	4b78      	ldr	r3, [pc, #480]	@ (80038a0 <MotorDrivePoint+0x5d8>)
 80036c0:	edd3 7a00 	vldr	s15, [r3]
 80036c4:	eeb0 7ae7 	vabs.f32	s14, s15
 80036c8:	4b70      	ldr	r3, [pc, #448]	@ (800388c <MotorDrivePoint+0x5c4>)
 80036ca:	edd3 7a00 	vldr	s15, [r3]
 80036ce:	eef0 7ae7 	vabs.f32	s15, s15
 80036d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036da:	d503      	bpl.n	80036e4 <MotorDrivePoint+0x41c>
			RealVfeedback = PIDVFeedback;
 80036dc:	4b70      	ldr	r3, [pc, #448]	@ (80038a0 <MotorDrivePoint+0x5d8>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a6a      	ldr	r2, [pc, #424]	@ (800388c <MotorDrivePoint+0x5c4>)
 80036e2:	6013      	str	r3, [r2, #0]
		}

		RealVfeedback = RealVfeedback * DriveDirection;
 80036e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e8:	ee07 3a90 	vmov	s15, r3
 80036ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80036f0:	4b66      	ldr	r3, [pc, #408]	@ (800388c <MotorDrivePoint+0x5c4>)
 80036f2:	edd3 7a00 	vldr	s15, [r3]
 80036f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036fa:	4b64      	ldr	r3, [pc, #400]	@ (800388c <MotorDrivePoint+0x5c4>)
 80036fc:	edc3 7a00 	vstr	s15, [r3]


		if (DriveDirection == 1) {  //go up
 8003700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d109      	bne.n	800371c <MotorDrivePoint+0x454>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8003708:	2200      	movs	r2, #0
 800370a:	2108      	movs	r1, #8
 800370c:	4865      	ldr	r0, [pc, #404]	@ (80038a4 <MotorDrivePoint+0x5dc>)
 800370e:	f001 fc95 	bl	800503c <HAL_GPIO_WritePin>
			b_check[9]= 4;
 8003712:	4b5f      	ldr	r3, [pc, #380]	@ (8003890 <MotorDrivePoint+0x5c8>)
 8003714:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8003718:	625a      	str	r2, [r3, #36]	@ 0x24
 800371a:	e00f      	b.n	800373c <MotorDrivePoint+0x474>
		} else {  //go down
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 800371c:	2201      	movs	r2, #1
 800371e:	2108      	movs	r1, #8
 8003720:	4860      	ldr	r0, [pc, #384]	@ (80038a4 <MotorDrivePoint+0x5dc>)
 8003722:	f001 fc8b 	bl	800503c <HAL_GPIO_WritePin>
			RealVfeedback = RealVfeedback * (-1);
 8003726:	4b59      	ldr	r3, [pc, #356]	@ (800388c <MotorDrivePoint+0x5c4>)
 8003728:	edd3 7a00 	vldr	s15, [r3]
 800372c:	eef1 7a67 	vneg.f32	s15, s15
 8003730:	4b56      	ldr	r3, [pc, #344]	@ (800388c <MotorDrivePoint+0x5c4>)
 8003732:	edc3 7a00 	vstr	s15, [r3]
			b_check[9]= 5;
 8003736:	4b56      	ldr	r3, [pc, #344]	@ (8003890 <MotorDrivePoint+0x5c8>)
 8003738:	4a5b      	ldr	r2, [pc, #364]	@ (80038a8 <MotorDrivePoint+0x5e0>)
 800373a:	625a      	str	r2, [r3, #36]	@ 0x24
		}

		if(fabs(RealVfeedback) < 1.6  && RealVfeedback!=0){
 800373c:	4b53      	ldr	r3, [pc, #332]	@ (800388c <MotorDrivePoint+0x5c4>)
 800373e:	edd3 7a00 	vldr	s15, [r3]
 8003742:	eef0 7ae7 	vabs.f32	s15, s15
 8003746:	ee17 0a90 	vmov	r0, s15
 800374a:	f7fc fec9 	bl	80004e0 <__aeabi_f2d>
 800374e:	a348      	add	r3, pc, #288	@ (adr r3, 8003870 <MotorDrivePoint+0x5a8>)
 8003750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003754:	f7fd f98e 	bl	8000a74 <__aeabi_dcmplt>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d013      	beq.n	8003786 <MotorDrivePoint+0x4be>
 800375e:	4b4b      	ldr	r3, [pc, #300]	@ (800388c <MotorDrivePoint+0x5c4>)
 8003760:	edd3 7a00 	vldr	s15, [r3]
 8003764:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800376c:	d00b      	beq.n	8003786 <MotorDrivePoint+0x4be>
			if (DriveDirection == -1) {
 800376e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003772:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003776:	d103      	bne.n	8003780 <MotorDrivePoint+0x4b8>
				RealVfeedback = 1.2;
 8003778:	4b44      	ldr	r3, [pc, #272]	@ (800388c <MotorDrivePoint+0x5c4>)
 800377a:	4a4c      	ldr	r2, [pc, #304]	@ (80038ac <MotorDrivePoint+0x5e4>)
 800377c:	601a      	str	r2, [r3, #0]
 800377e:	e002      	b.n	8003786 <MotorDrivePoint+0x4be>
			} else {
				RealVfeedback = 1.6;
 8003780:	4b42      	ldr	r3, [pc, #264]	@ (800388c <MotorDrivePoint+0x5c4>)
 8003782:	4a4b      	ldr	r2, [pc, #300]	@ (80038b0 <MotorDrivePoint+0x5e8>)
 8003784:	601a      	str	r2, [r3, #0]
			}
		}

		duty_cycle_pid = fabs(RealVfeedback) * 4000 / 12;
 8003786:	4b41      	ldr	r3, [pc, #260]	@ (800388c <MotorDrivePoint+0x5c4>)
 8003788:	edd3 7a00 	vldr	s15, [r3]
 800378c:	eef0 7ae7 	vabs.f32	s15, s15
 8003790:	ee17 0a90 	vmov	r0, s15
 8003794:	f7fc fea4 	bl	80004e0 <__aeabi_f2d>
 8003798:	f04f 0200 	mov.w	r2, #0
 800379c:	4b45      	ldr	r3, [pc, #276]	@ (80038b4 <MotorDrivePoint+0x5ec>)
 800379e:	f7fc fef7 	bl	8000590 <__aeabi_dmul>
 80037a2:	4602      	mov	r2, r0
 80037a4:	460b      	mov	r3, r1
 80037a6:	4610      	mov	r0, r2
 80037a8:	4619      	mov	r1, r3
 80037aa:	f04f 0200 	mov.w	r2, #0
 80037ae:	4b42      	ldr	r3, [pc, #264]	@ (80038b8 <MotorDrivePoint+0x5f0>)
 80037b0:	f7fd f818 	bl	80007e4 <__aeabi_ddiv>
 80037b4:	4602      	mov	r2, r0
 80037b6:	460b      	mov	r3, r1
 80037b8:	4610      	mov	r0, r2
 80037ba:	4619      	mov	r1, r3
 80037bc:	f7fd f9aa 	bl	8000b14 <__aeabi_d2uiz>
 80037c0:	4603      	mov	r3, r0
 80037c2:	b29a      	uxth	r2, r3
 80037c4:	4b3d      	ldr	r3, [pc, #244]	@ (80038bc <MotorDrivePoint+0x5f4>)
 80037c6:	801a      	strh	r2, [r3, #0]
		if(RealVfeedback == 0){
 80037c8:	4b30      	ldr	r3, [pc, #192]	@ (800388c <MotorDrivePoint+0x5c4>)
 80037ca:	edd3 7a00 	vldr	s15, [r3]
 80037ce:	eef5 7a40 	vcmp.f32	s15, #0.0
 80037d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d6:	d102      	bne.n	80037de <MotorDrivePoint+0x516>
			duty_cycle_pid = 0;
 80037d8:	4b38      	ldr	r3, [pc, #224]	@ (80038bc <MotorDrivePoint+0x5f4>)
 80037da:	2200      	movs	r2, #0
 80037dc:	801a      	strh	r2, [r3, #0]
		}

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle_pid);
 80037de:	4b37      	ldr	r3, [pc, #220]	@ (80038bc <MotorDrivePoint+0x5f4>)
 80037e0:	881a      	ldrh	r2, [r3, #0]
 80037e2:	4b37      	ldr	r3, [pc, #220]	@ (80038c0 <MotorDrivePoint+0x5f8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	635a      	str	r2, [r3, #52]	@ 0x34
	if((MotorDriveTravelDistance-PosNow) > 0.1 || ((MotorDriveTravelDistance-PosNow) < -0.1)){
 80037e8:	e03b      	b.n	8003862 <MotorDrivePoint+0x59a>
	}else if((MotorDriveTravelDistance-PosNow) < 0.1 || ((MotorDriveTravelDistance-PosNow) > -0.1)){
 80037ea:	4b27      	ldr	r3, [pc, #156]	@ (8003888 <MotorDrivePoint+0x5c0>)
 80037ec:	ed93 7a00 	vldr	s14, [r3]
 80037f0:	edd7 7a00 	vldr	s15, [r7]
 80037f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037f8:	ee17 0a90 	vmov	r0, s15
 80037fc:	f7fc fe70 	bl	80004e0 <__aeabi_f2d>
 8003800:	a31d      	add	r3, pc, #116	@ (adr r3, 8003878 <MotorDrivePoint+0x5b0>)
 8003802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003806:	f7fd f935 	bl	8000a74 <__aeabi_dcmplt>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d112      	bne.n	8003836 <MotorDrivePoint+0x56e>
 8003810:	4b1d      	ldr	r3, [pc, #116]	@ (8003888 <MotorDrivePoint+0x5c0>)
 8003812:	ed93 7a00 	vldr	s14, [r3]
 8003816:	edd7 7a00 	vldr	s15, [r7]
 800381a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800381e:	ee17 0a90 	vmov	r0, s15
 8003822:	f7fc fe5d 	bl	80004e0 <__aeabi_f2d>
 8003826:	a316      	add	r3, pc, #88	@ (adr r3, 8003880 <MotorDrivePoint+0x5b8>)
 8003828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800382c:	f7fd f940 	bl	8000ab0 <__aeabi_dcmpgt>
 8003830:	4603      	mov	r3, r0
 8003832:	2b00      	cmp	r3, #0
 8003834:	d011      	beq.n	800385a <MotorDrivePoint+0x592>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8003836:	4b22      	ldr	r3, [pc, #136]	@ (80038c0 <MotorDrivePoint+0x5f8>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	2200      	movs	r2, #0
 800383c:	635a      	str	r2, [r3, #52]	@ 0x34
		Arrived = 1;
 800383e:	4b21      	ldr	r3, [pc, #132]	@ (80038c4 <MotorDrivePoint+0x5fc>)
 8003840:	2201      	movs	r2, #1
 8003842:	701a      	strb	r2, [r3, #0]
		RealVfeedback = 0;
 8003844:	4b11      	ldr	r3, [pc, #68]	@ (800388c <MotorDrivePoint+0x5c4>)
 8003846:	f04f 0200 	mov.w	r2, #0
 800384a:	601a      	str	r2, [r3, #0]
		b_check[6] = 6;
 800384c:	4b10      	ldr	r3, [pc, #64]	@ (8003890 <MotorDrivePoint+0x5c8>)
 800384e:	4a1e      	ldr	r2, [pc, #120]	@ (80038c8 <MotorDrivePoint+0x600>)
 8003850:	619a      	str	r2, [r3, #24]
		registerFrame[0x10].U16 = 0;
 8003852:	4b1e      	ldr	r3, [pc, #120]	@ (80038cc <MotorDrivePoint+0x604>)
 8003854:	2200      	movs	r2, #0
 8003856:	841a      	strh	r2, [r3, #32]
 8003858:	e003      	b.n	8003862 <MotorDrivePoint+0x59a>
	}else{
		Arrived = 2;
 800385a:	4b1a      	ldr	r3, [pc, #104]	@ (80038c4 <MotorDrivePoint+0x5fc>)
 800385c:	2202      	movs	r2, #2
 800385e:	701a      	strb	r2, [r3, #0]
	}
}
 8003860:	bf00      	nop
 8003862:	bf00      	nop
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bdb0      	pop	{r4, r5, r7, pc}
 800386a:	bf00      	nop
 800386c:	f3af 8000 	nop.w
 8003870:	9999999a 	.word	0x9999999a
 8003874:	3ff99999 	.word	0x3ff99999
 8003878:	9999999a 	.word	0x9999999a
 800387c:	3fb99999 	.word	0x3fb99999
 8003880:	9999999a 	.word	0x9999999a
 8003884:	bfb99999 	.word	0xbfb99999
 8003888:	20001048 	.word	0x20001048
 800388c:	20000934 	.word	0x20000934
 8003890:	20001018 	.word	0x20001018
 8003894:	41700000 	.word	0x41700000
 8003898:	20001044 	.word	0x20001044
 800389c:	20000940 	.word	0x20000940
 80038a0:	20001050 	.word	0x20001050
 80038a4:	48000800 	.word	0x48000800
 80038a8:	40a00000 	.word	0x40a00000
 80038ac:	3f99999a 	.word	0x3f99999a
 80038b0:	3fcccccd 	.word	0x3fcccccd
 80038b4:	40af4000 	.word	0x40af4000
 80038b8:	40280000 	.word	0x40280000
 80038bc:	2000093c 	.word	0x2000093c
 80038c0:	20000258 	.word	0x20000258
 80038c4:	20001014 	.word	0x20001014
 80038c8:	40c00000 	.word	0x40c00000
 80038cc:	20000e30 	.word	0x20000e30

080038d0 <RelayDrive>:

void RelayDrive() {
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, relay[0]); // Pull
 80038d4:	4b0f      	ldr	r3, [pc, #60]	@ (8003914 <RelayDrive+0x44>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	461a      	mov	r2, r3
 80038da:	2102      	movs	r1, #2
 80038dc:	480e      	ldr	r0, [pc, #56]	@ (8003918 <RelayDrive+0x48>)
 80038de:	f001 fbad 	bl	800503c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, relay[1]); // Push
 80038e2:	4b0c      	ldr	r3, [pc, #48]	@ (8003914 <RelayDrive+0x44>)
 80038e4:	785b      	ldrb	r3, [r3, #1]
 80038e6:	461a      	mov	r2, r3
 80038e8:	2102      	movs	r1, #2
 80038ea:	480c      	ldr	r0, [pc, #48]	@ (800391c <RelayDrive+0x4c>)
 80038ec:	f001 fba6 	bl	800503c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, relay[2]); // Vacuum
 80038f0:	4b08      	ldr	r3, [pc, #32]	@ (8003914 <RelayDrive+0x44>)
 80038f2:	789b      	ldrb	r3, [r3, #2]
 80038f4:	461a      	mov	r2, r3
 80038f6:	2104      	movs	r1, #4
 80038f8:	4808      	ldr	r0, [pc, #32]	@ (800391c <RelayDrive+0x4c>)
 80038fa:	f001 fb9f 	bl	800503c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, relay[3]); // mode status
 80038fe:	4b05      	ldr	r3, [pc, #20]	@ (8003914 <RelayDrive+0x44>)
 8003900:	78db      	ldrb	r3, [r3, #3]
 8003902:	461a      	mov	r2, r3
 8003904:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003908:	4804      	ldr	r0, [pc, #16]	@ (800391c <RelayDrive+0x4c>)
 800390a:	f001 fb97 	bl	800503c <HAL_GPIO_WritePin>

}
 800390e:	bf00      	nop
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	200008c4 	.word	0x200008c4
 8003918:	48000800 	.word	0x48000800
 800391c:	48000400 	.word	0x48000400

08003920 <ReadLimit>:

void ReadLimit(){
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0

	LimitBottom = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);//bottom
 8003924:	2180      	movs	r1, #128	@ 0x80
 8003926:	4808      	ldr	r0, [pc, #32]	@ (8003948 <ReadLimit+0x28>)
 8003928:	f001 fb70 	bl	800500c <HAL_GPIO_ReadPin>
 800392c:	4603      	mov	r3, r0
 800392e:	461a      	mov	r2, r3
 8003930:	4b06      	ldr	r3, [pc, #24]	@ (800394c <ReadLimit+0x2c>)
 8003932:	701a      	strb	r2, [r3, #0]
	LimitTop = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);//top
 8003934:	2140      	movs	r1, #64	@ 0x40
 8003936:	4806      	ldr	r0, [pc, #24]	@ (8003950 <ReadLimit+0x30>)
 8003938:	f001 fb68 	bl	800500c <HAL_GPIO_ReadPin>
 800393c:	4603      	mov	r3, r0
 800393e:	461a      	mov	r2, r3
 8003940:	4b04      	ldr	r3, [pc, #16]	@ (8003954 <ReadLimit+0x34>)
 8003942:	701a      	strb	r2, [r3, #0]
}
 8003944:	bf00      	nop
 8003946:	bd80      	pop	{r7, pc}
 8003948:	48000800 	.word	0x48000800
 800394c:	20000932 	.word	0x20000932
 8003950:	48000400 	.word	0x48000400
 8003954:	20000931 	.word	0x20000931

08003958 <kalman_filter>:

long kalman_filter(long ADC_Value)
{
 8003958:	b480      	push	{r7}
 800395a:	b087      	sub	sp, #28
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
    static float Kg = 0;
    static float P_k_k1 = 1;

    float kalman_adc;
    static float kalman_adc_old=0;
    Z_k = ADC_Value;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	ee07 3a90 	vmov	s15, r3
 8003966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800396a:	edc7 7a05 	vstr	s15, [r7, #20]
    x_k1_k1 = kalman_adc_old;
 800396e:	4b2e      	ldr	r3, [pc, #184]	@ (8003a28 <kalman_filter+0xd0>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	613b      	str	r3, [r7, #16]

    x_k_k1 = x_k1_k1;
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	60fb      	str	r3, [r7, #12]
    P_k_k1 = P_k1_k1 + Q;
 8003978:	4b2c      	ldr	r3, [pc, #176]	@ (8003a2c <kalman_filter+0xd4>)
 800397a:	ed93 7a00 	vldr	s14, [r3]
 800397e:	4b2c      	ldr	r3, [pc, #176]	@ (8003a30 <kalman_filter+0xd8>)
 8003980:	edd3 7a00 	vldr	s15, [r3]
 8003984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003988:	4b2a      	ldr	r3, [pc, #168]	@ (8003a34 <kalman_filter+0xdc>)
 800398a:	edc3 7a00 	vstr	s15, [r3]

    Kg = P_k_k1/(P_k_k1 + R);
 800398e:	4b29      	ldr	r3, [pc, #164]	@ (8003a34 <kalman_filter+0xdc>)
 8003990:	edd3 6a00 	vldr	s13, [r3]
 8003994:	4b27      	ldr	r3, [pc, #156]	@ (8003a34 <kalman_filter+0xdc>)
 8003996:	ed93 7a00 	vldr	s14, [r3]
 800399a:	4b27      	ldr	r3, [pc, #156]	@ (8003a38 <kalman_filter+0xe0>)
 800399c:	edd3 7a00 	vldr	s15, [r3]
 80039a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039a8:	4b24      	ldr	r3, [pc, #144]	@ (8003a3c <kalman_filter+0xe4>)
 80039aa:	edc3 7a00 	vstr	s15, [r3]

    kalman_adc = x_k_k1 + Kg * (Z_k - kalman_adc_old);
 80039ae:	4b1e      	ldr	r3, [pc, #120]	@ (8003a28 <kalman_filter+0xd0>)
 80039b0:	edd3 7a00 	vldr	s15, [r3]
 80039b4:	ed97 7a05 	vldr	s14, [r7, #20]
 80039b8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80039bc:	4b1f      	ldr	r3, [pc, #124]	@ (8003a3c <kalman_filter+0xe4>)
 80039be:	edd3 7a00 	vldr	s15, [r3]
 80039c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039c6:	ed97 7a03 	vldr	s14, [r7, #12]
 80039ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039ce:	edc7 7a02 	vstr	s15, [r7, #8]
    P_k1_k1 = (1 - Kg)*P_k_k1;
 80039d2:	4b1a      	ldr	r3, [pc, #104]	@ (8003a3c <kalman_filter+0xe4>)
 80039d4:	edd3 7a00 	vldr	s15, [r3]
 80039d8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80039dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80039e0:	4b14      	ldr	r3, [pc, #80]	@ (8003a34 <kalman_filter+0xdc>)
 80039e2:	edd3 7a00 	vldr	s15, [r3]
 80039e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ea:	4b10      	ldr	r3, [pc, #64]	@ (8003a2c <kalman_filter+0xd4>)
 80039ec:	edc3 7a00 	vstr	s15, [r3]
    P_k_k1 = P_k1_k1;
 80039f0:	4b0e      	ldr	r3, [pc, #56]	@ (8003a2c <kalman_filter+0xd4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a0f      	ldr	r2, [pc, #60]	@ (8003a34 <kalman_filter+0xdc>)
 80039f6:	6013      	str	r3, [r2, #0]

    ADC_OLD_Value = ADC_Value;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	ee07 3a90 	vmov	s15, r3
 80039fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a02:	4b0f      	ldr	r3, [pc, #60]	@ (8003a40 <kalman_filter+0xe8>)
 8003a04:	edc3 7a00 	vstr	s15, [r3]
    kalman_adc_old = kalman_adc;
 8003a08:	4a07      	ldr	r2, [pc, #28]	@ (8003a28 <kalman_filter+0xd0>)
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	6013      	str	r3, [r2, #0]

    return kalman_adc;
 8003a0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8003a12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a16:	ee17 3a90 	vmov	r3, s15
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	371c      	adds	r7, #28
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a24:	4770      	bx	lr
 8003a26:	bf00      	nop
 8003a28:	20001088 	.word	0x20001088
 8003a2c:	2000108c 	.word	0x2000108c
 8003a30:	20000214 	.word	0x20000214
 8003a34:	20000218 	.word	0x20000218
 8003a38:	2000021c 	.word	0x2000021c
 8003a3c:	20001090 	.word	0x20001090
 8003a40:	20001094 	.word	0x20001094

08003a44 <kalman_filter_acc>:

long kalman_filter_acc(long ADC_Value)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b087      	sub	sp, #28
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
    static float Kg = 0;
    static float P_k_k1 = 1;

    float kalman_adc;
    static float kalman_adc_old=0;
    Z_k = ADC_Value;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	ee07 3a90 	vmov	s15, r3
 8003a52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a56:	edc7 7a05 	vstr	s15, [r7, #20]
    x_k1_k1 = kalman_adc_old;
 8003a5a:	4b2e      	ldr	r3, [pc, #184]	@ (8003b14 <kalman_filter_acc+0xd0>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	613b      	str	r3, [r7, #16]

    x_k_k1 = x_k1_k1;
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	60fb      	str	r3, [r7, #12]
    P_k_k1 = P_k1_k1 + Q;
 8003a64:	4b2c      	ldr	r3, [pc, #176]	@ (8003b18 <kalman_filter_acc+0xd4>)
 8003a66:	ed93 7a00 	vldr	s14, [r3]
 8003a6a:	4b2c      	ldr	r3, [pc, #176]	@ (8003b1c <kalman_filter_acc+0xd8>)
 8003a6c:	edd3 7a00 	vldr	s15, [r3]
 8003a70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a74:	4b2a      	ldr	r3, [pc, #168]	@ (8003b20 <kalman_filter_acc+0xdc>)
 8003a76:	edc3 7a00 	vstr	s15, [r3]

    Kg = P_k_k1/(P_k_k1 + R);
 8003a7a:	4b29      	ldr	r3, [pc, #164]	@ (8003b20 <kalman_filter_acc+0xdc>)
 8003a7c:	edd3 6a00 	vldr	s13, [r3]
 8003a80:	4b27      	ldr	r3, [pc, #156]	@ (8003b20 <kalman_filter_acc+0xdc>)
 8003a82:	ed93 7a00 	vldr	s14, [r3]
 8003a86:	4b27      	ldr	r3, [pc, #156]	@ (8003b24 <kalman_filter_acc+0xe0>)
 8003a88:	edd3 7a00 	vldr	s15, [r3]
 8003a8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a94:	4b24      	ldr	r3, [pc, #144]	@ (8003b28 <kalman_filter_acc+0xe4>)
 8003a96:	edc3 7a00 	vstr	s15, [r3]

    kalman_adc = x_k_k1 + Kg * (Z_k - kalman_adc_old);
 8003a9a:	4b1e      	ldr	r3, [pc, #120]	@ (8003b14 <kalman_filter_acc+0xd0>)
 8003a9c:	edd3 7a00 	vldr	s15, [r3]
 8003aa0:	ed97 7a05 	vldr	s14, [r7, #20]
 8003aa4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003aa8:	4b1f      	ldr	r3, [pc, #124]	@ (8003b28 <kalman_filter_acc+0xe4>)
 8003aaa:	edd3 7a00 	vldr	s15, [r3]
 8003aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ab2:	ed97 7a03 	vldr	s14, [r7, #12]
 8003ab6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aba:	edc7 7a02 	vstr	s15, [r7, #8]
    P_k1_k1 = (1 - Kg)*P_k_k1;
 8003abe:	4b1a      	ldr	r3, [pc, #104]	@ (8003b28 <kalman_filter_acc+0xe4>)
 8003ac0:	edd3 7a00 	vldr	s15, [r3]
 8003ac4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003ac8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003acc:	4b14      	ldr	r3, [pc, #80]	@ (8003b20 <kalman_filter_acc+0xdc>)
 8003ace:	edd3 7a00 	vldr	s15, [r3]
 8003ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ad6:	4b10      	ldr	r3, [pc, #64]	@ (8003b18 <kalman_filter_acc+0xd4>)
 8003ad8:	edc3 7a00 	vstr	s15, [r3]
    P_k_k1 = P_k1_k1;
 8003adc:	4b0e      	ldr	r3, [pc, #56]	@ (8003b18 <kalman_filter_acc+0xd4>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a0f      	ldr	r2, [pc, #60]	@ (8003b20 <kalman_filter_acc+0xdc>)
 8003ae2:	6013      	str	r3, [r2, #0]

    ADC_OLD_Value = ADC_Value;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	ee07 3a90 	vmov	s15, r3
 8003aea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aee:	4b0f      	ldr	r3, [pc, #60]	@ (8003b2c <kalman_filter_acc+0xe8>)
 8003af0:	edc3 7a00 	vstr	s15, [r3]
    kalman_adc_old = kalman_adc;
 8003af4:	4a07      	ldr	r2, [pc, #28]	@ (8003b14 <kalman_filter_acc+0xd0>)
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	6013      	str	r3, [r2, #0]

    return kalman_adc;
 8003afa:	edd7 7a02 	vldr	s15, [r7, #8]
 8003afe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b02:	ee17 3a90 	vmov	r3, s15
}
 8003b06:	4618      	mov	r0, r3
 8003b08:	371c      	adds	r7, #28
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	20001098 	.word	0x20001098
 8003b18:	2000109c 	.word	0x2000109c
 8003b1c:	20000220 	.word	0x20000220
 8003b20:	20000224 	.word	0x20000224
 8003b24:	20000228 	.word	0x20000228
 8003b28:	200010a0 	.word	0x200010a0
 8003b2c:	200010a4 	.word	0x200010a4

08003b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b34:	b672      	cpsid	i
}
 8003b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b38:	bf00      	nop
 8003b3a:	e7fd      	b.n	8003b38 <Error_Handler+0x8>

08003b3c <PID_init>:
 *  Created on: Apr 26, 2024
 *      Author: naker
 */
#include "pid.h"

void PID_init(PID* pid, float32_t _kp,  float32_t _ki, float32_t _kd, float32_t _sampt){
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6178      	str	r0, [r7, #20]
 8003b44:	ed87 0a04 	vstr	s0, [r7, #16]
 8003b48:	edc7 0a03 	vstr	s1, [r7, #12]
 8003b4c:	ed87 1a02 	vstr	s2, [r7, #8]
 8003b50:	edc7 1a01 	vstr	s3, [r7, #4]
	pid -> kp = _kp;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	601a      	str	r2, [r3, #0]
	pid -> ki = _ki;
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	605a      	str	r2, [r3, #4]
	pid -> kd = _kd;
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	609a      	str	r2, [r3, #8]
	pid -> sampt = _sampt;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	60da      	str	r2, [r3, #12]
	pid -> y_n = 0.0;
 8003b6c:	6979      	ldr	r1, [r7, #20]
 8003b6e:	f04f 0200 	mov.w	r2, #0
 8003b72:	f04f 0300 	mov.w	r3, #0
 8003b76:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8003b7a:	bf00      	nop
 8003b7c:	371c      	adds	r7, #28
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
	...

08003b88 <Update_pid>:
int32_t Update_pid(PID *pid, float32_t error, float32_t pid_sat, float32_t plant_sat) {
 8003b88:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003b8c:	b08a      	sub	sp, #40	@ 0x28
 8003b8e:	af00      	add	r7, sp, #0
 8003b90:	60f8      	str	r0, [r7, #12]
 8003b92:	ed87 0a02 	vstr	s0, [r7, #8]
 8003b96:	edc7 0a01 	vstr	s1, [r7, #4]
 8003b9a:	ed87 1a00 	vstr	s2, [r7]
//	static float32_t y_n = 0; // Output[n]
	static float32_t y_n_1 = 0; // Output[n-1]
	float32_t e_n = error; // error[n]
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	61bb      	str	r3, [r7, #24]
	static float32_t e_n_1 = 0; // error[n-1]

	float32_t p_term = e_n * pid -> kp;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	edd3 7a00 	vldr	s15, [r3]
 8003ba8:	ed97 7a06 	vldr	s14, [r7, #24]
 8003bac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb0:	edc7 7a05 	vstr	s15, [r7, #20]
	float32_t d_term = ((e_n - e_n_1) * pid -> kd) / pid -> sampt;
 8003bb4:	4b96      	ldr	r3, [pc, #600]	@ (8003e10 <Update_pid+0x288>)
 8003bb6:	edd3 7a00 	vldr	s15, [r3]
 8003bba:	ed97 7a06 	vldr	s14, [r7, #24]
 8003bbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	edd3 7a02 	vldr	s15, [r3, #8]
 8003bc8:	ee67 6a27 	vmul.f32	s13, s14, s15
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	ed93 7a03 	vldr	s14, [r3, #12]
 8003bd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bd6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float32_t i_term = ((pid -> ki * pid -> sampt / 2.0)*(e_n + e_n_1)) + y_n_1;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	ed93 7a01 	vldr	s14, [r3, #4]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	edd3 7a03 	vldr	s15, [r3, #12]
 8003be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bea:	ee17 0a90 	vmov	r0, s15
 8003bee:	f7fc fc77 	bl	80004e0 <__aeabi_f2d>
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8003bfa:	f7fc fdf3 	bl	80007e4 <__aeabi_ddiv>
 8003bfe:	4602      	mov	r2, r0
 8003c00:	460b      	mov	r3, r1
 8003c02:	4690      	mov	r8, r2
 8003c04:	4699      	mov	r9, r3
 8003c06:	4b82      	ldr	r3, [pc, #520]	@ (8003e10 <Update_pid+0x288>)
 8003c08:	ed93 7a00 	vldr	s14, [r3]
 8003c0c:	edd7 7a06 	vldr	s15, [r7, #24]
 8003c10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c14:	ee17 0a90 	vmov	r0, s15
 8003c18:	f7fc fc62 	bl	80004e0 <__aeabi_f2d>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	460b      	mov	r3, r1
 8003c20:	4640      	mov	r0, r8
 8003c22:	4649      	mov	r1, r9
 8003c24:	f7fc fcb4 	bl	8000590 <__aeabi_dmul>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4690      	mov	r8, r2
 8003c2e:	4699      	mov	r9, r3
 8003c30:	4b78      	ldr	r3, [pc, #480]	@ (8003e14 <Update_pid+0x28c>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4618      	mov	r0, r3
 8003c36:	f7fc fc53 	bl	80004e0 <__aeabi_f2d>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	460b      	mov	r3, r1
 8003c3e:	4640      	mov	r0, r8
 8003c40:	4649      	mov	r1, r9
 8003c42:	f7fc faef 	bl	8000224 <__adddf3>
 8003c46:	4602      	mov	r2, r0
 8003c48:	460b      	mov	r3, r1
 8003c4a:	4610      	mov	r0, r2
 8003c4c:	4619      	mov	r1, r3
 8003c4e:	f7fc ff81 	bl	8000b54 <__aeabi_d2f>
 8003c52:	4603      	mov	r3, r0
 8003c54:	623b      	str	r3, [r7, #32]

	if(pid -> ki == 0){
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c5c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c64:	d102      	bne.n	8003c6c <Update_pid+0xe4>
		i_term = 0;
 8003c66:	f04f 0300 	mov.w	r3, #0
 8003c6a:	623b      	str	r3, [r7, #32]
	}
	if(pid -> kd == 0){
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003c72:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003c76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c7a:	d102      	bne.n	8003c82 <Update_pid+0xfa>
		d_term = 0;
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	pid -> y_n = p_term + d_term + i_term; // pid output
 8003c82:	ed97 7a05 	vldr	s14, [r7, #20]
 8003c86:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003c8a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c8e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003c92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c96:	ee17 0a90 	vmov	r0, s15
 8003c9a:	f7fc fc21 	bl	80004e0 <__aeabi_f2d>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	460b      	mov	r3, r1
 8003ca2:	68f9      	ldr	r1, [r7, #12]
 8003ca4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uint8_t is_sat = 0;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	77fb      	strb	r3, [r7, #31]
	// check is pid output is saturating
	if(pid -> y_n > pid_sat){
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f7fc fc14 	bl	80004e0 <__aeabi_f2d>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4640      	mov	r0, r8
 8003cbe:	4649      	mov	r1, r9
 8003cc0:	f7fc fef6 	bl	8000ab0 <__aeabi_dcmpgt>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <Update_pid+0x148>
		is_sat = 1;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	77fb      	strb	r3, [r7, #31]
 8003cce:	e016      	b.n	8003cfe <Update_pid+0x176>
	}
	else if(pid -> y_n < -(pid_sat)){
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8003cd6:	edd7 7a01 	vldr	s15, [r7, #4]
 8003cda:	eef1 7a67 	vneg.f32	s15, s15
 8003cde:	ee17 3a90 	vmov	r3, s15
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7fc fbfc 	bl	80004e0 <__aeabi_f2d>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	460b      	mov	r3, r1
 8003cec:	4640      	mov	r0, r8
 8003cee:	4649      	mov	r1, r9
 8003cf0:	f7fc fec0 	bl	8000a74 <__aeabi_dcmplt>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d001      	beq.n	8003cfe <Update_pid+0x176>
		is_sat = 1;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	77fb      	strb	r3, [r7, #31]
	}
	// check is error sign and output sign is equal
	if(e_n * pid -> y_n == fabs(e_n * pid -> y_n)){
 8003cfe:	69b8      	ldr	r0, [r7, #24]
 8003d00:	f7fc fbee 	bl	80004e0 <__aeabi_f2d>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003d0a:	f7fc fc41 	bl	8000590 <__aeabi_dmul>
 8003d0e:	4602      	mov	r2, r0
 8003d10:	460b      	mov	r3, r1
 8003d12:	4690      	mov	r8, r2
 8003d14:	4699      	mov	r9, r3
 8003d16:	69b8      	ldr	r0, [r7, #24]
 8003d18:	f7fc fbe2 	bl	80004e0 <__aeabi_f2d>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003d22:	f7fc fc35 	bl	8000590 <__aeabi_dmul>
 8003d26:	4602      	mov	r2, r0
 8003d28:	460b      	mov	r3, r1
 8003d2a:	4614      	mov	r4, r2
 8003d2c:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8003d30:	4622      	mov	r2, r4
 8003d32:	462b      	mov	r3, r5
 8003d34:	4640      	mov	r0, r8
 8003d36:	4649      	mov	r1, r9
 8003d38:	f7fc fe92 	bl	8000a60 <__aeabi_dcmpeq>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d011      	beq.n	8003d66 <Update_pid+0x1de>
		// if pid output is saturating and error sign and output sign is  i_term = 0;
		if(is_sat == 1){
 8003d42:	7ffb      	ldrb	r3, [r7, #31]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d10e      	bne.n	8003d66 <Update_pid+0x1de>
			pid -> y_n = p_term + d_term;
 8003d48:	ed97 7a05 	vldr	s14, [r7, #20]
 8003d4c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8003d50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d54:	ee17 0a90 	vmov	r0, s15
 8003d58:	f7fc fbc2 	bl	80004e0 <__aeabi_f2d>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	68f9      	ldr	r1, [r7, #12]
 8003d62:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}
	}
	// Plant saturation
	if(pid -> y_n > plant_sat){
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8003d6c:	6838      	ldr	r0, [r7, #0]
 8003d6e:	f7fc fbb7 	bl	80004e0 <__aeabi_f2d>
 8003d72:	4602      	mov	r2, r0
 8003d74:	460b      	mov	r3, r1
 8003d76:	4620      	mov	r0, r4
 8003d78:	4629      	mov	r1, r5
 8003d7a:	f7fc fe99 	bl	8000ab0 <__aeabi_dcmpgt>
 8003d7e:	4603      	mov	r3, r0
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d008      	beq.n	8003d96 <Update_pid+0x20e>
		pid -> y_n = plant_sat;
 8003d84:	6838      	ldr	r0, [r7, #0]
 8003d86:	f7fc fbab 	bl	80004e0 <__aeabi_f2d>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	68f9      	ldr	r1, [r7, #12]
 8003d90:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8003d94:	e022      	b.n	8003ddc <Update_pid+0x254>
	}
	else if(pid -> y_n < -(plant_sat)){
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8003d9c:	edd7 7a00 	vldr	s15, [r7]
 8003da0:	eef1 7a67 	vneg.f32	s15, s15
 8003da4:	ee17 3a90 	vmov	r3, s15
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7fc fb99 	bl	80004e0 <__aeabi_f2d>
 8003dae:	4602      	mov	r2, r0
 8003db0:	460b      	mov	r3, r1
 8003db2:	4620      	mov	r0, r4
 8003db4:	4629      	mov	r1, r5
 8003db6:	f7fc fe5d 	bl	8000a74 <__aeabi_dcmplt>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d00d      	beq.n	8003ddc <Update_pid+0x254>
		pid -> y_n = (-(plant_sat));
 8003dc0:	edd7 7a00 	vldr	s15, [r7]
 8003dc4:	eef1 7a67 	vneg.f32	s15, s15
 8003dc8:	ee17 3a90 	vmov	r3, s15
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f7fc fb87 	bl	80004e0 <__aeabi_f2d>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	68f9      	ldr	r1, [r7, #12]
 8003dd8:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}
	// Update value
	y_n_1 = pid -> y_n;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003de2:	4610      	mov	r0, r2
 8003de4:	4619      	mov	r1, r3
 8003de6:	f7fc feb5 	bl	8000b54 <__aeabi_d2f>
 8003dea:	4603      	mov	r3, r0
 8003dec:	4a09      	ldr	r2, [pc, #36]	@ (8003e14 <Update_pid+0x28c>)
 8003dee:	6013      	str	r3, [r2, #0]
	e_n_1 = e_n;
 8003df0:	4a07      	ldr	r2, [pc, #28]	@ (8003e10 <Update_pid+0x288>)
 8003df2:	69bb      	ldr	r3, [r7, #24]
 8003df4:	6013      	str	r3, [r2, #0]
	return pid -> y_n;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003dfc:	4610      	mov	r0, r2
 8003dfe:	4619      	mov	r1, r3
 8003e00:	f7fc fe60 	bl	8000ac4 <__aeabi_d2iz>
 8003e04:	4603      	mov	r3, r0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3728      	adds	r7, #40	@ 0x28
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003e10:	200010a8 	.word	0x200010a8
 8003e14:	200010ac 	.word	0x200010ac

08003e18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b082      	sub	sp, #8
 8003e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e1e:	4b0f      	ldr	r3, [pc, #60]	@ (8003e5c <HAL_MspInit+0x44>)
 8003e20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e22:	4a0e      	ldr	r2, [pc, #56]	@ (8003e5c <HAL_MspInit+0x44>)
 8003e24:	f043 0301 	orr.w	r3, r3, #1
 8003e28:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e2a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e5c <HAL_MspInit+0x44>)
 8003e2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	607b      	str	r3, [r7, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e36:	4b09      	ldr	r3, [pc, #36]	@ (8003e5c <HAL_MspInit+0x44>)
 8003e38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e3a:	4a08      	ldr	r2, [pc, #32]	@ (8003e5c <HAL_MspInit+0x44>)
 8003e3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e40:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e42:	4b06      	ldr	r3, [pc, #24]	@ (8003e5c <HAL_MspInit+0x44>)
 8003e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e4a:	603b      	str	r3, [r7, #0]
 8003e4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003e4e:	f001 f9ef 	bl	8005230 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e52:	bf00      	nop
 8003e54:	3708      	adds	r7, #8
 8003e56:	46bd      	mov	sp, r7
 8003e58:	bd80      	pop	{r7, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40021000 	.word	0x40021000

08003e60 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8003ea4 <HAL_TIM_PWM_MspInit+0x44>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d113      	bne.n	8003e9a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003e72:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea8 <HAL_TIM_PWM_MspInit+0x48>)
 8003e74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e76:	4a0c      	ldr	r2, [pc, #48]	@ (8003ea8 <HAL_TIM_PWM_MspInit+0x48>)
 8003e78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003e7c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8003ea8 <HAL_TIM_PWM_MspInit+0x48>)
 8003e80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e86:	60fb      	str	r3, [r7, #12]
 8003e88:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	2019      	movs	r0, #25
 8003e90:	f000 fbd3 	bl	800463a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003e94:	2019      	movs	r0, #25
 8003e96:	f000 fbea 	bl	800466e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003e9a:	bf00      	nop
 8003e9c:	3710      	adds	r7, #16
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40012c00 	.word	0x40012c00
 8003ea8:	40021000 	.word	0x40021000

08003eac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ebc:	d10c      	bne.n	8003ed8 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ebe:	4b2b      	ldr	r3, [pc, #172]	@ (8003f6c <HAL_TIM_Base_MspInit+0xc0>)
 8003ec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ec2:	4a2a      	ldr	r2, [pc, #168]	@ (8003f6c <HAL_TIM_Base_MspInit+0xc0>)
 8003ec4:	f043 0301 	orr.w	r3, r3, #1
 8003ec8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003eca:	4b28      	ldr	r3, [pc, #160]	@ (8003f6c <HAL_TIM_Base_MspInit+0xc0>)
 8003ecc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003ed6:	e044      	b.n	8003f62 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a24      	ldr	r2, [pc, #144]	@ (8003f70 <HAL_TIM_Base_MspInit+0xc4>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d114      	bne.n	8003f0c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003ee2:	4b22      	ldr	r3, [pc, #136]	@ (8003f6c <HAL_TIM_Base_MspInit+0xc0>)
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ee6:	4a21      	ldr	r2, [pc, #132]	@ (8003f6c <HAL_TIM_Base_MspInit+0xc0>)
 8003ee8:	f043 0304 	orr.w	r3, r3, #4
 8003eec:	6593      	str	r3, [r2, #88]	@ 0x58
 8003eee:	4b1f      	ldr	r3, [pc, #124]	@ (8003f6c <HAL_TIM_Base_MspInit+0xc0>)
 8003ef0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	613b      	str	r3, [r7, #16]
 8003ef8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003efa:	2200      	movs	r2, #0
 8003efc:	2100      	movs	r1, #0
 8003efe:	201e      	movs	r0, #30
 8003f00:	f000 fb9b 	bl	800463a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003f04:	201e      	movs	r0, #30
 8003f06:	f000 fbb2 	bl	800466e <HAL_NVIC_EnableIRQ>
}
 8003f0a:	e02a      	b.n	8003f62 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a18      	ldr	r2, [pc, #96]	@ (8003f74 <HAL_TIM_Base_MspInit+0xc8>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d10c      	bne.n	8003f30 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003f16:	4b15      	ldr	r3, [pc, #84]	@ (8003f6c <HAL_TIM_Base_MspInit+0xc0>)
 8003f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f1a:	4a14      	ldr	r2, [pc, #80]	@ (8003f6c <HAL_TIM_Base_MspInit+0xc0>)
 8003f1c:	f043 0308 	orr.w	r3, r3, #8
 8003f20:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f22:	4b12      	ldr	r3, [pc, #72]	@ (8003f6c <HAL_TIM_Base_MspInit+0xc0>)
 8003f24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f26:	f003 0308 	and.w	r3, r3, #8
 8003f2a:	60fb      	str	r3, [r7, #12]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
}
 8003f2e:	e018      	b.n	8003f62 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM16)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a10      	ldr	r2, [pc, #64]	@ (8003f78 <HAL_TIM_Base_MspInit+0xcc>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d113      	bne.n	8003f62 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8003f6c <HAL_TIM_Base_MspInit+0xc0>)
 8003f3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f3e:	4a0b      	ldr	r2, [pc, #44]	@ (8003f6c <HAL_TIM_Base_MspInit+0xc0>)
 8003f40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003f44:	6613      	str	r3, [r2, #96]	@ 0x60
 8003f46:	4b09      	ldr	r3, [pc, #36]	@ (8003f6c <HAL_TIM_Base_MspInit+0xc0>)
 8003f48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f4e:	60bb      	str	r3, [r7, #8]
 8003f50:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003f52:	2200      	movs	r2, #0
 8003f54:	2100      	movs	r1, #0
 8003f56:	2019      	movs	r0, #25
 8003f58:	f000 fb6f 	bl	800463a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003f5c:	2019      	movs	r0, #25
 8003f5e:	f000 fb86 	bl	800466e <HAL_NVIC_EnableIRQ>
}
 8003f62:	bf00      	nop
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	40021000 	.word	0x40021000
 8003f70:	40000800 	.word	0x40000800
 8003f74:	40000c00 	.word	0x40000c00
 8003f78:	40014400 	.word	0x40014400

08003f7c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08a      	sub	sp, #40	@ 0x28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f84:	f107 0314 	add.w	r3, r7, #20
 8003f88:	2200      	movs	r2, #0
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	605a      	str	r2, [r3, #4]
 8003f8e:	609a      	str	r2, [r3, #8]
 8003f90:	60da      	str	r2, [r3, #12]
 8003f92:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a1b      	ldr	r2, [pc, #108]	@ (8004008 <HAL_TIM_Encoder_MspInit+0x8c>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d130      	bne.n	8004000 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f9e:	4b1b      	ldr	r3, [pc, #108]	@ (800400c <HAL_TIM_Encoder_MspInit+0x90>)
 8003fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa2:	4a1a      	ldr	r2, [pc, #104]	@ (800400c <HAL_TIM_Encoder_MspInit+0x90>)
 8003fa4:	f043 0302 	orr.w	r3, r3, #2
 8003fa8:	6593      	str	r3, [r2, #88]	@ 0x58
 8003faa:	4b18      	ldr	r3, [pc, #96]	@ (800400c <HAL_TIM_Encoder_MspInit+0x90>)
 8003fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	613b      	str	r3, [r7, #16]
 8003fb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fb6:	4b15      	ldr	r3, [pc, #84]	@ (800400c <HAL_TIM_Encoder_MspInit+0x90>)
 8003fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fba:	4a14      	ldr	r2, [pc, #80]	@ (800400c <HAL_TIM_Encoder_MspInit+0x90>)
 8003fbc:	f043 0301 	orr.w	r3, r3, #1
 8003fc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003fc2:	4b12      	ldr	r3, [pc, #72]	@ (800400c <HAL_TIM_Encoder_MspInit+0x90>)
 8003fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003fce:	23c0      	movs	r3, #192	@ 0xc0
 8003fd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003fde:	2302      	movs	r3, #2
 8003fe0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003fe2:	f107 0314 	add.w	r3, r7, #20
 8003fe6:	4619      	mov	r1, r3
 8003fe8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003fec:	f000 fe8c 	bl	8004d08 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	2100      	movs	r1, #0
 8003ff4:	201d      	movs	r0, #29
 8003ff6:	f000 fb20 	bl	800463a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003ffa:	201d      	movs	r0, #29
 8003ffc:	f000 fb37 	bl	800466e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004000:	bf00      	nop
 8004002:	3728      	adds	r7, #40	@ 0x28
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}
 8004008:	40000400 	.word	0x40000400
 800400c:	40021000 	.word	0x40021000

08004010 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b088      	sub	sp, #32
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004018:	f107 030c 	add.w	r3, r7, #12
 800401c:	2200      	movs	r2, #0
 800401e:	601a      	str	r2, [r3, #0]
 8004020:	605a      	str	r2, [r3, #4]
 8004022:	609a      	str	r2, [r3, #8]
 8004024:	60da      	str	r2, [r3, #12]
 8004026:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a11      	ldr	r2, [pc, #68]	@ (8004074 <HAL_TIM_MspPostInit+0x64>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d11b      	bne.n	800406a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004032:	4b11      	ldr	r3, [pc, #68]	@ (8004078 <HAL_TIM_MspPostInit+0x68>)
 8004034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004036:	4a10      	ldr	r2, [pc, #64]	@ (8004078 <HAL_TIM_MspPostInit+0x68>)
 8004038:	f043 0304 	orr.w	r3, r3, #4
 800403c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800403e:	4b0e      	ldr	r3, [pc, #56]	@ (8004078 <HAL_TIM_MspPostInit+0x68>)
 8004040:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	60bb      	str	r3, [r7, #8]
 8004048:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800404a:	2301      	movs	r3, #1
 800404c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800404e:	2302      	movs	r3, #2
 8004050:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004052:	2300      	movs	r3, #0
 8004054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004056:	2300      	movs	r3, #0
 8004058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800405a:	2302      	movs	r3, #2
 800405c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800405e:	f107 030c 	add.w	r3, r7, #12
 8004062:	4619      	mov	r1, r3
 8004064:	4805      	ldr	r0, [pc, #20]	@ (800407c <HAL_TIM_MspPostInit+0x6c>)
 8004066:	f000 fe4f 	bl	8004d08 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800406a:	bf00      	nop
 800406c:	3720      	adds	r7, #32
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}
 8004072:	bf00      	nop
 8004074:	40012c00 	.word	0x40012c00
 8004078:	40021000 	.word	0x40021000
 800407c:	48000800 	.word	0x48000800

08004080 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b09e      	sub	sp, #120	@ 0x78
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004088:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]
 8004090:	605a      	str	r2, [r3, #4]
 8004092:	609a      	str	r2, [r3, #8]
 8004094:	60da      	str	r2, [r3, #12]
 8004096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004098:	f107 0310 	add.w	r3, r7, #16
 800409c:	2254      	movs	r2, #84	@ 0x54
 800409e:	2100      	movs	r1, #0
 80040a0:	4618      	mov	r0, r3
 80040a2:	f006 f82d 	bl	800a100 <memset>
  if(huart->Instance==USART2)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a4d      	ldr	r2, [pc, #308]	@ (80041e0 <HAL_UART_MspInit+0x160>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	f040 8092 	bne.w	80041d6 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80040b2:	2302      	movs	r3, #2
 80040b4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80040b6:	2300      	movs	r3, #0
 80040b8:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80040ba:	f107 0310 	add.w	r3, r7, #16
 80040be:	4618      	mov	r0, r3
 80040c0:	f001 fdf4 	bl	8005cac <HAL_RCCEx_PeriphCLKConfig>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80040ca:	f7ff fd31 	bl	8003b30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80040ce:	4b45      	ldr	r3, [pc, #276]	@ (80041e4 <HAL_UART_MspInit+0x164>)
 80040d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d2:	4a44      	ldr	r2, [pc, #272]	@ (80041e4 <HAL_UART_MspInit+0x164>)
 80040d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80040da:	4b42      	ldr	r3, [pc, #264]	@ (80041e4 <HAL_UART_MspInit+0x164>)
 80040dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040e2:	60fb      	str	r3, [r7, #12]
 80040e4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040e6:	4b3f      	ldr	r3, [pc, #252]	@ (80041e4 <HAL_UART_MspInit+0x164>)
 80040e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040ea:	4a3e      	ldr	r2, [pc, #248]	@ (80041e4 <HAL_UART_MspInit+0x164>)
 80040ec:	f043 0301 	orr.w	r3, r3, #1
 80040f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80040f2:	4b3c      	ldr	r3, [pc, #240]	@ (80041e4 <HAL_UART_MspInit+0x164>)
 80040f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80040f6:	f003 0301 	and.w	r3, r3, #1
 80040fa:	60bb      	str	r3, [r7, #8]
 80040fc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80040fe:	230c      	movs	r3, #12
 8004100:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004102:	2302      	movs	r3, #2
 8004104:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004106:	2300      	movs	r3, #0
 8004108:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800410a:	2300      	movs	r3, #0
 800410c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800410e:	2307      	movs	r3, #7
 8004110:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004112:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8004116:	4619      	mov	r1, r3
 8004118:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800411c:	f000 fdf4 	bl	8004d08 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8004120:	4b31      	ldr	r3, [pc, #196]	@ (80041e8 <HAL_UART_MspInit+0x168>)
 8004122:	4a32      	ldr	r2, [pc, #200]	@ (80041ec <HAL_UART_MspInit+0x16c>)
 8004124:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8004126:	4b30      	ldr	r3, [pc, #192]	@ (80041e8 <HAL_UART_MspInit+0x168>)
 8004128:	221b      	movs	r2, #27
 800412a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800412c:	4b2e      	ldr	r3, [pc, #184]	@ (80041e8 <HAL_UART_MspInit+0x168>)
 800412e:	2210      	movs	r2, #16
 8004130:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004132:	4b2d      	ldr	r3, [pc, #180]	@ (80041e8 <HAL_UART_MspInit+0x168>)
 8004134:	2200      	movs	r2, #0
 8004136:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004138:	4b2b      	ldr	r3, [pc, #172]	@ (80041e8 <HAL_UART_MspInit+0x168>)
 800413a:	2280      	movs	r2, #128	@ 0x80
 800413c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800413e:	4b2a      	ldr	r3, [pc, #168]	@ (80041e8 <HAL_UART_MspInit+0x168>)
 8004140:	2200      	movs	r2, #0
 8004142:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004144:	4b28      	ldr	r3, [pc, #160]	@ (80041e8 <HAL_UART_MspInit+0x168>)
 8004146:	2200      	movs	r2, #0
 8004148:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800414a:	4b27      	ldr	r3, [pc, #156]	@ (80041e8 <HAL_UART_MspInit+0x168>)
 800414c:	2200      	movs	r2, #0
 800414e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004150:	4b25      	ldr	r3, [pc, #148]	@ (80041e8 <HAL_UART_MspInit+0x168>)
 8004152:	2200      	movs	r2, #0
 8004154:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004156:	4824      	ldr	r0, [pc, #144]	@ (80041e8 <HAL_UART_MspInit+0x168>)
 8004158:	f000 faa4 	bl	80046a4 <HAL_DMA_Init>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8004162:	f7ff fce5 	bl	8003b30 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a1f      	ldr	r2, [pc, #124]	@ (80041e8 <HAL_UART_MspInit+0x168>)
 800416a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800416c:	4a1e      	ldr	r2, [pc, #120]	@ (80041e8 <HAL_UART_MspInit+0x168>)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8004172:	4b1f      	ldr	r3, [pc, #124]	@ (80041f0 <HAL_UART_MspInit+0x170>)
 8004174:	4a1f      	ldr	r2, [pc, #124]	@ (80041f4 <HAL_UART_MspInit+0x174>)
 8004176:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8004178:	4b1d      	ldr	r3, [pc, #116]	@ (80041f0 <HAL_UART_MspInit+0x170>)
 800417a:	221a      	movs	r2, #26
 800417c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800417e:	4b1c      	ldr	r3, [pc, #112]	@ (80041f0 <HAL_UART_MspInit+0x170>)
 8004180:	2200      	movs	r2, #0
 8004182:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004184:	4b1a      	ldr	r3, [pc, #104]	@ (80041f0 <HAL_UART_MspInit+0x170>)
 8004186:	2200      	movs	r2, #0
 8004188:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800418a:	4b19      	ldr	r3, [pc, #100]	@ (80041f0 <HAL_UART_MspInit+0x170>)
 800418c:	2280      	movs	r2, #128	@ 0x80
 800418e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004190:	4b17      	ldr	r3, [pc, #92]	@ (80041f0 <HAL_UART_MspInit+0x170>)
 8004192:	2200      	movs	r2, #0
 8004194:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004196:	4b16      	ldr	r3, [pc, #88]	@ (80041f0 <HAL_UART_MspInit+0x170>)
 8004198:	2200      	movs	r2, #0
 800419a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800419c:	4b14      	ldr	r3, [pc, #80]	@ (80041f0 <HAL_UART_MspInit+0x170>)
 800419e:	2200      	movs	r2, #0
 80041a0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80041a2:	4b13      	ldr	r3, [pc, #76]	@ (80041f0 <HAL_UART_MspInit+0x170>)
 80041a4:	2200      	movs	r2, #0
 80041a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80041a8:	4811      	ldr	r0, [pc, #68]	@ (80041f0 <HAL_UART_MspInit+0x170>)
 80041aa:	f000 fa7b 	bl	80046a4 <HAL_DMA_Init>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d001      	beq.n	80041b8 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 80041b4:	f7ff fcbc 	bl	8003b30 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	4a0d      	ldr	r2, [pc, #52]	@ (80041f0 <HAL_UART_MspInit+0x170>)
 80041bc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80041c0:	4a0b      	ldr	r2, [pc, #44]	@ (80041f0 <HAL_UART_MspInit+0x170>)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80041c6:	2200      	movs	r2, #0
 80041c8:	2100      	movs	r1, #0
 80041ca:	2026      	movs	r0, #38	@ 0x26
 80041cc:	f000 fa35 	bl	800463a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80041d0:	2026      	movs	r0, #38	@ 0x26
 80041d2:	f000 fa4c 	bl	800466e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80041d6:	bf00      	nop
 80041d8:	3778      	adds	r7, #120	@ 0x78
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40004400 	.word	0x40004400
 80041e4:	40021000 	.word	0x40021000
 80041e8:	200007ec 	.word	0x200007ec
 80041ec:	40020008 	.word	0x40020008
 80041f0:	2000084c 	.word	0x2000084c
 80041f4:	4002001c 	.word	0x4002001c

080041f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80041f8:	b480      	push	{r7}
 80041fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80041fc:	bf00      	nop
 80041fe:	e7fd      	b.n	80041fc <NMI_Handler+0x4>

08004200 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004204:	bf00      	nop
 8004206:	e7fd      	b.n	8004204 <HardFault_Handler+0x4>

08004208 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004208:	b480      	push	{r7}
 800420a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800420c:	bf00      	nop
 800420e:	e7fd      	b.n	800420c <MemManage_Handler+0x4>

08004210 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004214:	bf00      	nop
 8004216:	e7fd      	b.n	8004214 <BusFault_Handler+0x4>

08004218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800421c:	bf00      	nop
 800421e:	e7fd      	b.n	800421c <UsageFault_Handler+0x4>

08004220 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004224:	bf00      	nop
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800422e:	b480      	push	{r7}
 8004230:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004232:	bf00      	nop
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004240:	bf00      	nop
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr

0800424a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800424a:	b580      	push	{r7, lr}
 800424c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800424e:	f000 f8d9 	bl	8004404 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004252:	bf00      	nop
 8004254:	bd80      	pop	{r7, pc}
	...

08004258 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800425c:	4802      	ldr	r0, [pc, #8]	@ (8004268 <DMA1_Channel1_IRQHandler+0x10>)
 800425e:	f000 fc04 	bl	8004a6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004262:	bf00      	nop
 8004264:	bd80      	pop	{r7, pc}
 8004266:	bf00      	nop
 8004268:	200007ec 	.word	0x200007ec

0800426c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8004270:	4802      	ldr	r0, [pc, #8]	@ (800427c <DMA1_Channel2_IRQHandler+0x10>)
 8004272:	f000 fbfa 	bl	8004a6a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004276:	bf00      	nop
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	2000084c 	.word	0x2000084c

08004280 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004284:	4803      	ldr	r0, [pc, #12]	@ (8004294 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8004286:	f002 fc59 	bl	8006b3c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 800428a:	4803      	ldr	r0, [pc, #12]	@ (8004298 <TIM1_UP_TIM16_IRQHandler+0x18>)
 800428c:	f002 fc56 	bl	8006b3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004290:	bf00      	nop
 8004292:	bd80      	pop	{r7, pc}
 8004294:	20000258 	.word	0x20000258
 8004298:	20000654 	.word	0x20000654

0800429c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80042a0:	4802      	ldr	r0, [pc, #8]	@ (80042ac <TIM3_IRQHandler+0x10>)
 80042a2:	f002 fc4b 	bl	8006b3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80042a6:	bf00      	nop
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	200003f0 	.word	0x200003f0

080042b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80042b4:	4802      	ldr	r0, [pc, #8]	@ (80042c0 <TIM4_IRQHandler+0x10>)
 80042b6:	f002 fc41 	bl	8006b3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80042ba:	bf00      	nop
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	200004bc 	.word	0x200004bc

080042c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80042c8:	4802      	ldr	r0, [pc, #8]	@ (80042d4 <USART2_IRQHandler+0x10>)
 80042ca:	f004 fa0b 	bl	80086e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80042ce:	bf00      	nop
 80042d0:	bd80      	pop	{r7, pc}
 80042d2:	bf00      	nop
 80042d4:	20000720 	.word	0x20000720

080042d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80042dc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80042e0:	f000 fede 	bl	80050a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80042e4:	bf00      	nop
 80042e6:	bd80      	pop	{r7, pc}

080042e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80042ec:	4b06      	ldr	r3, [pc, #24]	@ (8004308 <SystemInit+0x20>)
 80042ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042f2:	4a05      	ldr	r2, [pc, #20]	@ (8004308 <SystemInit+0x20>)
 80042f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80042f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80042fc:	bf00      	nop
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	e000ed00 	.word	0xe000ed00

0800430c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800430c:	480d      	ldr	r0, [pc, #52]	@ (8004344 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800430e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004310:	f7ff ffea 	bl	80042e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004314:	480c      	ldr	r0, [pc, #48]	@ (8004348 <LoopForever+0x6>)
  ldr r1, =_edata
 8004316:	490d      	ldr	r1, [pc, #52]	@ (800434c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004318:	4a0d      	ldr	r2, [pc, #52]	@ (8004350 <LoopForever+0xe>)
  movs r3, #0
 800431a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800431c:	e002      	b.n	8004324 <LoopCopyDataInit>

0800431e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800431e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004320:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004322:	3304      	adds	r3, #4

08004324 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004324:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004326:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004328:	d3f9      	bcc.n	800431e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800432a:	4a0a      	ldr	r2, [pc, #40]	@ (8004354 <LoopForever+0x12>)
  ldr r4, =_ebss
 800432c:	4c0a      	ldr	r4, [pc, #40]	@ (8004358 <LoopForever+0x16>)
  movs r3, #0
 800432e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004330:	e001      	b.n	8004336 <LoopFillZerobss>

08004332 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004332:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004334:	3204      	adds	r2, #4

08004336 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004336:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004338:	d3fb      	bcc.n	8004332 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800433a:	f005 fee9 	bl	800a110 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800433e:	f7fd f905 	bl	800154c <main>

08004342 <LoopForever>:

LoopForever:
    b LoopForever
 8004342:	e7fe      	b.n	8004342 <LoopForever>
  ldr   r0, =_estack
 8004344:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004348:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800434c:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8004350:	0800a1dc 	.word	0x0800a1dc
  ldr r2, =_sbss
 8004354:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8004358:	200010b4 	.word	0x200010b4

0800435c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800435c:	e7fe      	b.n	800435c <ADC1_2_IRQHandler>

0800435e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800435e:	b580      	push	{r7, lr}
 8004360:	b082      	sub	sp, #8
 8004362:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004364:	2300      	movs	r3, #0
 8004366:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004368:	2003      	movs	r0, #3
 800436a:	f000 f95b 	bl	8004624 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800436e:	2000      	movs	r0, #0
 8004370:	f000 f80e 	bl	8004390 <HAL_InitTick>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d002      	beq.n	8004380 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	71fb      	strb	r3, [r7, #7]
 800437e:	e001      	b.n	8004384 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004380:	f7ff fd4a 	bl	8003e18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004384:	79fb      	ldrb	r3, [r7, #7]

}
 8004386:	4618      	mov	r0, r3
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004398:	2300      	movs	r3, #0
 800439a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800439c:	4b16      	ldr	r3, [pc, #88]	@ (80043f8 <HAL_InitTick+0x68>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d022      	beq.n	80043ea <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80043a4:	4b15      	ldr	r3, [pc, #84]	@ (80043fc <HAL_InitTick+0x6c>)
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	4b13      	ldr	r3, [pc, #76]	@ (80043f8 <HAL_InitTick+0x68>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80043b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80043b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80043b8:	4618      	mov	r0, r3
 80043ba:	f000 f966 	bl	800468a <HAL_SYSTICK_Config>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10f      	bne.n	80043e4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2b0f      	cmp	r3, #15
 80043c8:	d809      	bhi.n	80043de <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043ca:	2200      	movs	r2, #0
 80043cc:	6879      	ldr	r1, [r7, #4]
 80043ce:	f04f 30ff 	mov.w	r0, #4294967295
 80043d2:	f000 f932 	bl	800463a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80043d6:	4a0a      	ldr	r2, [pc, #40]	@ (8004400 <HAL_InitTick+0x70>)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	e007      	b.n	80043ee <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	73fb      	strb	r3, [r7, #15]
 80043e2:	e004      	b.n	80043ee <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	73fb      	strb	r3, [r7, #15]
 80043e8:	e001      	b.n	80043ee <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80043ea:	2301      	movs	r3, #1
 80043ec:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80043ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	20000234 	.word	0x20000234
 80043fc:	2000022c 	.word	0x2000022c
 8004400:	20000230 	.word	0x20000230

08004404 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004408:	4b05      	ldr	r3, [pc, #20]	@ (8004420 <HAL_IncTick+0x1c>)
 800440a:	681a      	ldr	r2, [r3, #0]
 800440c:	4b05      	ldr	r3, [pc, #20]	@ (8004424 <HAL_IncTick+0x20>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4413      	add	r3, r2
 8004412:	4a03      	ldr	r2, [pc, #12]	@ (8004420 <HAL_IncTick+0x1c>)
 8004414:	6013      	str	r3, [r2, #0]
}
 8004416:	bf00      	nop
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	200010b0 	.word	0x200010b0
 8004424:	20000234 	.word	0x20000234

08004428 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004428:	b480      	push	{r7}
 800442a:	af00      	add	r7, sp, #0
  return uwTick;
 800442c:	4b03      	ldr	r3, [pc, #12]	@ (800443c <HAL_GetTick+0x14>)
 800442e:	681b      	ldr	r3, [r3, #0]
}
 8004430:	4618      	mov	r0, r3
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	200010b0 	.word	0x200010b0

08004440 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004448:	f7ff ffee 	bl	8004428 <HAL_GetTick>
 800444c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004458:	d004      	beq.n	8004464 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800445a:	4b09      	ldr	r3, [pc, #36]	@ (8004480 <HAL_Delay+0x40>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	4413      	add	r3, r2
 8004462:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004464:	bf00      	nop
 8004466:	f7ff ffdf 	bl	8004428 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	429a      	cmp	r2, r3
 8004474:	d8f7      	bhi.n	8004466 <HAL_Delay+0x26>
  {
  }
}
 8004476:	bf00      	nop
 8004478:	bf00      	nop
 800447a:	3710      	adds	r7, #16
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	20000234 	.word	0x20000234

08004484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004494:	4b0c      	ldr	r3, [pc, #48]	@ (80044c8 <__NVIC_SetPriorityGrouping+0x44>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800449a:	68ba      	ldr	r2, [r7, #8]
 800449c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80044a0:	4013      	ands	r3, r2
 80044a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80044ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80044b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80044b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044b6:	4a04      	ldr	r2, [pc, #16]	@ (80044c8 <__NVIC_SetPriorityGrouping+0x44>)
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	60d3      	str	r3, [r2, #12]
}
 80044bc:	bf00      	nop
 80044be:	3714      	adds	r7, #20
 80044c0:	46bd      	mov	sp, r7
 80044c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c6:	4770      	bx	lr
 80044c8:	e000ed00 	.word	0xe000ed00

080044cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044cc:	b480      	push	{r7}
 80044ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044d0:	4b04      	ldr	r3, [pc, #16]	@ (80044e4 <__NVIC_GetPriorityGrouping+0x18>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	0a1b      	lsrs	r3, r3, #8
 80044d6:	f003 0307 	and.w	r3, r3, #7
}
 80044da:	4618      	mov	r0, r3
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr
 80044e4:	e000ed00 	.word	0xe000ed00

080044e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	4603      	mov	r3, r0
 80044f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	db0b      	blt.n	8004512 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044fa:	79fb      	ldrb	r3, [r7, #7]
 80044fc:	f003 021f 	and.w	r2, r3, #31
 8004500:	4907      	ldr	r1, [pc, #28]	@ (8004520 <__NVIC_EnableIRQ+0x38>)
 8004502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004506:	095b      	lsrs	r3, r3, #5
 8004508:	2001      	movs	r0, #1
 800450a:	fa00 f202 	lsl.w	r2, r0, r2
 800450e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004512:	bf00      	nop
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	e000e100 	.word	0xe000e100

08004524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	4603      	mov	r3, r0
 800452c:	6039      	str	r1, [r7, #0]
 800452e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004534:	2b00      	cmp	r3, #0
 8004536:	db0a      	blt.n	800454e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	b2da      	uxtb	r2, r3
 800453c:	490c      	ldr	r1, [pc, #48]	@ (8004570 <__NVIC_SetPriority+0x4c>)
 800453e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004542:	0112      	lsls	r2, r2, #4
 8004544:	b2d2      	uxtb	r2, r2
 8004546:	440b      	add	r3, r1
 8004548:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800454c:	e00a      	b.n	8004564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	b2da      	uxtb	r2, r3
 8004552:	4908      	ldr	r1, [pc, #32]	@ (8004574 <__NVIC_SetPriority+0x50>)
 8004554:	79fb      	ldrb	r3, [r7, #7]
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	3b04      	subs	r3, #4
 800455c:	0112      	lsls	r2, r2, #4
 800455e:	b2d2      	uxtb	r2, r2
 8004560:	440b      	add	r3, r1
 8004562:	761a      	strb	r2, [r3, #24]
}
 8004564:	bf00      	nop
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	e000e100 	.word	0xe000e100
 8004574:	e000ed00 	.word	0xe000ed00

08004578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004578:	b480      	push	{r7}
 800457a:	b089      	sub	sp, #36	@ 0x24
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f003 0307 	and.w	r3, r3, #7
 800458a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	f1c3 0307 	rsb	r3, r3, #7
 8004592:	2b04      	cmp	r3, #4
 8004594:	bf28      	it	cs
 8004596:	2304      	movcs	r3, #4
 8004598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	3304      	adds	r3, #4
 800459e:	2b06      	cmp	r3, #6
 80045a0:	d902      	bls.n	80045a8 <NVIC_EncodePriority+0x30>
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	3b03      	subs	r3, #3
 80045a6:	e000      	b.n	80045aa <NVIC_EncodePriority+0x32>
 80045a8:	2300      	movs	r3, #0
 80045aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045ac:	f04f 32ff 	mov.w	r2, #4294967295
 80045b0:	69bb      	ldr	r3, [r7, #24]
 80045b2:	fa02 f303 	lsl.w	r3, r2, r3
 80045b6:	43da      	mvns	r2, r3
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	401a      	ands	r2, r3
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045c0:	f04f 31ff 	mov.w	r1, #4294967295
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	fa01 f303 	lsl.w	r3, r1, r3
 80045ca:	43d9      	mvns	r1, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045d0:	4313      	orrs	r3, r2
         );
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3724      	adds	r7, #36	@ 0x24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
	...

080045e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b082      	sub	sp, #8
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3b01      	subs	r3, #1
 80045ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045f0:	d301      	bcc.n	80045f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045f2:	2301      	movs	r3, #1
 80045f4:	e00f      	b.n	8004616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045f6:	4a0a      	ldr	r2, [pc, #40]	@ (8004620 <SysTick_Config+0x40>)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	3b01      	subs	r3, #1
 80045fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045fe:	210f      	movs	r1, #15
 8004600:	f04f 30ff 	mov.w	r0, #4294967295
 8004604:	f7ff ff8e 	bl	8004524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004608:	4b05      	ldr	r3, [pc, #20]	@ (8004620 <SysTick_Config+0x40>)
 800460a:	2200      	movs	r2, #0
 800460c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800460e:	4b04      	ldr	r3, [pc, #16]	@ (8004620 <SysTick_Config+0x40>)
 8004610:	2207      	movs	r2, #7
 8004612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3708      	adds	r7, #8
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	e000e010 	.word	0xe000e010

08004624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f7ff ff29 	bl	8004484 <__NVIC_SetPriorityGrouping>
}
 8004632:	bf00      	nop
 8004634:	3708      	adds	r7, #8
 8004636:	46bd      	mov	sp, r7
 8004638:	bd80      	pop	{r7, pc}

0800463a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800463a:	b580      	push	{r7, lr}
 800463c:	b086      	sub	sp, #24
 800463e:	af00      	add	r7, sp, #0
 8004640:	4603      	mov	r3, r0
 8004642:	60b9      	str	r1, [r7, #8]
 8004644:	607a      	str	r2, [r7, #4]
 8004646:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004648:	f7ff ff40 	bl	80044cc <__NVIC_GetPriorityGrouping>
 800464c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	68b9      	ldr	r1, [r7, #8]
 8004652:	6978      	ldr	r0, [r7, #20]
 8004654:	f7ff ff90 	bl	8004578 <NVIC_EncodePriority>
 8004658:	4602      	mov	r2, r0
 800465a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800465e:	4611      	mov	r1, r2
 8004660:	4618      	mov	r0, r3
 8004662:	f7ff ff5f 	bl	8004524 <__NVIC_SetPriority>
}
 8004666:	bf00      	nop
 8004668:	3718      	adds	r7, #24
 800466a:	46bd      	mov	sp, r7
 800466c:	bd80      	pop	{r7, pc}

0800466e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800466e:	b580      	push	{r7, lr}
 8004670:	b082      	sub	sp, #8
 8004672:	af00      	add	r7, sp, #0
 8004674:	4603      	mov	r3, r0
 8004676:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800467c:	4618      	mov	r0, r3
 800467e:	f7ff ff33 	bl	80044e8 <__NVIC_EnableIRQ>
}
 8004682:	bf00      	nop
 8004684:	3708      	adds	r7, #8
 8004686:	46bd      	mov	sp, r7
 8004688:	bd80      	pop	{r7, pc}

0800468a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b082      	sub	sp, #8
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f7ff ffa4 	bl	80045e0 <SysTick_Config>
 8004698:	4603      	mov	r3, r0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3708      	adds	r7, #8
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}
	...

080046a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e08d      	b.n	80047d2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	461a      	mov	r2, r3
 80046bc:	4b47      	ldr	r3, [pc, #284]	@ (80047dc <HAL_DMA_Init+0x138>)
 80046be:	429a      	cmp	r2, r3
 80046c0:	d80f      	bhi.n	80046e2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	461a      	mov	r2, r3
 80046c8:	4b45      	ldr	r3, [pc, #276]	@ (80047e0 <HAL_DMA_Init+0x13c>)
 80046ca:	4413      	add	r3, r2
 80046cc:	4a45      	ldr	r2, [pc, #276]	@ (80047e4 <HAL_DMA_Init+0x140>)
 80046ce:	fba2 2303 	umull	r2, r3, r2, r3
 80046d2:	091b      	lsrs	r3, r3, #4
 80046d4:	009a      	lsls	r2, r3, #2
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a42      	ldr	r2, [pc, #264]	@ (80047e8 <HAL_DMA_Init+0x144>)
 80046de:	641a      	str	r2, [r3, #64]	@ 0x40
 80046e0:	e00e      	b.n	8004700 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	461a      	mov	r2, r3
 80046e8:	4b40      	ldr	r3, [pc, #256]	@ (80047ec <HAL_DMA_Init+0x148>)
 80046ea:	4413      	add	r3, r2
 80046ec:	4a3d      	ldr	r2, [pc, #244]	@ (80047e4 <HAL_DMA_Init+0x140>)
 80046ee:	fba2 2303 	umull	r2, r3, r2, r3
 80046f2:	091b      	lsrs	r3, r3, #4
 80046f4:	009a      	lsls	r2, r3, #2
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a3c      	ldr	r2, [pc, #240]	@ (80047f0 <HAL_DMA_Init+0x14c>)
 80046fe:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2202      	movs	r2, #2
 8004704:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800471a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004724:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004730:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	699b      	ldr	r3, [r3, #24]
 8004736:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800473c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6a1b      	ldr	r3, [r3, #32]
 8004742:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004744:	68fa      	ldr	r2, [r7, #12]
 8004746:	4313      	orrs	r3, r2
 8004748:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 fa76 	bl	8004c44 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004760:	d102      	bne.n	8004768 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004770:	b2d2      	uxtb	r2, r2
 8004772:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800477c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d010      	beq.n	80047a8 <HAL_DMA_Init+0x104>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	2b04      	cmp	r3, #4
 800478c:	d80c      	bhi.n	80047a8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f000 fa96 	bl	8004cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004798:	2200      	movs	r2, #0
 800479a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80047a4:	605a      	str	r2, [r3, #4]
 80047a6:	e008      	b.n	80047ba <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2200      	movs	r2, #0
 80047ac:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2200      	movs	r2, #0
 80047be:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80047d0:	2300      	movs	r3, #0
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	40020407 	.word	0x40020407
 80047e0:	bffdfff8 	.word	0xbffdfff8
 80047e4:	cccccccd 	.word	0xcccccccd
 80047e8:	40020000 	.word	0x40020000
 80047ec:	bffdfbf8 	.word	0xbffdfbf8
 80047f0:	40020400 	.word	0x40020400

080047f4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	60f8      	str	r0, [r7, #12]
 80047fc:	60b9      	str	r1, [r7, #8]
 80047fe:	607a      	str	r2, [r7, #4]
 8004800:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004802:	2300      	movs	r3, #0
 8004804:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800480c:	2b01      	cmp	r3, #1
 800480e:	d101      	bne.n	8004814 <HAL_DMA_Start_IT+0x20>
 8004810:	2302      	movs	r3, #2
 8004812:	e066      	b.n	80048e2 <HAL_DMA_Start_IT+0xee>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	2201      	movs	r2, #1
 8004818:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b01      	cmp	r3, #1
 8004826:	d155      	bne.n	80048d4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	2200      	movs	r2, #0
 8004834:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f022 0201 	bic.w	r2, r2, #1
 8004844:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	68b9      	ldr	r1, [r7, #8]
 800484c:	68f8      	ldr	r0, [r7, #12]
 800484e:	f000 f9bb 	bl	8004bc8 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004856:	2b00      	cmp	r3, #0
 8004858:	d008      	beq.n	800486c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 020e 	orr.w	r2, r2, #14
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	e00f      	b.n	800488c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0204 	bic.w	r2, r2, #4
 800487a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 020a 	orr.w	r2, r2, #10
 800488a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004896:	2b00      	cmp	r3, #0
 8004898:	d007      	beq.n	80048aa <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048a8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d007      	beq.n	80048c2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048bc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048c0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	681a      	ldr	r2, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f042 0201 	orr.w	r2, r2, #1
 80048d0:	601a      	str	r2, [r3, #0]
 80048d2:	e005      	b.n	80048e0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2200      	movs	r2, #0
 80048d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80048dc:	2302      	movs	r3, #2
 80048de:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80048e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	3718      	adds	r7, #24
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b085      	sub	sp, #20
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80048f2:	2300      	movs	r3, #0
 80048f4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d005      	beq.n	800490e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2204      	movs	r2, #4
 8004906:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	73fb      	strb	r3, [r7, #15]
 800490c:	e037      	b.n	800497e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f022 020e 	bic.w	r2, r2, #14
 800491c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004928:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800492c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f022 0201 	bic.w	r2, r2, #1
 800493c:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004942:	f003 021f 	and.w	r2, r3, #31
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494a:	2101      	movs	r1, #1
 800494c:	fa01 f202 	lsl.w	r2, r1, r2
 8004950:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800495a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00c      	beq.n	800497e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004968:	681a      	ldr	r2, [r3, #0]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800496e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004972:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800497c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800498e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004990:	4618      	mov	r0, r3
 8004992:	3714      	adds	r7, #20
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	b084      	sub	sp, #16
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049a4:	2300      	movs	r3, #0
 80049a6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80049ae:	b2db      	uxtb	r3, r3
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d00d      	beq.n	80049d0 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2204      	movs	r2, #4
 80049b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	73fb      	strb	r3, [r7, #15]
 80049ce:	e047      	b.n	8004a60 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f022 020e 	bic.w	r2, r2, #14
 80049de:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f022 0201 	bic.w	r2, r2, #1
 80049ee:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80049fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80049fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a04:	f003 021f 	and.w	r2, r3, #31
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a0c:	2101      	movs	r1, #1
 8004a0e:	fa01 f202 	lsl.w	r2, r1, r2
 8004a12:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a18:	687a      	ldr	r2, [r7, #4]
 8004a1a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004a1c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d00c      	beq.n	8004a40 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a30:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a34:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004a3e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d003      	beq.n	8004a60 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	4798      	blx	r3
    }
  }
  return status;
 8004a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3710      	adds	r7, #16
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}

08004a6a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004a6a:	b580      	push	{r7, lr}
 8004a6c:	b084      	sub	sp, #16
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a86:	f003 031f 	and.w	r3, r3, #31
 8004a8a:	2204      	movs	r2, #4
 8004a8c:	409a      	lsls	r2, r3
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4013      	ands	r3, r2
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d026      	beq.n	8004ae4 <HAL_DMA_IRQHandler+0x7a>
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	f003 0304 	and.w	r3, r3, #4
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d021      	beq.n	8004ae4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0320 	and.w	r3, r3, #32
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d107      	bne.n	8004abe <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f022 0204 	bic.w	r2, r2, #4
 8004abc:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ac2:	f003 021f 	and.w	r2, r3, #31
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aca:	2104      	movs	r1, #4
 8004acc:	fa01 f202 	lsl.w	r2, r1, r2
 8004ad0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d071      	beq.n	8004bbe <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004ae2:	e06c      	b.n	8004bbe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae8:	f003 031f 	and.w	r3, r3, #31
 8004aec:	2202      	movs	r2, #2
 8004aee:	409a      	lsls	r2, r3
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4013      	ands	r3, r2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d02e      	beq.n	8004b56 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	f003 0302 	and.w	r3, r3, #2
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d029      	beq.n	8004b56 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0320 	and.w	r3, r3, #32
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d10b      	bne.n	8004b28 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f022 020a 	bic.w	r2, r2, #10
 8004b1e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b2c:	f003 021f 	and.w	r2, r3, #31
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b34:	2102      	movs	r1, #2
 8004b36:	fa01 f202 	lsl.w	r2, r1, r2
 8004b3a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d038      	beq.n	8004bbe <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b50:	6878      	ldr	r0, [r7, #4]
 8004b52:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004b54:	e033      	b.n	8004bbe <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b5a:	f003 031f 	and.w	r3, r3, #31
 8004b5e:	2208      	movs	r2, #8
 8004b60:	409a      	lsls	r2, r3
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4013      	ands	r3, r2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d02a      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	f003 0308 	and.w	r3, r3, #8
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d025      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f022 020e 	bic.w	r2, r2, #14
 8004b82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b88:	f003 021f 	and.w	r2, r3, #31
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b90:	2101      	movs	r1, #1
 8004b92:	fa01 f202 	lsl.w	r2, r1, r2
 8004b96:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d004      	beq.n	8004bc0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004bbe:	bf00      	nop
 8004bc0:	bf00      	nop
}
 8004bc2:	3710      	adds	r7, #16
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	bd80      	pop	{r7, pc}

08004bc8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	60f8      	str	r0, [r7, #12]
 8004bd0:	60b9      	str	r1, [r7, #8]
 8004bd2:	607a      	str	r2, [r7, #4]
 8004bd4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bda:	68fa      	ldr	r2, [r7, #12]
 8004bdc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004bde:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d004      	beq.n	8004bf2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bec:	68fa      	ldr	r2, [r7, #12]
 8004bee:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004bf0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bf6:	f003 021f 	and.w	r2, r3, #31
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfe:	2101      	movs	r1, #1
 8004c00:	fa01 f202 	lsl.w	r2, r1, r2
 8004c04:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	683a      	ldr	r2, [r7, #0]
 8004c0c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	2b10      	cmp	r3, #16
 8004c14:	d108      	bne.n	8004c28 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004c26:	e007      	b.n	8004c38 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68ba      	ldr	r2, [r7, #8]
 8004c2e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	60da      	str	r2, [r3, #12]
}
 8004c38:	bf00      	nop
 8004c3a:	3714      	adds	r7, #20
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr

08004c44 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b087      	sub	sp, #28
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	461a      	mov	r2, r3
 8004c52:	4b16      	ldr	r3, [pc, #88]	@ (8004cac <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004c54:	429a      	cmp	r2, r3
 8004c56:	d802      	bhi.n	8004c5e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004c58:	4b15      	ldr	r3, [pc, #84]	@ (8004cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004c5a:	617b      	str	r3, [r7, #20]
 8004c5c:	e001      	b.n	8004c62 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004c5e:	4b15      	ldr	r3, [pc, #84]	@ (8004cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004c60:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004c62:	697b      	ldr	r3, [r7, #20]
 8004c64:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	3b08      	subs	r3, #8
 8004c6e:	4a12      	ldr	r2, [pc, #72]	@ (8004cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004c70:	fba2 2303 	umull	r2, r3, r2, r3
 8004c74:	091b      	lsrs	r3, r3, #4
 8004c76:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c7c:	089b      	lsrs	r3, r3, #2
 8004c7e:	009a      	lsls	r2, r3, #2
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	4413      	add	r3, r2
 8004c84:	461a      	mov	r2, r3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a0b      	ldr	r2, [pc, #44]	@ (8004cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004c8e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	f003 031f 	and.w	r3, r3, #31
 8004c96:	2201      	movs	r2, #1
 8004c98:	409a      	lsls	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004c9e:	bf00      	nop
 8004ca0:	371c      	adds	r7, #28
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	40020407 	.word	0x40020407
 8004cb0:	40020800 	.word	0x40020800
 8004cb4:	40020820 	.word	0x40020820
 8004cb8:	cccccccd 	.word	0xcccccccd
 8004cbc:	40020880 	.word	0x40020880

08004cc0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004cd0:	68fa      	ldr	r2, [r7, #12]
 8004cd2:	4b0b      	ldr	r3, [pc, #44]	@ (8004d00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004cd4:	4413      	add	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	461a      	mov	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a08      	ldr	r2, [pc, #32]	@ (8004d04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004ce2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	f003 031f 	and.w	r3, r3, #31
 8004cec:	2201      	movs	r2, #1
 8004cee:	409a      	lsls	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004cf4:	bf00      	nop
 8004cf6:	3714      	adds	r7, #20
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfe:	4770      	bx	lr
 8004d00:	1000823f 	.word	0x1000823f
 8004d04:	40020940 	.word	0x40020940

08004d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b087      	sub	sp, #28
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
 8004d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004d12:	2300      	movs	r3, #0
 8004d14:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004d16:	e15a      	b.n	8004fce <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	2101      	movs	r1, #1
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	fa01 f303 	lsl.w	r3, r1, r3
 8004d24:	4013      	ands	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	f000 814c 	beq.w	8004fc8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f003 0303 	and.w	r3, r3, #3
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d005      	beq.n	8004d48 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d130      	bne.n	8004daa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	005b      	lsls	r3, r3, #1
 8004d52:	2203      	movs	r2, #3
 8004d54:	fa02 f303 	lsl.w	r3, r2, r3
 8004d58:	43db      	mvns	r3, r3
 8004d5a:	693a      	ldr	r2, [r7, #16]
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	68da      	ldr	r2, [r3, #12]
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	693a      	ldr	r2, [r7, #16]
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004d7e:	2201      	movs	r2, #1
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	43db      	mvns	r3, r3
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	091b      	lsrs	r3, r3, #4
 8004d94:	f003 0201 	and.w	r2, r3, #1
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9e:	693a      	ldr	r2, [r7, #16]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	2b03      	cmp	r3, #3
 8004db4:	d017      	beq.n	8004de6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	005b      	lsls	r3, r3, #1
 8004dc0:	2203      	movs	r2, #3
 8004dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc6:	43db      	mvns	r3, r3
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004dce:	683b      	ldr	r3, [r7, #0]
 8004dd0:	689a      	ldr	r2, [r3, #8]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	4313      	orrs	r3, r2
 8004dde:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	693a      	ldr	r2, [r7, #16]
 8004de4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f003 0303 	and.w	r3, r3, #3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d123      	bne.n	8004e3a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	08da      	lsrs	r2, r3, #3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	3208      	adds	r2, #8
 8004dfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	220f      	movs	r2, #15
 8004e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e0e:	43db      	mvns	r3, r3
 8004e10:	693a      	ldr	r2, [r7, #16]
 8004e12:	4013      	ands	r3, r2
 8004e14:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	691a      	ldr	r2, [r3, #16]
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	fa02 f303 	lsl.w	r3, r2, r3
 8004e26:	693a      	ldr	r2, [r7, #16]
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	08da      	lsrs	r2, r3, #3
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3208      	adds	r2, #8
 8004e34:	6939      	ldr	r1, [r7, #16]
 8004e36:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	2203      	movs	r2, #3
 8004e46:	fa02 f303 	lsl.w	r3, r2, r3
 8004e4a:	43db      	mvns	r3, r3
 8004e4c:	693a      	ldr	r2, [r7, #16]
 8004e4e:	4013      	ands	r3, r2
 8004e50:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	f003 0203 	and.w	r2, r3, #3
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	685b      	ldr	r3, [r3, #4]
 8004e72:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	f000 80a6 	beq.w	8004fc8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e7c:	4b5b      	ldr	r3, [pc, #364]	@ (8004fec <HAL_GPIO_Init+0x2e4>)
 8004e7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e80:	4a5a      	ldr	r2, [pc, #360]	@ (8004fec <HAL_GPIO_Init+0x2e4>)
 8004e82:	f043 0301 	orr.w	r3, r3, #1
 8004e86:	6613      	str	r3, [r2, #96]	@ 0x60
 8004e88:	4b58      	ldr	r3, [pc, #352]	@ (8004fec <HAL_GPIO_Init+0x2e4>)
 8004e8a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004e8c:	f003 0301 	and.w	r3, r3, #1
 8004e90:	60bb      	str	r3, [r7, #8]
 8004e92:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004e94:	4a56      	ldr	r2, [pc, #344]	@ (8004ff0 <HAL_GPIO_Init+0x2e8>)
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	089b      	lsrs	r3, r3, #2
 8004e9a:	3302      	adds	r3, #2
 8004e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ea0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f003 0303 	and.w	r3, r3, #3
 8004ea8:	009b      	lsls	r3, r3, #2
 8004eaa:	220f      	movs	r2, #15
 8004eac:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb0:	43db      	mvns	r3, r3
 8004eb2:	693a      	ldr	r2, [r7, #16]
 8004eb4:	4013      	ands	r3, r2
 8004eb6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004ebe:	d01f      	beq.n	8004f00 <HAL_GPIO_Init+0x1f8>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	4a4c      	ldr	r2, [pc, #304]	@ (8004ff4 <HAL_GPIO_Init+0x2ec>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d019      	beq.n	8004efc <HAL_GPIO_Init+0x1f4>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a4b      	ldr	r2, [pc, #300]	@ (8004ff8 <HAL_GPIO_Init+0x2f0>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d013      	beq.n	8004ef8 <HAL_GPIO_Init+0x1f0>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a4a      	ldr	r2, [pc, #296]	@ (8004ffc <HAL_GPIO_Init+0x2f4>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d00d      	beq.n	8004ef4 <HAL_GPIO_Init+0x1ec>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a49      	ldr	r2, [pc, #292]	@ (8005000 <HAL_GPIO_Init+0x2f8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d007      	beq.n	8004ef0 <HAL_GPIO_Init+0x1e8>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a48      	ldr	r2, [pc, #288]	@ (8005004 <HAL_GPIO_Init+0x2fc>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d101      	bne.n	8004eec <HAL_GPIO_Init+0x1e4>
 8004ee8:	2305      	movs	r3, #5
 8004eea:	e00a      	b.n	8004f02 <HAL_GPIO_Init+0x1fa>
 8004eec:	2306      	movs	r3, #6
 8004eee:	e008      	b.n	8004f02 <HAL_GPIO_Init+0x1fa>
 8004ef0:	2304      	movs	r3, #4
 8004ef2:	e006      	b.n	8004f02 <HAL_GPIO_Init+0x1fa>
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e004      	b.n	8004f02 <HAL_GPIO_Init+0x1fa>
 8004ef8:	2302      	movs	r3, #2
 8004efa:	e002      	b.n	8004f02 <HAL_GPIO_Init+0x1fa>
 8004efc:	2301      	movs	r3, #1
 8004efe:	e000      	b.n	8004f02 <HAL_GPIO_Init+0x1fa>
 8004f00:	2300      	movs	r3, #0
 8004f02:	697a      	ldr	r2, [r7, #20]
 8004f04:	f002 0203 	and.w	r2, r2, #3
 8004f08:	0092      	lsls	r2, r2, #2
 8004f0a:	4093      	lsls	r3, r2
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f12:	4937      	ldr	r1, [pc, #220]	@ (8004ff0 <HAL_GPIO_Init+0x2e8>)
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	089b      	lsrs	r3, r3, #2
 8004f18:	3302      	adds	r3, #2
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004f20:	4b39      	ldr	r3, [pc, #228]	@ (8005008 <HAL_GPIO_Init+0x300>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	43db      	mvns	r3, r3
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	4013      	ands	r3, r2
 8004f2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d003      	beq.n	8004f44 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004f3c:	693a      	ldr	r2, [r7, #16]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004f44:	4a30      	ldr	r2, [pc, #192]	@ (8005008 <HAL_GPIO_Init+0x300>)
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8005008 <HAL_GPIO_Init+0x300>)
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	43db      	mvns	r3, r3
 8004f54:	693a      	ldr	r2, [r7, #16]
 8004f56:	4013      	ands	r3, r2
 8004f58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	4313      	orrs	r3, r2
 8004f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004f6e:	4a26      	ldr	r2, [pc, #152]	@ (8005008 <HAL_GPIO_Init+0x300>)
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004f74:	4b24      	ldr	r3, [pc, #144]	@ (8005008 <HAL_GPIO_Init+0x300>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	43db      	mvns	r3, r3
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	4013      	ands	r3, r2
 8004f82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d003      	beq.n	8004f98 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004f98:	4a1b      	ldr	r2, [pc, #108]	@ (8005008 <HAL_GPIO_Init+0x300>)
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004f9e:	4b1a      	ldr	r3, [pc, #104]	@ (8005008 <HAL_GPIO_Init+0x300>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	43db      	mvns	r3, r3
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	4013      	ands	r3, r2
 8004fac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004fba:	693a      	ldr	r2, [r7, #16]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	4313      	orrs	r3, r2
 8004fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004fc2:	4a11      	ldr	r2, [pc, #68]	@ (8005008 <HAL_GPIO_Init+0x300>)
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	681a      	ldr	r2, [r3, #0]
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f47f ae9d 	bne.w	8004d18 <HAL_GPIO_Init+0x10>
  }
}
 8004fde:	bf00      	nop
 8004fe0:	bf00      	nop
 8004fe2:	371c      	adds	r7, #28
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	40010000 	.word	0x40010000
 8004ff4:	48000400 	.word	0x48000400
 8004ff8:	48000800 	.word	0x48000800
 8004ffc:	48000c00 	.word	0x48000c00
 8005000:	48001000 	.word	0x48001000
 8005004:	48001400 	.word	0x48001400
 8005008:	40010400 	.word	0x40010400

0800500c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800500c:	b480      	push	{r7}
 800500e:	b085      	sub	sp, #20
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	460b      	mov	r3, r1
 8005016:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	691a      	ldr	r2, [r3, #16]
 800501c:	887b      	ldrh	r3, [r7, #2]
 800501e:	4013      	ands	r3, r2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d002      	beq.n	800502a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005024:	2301      	movs	r3, #1
 8005026:	73fb      	strb	r3, [r7, #15]
 8005028:	e001      	b.n	800502e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800502a:	2300      	movs	r3, #0
 800502c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800502e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005030:	4618      	mov	r0, r3
 8005032:	3714      	adds	r7, #20
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	460b      	mov	r3, r1
 8005046:	807b      	strh	r3, [r7, #2]
 8005048:	4613      	mov	r3, r2
 800504a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800504c:	787b      	ldrb	r3, [r7, #1]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d003      	beq.n	800505a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005052:	887a      	ldrh	r2, [r7, #2]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005058:	e002      	b.n	8005060 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800505a:	887a      	ldrh	r2, [r7, #2]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800506c:	b480      	push	{r7}
 800506e:	b085      	sub	sp, #20
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	460b      	mov	r3, r1
 8005076:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	695b      	ldr	r3, [r3, #20]
 800507c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800507e:	887a      	ldrh	r2, [r7, #2]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	4013      	ands	r3, r2
 8005084:	041a      	lsls	r2, r3, #16
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	43d9      	mvns	r1, r3
 800508a:	887b      	ldrh	r3, [r7, #2]
 800508c:	400b      	ands	r3, r1
 800508e:	431a      	orrs	r2, r3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	619a      	str	r2, [r3, #24]
}
 8005094:	bf00      	nop
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b082      	sub	sp, #8
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	4603      	mov	r3, r0
 80050a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80050aa:	4b08      	ldr	r3, [pc, #32]	@ (80050cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050ac:	695a      	ldr	r2, [r3, #20]
 80050ae:	88fb      	ldrh	r3, [r7, #6]
 80050b0:	4013      	ands	r3, r2
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d006      	beq.n	80050c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050b6:	4a05      	ldr	r2, [pc, #20]	@ (80050cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050b8:	88fb      	ldrh	r3, [r7, #6]
 80050ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050bc:	88fb      	ldrh	r3, [r7, #6]
 80050be:	4618      	mov	r0, r3
 80050c0:	f000 f806 	bl	80050d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80050c4:	bf00      	nop
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	40010400 	.word	0x40010400

080050d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80050d0:	b480      	push	{r7}
 80050d2:	b083      	sub	sp, #12
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	4603      	mov	r3, r0
 80050d8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80050da:	bf00      	nop
 80050dc:	370c      	adds	r7, #12
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
	...

080050e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b085      	sub	sp, #20
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d141      	bne.n	800517a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80050f6:	4b4b      	ldr	r3, [pc, #300]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80050fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005102:	d131      	bne.n	8005168 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005104:	4b47      	ldr	r3, [pc, #284]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005106:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800510a:	4a46      	ldr	r2, [pc, #280]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800510c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005110:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005114:	4b43      	ldr	r3, [pc, #268]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800511c:	4a41      	ldr	r2, [pc, #260]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800511e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005122:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005124:	4b40      	ldr	r3, [pc, #256]	@ (8005228 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	2232      	movs	r2, #50	@ 0x32
 800512a:	fb02 f303 	mul.w	r3, r2, r3
 800512e:	4a3f      	ldr	r2, [pc, #252]	@ (800522c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005130:	fba2 2303 	umull	r2, r3, r2, r3
 8005134:	0c9b      	lsrs	r3, r3, #18
 8005136:	3301      	adds	r3, #1
 8005138:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800513a:	e002      	b.n	8005142 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	3b01      	subs	r3, #1
 8005140:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005142:	4b38      	ldr	r3, [pc, #224]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005144:	695b      	ldr	r3, [r3, #20]
 8005146:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800514a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800514e:	d102      	bne.n	8005156 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1f2      	bne.n	800513c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005156:	4b33      	ldr	r3, [pc, #204]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005158:	695b      	ldr	r3, [r3, #20]
 800515a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800515e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005162:	d158      	bne.n	8005216 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005164:	2303      	movs	r3, #3
 8005166:	e057      	b.n	8005218 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005168:	4b2e      	ldr	r3, [pc, #184]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800516a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800516e:	4a2d      	ldr	r2, [pc, #180]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005170:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005174:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005178:	e04d      	b.n	8005216 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005180:	d141      	bne.n	8005206 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005182:	4b28      	ldr	r3, [pc, #160]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800518a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800518e:	d131      	bne.n	80051f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005190:	4b24      	ldr	r3, [pc, #144]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005192:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005196:	4a23      	ldr	r2, [pc, #140]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005198:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800519c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80051a0:	4b20      	ldr	r3, [pc, #128]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80051a8:	4a1e      	ldr	r2, [pc, #120]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051aa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80051ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80051b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005228 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2232      	movs	r2, #50	@ 0x32
 80051b6:	fb02 f303 	mul.w	r3, r2, r3
 80051ba:	4a1c      	ldr	r2, [pc, #112]	@ (800522c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80051bc:	fba2 2303 	umull	r2, r3, r2, r3
 80051c0:	0c9b      	lsrs	r3, r3, #18
 80051c2:	3301      	adds	r3, #1
 80051c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051c6:	e002      	b.n	80051ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	3b01      	subs	r3, #1
 80051cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051ce:	4b15      	ldr	r3, [pc, #84]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051da:	d102      	bne.n	80051e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d1f2      	bne.n	80051c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80051e2:	4b10      	ldr	r3, [pc, #64]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051e4:	695b      	ldr	r3, [r3, #20]
 80051e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051ea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051ee:	d112      	bne.n	8005216 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e011      	b.n	8005218 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051f4:	4b0b      	ldr	r3, [pc, #44]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051fa:	4a0a      	ldr	r2, [pc, #40]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005200:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005204:	e007      	b.n	8005216 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005206:	4b07      	ldr	r3, [pc, #28]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800520e:	4a05      	ldr	r2, [pc, #20]	@ (8005224 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005210:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005214:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005216:	2300      	movs	r3, #0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3714      	adds	r7, #20
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	40007000 	.word	0x40007000
 8005228:	2000022c 	.word	0x2000022c
 800522c:	431bde83 	.word	0x431bde83

08005230 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005230:	b480      	push	{r7}
 8005232:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005234:	4b05      	ldr	r3, [pc, #20]	@ (800524c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	4a04      	ldr	r2, [pc, #16]	@ (800524c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800523a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800523e:	6093      	str	r3, [r2, #8]
}
 8005240:	bf00      	nop
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	40007000 	.word	0x40007000

08005250 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b088      	sub	sp, #32
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d101      	bne.n	8005262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800525e:	2301      	movs	r3, #1
 8005260:	e2fe      	b.n	8005860 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f003 0301 	and.w	r3, r3, #1
 800526a:	2b00      	cmp	r3, #0
 800526c:	d075      	beq.n	800535a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800526e:	4b97      	ldr	r3, [pc, #604]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f003 030c 	and.w	r3, r3, #12
 8005276:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005278:	4b94      	ldr	r3, [pc, #592]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	f003 0303 	and.w	r3, r3, #3
 8005280:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	2b0c      	cmp	r3, #12
 8005286:	d102      	bne.n	800528e <HAL_RCC_OscConfig+0x3e>
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	2b03      	cmp	r3, #3
 800528c:	d002      	beq.n	8005294 <HAL_RCC_OscConfig+0x44>
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	2b08      	cmp	r3, #8
 8005292:	d10b      	bne.n	80052ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005294:	4b8d      	ldr	r3, [pc, #564]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800529c:	2b00      	cmp	r3, #0
 800529e:	d05b      	beq.n	8005358 <HAL_RCC_OscConfig+0x108>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d157      	bne.n	8005358 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e2d9      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052b4:	d106      	bne.n	80052c4 <HAL_RCC_OscConfig+0x74>
 80052b6:	4b85      	ldr	r3, [pc, #532]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a84      	ldr	r2, [pc, #528]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052c0:	6013      	str	r3, [r2, #0]
 80052c2:	e01d      	b.n	8005300 <HAL_RCC_OscConfig+0xb0>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052cc:	d10c      	bne.n	80052e8 <HAL_RCC_OscConfig+0x98>
 80052ce:	4b7f      	ldr	r3, [pc, #508]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a7e      	ldr	r2, [pc, #504]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052d8:	6013      	str	r3, [r2, #0]
 80052da:	4b7c      	ldr	r3, [pc, #496]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a7b      	ldr	r2, [pc, #492]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052e4:	6013      	str	r3, [r2, #0]
 80052e6:	e00b      	b.n	8005300 <HAL_RCC_OscConfig+0xb0>
 80052e8:	4b78      	ldr	r3, [pc, #480]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a77      	ldr	r2, [pc, #476]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052f2:	6013      	str	r3, [r2, #0]
 80052f4:	4b75      	ldr	r3, [pc, #468]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a74      	ldr	r2, [pc, #464]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80052fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d013      	beq.n	8005330 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005308:	f7ff f88e 	bl	8004428 <HAL_GetTick>
 800530c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800530e:	e008      	b.n	8005322 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005310:	f7ff f88a 	bl	8004428 <HAL_GetTick>
 8005314:	4602      	mov	r2, r0
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	1ad3      	subs	r3, r2, r3
 800531a:	2b64      	cmp	r3, #100	@ 0x64
 800531c:	d901      	bls.n	8005322 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800531e:	2303      	movs	r3, #3
 8005320:	e29e      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005322:	4b6a      	ldr	r3, [pc, #424]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d0f0      	beq.n	8005310 <HAL_RCC_OscConfig+0xc0>
 800532e:	e014      	b.n	800535a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005330:	f7ff f87a 	bl	8004428 <HAL_GetTick>
 8005334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005336:	e008      	b.n	800534a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005338:	f7ff f876 	bl	8004428 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b64      	cmp	r3, #100	@ 0x64
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e28a      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800534a:	4b60      	ldr	r3, [pc, #384]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1f0      	bne.n	8005338 <HAL_RCC_OscConfig+0xe8>
 8005356:	e000      	b.n	800535a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d075      	beq.n	8005452 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005366:	4b59      	ldr	r3, [pc, #356]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 030c 	and.w	r3, r3, #12
 800536e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005370:	4b56      	ldr	r3, [pc, #344]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	f003 0303 	and.w	r3, r3, #3
 8005378:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800537a:	69bb      	ldr	r3, [r7, #24]
 800537c:	2b0c      	cmp	r3, #12
 800537e:	d102      	bne.n	8005386 <HAL_RCC_OscConfig+0x136>
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	2b02      	cmp	r3, #2
 8005384:	d002      	beq.n	800538c <HAL_RCC_OscConfig+0x13c>
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	2b04      	cmp	r3, #4
 800538a:	d11f      	bne.n	80053cc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800538c:	4b4f      	ldr	r3, [pc, #316]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005394:	2b00      	cmp	r3, #0
 8005396:	d005      	beq.n	80053a4 <HAL_RCC_OscConfig+0x154>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	e25d      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053a4:	4b49      	ldr	r3, [pc, #292]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	691b      	ldr	r3, [r3, #16]
 80053b0:	061b      	lsls	r3, r3, #24
 80053b2:	4946      	ldr	r1, [pc, #280]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80053b8:	4b45      	ldr	r3, [pc, #276]	@ (80054d0 <HAL_RCC_OscConfig+0x280>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4618      	mov	r0, r3
 80053be:	f7fe ffe7 	bl	8004390 <HAL_InitTick>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d043      	beq.n	8005450 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e249      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d023      	beq.n	800541c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053d4:	4b3d      	ldr	r3, [pc, #244]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a3c      	ldr	r2, [pc, #240]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80053da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e0:	f7ff f822 	bl	8004428 <HAL_GetTick>
 80053e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053e6:	e008      	b.n	80053fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053e8:	f7ff f81e 	bl	8004428 <HAL_GetTick>
 80053ec:	4602      	mov	r2, r0
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	1ad3      	subs	r3, r2, r3
 80053f2:	2b02      	cmp	r3, #2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e232      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053fa:	4b34      	ldr	r3, [pc, #208]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005402:	2b00      	cmp	r3, #0
 8005404:	d0f0      	beq.n	80053e8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005406:	4b31      	ldr	r3, [pc, #196]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	061b      	lsls	r3, r3, #24
 8005414:	492d      	ldr	r1, [pc, #180]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005416:	4313      	orrs	r3, r2
 8005418:	604b      	str	r3, [r1, #4]
 800541a:	e01a      	b.n	8005452 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800541c:	4b2b      	ldr	r3, [pc, #172]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a2a      	ldr	r2, [pc, #168]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005422:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005428:	f7fe fffe 	bl	8004428 <HAL_GetTick>
 800542c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800542e:	e008      	b.n	8005442 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005430:	f7fe fffa 	bl	8004428 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	693b      	ldr	r3, [r7, #16]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	2b02      	cmp	r3, #2
 800543c:	d901      	bls.n	8005442 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e20e      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005442:	4b22      	ldr	r3, [pc, #136]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800544a:	2b00      	cmp	r3, #0
 800544c:	d1f0      	bne.n	8005430 <HAL_RCC_OscConfig+0x1e0>
 800544e:	e000      	b.n	8005452 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005450:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0308 	and.w	r3, r3, #8
 800545a:	2b00      	cmp	r3, #0
 800545c:	d041      	beq.n	80054e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	695b      	ldr	r3, [r3, #20]
 8005462:	2b00      	cmp	r3, #0
 8005464:	d01c      	beq.n	80054a0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005466:	4b19      	ldr	r3, [pc, #100]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005468:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800546c:	4a17      	ldr	r2, [pc, #92]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 800546e:	f043 0301 	orr.w	r3, r3, #1
 8005472:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005476:	f7fe ffd7 	bl	8004428 <HAL_GetTick>
 800547a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800547c:	e008      	b.n	8005490 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800547e:	f7fe ffd3 	bl	8004428 <HAL_GetTick>
 8005482:	4602      	mov	r2, r0
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	1ad3      	subs	r3, r2, r3
 8005488:	2b02      	cmp	r3, #2
 800548a:	d901      	bls.n	8005490 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800548c:	2303      	movs	r3, #3
 800548e:	e1e7      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005490:	4b0e      	ldr	r3, [pc, #56]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 8005492:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b00      	cmp	r3, #0
 800549c:	d0ef      	beq.n	800547e <HAL_RCC_OscConfig+0x22e>
 800549e:	e020      	b.n	80054e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054a0:	4b0a      	ldr	r3, [pc, #40]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80054a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054a6:	4a09      	ldr	r2, [pc, #36]	@ (80054cc <HAL_RCC_OscConfig+0x27c>)
 80054a8:	f023 0301 	bic.w	r3, r3, #1
 80054ac:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b0:	f7fe ffba 	bl	8004428 <HAL_GetTick>
 80054b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054b6:	e00d      	b.n	80054d4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054b8:	f7fe ffb6 	bl	8004428 <HAL_GetTick>
 80054bc:	4602      	mov	r2, r0
 80054be:	693b      	ldr	r3, [r7, #16]
 80054c0:	1ad3      	subs	r3, r2, r3
 80054c2:	2b02      	cmp	r3, #2
 80054c4:	d906      	bls.n	80054d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e1ca      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
 80054ca:	bf00      	nop
 80054cc:	40021000 	.word	0x40021000
 80054d0:	20000230 	.word	0x20000230
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054d4:	4b8c      	ldr	r3, [pc, #560]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80054d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054da:	f003 0302 	and.w	r3, r3, #2
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d1ea      	bne.n	80054b8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 0304 	and.w	r3, r3, #4
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f000 80a6 	beq.w	800563c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80054f0:	2300      	movs	r3, #0
 80054f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80054f4:	4b84      	ldr	r3, [pc, #528]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80054f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80054f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d101      	bne.n	8005504 <HAL_RCC_OscConfig+0x2b4>
 8005500:	2301      	movs	r3, #1
 8005502:	e000      	b.n	8005506 <HAL_RCC_OscConfig+0x2b6>
 8005504:	2300      	movs	r3, #0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00d      	beq.n	8005526 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800550a:	4b7f      	ldr	r3, [pc, #508]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 800550c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800550e:	4a7e      	ldr	r2, [pc, #504]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005510:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005514:	6593      	str	r3, [r2, #88]	@ 0x58
 8005516:	4b7c      	ldr	r3, [pc, #496]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800551a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800551e:	60fb      	str	r3, [r7, #12]
 8005520:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005522:	2301      	movs	r3, #1
 8005524:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005526:	4b79      	ldr	r3, [pc, #484]	@ (800570c <HAL_RCC_OscConfig+0x4bc>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800552e:	2b00      	cmp	r3, #0
 8005530:	d118      	bne.n	8005564 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005532:	4b76      	ldr	r3, [pc, #472]	@ (800570c <HAL_RCC_OscConfig+0x4bc>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a75      	ldr	r2, [pc, #468]	@ (800570c <HAL_RCC_OscConfig+0x4bc>)
 8005538:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800553c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800553e:	f7fe ff73 	bl	8004428 <HAL_GetTick>
 8005542:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005544:	e008      	b.n	8005558 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005546:	f7fe ff6f 	bl	8004428 <HAL_GetTick>
 800554a:	4602      	mov	r2, r0
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	1ad3      	subs	r3, r2, r3
 8005550:	2b02      	cmp	r3, #2
 8005552:	d901      	bls.n	8005558 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e183      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005558:	4b6c      	ldr	r3, [pc, #432]	@ (800570c <HAL_RCC_OscConfig+0x4bc>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005560:	2b00      	cmp	r3, #0
 8005562:	d0f0      	beq.n	8005546 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	689b      	ldr	r3, [r3, #8]
 8005568:	2b01      	cmp	r3, #1
 800556a:	d108      	bne.n	800557e <HAL_RCC_OscConfig+0x32e>
 800556c:	4b66      	ldr	r3, [pc, #408]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 800556e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005572:	4a65      	ldr	r2, [pc, #404]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005574:	f043 0301 	orr.w	r3, r3, #1
 8005578:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800557c:	e024      	b.n	80055c8 <HAL_RCC_OscConfig+0x378>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	689b      	ldr	r3, [r3, #8]
 8005582:	2b05      	cmp	r3, #5
 8005584:	d110      	bne.n	80055a8 <HAL_RCC_OscConfig+0x358>
 8005586:	4b60      	ldr	r3, [pc, #384]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005588:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800558c:	4a5e      	ldr	r2, [pc, #376]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 800558e:	f043 0304 	orr.w	r3, r3, #4
 8005592:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005596:	4b5c      	ldr	r3, [pc, #368]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800559c:	4a5a      	ldr	r2, [pc, #360]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 800559e:	f043 0301 	orr.w	r3, r3, #1
 80055a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055a6:	e00f      	b.n	80055c8 <HAL_RCC_OscConfig+0x378>
 80055a8:	4b57      	ldr	r3, [pc, #348]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80055aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055ae:	4a56      	ldr	r2, [pc, #344]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80055b0:	f023 0301 	bic.w	r3, r3, #1
 80055b4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055b8:	4b53      	ldr	r3, [pc, #332]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80055ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055be:	4a52      	ldr	r2, [pc, #328]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80055c0:	f023 0304 	bic.w	r3, r3, #4
 80055c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d016      	beq.n	80055fe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d0:	f7fe ff2a 	bl	8004428 <HAL_GetTick>
 80055d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055d6:	e00a      	b.n	80055ee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80055d8:	f7fe ff26 	bl	8004428 <HAL_GetTick>
 80055dc:	4602      	mov	r2, r0
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	1ad3      	subs	r3, r2, r3
 80055e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d901      	bls.n	80055ee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80055ea:	2303      	movs	r3, #3
 80055ec:	e138      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80055ee:	4b46      	ldr	r3, [pc, #280]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80055f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055f4:	f003 0302 	and.w	r3, r3, #2
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d0ed      	beq.n	80055d8 <HAL_RCC_OscConfig+0x388>
 80055fc:	e015      	b.n	800562a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055fe:	f7fe ff13 	bl	8004428 <HAL_GetTick>
 8005602:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005604:	e00a      	b.n	800561c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005606:	f7fe ff0f 	bl	8004428 <HAL_GetTick>
 800560a:	4602      	mov	r2, r0
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	1ad3      	subs	r3, r2, r3
 8005610:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005614:	4293      	cmp	r3, r2
 8005616:	d901      	bls.n	800561c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005618:	2303      	movs	r3, #3
 800561a:	e121      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800561c:	4b3a      	ldr	r3, [pc, #232]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 800561e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005622:	f003 0302 	and.w	r3, r3, #2
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1ed      	bne.n	8005606 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800562a:	7ffb      	ldrb	r3, [r7, #31]
 800562c:	2b01      	cmp	r3, #1
 800562e:	d105      	bne.n	800563c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005630:	4b35      	ldr	r3, [pc, #212]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005632:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005634:	4a34      	ldr	r2, [pc, #208]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005636:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800563a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0320 	and.w	r3, r3, #32
 8005644:	2b00      	cmp	r3, #0
 8005646:	d03c      	beq.n	80056c2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d01c      	beq.n	800568a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005650:	4b2d      	ldr	r3, [pc, #180]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005652:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005656:	4a2c      	ldr	r2, [pc, #176]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005658:	f043 0301 	orr.w	r3, r3, #1
 800565c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005660:	f7fe fee2 	bl	8004428 <HAL_GetTick>
 8005664:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005666:	e008      	b.n	800567a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005668:	f7fe fede 	bl	8004428 <HAL_GetTick>
 800566c:	4602      	mov	r2, r0
 800566e:	693b      	ldr	r3, [r7, #16]
 8005670:	1ad3      	subs	r3, r2, r3
 8005672:	2b02      	cmp	r3, #2
 8005674:	d901      	bls.n	800567a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e0f2      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800567a:	4b23      	ldr	r3, [pc, #140]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 800567c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005680:	f003 0302 	and.w	r3, r3, #2
 8005684:	2b00      	cmp	r3, #0
 8005686:	d0ef      	beq.n	8005668 <HAL_RCC_OscConfig+0x418>
 8005688:	e01b      	b.n	80056c2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800568a:	4b1f      	ldr	r3, [pc, #124]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 800568c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005690:	4a1d      	ldr	r2, [pc, #116]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 8005692:	f023 0301 	bic.w	r3, r3, #1
 8005696:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800569a:	f7fe fec5 	bl	8004428 <HAL_GetTick>
 800569e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056a0:	e008      	b.n	80056b4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056a2:	f7fe fec1 	bl	8004428 <HAL_GetTick>
 80056a6:	4602      	mov	r2, r0
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	1ad3      	subs	r3, r2, r3
 80056ac:	2b02      	cmp	r3, #2
 80056ae:	d901      	bls.n	80056b4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e0d5      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80056b4:	4b14      	ldr	r3, [pc, #80]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80056b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1ef      	bne.n	80056a2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	69db      	ldr	r3, [r3, #28]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	f000 80c9 	beq.w	800585e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056cc:	4b0e      	ldr	r3, [pc, #56]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f003 030c 	and.w	r3, r3, #12
 80056d4:	2b0c      	cmp	r3, #12
 80056d6:	f000 8083 	beq.w	80057e0 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	2b02      	cmp	r3, #2
 80056e0:	d15e      	bne.n	80057a0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056e2:	4b09      	ldr	r3, [pc, #36]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a08      	ldr	r2, [pc, #32]	@ (8005708 <HAL_RCC_OscConfig+0x4b8>)
 80056e8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80056ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ee:	f7fe fe9b 	bl	8004428 <HAL_GetTick>
 80056f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056f4:	e00c      	b.n	8005710 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056f6:	f7fe fe97 	bl	8004428 <HAL_GetTick>
 80056fa:	4602      	mov	r2, r0
 80056fc:	693b      	ldr	r3, [r7, #16]
 80056fe:	1ad3      	subs	r3, r2, r3
 8005700:	2b02      	cmp	r3, #2
 8005702:	d905      	bls.n	8005710 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005704:	2303      	movs	r3, #3
 8005706:	e0ab      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
 8005708:	40021000 	.word	0x40021000
 800570c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005710:	4b55      	ldr	r3, [pc, #340]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1ec      	bne.n	80056f6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800571c:	4b52      	ldr	r3, [pc, #328]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 800571e:	68da      	ldr	r2, [r3, #12]
 8005720:	4b52      	ldr	r3, [pc, #328]	@ (800586c <HAL_RCC_OscConfig+0x61c>)
 8005722:	4013      	ands	r3, r2
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6a11      	ldr	r1, [r2, #32]
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800572c:	3a01      	subs	r2, #1
 800572e:	0112      	lsls	r2, r2, #4
 8005730:	4311      	orrs	r1, r2
 8005732:	687a      	ldr	r2, [r7, #4]
 8005734:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005736:	0212      	lsls	r2, r2, #8
 8005738:	4311      	orrs	r1, r2
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800573e:	0852      	lsrs	r2, r2, #1
 8005740:	3a01      	subs	r2, #1
 8005742:	0552      	lsls	r2, r2, #21
 8005744:	4311      	orrs	r1, r2
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800574a:	0852      	lsrs	r2, r2, #1
 800574c:	3a01      	subs	r2, #1
 800574e:	0652      	lsls	r2, r2, #25
 8005750:	4311      	orrs	r1, r2
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005756:	06d2      	lsls	r2, r2, #27
 8005758:	430a      	orrs	r2, r1
 800575a:	4943      	ldr	r1, [pc, #268]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 800575c:	4313      	orrs	r3, r2
 800575e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005760:	4b41      	ldr	r3, [pc, #260]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a40      	ldr	r2, [pc, #256]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 8005766:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800576a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800576c:	4b3e      	ldr	r3, [pc, #248]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	4a3d      	ldr	r2, [pc, #244]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 8005772:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005776:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005778:	f7fe fe56 	bl	8004428 <HAL_GetTick>
 800577c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800577e:	e008      	b.n	8005792 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005780:	f7fe fe52 	bl	8004428 <HAL_GetTick>
 8005784:	4602      	mov	r2, r0
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	1ad3      	subs	r3, r2, r3
 800578a:	2b02      	cmp	r3, #2
 800578c:	d901      	bls.n	8005792 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800578e:	2303      	movs	r3, #3
 8005790:	e066      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005792:	4b35      	ldr	r3, [pc, #212]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d0f0      	beq.n	8005780 <HAL_RCC_OscConfig+0x530>
 800579e:	e05e      	b.n	800585e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057a0:	4b31      	ldr	r3, [pc, #196]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a30      	ldr	r2, [pc, #192]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 80057a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ac:	f7fe fe3c 	bl	8004428 <HAL_GetTick>
 80057b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057b2:	e008      	b.n	80057c6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057b4:	f7fe fe38 	bl	8004428 <HAL_GetTick>
 80057b8:	4602      	mov	r2, r0
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	1ad3      	subs	r3, r2, r3
 80057be:	2b02      	cmp	r3, #2
 80057c0:	d901      	bls.n	80057c6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80057c2:	2303      	movs	r3, #3
 80057c4:	e04c      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057c6:	4b28      	ldr	r3, [pc, #160]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1f0      	bne.n	80057b4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80057d2:	4b25      	ldr	r3, [pc, #148]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 80057d4:	68da      	ldr	r2, [r3, #12]
 80057d6:	4924      	ldr	r1, [pc, #144]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 80057d8:	4b25      	ldr	r3, [pc, #148]	@ (8005870 <HAL_RCC_OscConfig+0x620>)
 80057da:	4013      	ands	r3, r2
 80057dc:	60cb      	str	r3, [r1, #12]
 80057de:	e03e      	b.n	800585e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	69db      	ldr	r3, [r3, #28]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d101      	bne.n	80057ec <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	e039      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80057ec:	4b1e      	ldr	r3, [pc, #120]	@ (8005868 <HAL_RCC_OscConfig+0x618>)
 80057ee:	68db      	ldr	r3, [r3, #12]
 80057f0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f003 0203 	and.w	r2, r3, #3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	6a1b      	ldr	r3, [r3, #32]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d12c      	bne.n	800585a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580a:	3b01      	subs	r3, #1
 800580c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800580e:	429a      	cmp	r2, r3
 8005810:	d123      	bne.n	800585a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800581e:	429a      	cmp	r2, r3
 8005820:	d11b      	bne.n	800585a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800582c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800582e:	429a      	cmp	r2, r3
 8005830:	d113      	bne.n	800585a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005832:	697b      	ldr	r3, [r7, #20]
 8005834:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800583c:	085b      	lsrs	r3, r3, #1
 800583e:	3b01      	subs	r3, #1
 8005840:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005842:	429a      	cmp	r2, r3
 8005844:	d109      	bne.n	800585a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005850:	085b      	lsrs	r3, r3, #1
 8005852:	3b01      	subs	r3, #1
 8005854:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005856:	429a      	cmp	r2, r3
 8005858:	d001      	beq.n	800585e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e000      	b.n	8005860 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	4618      	mov	r0, r3
 8005862:	3720      	adds	r7, #32
 8005864:	46bd      	mov	sp, r7
 8005866:	bd80      	pop	{r7, pc}
 8005868:	40021000 	.word	0x40021000
 800586c:	019f800c 	.word	0x019f800c
 8005870:	feeefffc 	.word	0xfeeefffc

08005874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b086      	sub	sp, #24
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800587e:	2300      	movs	r3, #0
 8005880:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d101      	bne.n	800588c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e11e      	b.n	8005aca <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800588c:	4b91      	ldr	r3, [pc, #580]	@ (8005ad4 <HAL_RCC_ClockConfig+0x260>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 030f 	and.w	r3, r3, #15
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	429a      	cmp	r2, r3
 8005898:	d910      	bls.n	80058bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800589a:	4b8e      	ldr	r3, [pc, #568]	@ (8005ad4 <HAL_RCC_ClockConfig+0x260>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f023 020f 	bic.w	r2, r3, #15
 80058a2:	498c      	ldr	r1, [pc, #560]	@ (8005ad4 <HAL_RCC_ClockConfig+0x260>)
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	4313      	orrs	r3, r2
 80058a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80058aa:	4b8a      	ldr	r3, [pc, #552]	@ (8005ad4 <HAL_RCC_ClockConfig+0x260>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f003 030f 	and.w	r3, r3, #15
 80058b2:	683a      	ldr	r2, [r7, #0]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d001      	beq.n	80058bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e106      	b.n	8005aca <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f003 0301 	and.w	r3, r3, #1
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d073      	beq.n	80059b0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	2b03      	cmp	r3, #3
 80058ce:	d129      	bne.n	8005924 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058d0:	4b81      	ldr	r3, [pc, #516]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d101      	bne.n	80058e0 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80058dc:	2301      	movs	r3, #1
 80058de:	e0f4      	b.n	8005aca <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80058e0:	f000 f99e 	bl	8005c20 <RCC_GetSysClockFreqFromPLLSource>
 80058e4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	4a7c      	ldr	r2, [pc, #496]	@ (8005adc <HAL_RCC_ClockConfig+0x268>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d93f      	bls.n	800596e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80058ee:	4b7a      	ldr	r3, [pc, #488]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d009      	beq.n	800590e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005902:	2b00      	cmp	r3, #0
 8005904:	d033      	beq.n	800596e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800590a:	2b00      	cmp	r3, #0
 800590c:	d12f      	bne.n	800596e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800590e:	4b72      	ldr	r3, [pc, #456]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005916:	4a70      	ldr	r2, [pc, #448]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005918:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800591c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800591e:	2380      	movs	r3, #128	@ 0x80
 8005920:	617b      	str	r3, [r7, #20]
 8005922:	e024      	b.n	800596e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	2b02      	cmp	r3, #2
 800592a:	d107      	bne.n	800593c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800592c:	4b6a      	ldr	r3, [pc, #424]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d109      	bne.n	800594c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e0c6      	b.n	8005aca <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800593c:	4b66      	ldr	r3, [pc, #408]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005944:	2b00      	cmp	r3, #0
 8005946:	d101      	bne.n	800594c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	e0be      	b.n	8005aca <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800594c:	f000 f8ce 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 8005950:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	4a61      	ldr	r2, [pc, #388]	@ (8005adc <HAL_RCC_ClockConfig+0x268>)
 8005956:	4293      	cmp	r3, r2
 8005958:	d909      	bls.n	800596e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800595a:	4b5f      	ldr	r3, [pc, #380]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005962:	4a5d      	ldr	r2, [pc, #372]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005964:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005968:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800596a:	2380      	movs	r3, #128	@ 0x80
 800596c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800596e:	4b5a      	ldr	r3, [pc, #360]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	f023 0203 	bic.w	r2, r3, #3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	4957      	ldr	r1, [pc, #348]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 800597c:	4313      	orrs	r3, r2
 800597e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005980:	f7fe fd52 	bl	8004428 <HAL_GetTick>
 8005984:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005986:	e00a      	b.n	800599e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005988:	f7fe fd4e 	bl	8004428 <HAL_GetTick>
 800598c:	4602      	mov	r2, r0
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	1ad3      	subs	r3, r2, r3
 8005992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005996:	4293      	cmp	r3, r2
 8005998:	d901      	bls.n	800599e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800599a:	2303      	movs	r3, #3
 800599c:	e095      	b.n	8005aca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800599e:	4b4e      	ldr	r3, [pc, #312]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f003 020c 	and.w	r2, r3, #12
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d1eb      	bne.n	8005988 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 0302 	and.w	r3, r3, #2
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d023      	beq.n	8005a04 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0304 	and.w	r3, r3, #4
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d005      	beq.n	80059d4 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059c8:	4b43      	ldr	r3, [pc, #268]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	4a42      	ldr	r2, [pc, #264]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80059ce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80059d2:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0308 	and.w	r3, r3, #8
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d007      	beq.n	80059f0 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80059e0:	4b3d      	ldr	r3, [pc, #244]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80059e8:	4a3b      	ldr	r2, [pc, #236]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80059ea:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80059ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059f0:	4b39      	ldr	r3, [pc, #228]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80059f2:	689b      	ldr	r3, [r3, #8]
 80059f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	689b      	ldr	r3, [r3, #8]
 80059fc:	4936      	ldr	r1, [pc, #216]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 80059fe:	4313      	orrs	r3, r2
 8005a00:	608b      	str	r3, [r1, #8]
 8005a02:	e008      	b.n	8005a16 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	2b80      	cmp	r3, #128	@ 0x80
 8005a08:	d105      	bne.n	8005a16 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005a0a:	4b33      	ldr	r3, [pc, #204]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005a0c:	689b      	ldr	r3, [r3, #8]
 8005a0e:	4a32      	ldr	r2, [pc, #200]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005a10:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a14:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a16:	4b2f      	ldr	r3, [pc, #188]	@ (8005ad4 <HAL_RCC_ClockConfig+0x260>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 030f 	and.w	r3, r3, #15
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d21d      	bcs.n	8005a60 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a24:	4b2b      	ldr	r3, [pc, #172]	@ (8005ad4 <HAL_RCC_ClockConfig+0x260>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f023 020f 	bic.w	r2, r3, #15
 8005a2c:	4929      	ldr	r1, [pc, #164]	@ (8005ad4 <HAL_RCC_ClockConfig+0x260>)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	4313      	orrs	r3, r2
 8005a32:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005a34:	f7fe fcf8 	bl	8004428 <HAL_GetTick>
 8005a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a3a:	e00a      	b.n	8005a52 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a3c:	f7fe fcf4 	bl	8004428 <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d901      	bls.n	8005a52 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005a4e:	2303      	movs	r3, #3
 8005a50:	e03b      	b.n	8005aca <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a52:	4b20      	ldr	r3, [pc, #128]	@ (8005ad4 <HAL_RCC_ClockConfig+0x260>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f003 030f 	and.w	r3, r3, #15
 8005a5a:	683a      	ldr	r2, [r7, #0]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d1ed      	bne.n	8005a3c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0304 	and.w	r3, r3, #4
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d008      	beq.n	8005a7e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a6c:	4b1a      	ldr	r3, [pc, #104]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68db      	ldr	r3, [r3, #12]
 8005a78:	4917      	ldr	r1, [pc, #92]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0308 	and.w	r3, r3, #8
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d009      	beq.n	8005a9e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a8a:	4b13      	ldr	r3, [pc, #76]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	00db      	lsls	r3, r3, #3
 8005a98:	490f      	ldr	r1, [pc, #60]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005a9e:	f000 f825 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	4b0c      	ldr	r3, [pc, #48]	@ (8005ad8 <HAL_RCC_ClockConfig+0x264>)
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	091b      	lsrs	r3, r3, #4
 8005aaa:	f003 030f 	and.w	r3, r3, #15
 8005aae:	490c      	ldr	r1, [pc, #48]	@ (8005ae0 <HAL_RCC_ClockConfig+0x26c>)
 8005ab0:	5ccb      	ldrb	r3, [r1, r3]
 8005ab2:	f003 031f 	and.w	r3, r3, #31
 8005ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8005aba:	4a0a      	ldr	r2, [pc, #40]	@ (8005ae4 <HAL_RCC_ClockConfig+0x270>)
 8005abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005abe:	4b0a      	ldr	r3, [pc, #40]	@ (8005ae8 <HAL_RCC_ClockConfig+0x274>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f7fe fc64 	bl	8004390 <HAL_InitTick>
 8005ac8:	4603      	mov	r3, r0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3718      	adds	r7, #24
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	40022000 	.word	0x40022000
 8005ad8:	40021000 	.word	0x40021000
 8005adc:	04c4b400 	.word	0x04c4b400
 8005ae0:	0800a18c 	.word	0x0800a18c
 8005ae4:	2000022c 	.word	0x2000022c
 8005ae8:	20000230 	.word	0x20000230

08005aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b087      	sub	sp, #28
 8005af0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005af2:	4b2c      	ldr	r3, [pc, #176]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 030c 	and.w	r3, r3, #12
 8005afa:	2b04      	cmp	r3, #4
 8005afc:	d102      	bne.n	8005b04 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005afe:	4b2a      	ldr	r3, [pc, #168]	@ (8005ba8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b00:	613b      	str	r3, [r7, #16]
 8005b02:	e047      	b.n	8005b94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005b04:	4b27      	ldr	r3, [pc, #156]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f003 030c 	and.w	r3, r3, #12
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d102      	bne.n	8005b16 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b10:	4b26      	ldr	r3, [pc, #152]	@ (8005bac <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b12:	613b      	str	r3, [r7, #16]
 8005b14:	e03e      	b.n	8005b94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005b16:	4b23      	ldr	r3, [pc, #140]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b18:	689b      	ldr	r3, [r3, #8]
 8005b1a:	f003 030c 	and.w	r3, r3, #12
 8005b1e:	2b0c      	cmp	r3, #12
 8005b20:	d136      	bne.n	8005b90 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b22:	4b20      	ldr	r3, [pc, #128]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b24:	68db      	ldr	r3, [r3, #12]
 8005b26:	f003 0303 	and.w	r3, r3, #3
 8005b2a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005b2c:	4b1d      	ldr	r3, [pc, #116]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	091b      	lsrs	r3, r3, #4
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	3301      	adds	r3, #1
 8005b38:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2b03      	cmp	r3, #3
 8005b3e:	d10c      	bne.n	8005b5a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b40:	4a1a      	ldr	r2, [pc, #104]	@ (8005bac <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b48:	4a16      	ldr	r2, [pc, #88]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b4a:	68d2      	ldr	r2, [r2, #12]
 8005b4c:	0a12      	lsrs	r2, r2, #8
 8005b4e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b52:	fb02 f303 	mul.w	r3, r2, r3
 8005b56:	617b      	str	r3, [r7, #20]
      break;
 8005b58:	e00c      	b.n	8005b74 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005b5a:	4a13      	ldr	r2, [pc, #76]	@ (8005ba8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b62:	4a10      	ldr	r2, [pc, #64]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b64:	68d2      	ldr	r2, [r2, #12]
 8005b66:	0a12      	lsrs	r2, r2, #8
 8005b68:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005b6c:	fb02 f303 	mul.w	r3, r2, r3
 8005b70:	617b      	str	r3, [r7, #20]
      break;
 8005b72:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005b74:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b76:	68db      	ldr	r3, [r3, #12]
 8005b78:	0e5b      	lsrs	r3, r3, #25
 8005b7a:	f003 0303 	and.w	r3, r3, #3
 8005b7e:	3301      	adds	r3, #1
 8005b80:	005b      	lsls	r3, r3, #1
 8005b82:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b8c:	613b      	str	r3, [r7, #16]
 8005b8e:	e001      	b.n	8005b94 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005b94:	693b      	ldr	r3, [r7, #16]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	371c      	adds	r7, #28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	40021000 	.word	0x40021000
 8005ba8:	00f42400 	.word	0x00f42400
 8005bac:	016e3600 	.word	0x016e3600

08005bb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005bb4:	4b03      	ldr	r3, [pc, #12]	@ (8005bc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	2000022c 	.word	0x2000022c

08005bc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005bcc:	f7ff fff0 	bl	8005bb0 <HAL_RCC_GetHCLKFreq>
 8005bd0:	4602      	mov	r2, r0
 8005bd2:	4b06      	ldr	r3, [pc, #24]	@ (8005bec <HAL_RCC_GetPCLK1Freq+0x24>)
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	0a1b      	lsrs	r3, r3, #8
 8005bd8:	f003 0307 	and.w	r3, r3, #7
 8005bdc:	4904      	ldr	r1, [pc, #16]	@ (8005bf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005bde:	5ccb      	ldrb	r3, [r1, r3]
 8005be0:	f003 031f 	and.w	r3, r3, #31
 8005be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	40021000 	.word	0x40021000
 8005bf0:	0800a19c 	.word	0x0800a19c

08005bf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005bf8:	f7ff ffda 	bl	8005bb0 <HAL_RCC_GetHCLKFreq>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	4b06      	ldr	r3, [pc, #24]	@ (8005c18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	0adb      	lsrs	r3, r3, #11
 8005c04:	f003 0307 	and.w	r3, r3, #7
 8005c08:	4904      	ldr	r1, [pc, #16]	@ (8005c1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c0a:	5ccb      	ldrb	r3, [r1, r3]
 8005c0c:	f003 031f 	and.w	r3, r3, #31
 8005c10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	bd80      	pop	{r7, pc}
 8005c18:	40021000 	.word	0x40021000
 8005c1c:	0800a19c 	.word	0x0800a19c

08005c20 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b087      	sub	sp, #28
 8005c24:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c26:	4b1e      	ldr	r3, [pc, #120]	@ (8005ca0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c28:	68db      	ldr	r3, [r3, #12]
 8005c2a:	f003 0303 	and.w	r3, r3, #3
 8005c2e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c30:	4b1b      	ldr	r3, [pc, #108]	@ (8005ca0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	091b      	lsrs	r3, r3, #4
 8005c36:	f003 030f 	and.w	r3, r3, #15
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d10c      	bne.n	8005c5e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c44:	4a17      	ldr	r2, [pc, #92]	@ (8005ca4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c4c:	4a14      	ldr	r2, [pc, #80]	@ (8005ca0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c4e:	68d2      	ldr	r2, [r2, #12]
 8005c50:	0a12      	lsrs	r2, r2, #8
 8005c52:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c56:	fb02 f303 	mul.w	r3, r2, r3
 8005c5a:	617b      	str	r3, [r7, #20]
    break;
 8005c5c:	e00c      	b.n	8005c78 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005c5e:	4a12      	ldr	r2, [pc, #72]	@ (8005ca8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c66:	4a0e      	ldr	r2, [pc, #56]	@ (8005ca0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c68:	68d2      	ldr	r2, [r2, #12]
 8005c6a:	0a12      	lsrs	r2, r2, #8
 8005c6c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005c70:	fb02 f303 	mul.w	r3, r2, r3
 8005c74:	617b      	str	r3, [r7, #20]
    break;
 8005c76:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005c78:	4b09      	ldr	r3, [pc, #36]	@ (8005ca0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c7a:	68db      	ldr	r3, [r3, #12]
 8005c7c:	0e5b      	lsrs	r3, r3, #25
 8005c7e:	f003 0303 	and.w	r3, r3, #3
 8005c82:	3301      	adds	r3, #1
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c90:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005c92:	687b      	ldr	r3, [r7, #4]
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	371c      	adds	r7, #28
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr
 8005ca0:	40021000 	.word	0x40021000
 8005ca4:	016e3600 	.word	0x016e3600
 8005ca8:	00f42400 	.word	0x00f42400

08005cac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b086      	sub	sp, #24
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005cb8:	2300      	movs	r3, #0
 8005cba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	f000 8098 	beq.w	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005cca:	2300      	movs	r3, #0
 8005ccc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cce:	4b43      	ldr	r3, [pc, #268]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10d      	bne.n	8005cf6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cda:	4b40      	ldr	r3, [pc, #256]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cde:	4a3f      	ldr	r2, [pc, #252]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ce0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ce4:	6593      	str	r3, [r2, #88]	@ 0x58
 8005ce6:	4b3d      	ldr	r3, [pc, #244]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005cee:	60bb      	str	r3, [r7, #8]
 8005cf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005cf6:	4b3a      	ldr	r3, [pc, #232]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a39      	ldr	r2, [pc, #228]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005cfc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d00:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d02:	f7fe fb91 	bl	8004428 <HAL_GetTick>
 8005d06:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d08:	e009      	b.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d0a:	f7fe fb8d 	bl	8004428 <HAL_GetTick>
 8005d0e:	4602      	mov	r2, r0
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d902      	bls.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005d18:	2303      	movs	r3, #3
 8005d1a:	74fb      	strb	r3, [r7, #19]
        break;
 8005d1c:	e005      	b.n	8005d2a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d1e:	4b30      	ldr	r3, [pc, #192]	@ (8005de0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d0ef      	beq.n	8005d0a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005d2a:	7cfb      	ldrb	r3, [r7, #19]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d159      	bne.n	8005de4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005d30:	4b2a      	ldr	r3, [pc, #168]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d3a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d01e      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d019      	beq.n	8005d80 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005d4c:	4b23      	ldr	r3, [pc, #140]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d56:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d58:	4b20      	ldr	r3, [pc, #128]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d5e:	4a1f      	ldr	r2, [pc, #124]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d64:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d68:	4b1c      	ldr	r3, [pc, #112]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d6e:	4a1b      	ldr	r2, [pc, #108]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d70:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005d78:	4a18      	ldr	r2, [pc, #96]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005d80:	697b      	ldr	r3, [r7, #20]
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d016      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d8a:	f7fe fb4d 	bl	8004428 <HAL_GetTick>
 8005d8e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005d90:	e00b      	b.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005d92:	f7fe fb49 	bl	8004428 <HAL_GetTick>
 8005d96:	4602      	mov	r2, r0
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	1ad3      	subs	r3, r2, r3
 8005d9c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005da0:	4293      	cmp	r3, r2
 8005da2:	d902      	bls.n	8005daa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005da4:	2303      	movs	r3, #3
 8005da6:	74fb      	strb	r3, [r7, #19]
            break;
 8005da8:	e006      	b.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005daa:	4b0c      	ldr	r3, [pc, #48]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005db0:	f003 0302 	and.w	r3, r3, #2
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d0ec      	beq.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005db8:	7cfb      	ldrb	r3, [r7, #19]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10b      	bne.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005dbe:	4b07      	ldr	r3, [pc, #28]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dc4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dcc:	4903      	ldr	r1, [pc, #12]	@ (8005ddc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005dd4:	e008      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005dd6:	7cfb      	ldrb	r3, [r7, #19]
 8005dd8:	74bb      	strb	r3, [r7, #18]
 8005dda:	e005      	b.n	8005de8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005ddc:	40021000 	.word	0x40021000
 8005de0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de4:	7cfb      	ldrb	r3, [r7, #19]
 8005de6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005de8:	7c7b      	ldrb	r3, [r7, #17]
 8005dea:	2b01      	cmp	r3, #1
 8005dec:	d105      	bne.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dee:	4ba7      	ldr	r3, [pc, #668]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005df2:	4aa6      	ldr	r2, [pc, #664]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005df4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005df8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00a      	beq.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e06:	4ba1      	ldr	r3, [pc, #644]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e0c:	f023 0203 	bic.w	r2, r3, #3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	499d      	ldr	r1, [pc, #628]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e16:	4313      	orrs	r3, r2
 8005e18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f003 0302 	and.w	r3, r3, #2
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d00a      	beq.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e28:	4b98      	ldr	r3, [pc, #608]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e2e:	f023 020c 	bic.w	r2, r3, #12
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	689b      	ldr	r3, [r3, #8]
 8005e36:	4995      	ldr	r1, [pc, #596]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0304 	and.w	r3, r3, #4
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00a      	beq.n	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005e4a:	4b90      	ldr	r3, [pc, #576]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e50:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	498c      	ldr	r1, [pc, #560]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 0308 	and.w	r3, r3, #8
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d00a      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005e6c:	4b87      	ldr	r3, [pc, #540]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e72:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	691b      	ldr	r3, [r3, #16]
 8005e7a:	4984      	ldr	r1, [pc, #528]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0310 	and.w	r3, r3, #16
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00a      	beq.n	8005ea4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005e8e:	4b7f      	ldr	r3, [pc, #508]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e94:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	695b      	ldr	r3, [r3, #20]
 8005e9c:	497b      	ldr	r1, [pc, #492]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f003 0320 	and.w	r3, r3, #32
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00a      	beq.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005eb0:	4b76      	ldr	r3, [pc, #472]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eb6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	4973      	ldr	r1, [pc, #460]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ec0:	4313      	orrs	r3, r2
 8005ec2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d00a      	beq.n	8005ee8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005ed2:	4b6e      	ldr	r3, [pc, #440]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ed8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	69db      	ldr	r3, [r3, #28]
 8005ee0:	496a      	ldr	r1, [pc, #424]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00a      	beq.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005ef4:	4b65      	ldr	r3, [pc, #404]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005efa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	4962      	ldr	r1, [pc, #392]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f04:	4313      	orrs	r3, r2
 8005f06:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00a      	beq.n	8005f2c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f16:	4b5d      	ldr	r3, [pc, #372]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f18:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f1c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f24:	4959      	ldr	r1, [pc, #356]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f26:	4313      	orrs	r3, r2
 8005f28:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00a      	beq.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005f38:	4b54      	ldr	r3, [pc, #336]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005f3e:	f023 0203 	bic.w	r2, r3, #3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f46:	4951      	ldr	r1, [pc, #324]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00a      	beq.n	8005f70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005f5a:	4b4c      	ldr	r3, [pc, #304]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f60:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f68:	4948      	ldr	r1, [pc, #288]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f6a:	4313      	orrs	r3, r2
 8005f6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d015      	beq.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005f7c:	4b43      	ldr	r3, [pc, #268]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f82:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f8a:	4940      	ldr	r1, [pc, #256]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f96:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005f9a:	d105      	bne.n	8005fa8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f9c:	4b3b      	ldr	r3, [pc, #236]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	4a3a      	ldr	r2, [pc, #232]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fa2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fa6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d015      	beq.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005fb4:	4b35      	ldr	r3, [pc, #212]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fba:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fc2:	4932      	ldr	r1, [pc, #200]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005fce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005fd2:	d105      	bne.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fd4:	4b2d      	ldr	r3, [pc, #180]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fd6:	68db      	ldr	r3, [r3, #12]
 8005fd8:	4a2c      	ldr	r2, [pc, #176]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fda:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005fde:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d015      	beq.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005fec:	4b27      	ldr	r3, [pc, #156]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ff2:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ffa:	4924      	ldr	r1, [pc, #144]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006006:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800600a:	d105      	bne.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800600c:	4b1f      	ldr	r3, [pc, #124]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	4a1e      	ldr	r2, [pc, #120]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006012:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006016:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006020:	2b00      	cmp	r3, #0
 8006022:	d015      	beq.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006024:	4b19      	ldr	r3, [pc, #100]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800602a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006032:	4916      	ldr	r1, [pc, #88]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006034:	4313      	orrs	r3, r2
 8006036:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800603e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006042:	d105      	bne.n	8006050 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006044:	4b11      	ldr	r3, [pc, #68]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	4a10      	ldr	r2, [pc, #64]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800604a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800604e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006058:	2b00      	cmp	r3, #0
 800605a:	d019      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800605c:	4b0b      	ldr	r3, [pc, #44]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800605e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006062:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800606a:	4908      	ldr	r1, [pc, #32]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800606c:	4313      	orrs	r3, r2
 800606e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006076:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800607a:	d109      	bne.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800607c:	4b03      	ldr	r3, [pc, #12]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800607e:	68db      	ldr	r3, [r3, #12]
 8006080:	4a02      	ldr	r2, [pc, #8]	@ (800608c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006082:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006086:	60d3      	str	r3, [r2, #12]
 8006088:	e002      	b.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800608a:	bf00      	nop
 800608c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d015      	beq.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800609c:	4b29      	ldr	r3, [pc, #164]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800609e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060a2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060aa:	4926      	ldr	r1, [pc, #152]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060b6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80060ba:	d105      	bne.n	80060c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80060bc:	4b21      	ldr	r3, [pc, #132]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	4a20      	ldr	r2, [pc, #128]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060c6:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d015      	beq.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80060d4:	4b1b      	ldr	r3, [pc, #108]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060da:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060e2:	4918      	ldr	r1, [pc, #96]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060e4:	4313      	orrs	r3, r2
 80060e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80060ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060f2:	d105      	bne.n	8006100 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80060f4:	4b13      	ldr	r3, [pc, #76]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	4a12      	ldr	r2, [pc, #72]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80060fa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060fe:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006108:	2b00      	cmp	r3, #0
 800610a:	d015      	beq.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800610c:	4b0d      	ldr	r3, [pc, #52]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800610e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006112:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800611a:	490a      	ldr	r1, [pc, #40]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800611c:	4313      	orrs	r3, r2
 800611e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006126:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800612a:	d105      	bne.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800612c:	4b05      	ldr	r3, [pc, #20]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800612e:	68db      	ldr	r3, [r3, #12]
 8006130:	4a04      	ldr	r2, [pc, #16]	@ (8006144 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006132:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006136:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006138:	7cbb      	ldrb	r3, [r7, #18]
}
 800613a:	4618      	mov	r0, r3
 800613c:	3718      	adds	r7, #24
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	40021000 	.word	0x40021000

08006148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b082      	sub	sp, #8
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d101      	bne.n	800615a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006156:	2301      	movs	r3, #1
 8006158:	e054      	b.n	8006204 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006160:	b2db      	uxtb	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	d111      	bne.n	800618a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f001 fee2 	bl	8007f38 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006178:	2b00      	cmp	r3, #0
 800617a:	d102      	bne.n	8006182 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	4a23      	ldr	r2, [pc, #140]	@ (800620c <HAL_TIM_Base_Init+0xc4>)
 8006180:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2202      	movs	r2, #2
 800618e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	3304      	adds	r3, #4
 800619a:	4619      	mov	r1, r3
 800619c:	4610      	mov	r0, r2
 800619e:	f001 fa2b 	bl	80075f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2201      	movs	r2, #1
 80061a6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	2201      	movs	r2, #1
 80061b6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2201      	movs	r2, #1
 80061be:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2201      	movs	r2, #1
 80061ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2201      	movs	r2, #1
 80061d6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2201      	movs	r2, #1
 80061de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2201      	movs	r2, #1
 80061e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2201      	movs	r2, #1
 80061fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006202:	2300      	movs	r3, #0
}
 8006204:	4618      	mov	r0, r3
 8006206:	3708      	adds	r7, #8
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	08003ead 	.word	0x08003ead

08006210 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006210:	b480      	push	{r7}
 8006212:	b085      	sub	sp, #20
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b01      	cmp	r3, #1
 8006222:	d001      	beq.n	8006228 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e04c      	b.n	80062c2 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a26      	ldr	r2, [pc, #152]	@ (80062d0 <HAL_TIM_Base_Start+0xc0>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d022      	beq.n	8006280 <HAL_TIM_Base_Start+0x70>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006242:	d01d      	beq.n	8006280 <HAL_TIM_Base_Start+0x70>
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4a22      	ldr	r2, [pc, #136]	@ (80062d4 <HAL_TIM_Base_Start+0xc4>)
 800624a:	4293      	cmp	r3, r2
 800624c:	d018      	beq.n	8006280 <HAL_TIM_Base_Start+0x70>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	4a21      	ldr	r2, [pc, #132]	@ (80062d8 <HAL_TIM_Base_Start+0xc8>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d013      	beq.n	8006280 <HAL_TIM_Base_Start+0x70>
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4a1f      	ldr	r2, [pc, #124]	@ (80062dc <HAL_TIM_Base_Start+0xcc>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d00e      	beq.n	8006280 <HAL_TIM_Base_Start+0x70>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	4a1e      	ldr	r2, [pc, #120]	@ (80062e0 <HAL_TIM_Base_Start+0xd0>)
 8006268:	4293      	cmp	r3, r2
 800626a:	d009      	beq.n	8006280 <HAL_TIM_Base_Start+0x70>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a1c      	ldr	r2, [pc, #112]	@ (80062e4 <HAL_TIM_Base_Start+0xd4>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d004      	beq.n	8006280 <HAL_TIM_Base_Start+0x70>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	4a1b      	ldr	r2, [pc, #108]	@ (80062e8 <HAL_TIM_Base_Start+0xd8>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d115      	bne.n	80062ac <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689a      	ldr	r2, [r3, #8]
 8006286:	4b19      	ldr	r3, [pc, #100]	@ (80062ec <HAL_TIM_Base_Start+0xdc>)
 8006288:	4013      	ands	r3, r2
 800628a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2b06      	cmp	r3, #6
 8006290:	d015      	beq.n	80062be <HAL_TIM_Base_Start+0xae>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006298:	d011      	beq.n	80062be <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	681a      	ldr	r2, [r3, #0]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f042 0201 	orr.w	r2, r2, #1
 80062a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062aa:	e008      	b.n	80062be <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681a      	ldr	r2, [r3, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0201 	orr.w	r2, r2, #1
 80062ba:	601a      	str	r2, [r3, #0]
 80062bc:	e000      	b.n	80062c0 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3714      	adds	r7, #20
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	40012c00 	.word	0x40012c00
 80062d4:	40000400 	.word	0x40000400
 80062d8:	40000800 	.word	0x40000800
 80062dc:	40000c00 	.word	0x40000c00
 80062e0:	40013400 	.word	0x40013400
 80062e4:	40014000 	.word	0x40014000
 80062e8:	40015000 	.word	0x40015000
 80062ec:	00010007 	.word	0x00010007

080062f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	2b01      	cmp	r3, #1
 8006302:	d001      	beq.n	8006308 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e054      	b.n	80063b2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2202      	movs	r2, #2
 800630c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	68da      	ldr	r2, [r3, #12]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f042 0201 	orr.w	r2, r2, #1
 800631e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a26      	ldr	r2, [pc, #152]	@ (80063c0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d022      	beq.n	8006370 <HAL_TIM_Base_Start_IT+0x80>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006332:	d01d      	beq.n	8006370 <HAL_TIM_Base_Start_IT+0x80>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a22      	ldr	r2, [pc, #136]	@ (80063c4 <HAL_TIM_Base_Start_IT+0xd4>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d018      	beq.n	8006370 <HAL_TIM_Base_Start_IT+0x80>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a21      	ldr	r2, [pc, #132]	@ (80063c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d013      	beq.n	8006370 <HAL_TIM_Base_Start_IT+0x80>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a1f      	ldr	r2, [pc, #124]	@ (80063cc <HAL_TIM_Base_Start_IT+0xdc>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d00e      	beq.n	8006370 <HAL_TIM_Base_Start_IT+0x80>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a1e      	ldr	r2, [pc, #120]	@ (80063d0 <HAL_TIM_Base_Start_IT+0xe0>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d009      	beq.n	8006370 <HAL_TIM_Base_Start_IT+0x80>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a1c      	ldr	r2, [pc, #112]	@ (80063d4 <HAL_TIM_Base_Start_IT+0xe4>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d004      	beq.n	8006370 <HAL_TIM_Base_Start_IT+0x80>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a1b      	ldr	r2, [pc, #108]	@ (80063d8 <HAL_TIM_Base_Start_IT+0xe8>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d115      	bne.n	800639c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	689a      	ldr	r2, [r3, #8]
 8006376:	4b19      	ldr	r3, [pc, #100]	@ (80063dc <HAL_TIM_Base_Start_IT+0xec>)
 8006378:	4013      	ands	r3, r2
 800637a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	2b06      	cmp	r3, #6
 8006380:	d015      	beq.n	80063ae <HAL_TIM_Base_Start_IT+0xbe>
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006388:	d011      	beq.n	80063ae <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f042 0201 	orr.w	r2, r2, #1
 8006398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800639a:	e008      	b.n	80063ae <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	681a      	ldr	r2, [r3, #0]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f042 0201 	orr.w	r2, r2, #1
 80063aa:	601a      	str	r2, [r3, #0]
 80063ac:	e000      	b.n	80063b0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3714      	adds	r7, #20
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr
 80063be:	bf00      	nop
 80063c0:	40012c00 	.word	0x40012c00
 80063c4:	40000400 	.word	0x40000400
 80063c8:	40000800 	.word	0x40000800
 80063cc:	40000c00 	.word	0x40000c00
 80063d0:	40013400 	.word	0x40013400
 80063d4:	40014000 	.word	0x40014000
 80063d8:	40015000 	.word	0x40015000
 80063dc:	00010007 	.word	0x00010007

080063e0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80063e0:	b580      	push	{r7, lr}
 80063e2:	b082      	sub	sp, #8
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d101      	bne.n	80063f2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	e054      	b.n	800649c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d111      	bne.n	8006422 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	2200      	movs	r2, #0
 8006402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f001 fd96 	bl	8007f38 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006410:	2b00      	cmp	r3, #0
 8006412:	d102      	bne.n	800641a <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	4a23      	ldr	r2, [pc, #140]	@ (80064a4 <HAL_TIM_PWM_Init+0xc4>)
 8006418:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2202      	movs	r2, #2
 8006426:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	3304      	adds	r3, #4
 8006432:	4619      	mov	r1, r3
 8006434:	4610      	mov	r0, r2
 8006436:	f001 f8df 	bl	80075f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	2201      	movs	r2, #1
 8006446:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2201      	movs	r2, #1
 800644e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2201      	movs	r2, #1
 8006456:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2201      	movs	r2, #1
 800645e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2201      	movs	r2, #1
 800646e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2201      	movs	r2, #1
 800647e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2201      	movs	r2, #1
 800648e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2201      	movs	r2, #1
 8006496:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800649a:	2300      	movs	r3, #0
}
 800649c:	4618      	mov	r0, r3
 800649e:	3708      	adds	r7, #8
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	08003e61 	.word	0x08003e61

080064a8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b084      	sub	sp, #16
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d109      	bne.n	80064cc <HAL_TIM_PWM_Start+0x24>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	bf14      	ite	ne
 80064c4:	2301      	movne	r3, #1
 80064c6:	2300      	moveq	r3, #0
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	e03c      	b.n	8006546 <HAL_TIM_PWM_Start+0x9e>
 80064cc:	683b      	ldr	r3, [r7, #0]
 80064ce:	2b04      	cmp	r3, #4
 80064d0:	d109      	bne.n	80064e6 <HAL_TIM_PWM_Start+0x3e>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	2b01      	cmp	r3, #1
 80064dc:	bf14      	ite	ne
 80064de:	2301      	movne	r3, #1
 80064e0:	2300      	moveq	r3, #0
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	e02f      	b.n	8006546 <HAL_TIM_PWM_Start+0x9e>
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	2b08      	cmp	r3, #8
 80064ea:	d109      	bne.n	8006500 <HAL_TIM_PWM_Start+0x58>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	2b01      	cmp	r3, #1
 80064f6:	bf14      	ite	ne
 80064f8:	2301      	movne	r3, #1
 80064fa:	2300      	moveq	r3, #0
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	e022      	b.n	8006546 <HAL_TIM_PWM_Start+0x9e>
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	2b0c      	cmp	r3, #12
 8006504:	d109      	bne.n	800651a <HAL_TIM_PWM_Start+0x72>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800650c:	b2db      	uxtb	r3, r3
 800650e:	2b01      	cmp	r3, #1
 8006510:	bf14      	ite	ne
 8006512:	2301      	movne	r3, #1
 8006514:	2300      	moveq	r3, #0
 8006516:	b2db      	uxtb	r3, r3
 8006518:	e015      	b.n	8006546 <HAL_TIM_PWM_Start+0x9e>
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	2b10      	cmp	r3, #16
 800651e:	d109      	bne.n	8006534 <HAL_TIM_PWM_Start+0x8c>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006526:	b2db      	uxtb	r3, r3
 8006528:	2b01      	cmp	r3, #1
 800652a:	bf14      	ite	ne
 800652c:	2301      	movne	r3, #1
 800652e:	2300      	moveq	r3, #0
 8006530:	b2db      	uxtb	r3, r3
 8006532:	e008      	b.n	8006546 <HAL_TIM_PWM_Start+0x9e>
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b01      	cmp	r3, #1
 800653e:	bf14      	ite	ne
 8006540:	2301      	movne	r3, #1
 8006542:	2300      	moveq	r3, #0
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b00      	cmp	r3, #0
 8006548:	d001      	beq.n	800654e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	e0a6      	b.n	800669c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d104      	bne.n	800655e <HAL_TIM_PWM_Start+0xb6>
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2202      	movs	r2, #2
 8006558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800655c:	e023      	b.n	80065a6 <HAL_TIM_PWM_Start+0xfe>
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	2b04      	cmp	r3, #4
 8006562:	d104      	bne.n	800656e <HAL_TIM_PWM_Start+0xc6>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2202      	movs	r2, #2
 8006568:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800656c:	e01b      	b.n	80065a6 <HAL_TIM_PWM_Start+0xfe>
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2b08      	cmp	r3, #8
 8006572:	d104      	bne.n	800657e <HAL_TIM_PWM_Start+0xd6>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800657c:	e013      	b.n	80065a6 <HAL_TIM_PWM_Start+0xfe>
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2b0c      	cmp	r3, #12
 8006582:	d104      	bne.n	800658e <HAL_TIM_PWM_Start+0xe6>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800658c:	e00b      	b.n	80065a6 <HAL_TIM_PWM_Start+0xfe>
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	2b10      	cmp	r3, #16
 8006592:	d104      	bne.n	800659e <HAL_TIM_PWM_Start+0xf6>
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2202      	movs	r2, #2
 8006598:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800659c:	e003      	b.n	80065a6 <HAL_TIM_PWM_Start+0xfe>
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2202      	movs	r2, #2
 80065a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	2201      	movs	r2, #1
 80065ac:	6839      	ldr	r1, [r7, #0]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f001 fc9c 	bl	8007eec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4a3a      	ldr	r2, [pc, #232]	@ (80066a4 <HAL_TIM_PWM_Start+0x1fc>)
 80065ba:	4293      	cmp	r3, r2
 80065bc:	d018      	beq.n	80065f0 <HAL_TIM_PWM_Start+0x148>
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a39      	ldr	r2, [pc, #228]	@ (80066a8 <HAL_TIM_PWM_Start+0x200>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d013      	beq.n	80065f0 <HAL_TIM_PWM_Start+0x148>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a37      	ldr	r2, [pc, #220]	@ (80066ac <HAL_TIM_PWM_Start+0x204>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d00e      	beq.n	80065f0 <HAL_TIM_PWM_Start+0x148>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a36      	ldr	r2, [pc, #216]	@ (80066b0 <HAL_TIM_PWM_Start+0x208>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d009      	beq.n	80065f0 <HAL_TIM_PWM_Start+0x148>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a34      	ldr	r2, [pc, #208]	@ (80066b4 <HAL_TIM_PWM_Start+0x20c>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d004      	beq.n	80065f0 <HAL_TIM_PWM_Start+0x148>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a33      	ldr	r2, [pc, #204]	@ (80066b8 <HAL_TIM_PWM_Start+0x210>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d101      	bne.n	80065f4 <HAL_TIM_PWM_Start+0x14c>
 80065f0:	2301      	movs	r3, #1
 80065f2:	e000      	b.n	80065f6 <HAL_TIM_PWM_Start+0x14e>
 80065f4:	2300      	movs	r3, #0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d007      	beq.n	800660a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006608:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4a25      	ldr	r2, [pc, #148]	@ (80066a4 <HAL_TIM_PWM_Start+0x1fc>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d022      	beq.n	800665a <HAL_TIM_PWM_Start+0x1b2>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800661c:	d01d      	beq.n	800665a <HAL_TIM_PWM_Start+0x1b2>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a26      	ldr	r2, [pc, #152]	@ (80066bc <HAL_TIM_PWM_Start+0x214>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d018      	beq.n	800665a <HAL_TIM_PWM_Start+0x1b2>
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4a24      	ldr	r2, [pc, #144]	@ (80066c0 <HAL_TIM_PWM_Start+0x218>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d013      	beq.n	800665a <HAL_TIM_PWM_Start+0x1b2>
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	4a23      	ldr	r2, [pc, #140]	@ (80066c4 <HAL_TIM_PWM_Start+0x21c>)
 8006638:	4293      	cmp	r3, r2
 800663a:	d00e      	beq.n	800665a <HAL_TIM_PWM_Start+0x1b2>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a19      	ldr	r2, [pc, #100]	@ (80066a8 <HAL_TIM_PWM_Start+0x200>)
 8006642:	4293      	cmp	r3, r2
 8006644:	d009      	beq.n	800665a <HAL_TIM_PWM_Start+0x1b2>
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a18      	ldr	r2, [pc, #96]	@ (80066ac <HAL_TIM_PWM_Start+0x204>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d004      	beq.n	800665a <HAL_TIM_PWM_Start+0x1b2>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a18      	ldr	r2, [pc, #96]	@ (80066b8 <HAL_TIM_PWM_Start+0x210>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d115      	bne.n	8006686 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	689a      	ldr	r2, [r3, #8]
 8006660:	4b19      	ldr	r3, [pc, #100]	@ (80066c8 <HAL_TIM_PWM_Start+0x220>)
 8006662:	4013      	ands	r3, r2
 8006664:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	2b06      	cmp	r3, #6
 800666a:	d015      	beq.n	8006698 <HAL_TIM_PWM_Start+0x1f0>
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006672:	d011      	beq.n	8006698 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f042 0201 	orr.w	r2, r2, #1
 8006682:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006684:	e008      	b.n	8006698 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	681a      	ldr	r2, [r3, #0]
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f042 0201 	orr.w	r2, r2, #1
 8006694:	601a      	str	r2, [r3, #0]
 8006696:	e000      	b.n	800669a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006698:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}
 80066a4:	40012c00 	.word	0x40012c00
 80066a8:	40013400 	.word	0x40013400
 80066ac:	40014000 	.word	0x40014000
 80066b0:	40014400 	.word	0x40014400
 80066b4:	40014800 	.word	0x40014800
 80066b8:	40015000 	.word	0x40015000
 80066bc:	40000400 	.word	0x40000400
 80066c0:	40000800 	.word	0x40000800
 80066c4:	40000c00 	.word	0x40000c00
 80066c8:	00010007 	.word	0x00010007

080066cc <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e04c      	b.n	800677a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066e6:	b2db      	uxtb	r3, r3
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d111      	bne.n	8006710 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f001 fc1f 	bl	8007f38 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d102      	bne.n	8006708 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a1f      	ldr	r2, [pc, #124]	@ (8006784 <HAL_TIM_OnePulse_Init+0xb8>)
 8006706:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2202      	movs	r2, #2
 8006714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681a      	ldr	r2, [r3, #0]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	3304      	adds	r3, #4
 8006720:	4619      	mov	r1, r3
 8006722:	4610      	mov	r0, r2
 8006724:	f000 ff68 	bl	80075f8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	681a      	ldr	r2, [r3, #0]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	f022 0208 	bic.w	r2, r2, #8
 8006736:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	6819      	ldr	r1, [r3, #0]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	683a      	ldr	r2, [r7, #0]
 8006744:	430a      	orrs	r2, r1
 8006746:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}
 8006782:	bf00      	nop
 8006784:	08006789 	.word	0x08006789

08006788 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006788:	b480      	push	{r7}
 800678a:	b083      	sub	sp, #12
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b084      	sub	sp, #16
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80067ac:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80067b4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80067bc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80067c4:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80067c6:	7bfb      	ldrb	r3, [r7, #15]
 80067c8:	2b01      	cmp	r3, #1
 80067ca:	d108      	bne.n	80067de <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80067cc:	7bbb      	ldrb	r3, [r7, #14]
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d105      	bne.n	80067de <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80067d2:	7b7b      	ldrb	r3, [r7, #13]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d102      	bne.n	80067de <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80067d8:	7b3b      	ldrb	r3, [r7, #12]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d001      	beq.n	80067e2 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e059      	b.n	8006896 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2202      	movs	r2, #2
 80067e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2202      	movs	r2, #2
 80067ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2202      	movs	r2, #2
 80067f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	2202      	movs	r2, #2
 80067fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	68da      	ldr	r2, [r3, #12]
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f042 0202 	orr.w	r2, r2, #2
 8006810:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68da      	ldr	r2, [r3, #12]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f042 0204 	orr.w	r2, r2, #4
 8006820:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2201      	movs	r2, #1
 8006828:	2100      	movs	r1, #0
 800682a:	4618      	mov	r0, r3
 800682c:	f001 fb5e 	bl	8007eec <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2201      	movs	r2, #1
 8006836:	2104      	movs	r1, #4
 8006838:	4618      	mov	r0, r3
 800683a:	f001 fb57 	bl	8007eec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a17      	ldr	r2, [pc, #92]	@ (80068a0 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d018      	beq.n	800687a <HAL_TIM_OnePulse_Start_IT+0xde>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a15      	ldr	r2, [pc, #84]	@ (80068a4 <HAL_TIM_OnePulse_Start_IT+0x108>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d013      	beq.n	800687a <HAL_TIM_OnePulse_Start_IT+0xde>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a14      	ldr	r2, [pc, #80]	@ (80068a8 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d00e      	beq.n	800687a <HAL_TIM_OnePulse_Start_IT+0xde>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a12      	ldr	r2, [pc, #72]	@ (80068ac <HAL_TIM_OnePulse_Start_IT+0x110>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d009      	beq.n	800687a <HAL_TIM_OnePulse_Start_IT+0xde>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a11      	ldr	r2, [pc, #68]	@ (80068b0 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d004      	beq.n	800687a <HAL_TIM_OnePulse_Start_IT+0xde>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a0f      	ldr	r2, [pc, #60]	@ (80068b4 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d101      	bne.n	800687e <HAL_TIM_OnePulse_Start_IT+0xe2>
 800687a:	2301      	movs	r3, #1
 800687c:	e000      	b.n	8006880 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800687e:	2300      	movs	r3, #0
 8006880:	2b00      	cmp	r3, #0
 8006882:	d007      	beq.n	8006894 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006892:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	40012c00 	.word	0x40012c00
 80068a4:	40013400 	.word	0x40013400
 80068a8:	40014000 	.word	0x40014000
 80068ac:	40014400 	.word	0x40014400
 80068b0:	40014800 	.word	0x40014800
 80068b4:	40015000 	.word	0x40015000

080068b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b086      	sub	sp, #24
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d101      	bne.n	80068cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80068c8:	2301      	movs	r3, #1
 80068ca:	e0a2      	b.n	8006a12 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d111      	bne.n	80068fc <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f001 fb29 	bl	8007f38 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d102      	bne.n	80068f4 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a4a      	ldr	r2, [pc, #296]	@ (8006a1c <HAL_TIM_Encoder_Init+0x164>)
 80068f2:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2202      	movs	r2, #2
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	6812      	ldr	r2, [r2, #0]
 800690e:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006912:	f023 0307 	bic.w	r3, r3, #7
 8006916:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	3304      	adds	r3, #4
 8006920:	4619      	mov	r1, r3
 8006922:	4610      	mov	r0, r2
 8006924:	f000 fe68 	bl	80075f8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	697a      	ldr	r2, [r7, #20]
 8006946:	4313      	orrs	r3, r2
 8006948:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006950:	f023 0303 	bic.w	r3, r3, #3
 8006954:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006956:	683b      	ldr	r3, [r7, #0]
 8006958:	689a      	ldr	r2, [r3, #8]
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	021b      	lsls	r3, r3, #8
 8006960:	4313      	orrs	r3, r2
 8006962:	693a      	ldr	r2, [r7, #16]
 8006964:	4313      	orrs	r3, r2
 8006966:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800696e:	f023 030c 	bic.w	r3, r3, #12
 8006972:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800697a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800697e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006980:	683b      	ldr	r3, [r7, #0]
 8006982:	68da      	ldr	r2, [r3, #12]
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	69db      	ldr	r3, [r3, #28]
 8006988:	021b      	lsls	r3, r3, #8
 800698a:	4313      	orrs	r3, r2
 800698c:	693a      	ldr	r2, [r7, #16]
 800698e:	4313      	orrs	r3, r2
 8006990:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	011a      	lsls	r2, r3, #4
 8006998:	683b      	ldr	r3, [r7, #0]
 800699a:	6a1b      	ldr	r3, [r3, #32]
 800699c:	031b      	lsls	r3, r3, #12
 800699e:	4313      	orrs	r3, r2
 80069a0:	693a      	ldr	r2, [r7, #16]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80069ac:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80069b4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80069b6:	683b      	ldr	r3, [r7, #0]
 80069b8:	685a      	ldr	r2, [r3, #4]
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	695b      	ldr	r3, [r3, #20]
 80069be:	011b      	lsls	r3, r3, #4
 80069c0:	4313      	orrs	r3, r2
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	697a      	ldr	r2, [r7, #20]
 80069ce:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2201      	movs	r2, #1
 80069e4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2201      	movs	r2, #1
 80069ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2201      	movs	r2, #1
 80069fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	2201      	movs	r2, #1
 8006a04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a10:	2300      	movs	r3, #0
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3718      	adds	r7, #24
 8006a16:	46bd      	mov	sp, r7
 8006a18:	bd80      	pop	{r7, pc}
 8006a1a:	bf00      	nop
 8006a1c:	08003f7d 	.word	0x08003f7d

08006a20 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b084      	sub	sp, #16
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006a30:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006a38:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a40:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a48:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d110      	bne.n	8006a72 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a50:	7bfb      	ldrb	r3, [r7, #15]
 8006a52:	2b01      	cmp	r3, #1
 8006a54:	d102      	bne.n	8006a5c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a56:	7b7b      	ldrb	r3, [r7, #13]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d001      	beq.n	8006a60 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e069      	b.n	8006b34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2202      	movs	r2, #2
 8006a64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a70:	e031      	b.n	8006ad6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	2b04      	cmp	r3, #4
 8006a76:	d110      	bne.n	8006a9a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a78:	7bbb      	ldrb	r3, [r7, #14]
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d102      	bne.n	8006a84 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a7e:	7b3b      	ldrb	r3, [r7, #12]
 8006a80:	2b01      	cmp	r3, #1
 8006a82:	d001      	beq.n	8006a88 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006a84:	2301      	movs	r3, #1
 8006a86:	e055      	b.n	8006b34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2202      	movs	r2, #2
 8006a8c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2202      	movs	r2, #2
 8006a94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a98:	e01d      	b.n	8006ad6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006a9a:	7bfb      	ldrb	r3, [r7, #15]
 8006a9c:	2b01      	cmp	r3, #1
 8006a9e:	d108      	bne.n	8006ab2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006aa0:	7bbb      	ldrb	r3, [r7, #14]
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	d105      	bne.n	8006ab2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006aa6:	7b7b      	ldrb	r3, [r7, #13]
 8006aa8:	2b01      	cmp	r3, #1
 8006aaa:	d102      	bne.n	8006ab2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006aac:	7b3b      	ldrb	r3, [r7, #12]
 8006aae:	2b01      	cmp	r3, #1
 8006ab0:	d001      	beq.n	8006ab6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006ab2:	2301      	movs	r3, #1
 8006ab4:	e03e      	b.n	8006b34 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	2202      	movs	r2, #2
 8006aba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2202      	movs	r2, #2
 8006ac2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2202      	movs	r2, #2
 8006aca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2202      	movs	r2, #2
 8006ad2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d003      	beq.n	8006ae4 <HAL_TIM_Encoder_Start+0xc4>
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	2b04      	cmp	r3, #4
 8006ae0:	d008      	beq.n	8006af4 <HAL_TIM_Encoder_Start+0xd4>
 8006ae2:	e00f      	b.n	8006b04 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	2100      	movs	r1, #0
 8006aec:	4618      	mov	r0, r3
 8006aee:	f001 f9fd 	bl	8007eec <TIM_CCxChannelCmd>
      break;
 8006af2:	e016      	b.n	8006b22 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2201      	movs	r2, #1
 8006afa:	2104      	movs	r1, #4
 8006afc:	4618      	mov	r0, r3
 8006afe:	f001 f9f5 	bl	8007eec <TIM_CCxChannelCmd>
      break;
 8006b02:	e00e      	b.n	8006b22 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	2201      	movs	r2, #1
 8006b0a:	2100      	movs	r1, #0
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f001 f9ed 	bl	8007eec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2201      	movs	r2, #1
 8006b18:	2104      	movs	r1, #4
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	f001 f9e6 	bl	8007eec <TIM_CCxChannelCmd>
      break;
 8006b20:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f042 0201 	orr.w	r2, r2, #1
 8006b30:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006b32:	2300      	movs	r3, #0
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3710      	adds	r7, #16
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bd80      	pop	{r7, pc}

08006b3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b084      	sub	sp, #16
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	691b      	ldr	r3, [r3, #16]
 8006b52:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	f003 0302 	and.w	r3, r3, #2
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d026      	beq.n	8006bac <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f003 0302 	and.w	r3, r3, #2
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d021      	beq.n	8006bac <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f06f 0202 	mvn.w	r2, #2
 8006b70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2201      	movs	r2, #1
 8006b76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	699b      	ldr	r3, [r3, #24]
 8006b7e:	f003 0303 	and.w	r3, r3, #3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d005      	beq.n	8006b92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	4798      	blx	r3
 8006b90:	e009      	b.n	8006ba6 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006b98:	6878      	ldr	r0, [r7, #4]
 8006b9a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006ba2:	6878      	ldr	r0, [r7, #4]
 8006ba4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	f003 0304 	and.w	r3, r3, #4
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d026      	beq.n	8006c04 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	f003 0304 	and.w	r3, r3, #4
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d021      	beq.n	8006c04 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f06f 0204 	mvn.w	r2, #4
 8006bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2202      	movs	r2, #2
 8006bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	699b      	ldr	r3, [r3, #24]
 8006bd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d005      	beq.n	8006bea <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	4798      	blx	r3
 8006be8:	e009      	b.n	8006bfe <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006bf0:	6878      	ldr	r0, [r7, #4]
 8006bf2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	f003 0308 	and.w	r3, r3, #8
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d026      	beq.n	8006c5c <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f003 0308 	and.w	r3, r3, #8
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d021      	beq.n	8006c5c <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f06f 0208 	mvn.w	r2, #8
 8006c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2204      	movs	r2, #4
 8006c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	69db      	ldr	r3, [r3, #28]
 8006c2e:	f003 0303 	and.w	r3, r3, #3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d005      	beq.n	8006c42 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c3c:	6878      	ldr	r0, [r7, #4]
 8006c3e:	4798      	blx	r3
 8006c40:	e009      	b.n	8006c56 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006c48:	6878      	ldr	r0, [r7, #4]
 8006c4a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	f003 0310 	and.w	r3, r3, #16
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d026      	beq.n	8006cb4 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f003 0310 	and.w	r3, r3, #16
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d021      	beq.n	8006cb4 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f06f 0210 	mvn.w	r2, #16
 8006c78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2208      	movs	r2, #8
 8006c7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	69db      	ldr	r3, [r3, #28]
 8006c86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d005      	beq.n	8006c9a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	4798      	blx	r3
 8006c98:	e009      	b.n	8006cae <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	f003 0301 	and.w	r3, r3, #1
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d00e      	beq.n	8006cdc <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	f003 0301 	and.w	r3, r3, #1
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d009      	beq.n	8006cdc <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f06f 0201 	mvn.w	r2, #1
 8006cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d104      	bne.n	8006cf0 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d00e      	beq.n	8006d0e <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d009      	beq.n	8006d0e <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006d02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d00e      	beq.n	8006d36 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d009      	beq.n	8006d36 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006d2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d00e      	beq.n	8006d5e <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d009      	beq.n	8006d5e <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006d52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	f003 0320 	and.w	r3, r3, #32
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00e      	beq.n	8006d86 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f003 0320 	and.w	r3, r3, #32
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d009      	beq.n	8006d86 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f06f 0220 	mvn.w	r2, #32
 8006d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d00e      	beq.n	8006dae <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d009      	beq.n	8006dae <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d00e      	beq.n	8006dd6 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d009      	beq.n	8006dd6 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006dca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d00e      	beq.n	8006dfe <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d009      	beq.n	8006dfe <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006df2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00e      	beq.n	8006e26 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d009      	beq.n	8006e26 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e26:	bf00      	nop
 8006e28:	3710      	adds	r7, #16
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
	...

08006e30 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b086      	sub	sp, #24
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e46:	2b01      	cmp	r3, #1
 8006e48:	d101      	bne.n	8006e4e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006e4a:	2302      	movs	r3, #2
 8006e4c:	e0ff      	b.n	800704e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	2201      	movs	r2, #1
 8006e52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2b14      	cmp	r3, #20
 8006e5a:	f200 80f0 	bhi.w	800703e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006e5e:	a201      	add	r2, pc, #4	@ (adr r2, 8006e64 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006e60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e64:	08006eb9 	.word	0x08006eb9
 8006e68:	0800703f 	.word	0x0800703f
 8006e6c:	0800703f 	.word	0x0800703f
 8006e70:	0800703f 	.word	0x0800703f
 8006e74:	08006ef9 	.word	0x08006ef9
 8006e78:	0800703f 	.word	0x0800703f
 8006e7c:	0800703f 	.word	0x0800703f
 8006e80:	0800703f 	.word	0x0800703f
 8006e84:	08006f3b 	.word	0x08006f3b
 8006e88:	0800703f 	.word	0x0800703f
 8006e8c:	0800703f 	.word	0x0800703f
 8006e90:	0800703f 	.word	0x0800703f
 8006e94:	08006f7b 	.word	0x08006f7b
 8006e98:	0800703f 	.word	0x0800703f
 8006e9c:	0800703f 	.word	0x0800703f
 8006ea0:	0800703f 	.word	0x0800703f
 8006ea4:	08006fbd 	.word	0x08006fbd
 8006ea8:	0800703f 	.word	0x0800703f
 8006eac:	0800703f 	.word	0x0800703f
 8006eb0:	0800703f 	.word	0x0800703f
 8006eb4:	08006ffd 	.word	0x08006ffd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68b9      	ldr	r1, [r7, #8]
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 fc4e 	bl	8007760 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	699a      	ldr	r2, [r3, #24]
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	f042 0208 	orr.w	r2, r2, #8
 8006ed2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	699a      	ldr	r2, [r3, #24]
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f022 0204 	bic.w	r2, r2, #4
 8006ee2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	6999      	ldr	r1, [r3, #24]
 8006eea:	68bb      	ldr	r3, [r7, #8]
 8006eec:	691a      	ldr	r2, [r3, #16]
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	430a      	orrs	r2, r1
 8006ef4:	619a      	str	r2, [r3, #24]
      break;
 8006ef6:	e0a5      	b.n	8007044 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68b9      	ldr	r1, [r7, #8]
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 fcc8 	bl	8007894 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	699a      	ldr	r2, [r3, #24]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	699a      	ldr	r2, [r3, #24]
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006f22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	6999      	ldr	r1, [r3, #24]
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	021a      	lsls	r2, r3, #8
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	430a      	orrs	r2, r1
 8006f36:	619a      	str	r2, [r3, #24]
      break;
 8006f38:	e084      	b.n	8007044 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	68b9      	ldr	r1, [r7, #8]
 8006f40:	4618      	mov	r0, r3
 8006f42:	f000 fd3b 	bl	80079bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	69da      	ldr	r2, [r3, #28]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	f042 0208 	orr.w	r2, r2, #8
 8006f54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	69da      	ldr	r2, [r3, #28]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f022 0204 	bic.w	r2, r2, #4
 8006f64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	69d9      	ldr	r1, [r3, #28]
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	691a      	ldr	r2, [r3, #16]
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	430a      	orrs	r2, r1
 8006f76:	61da      	str	r2, [r3, #28]
      break;
 8006f78:	e064      	b.n	8007044 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	68b9      	ldr	r1, [r7, #8]
 8006f80:	4618      	mov	r0, r3
 8006f82:	f000 fdad 	bl	8007ae0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	69da      	ldr	r2, [r3, #28]
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	69da      	ldr	r2, [r3, #28]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006fa4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	69d9      	ldr	r1, [r3, #28]
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	691b      	ldr	r3, [r3, #16]
 8006fb0:	021a      	lsls	r2, r3, #8
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	430a      	orrs	r2, r1
 8006fb8:	61da      	str	r2, [r3, #28]
      break;
 8006fba:	e043      	b.n	8007044 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	68b9      	ldr	r1, [r7, #8]
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f000 fe20 	bl	8007c08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f042 0208 	orr.w	r2, r2, #8
 8006fd6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	f022 0204 	bic.w	r2, r2, #4
 8006fe6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	691a      	ldr	r2, [r3, #16]
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	430a      	orrs	r2, r1
 8006ff8:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006ffa:	e023      	b.n	8007044 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68b9      	ldr	r1, [r7, #8]
 8007002:	4618      	mov	r0, r3
 8007004:	f000 fe6a 	bl	8007cdc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007016:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007026:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800702e:	68bb      	ldr	r3, [r7, #8]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	021a      	lsls	r2, r3, #8
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	430a      	orrs	r2, r1
 800703a:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800703c:	e002      	b.n	8007044 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	75fb      	strb	r3, [r7, #23]
      break;
 8007042:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	2200      	movs	r2, #0
 8007048:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800704c:	7dfb      	ldrb	r3, [r7, #23]
}
 800704e:	4618      	mov	r0, r3
 8007050:	3718      	adds	r7, #24
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}
 8007056:	bf00      	nop

08007058 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007062:	2300      	movs	r3, #0
 8007064:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800706c:	2b01      	cmp	r3, #1
 800706e:	d101      	bne.n	8007074 <HAL_TIM_ConfigClockSource+0x1c>
 8007070:	2302      	movs	r3, #2
 8007072:	e0f6      	b.n	8007262 <HAL_TIM_ConfigClockSource+0x20a>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2201      	movs	r2, #1
 8007078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2202      	movs	r2, #2
 8007080:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	689b      	ldr	r3, [r3, #8]
 800708a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8007092:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007096:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800709e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	68ba      	ldr	r2, [r7, #8]
 80070a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a6f      	ldr	r2, [pc, #444]	@ (800726c <HAL_TIM_ConfigClockSource+0x214>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	f000 80c1 	beq.w	8007236 <HAL_TIM_ConfigClockSource+0x1de>
 80070b4:	4a6d      	ldr	r2, [pc, #436]	@ (800726c <HAL_TIM_ConfigClockSource+0x214>)
 80070b6:	4293      	cmp	r3, r2
 80070b8:	f200 80c6 	bhi.w	8007248 <HAL_TIM_ConfigClockSource+0x1f0>
 80070bc:	4a6c      	ldr	r2, [pc, #432]	@ (8007270 <HAL_TIM_ConfigClockSource+0x218>)
 80070be:	4293      	cmp	r3, r2
 80070c0:	f000 80b9 	beq.w	8007236 <HAL_TIM_ConfigClockSource+0x1de>
 80070c4:	4a6a      	ldr	r2, [pc, #424]	@ (8007270 <HAL_TIM_ConfigClockSource+0x218>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	f200 80be 	bhi.w	8007248 <HAL_TIM_ConfigClockSource+0x1f0>
 80070cc:	4a69      	ldr	r2, [pc, #420]	@ (8007274 <HAL_TIM_ConfigClockSource+0x21c>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	f000 80b1 	beq.w	8007236 <HAL_TIM_ConfigClockSource+0x1de>
 80070d4:	4a67      	ldr	r2, [pc, #412]	@ (8007274 <HAL_TIM_ConfigClockSource+0x21c>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	f200 80b6 	bhi.w	8007248 <HAL_TIM_ConfigClockSource+0x1f0>
 80070dc:	4a66      	ldr	r2, [pc, #408]	@ (8007278 <HAL_TIM_ConfigClockSource+0x220>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	f000 80a9 	beq.w	8007236 <HAL_TIM_ConfigClockSource+0x1de>
 80070e4:	4a64      	ldr	r2, [pc, #400]	@ (8007278 <HAL_TIM_ConfigClockSource+0x220>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	f200 80ae 	bhi.w	8007248 <HAL_TIM_ConfigClockSource+0x1f0>
 80070ec:	4a63      	ldr	r2, [pc, #396]	@ (800727c <HAL_TIM_ConfigClockSource+0x224>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	f000 80a1 	beq.w	8007236 <HAL_TIM_ConfigClockSource+0x1de>
 80070f4:	4a61      	ldr	r2, [pc, #388]	@ (800727c <HAL_TIM_ConfigClockSource+0x224>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	f200 80a6 	bhi.w	8007248 <HAL_TIM_ConfigClockSource+0x1f0>
 80070fc:	4a60      	ldr	r2, [pc, #384]	@ (8007280 <HAL_TIM_ConfigClockSource+0x228>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	f000 8099 	beq.w	8007236 <HAL_TIM_ConfigClockSource+0x1de>
 8007104:	4a5e      	ldr	r2, [pc, #376]	@ (8007280 <HAL_TIM_ConfigClockSource+0x228>)
 8007106:	4293      	cmp	r3, r2
 8007108:	f200 809e 	bhi.w	8007248 <HAL_TIM_ConfigClockSource+0x1f0>
 800710c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007110:	f000 8091 	beq.w	8007236 <HAL_TIM_ConfigClockSource+0x1de>
 8007114:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8007118:	f200 8096 	bhi.w	8007248 <HAL_TIM_ConfigClockSource+0x1f0>
 800711c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007120:	f000 8089 	beq.w	8007236 <HAL_TIM_ConfigClockSource+0x1de>
 8007124:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007128:	f200 808e 	bhi.w	8007248 <HAL_TIM_ConfigClockSource+0x1f0>
 800712c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007130:	d03e      	beq.n	80071b0 <HAL_TIM_ConfigClockSource+0x158>
 8007132:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007136:	f200 8087 	bhi.w	8007248 <HAL_TIM_ConfigClockSource+0x1f0>
 800713a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800713e:	f000 8086 	beq.w	800724e <HAL_TIM_ConfigClockSource+0x1f6>
 8007142:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007146:	d87f      	bhi.n	8007248 <HAL_TIM_ConfigClockSource+0x1f0>
 8007148:	2b70      	cmp	r3, #112	@ 0x70
 800714a:	d01a      	beq.n	8007182 <HAL_TIM_ConfigClockSource+0x12a>
 800714c:	2b70      	cmp	r3, #112	@ 0x70
 800714e:	d87b      	bhi.n	8007248 <HAL_TIM_ConfigClockSource+0x1f0>
 8007150:	2b60      	cmp	r3, #96	@ 0x60
 8007152:	d050      	beq.n	80071f6 <HAL_TIM_ConfigClockSource+0x19e>
 8007154:	2b60      	cmp	r3, #96	@ 0x60
 8007156:	d877      	bhi.n	8007248 <HAL_TIM_ConfigClockSource+0x1f0>
 8007158:	2b50      	cmp	r3, #80	@ 0x50
 800715a:	d03c      	beq.n	80071d6 <HAL_TIM_ConfigClockSource+0x17e>
 800715c:	2b50      	cmp	r3, #80	@ 0x50
 800715e:	d873      	bhi.n	8007248 <HAL_TIM_ConfigClockSource+0x1f0>
 8007160:	2b40      	cmp	r3, #64	@ 0x40
 8007162:	d058      	beq.n	8007216 <HAL_TIM_ConfigClockSource+0x1be>
 8007164:	2b40      	cmp	r3, #64	@ 0x40
 8007166:	d86f      	bhi.n	8007248 <HAL_TIM_ConfigClockSource+0x1f0>
 8007168:	2b30      	cmp	r3, #48	@ 0x30
 800716a:	d064      	beq.n	8007236 <HAL_TIM_ConfigClockSource+0x1de>
 800716c:	2b30      	cmp	r3, #48	@ 0x30
 800716e:	d86b      	bhi.n	8007248 <HAL_TIM_ConfigClockSource+0x1f0>
 8007170:	2b20      	cmp	r3, #32
 8007172:	d060      	beq.n	8007236 <HAL_TIM_ConfigClockSource+0x1de>
 8007174:	2b20      	cmp	r3, #32
 8007176:	d867      	bhi.n	8007248 <HAL_TIM_ConfigClockSource+0x1f0>
 8007178:	2b00      	cmp	r3, #0
 800717a:	d05c      	beq.n	8007236 <HAL_TIM_ConfigClockSource+0x1de>
 800717c:	2b10      	cmp	r3, #16
 800717e:	d05a      	beq.n	8007236 <HAL_TIM_ConfigClockSource+0x1de>
 8007180:	e062      	b.n	8007248 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8007192:	f000 fe8b 	bl	8007eac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	689b      	ldr	r3, [r3, #8]
 800719c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800719e:	68bb      	ldr	r3, [r7, #8]
 80071a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80071a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68ba      	ldr	r2, [r7, #8]
 80071ac:	609a      	str	r2, [r3, #8]
      break;
 80071ae:	e04f      	b.n	8007250 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80071c0:	f000 fe74 	bl	8007eac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	689a      	ldr	r2, [r3, #8]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80071d2:	609a      	str	r2, [r3, #8]
      break;
 80071d4:	e03c      	b.n	8007250 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071e2:	461a      	mov	r2, r3
 80071e4:	f000 fde6 	bl	8007db4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	2150      	movs	r1, #80	@ 0x50
 80071ee:	4618      	mov	r0, r3
 80071f0:	f000 fe3f 	bl	8007e72 <TIM_ITRx_SetConfig>
      break;
 80071f4:	e02c      	b.n	8007250 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80071fa:	683b      	ldr	r3, [r7, #0]
 80071fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007202:	461a      	mov	r2, r3
 8007204:	f000 fe05 	bl	8007e12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	2160      	movs	r1, #96	@ 0x60
 800720e:	4618      	mov	r0, r3
 8007210:	f000 fe2f 	bl	8007e72 <TIM_ITRx_SetConfig>
      break;
 8007214:	e01c      	b.n	8007250 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007222:	461a      	mov	r2, r3
 8007224:	f000 fdc6 	bl	8007db4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2140      	movs	r1, #64	@ 0x40
 800722e:	4618      	mov	r0, r3
 8007230:	f000 fe1f 	bl	8007e72 <TIM_ITRx_SetConfig>
      break;
 8007234:	e00c      	b.n	8007250 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4619      	mov	r1, r3
 8007240:	4610      	mov	r0, r2
 8007242:	f000 fe16 	bl	8007e72 <TIM_ITRx_SetConfig>
      break;
 8007246:	e003      	b.n	8007250 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	73fb      	strb	r3, [r7, #15]
      break;
 800724c:	e000      	b.n	8007250 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800724e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2201      	movs	r2, #1
 8007254:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007260:	7bfb      	ldrb	r3, [r7, #15]
}
 8007262:	4618      	mov	r0, r3
 8007264:	3710      	adds	r7, #16
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}
 800726a:	bf00      	nop
 800726c:	00100070 	.word	0x00100070
 8007270:	00100060 	.word	0x00100060
 8007274:	00100050 	.word	0x00100050
 8007278:	00100040 	.word	0x00100040
 800727c:	00100030 	.word	0x00100030
 8007280:	00100020 	.word	0x00100020

08007284 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80072a0:	bf00      	nop
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072b4:	bf00      	nop
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80072c8:	bf00      	nop
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072dc:	bf00      	nop
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8007338:	b480      	push	{r7}
 800733a:	b087      	sub	sp, #28
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	460b      	mov	r3, r1
 8007342:	607a      	str	r2, [r7, #4]
 8007344:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8007346:	2300      	movs	r3, #0
 8007348:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d101      	bne.n	8007354 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	e14a      	b.n	80075ea <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800735a:	b2db      	uxtb	r3, r3
 800735c:	2b01      	cmp	r3, #1
 800735e:	f040 80dd 	bne.w	800751c <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8007362:	7afb      	ldrb	r3, [r7, #11]
 8007364:	2b1f      	cmp	r3, #31
 8007366:	f200 80d6 	bhi.w	8007516 <HAL_TIM_RegisterCallback+0x1de>
 800736a:	a201      	add	r2, pc, #4	@ (adr r2, 8007370 <HAL_TIM_RegisterCallback+0x38>)
 800736c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007370:	080073f1 	.word	0x080073f1
 8007374:	080073f9 	.word	0x080073f9
 8007378:	08007401 	.word	0x08007401
 800737c:	08007409 	.word	0x08007409
 8007380:	08007411 	.word	0x08007411
 8007384:	08007419 	.word	0x08007419
 8007388:	08007421 	.word	0x08007421
 800738c:	08007429 	.word	0x08007429
 8007390:	08007431 	.word	0x08007431
 8007394:	08007439 	.word	0x08007439
 8007398:	08007441 	.word	0x08007441
 800739c:	08007449 	.word	0x08007449
 80073a0:	08007451 	.word	0x08007451
 80073a4:	08007459 	.word	0x08007459
 80073a8:	08007463 	.word	0x08007463
 80073ac:	0800746d 	.word	0x0800746d
 80073b0:	08007477 	.word	0x08007477
 80073b4:	08007481 	.word	0x08007481
 80073b8:	0800748b 	.word	0x0800748b
 80073bc:	08007495 	.word	0x08007495
 80073c0:	0800749f 	.word	0x0800749f
 80073c4:	080074a9 	.word	0x080074a9
 80073c8:	080074b3 	.word	0x080074b3
 80073cc:	080074bd 	.word	0x080074bd
 80073d0:	080074c7 	.word	0x080074c7
 80073d4:	080074d1 	.word	0x080074d1
 80073d8:	080074db 	.word	0x080074db
 80073dc:	080074e5 	.word	0x080074e5
 80073e0:	080074ef 	.word	0x080074ef
 80073e4:	080074f9 	.word	0x080074f9
 80073e8:	08007503 	.word	0x08007503
 80073ec:	0800750d 	.word	0x0800750d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80073f6:	e0f7      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80073fe:	e0f3      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	687a      	ldr	r2, [r7, #4]
 8007404:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007406:	e0ef      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	687a      	ldr	r2, [r7, #4]
 800740c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800740e:	e0eb      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007416:	e0e7      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	687a      	ldr	r2, [r7, #4]
 800741c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800741e:	e0e3      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007426:	e0df      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800742e:	e0db      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007436:	e0d7      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	687a      	ldr	r2, [r7, #4]
 800743c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800743e:	e0d3      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007446:	e0cf      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800744e:	e0cb      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007456:	e0c7      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	687a      	ldr	r2, [r7, #4]
 800745c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007460:	e0c2      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	687a      	ldr	r2, [r7, #4]
 8007466:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800746a:	e0bd      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8007474:	e0b8      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800747e:	e0b3      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	687a      	ldr	r2, [r7, #4]
 8007484:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8007488:	e0ae      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	687a      	ldr	r2, [r7, #4]
 800748e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8007492:	e0a9      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800749c:	e0a4      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	687a      	ldr	r2, [r7, #4]
 80074a2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80074a6:	e09f      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	687a      	ldr	r2, [r7, #4]
 80074ac:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80074b0:	e09a      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	687a      	ldr	r2, [r7, #4]
 80074b6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80074ba:	e095      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	687a      	ldr	r2, [r7, #4]
 80074c0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80074c4:	e090      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80074ce:	e08b      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	687a      	ldr	r2, [r7, #4]
 80074d4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80074d8:	e086      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80074e2:	e081      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	687a      	ldr	r2, [r7, #4]
 80074e8:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80074ec:	e07c      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	687a      	ldr	r2, [r7, #4]
 80074f2:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80074f6:	e077      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	687a      	ldr	r2, [r7, #4]
 80074fc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8007500:	e072      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	687a      	ldr	r2, [r7, #4]
 8007506:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800750a:	e06d      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	687a      	ldr	r2, [r7, #4]
 8007510:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8007514:	e068      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	75fb      	strb	r3, [r7, #23]
        break;
 800751a:	e065      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007522:	b2db      	uxtb	r3, r3
 8007524:	2b00      	cmp	r3, #0
 8007526:	d15d      	bne.n	80075e4 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8007528:	7afb      	ldrb	r3, [r7, #11]
 800752a:	2b0d      	cmp	r3, #13
 800752c:	d857      	bhi.n	80075de <HAL_TIM_RegisterCallback+0x2a6>
 800752e:	a201      	add	r2, pc, #4	@ (adr r2, 8007534 <HAL_TIM_RegisterCallback+0x1fc>)
 8007530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007534:	0800756d 	.word	0x0800756d
 8007538:	08007575 	.word	0x08007575
 800753c:	0800757d 	.word	0x0800757d
 8007540:	08007585 	.word	0x08007585
 8007544:	0800758d 	.word	0x0800758d
 8007548:	08007595 	.word	0x08007595
 800754c:	0800759d 	.word	0x0800759d
 8007550:	080075a5 	.word	0x080075a5
 8007554:	080075ad 	.word	0x080075ad
 8007558:	080075b5 	.word	0x080075b5
 800755c:	080075bd 	.word	0x080075bd
 8007560:	080075c5 	.word	0x080075c5
 8007564:	080075cd 	.word	0x080075cd
 8007568:	080075d5 	.word	0x080075d5
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007572:	e039      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	687a      	ldr	r2, [r7, #4]
 8007578:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800757a:	e035      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	687a      	ldr	r2, [r7, #4]
 8007580:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007582:	e031      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	687a      	ldr	r2, [r7, #4]
 8007588:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800758a:	e02d      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007592:	e029      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	687a      	ldr	r2, [r7, #4]
 8007598:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800759a:	e025      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	687a      	ldr	r2, [r7, #4]
 80075a0:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80075a2:	e021      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80075aa:	e01d      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80075b2:	e019      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	687a      	ldr	r2, [r7, #4]
 80075b8:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80075ba:	e015      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	687a      	ldr	r2, [r7, #4]
 80075c0:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80075c2:	e011      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80075ca:	e00d      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80075d2:	e009      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	687a      	ldr	r2, [r7, #4]
 80075d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80075dc:	e004      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80075de:	2301      	movs	r3, #1
 80075e0:	75fb      	strb	r3, [r7, #23]
        break;
 80075e2:	e001      	b.n	80075e8 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80075e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ea:	4618      	mov	r0, r3
 80075ec:	371c      	adds	r7, #28
 80075ee:	46bd      	mov	sp, r7
 80075f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop

080075f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80075f8:	b480      	push	{r7}
 80075fa:	b085      	sub	sp, #20
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
 8007600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	4a4c      	ldr	r2, [pc, #304]	@ (800773c <TIM_Base_SetConfig+0x144>)
 800760c:	4293      	cmp	r3, r2
 800760e:	d017      	beq.n	8007640 <TIM_Base_SetConfig+0x48>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007616:	d013      	beq.n	8007640 <TIM_Base_SetConfig+0x48>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	4a49      	ldr	r2, [pc, #292]	@ (8007740 <TIM_Base_SetConfig+0x148>)
 800761c:	4293      	cmp	r3, r2
 800761e:	d00f      	beq.n	8007640 <TIM_Base_SetConfig+0x48>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	4a48      	ldr	r2, [pc, #288]	@ (8007744 <TIM_Base_SetConfig+0x14c>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d00b      	beq.n	8007640 <TIM_Base_SetConfig+0x48>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	4a47      	ldr	r2, [pc, #284]	@ (8007748 <TIM_Base_SetConfig+0x150>)
 800762c:	4293      	cmp	r3, r2
 800762e:	d007      	beq.n	8007640 <TIM_Base_SetConfig+0x48>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	4a46      	ldr	r2, [pc, #280]	@ (800774c <TIM_Base_SetConfig+0x154>)
 8007634:	4293      	cmp	r3, r2
 8007636:	d003      	beq.n	8007640 <TIM_Base_SetConfig+0x48>
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	4a45      	ldr	r2, [pc, #276]	@ (8007750 <TIM_Base_SetConfig+0x158>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d108      	bne.n	8007652 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007646:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	68fa      	ldr	r2, [r7, #12]
 800764e:	4313      	orrs	r3, r2
 8007650:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	4a39      	ldr	r2, [pc, #228]	@ (800773c <TIM_Base_SetConfig+0x144>)
 8007656:	4293      	cmp	r3, r2
 8007658:	d023      	beq.n	80076a2 <TIM_Base_SetConfig+0xaa>
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007660:	d01f      	beq.n	80076a2 <TIM_Base_SetConfig+0xaa>
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	4a36      	ldr	r2, [pc, #216]	@ (8007740 <TIM_Base_SetConfig+0x148>)
 8007666:	4293      	cmp	r3, r2
 8007668:	d01b      	beq.n	80076a2 <TIM_Base_SetConfig+0xaa>
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4a35      	ldr	r2, [pc, #212]	@ (8007744 <TIM_Base_SetConfig+0x14c>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d017      	beq.n	80076a2 <TIM_Base_SetConfig+0xaa>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4a34      	ldr	r2, [pc, #208]	@ (8007748 <TIM_Base_SetConfig+0x150>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d013      	beq.n	80076a2 <TIM_Base_SetConfig+0xaa>
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4a33      	ldr	r2, [pc, #204]	@ (800774c <TIM_Base_SetConfig+0x154>)
 800767e:	4293      	cmp	r3, r2
 8007680:	d00f      	beq.n	80076a2 <TIM_Base_SetConfig+0xaa>
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4a33      	ldr	r2, [pc, #204]	@ (8007754 <TIM_Base_SetConfig+0x15c>)
 8007686:	4293      	cmp	r3, r2
 8007688:	d00b      	beq.n	80076a2 <TIM_Base_SetConfig+0xaa>
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4a32      	ldr	r2, [pc, #200]	@ (8007758 <TIM_Base_SetConfig+0x160>)
 800768e:	4293      	cmp	r3, r2
 8007690:	d007      	beq.n	80076a2 <TIM_Base_SetConfig+0xaa>
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a31      	ldr	r2, [pc, #196]	@ (800775c <TIM_Base_SetConfig+0x164>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d003      	beq.n	80076a2 <TIM_Base_SetConfig+0xaa>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a2c      	ldr	r2, [pc, #176]	@ (8007750 <TIM_Base_SetConfig+0x158>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d108      	bne.n	80076b4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	68db      	ldr	r3, [r3, #12]
 80076ae:	68fa      	ldr	r2, [r7, #12]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	695b      	ldr	r3, [r3, #20]
 80076be:	4313      	orrs	r3, r2
 80076c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076c8:	683b      	ldr	r3, [r7, #0]
 80076ca:	689a      	ldr	r2, [r3, #8]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	681a      	ldr	r2, [r3, #0]
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a18      	ldr	r2, [pc, #96]	@ (800773c <TIM_Base_SetConfig+0x144>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d013      	beq.n	8007708 <TIM_Base_SetConfig+0x110>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a1a      	ldr	r2, [pc, #104]	@ (800774c <TIM_Base_SetConfig+0x154>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d00f      	beq.n	8007708 <TIM_Base_SetConfig+0x110>
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	4a1a      	ldr	r2, [pc, #104]	@ (8007754 <TIM_Base_SetConfig+0x15c>)
 80076ec:	4293      	cmp	r3, r2
 80076ee:	d00b      	beq.n	8007708 <TIM_Base_SetConfig+0x110>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	4a19      	ldr	r2, [pc, #100]	@ (8007758 <TIM_Base_SetConfig+0x160>)
 80076f4:	4293      	cmp	r3, r2
 80076f6:	d007      	beq.n	8007708 <TIM_Base_SetConfig+0x110>
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	4a18      	ldr	r2, [pc, #96]	@ (800775c <TIM_Base_SetConfig+0x164>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d003      	beq.n	8007708 <TIM_Base_SetConfig+0x110>
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	4a13      	ldr	r2, [pc, #76]	@ (8007750 <TIM_Base_SetConfig+0x158>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d103      	bne.n	8007710 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	691a      	ldr	r2, [r3, #16]
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2201      	movs	r2, #1
 8007714:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	691b      	ldr	r3, [r3, #16]
 800771a:	f003 0301 	and.w	r3, r3, #1
 800771e:	2b01      	cmp	r3, #1
 8007720:	d105      	bne.n	800772e <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	691b      	ldr	r3, [r3, #16]
 8007726:	f023 0201 	bic.w	r2, r3, #1
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	611a      	str	r2, [r3, #16]
  }
}
 800772e:	bf00      	nop
 8007730:	3714      	adds	r7, #20
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
 800773a:	bf00      	nop
 800773c:	40012c00 	.word	0x40012c00
 8007740:	40000400 	.word	0x40000400
 8007744:	40000800 	.word	0x40000800
 8007748:	40000c00 	.word	0x40000c00
 800774c:	40013400 	.word	0x40013400
 8007750:	40015000 	.word	0x40015000
 8007754:	40014000 	.word	0x40014000
 8007758:	40014400 	.word	0x40014400
 800775c:	40014800 	.word	0x40014800

08007760 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007760:	b480      	push	{r7}
 8007762:	b087      	sub	sp, #28
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6a1b      	ldr	r3, [r3, #32]
 800776e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a1b      	ldr	r3, [r3, #32]
 8007774:	f023 0201 	bic.w	r2, r3, #1
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	699b      	ldr	r3, [r3, #24]
 8007786:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800778e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	f023 0303 	bic.w	r3, r3, #3
 800779a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800779c:	683b      	ldr	r3, [r7, #0]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	f023 0302 	bic.w	r3, r3, #2
 80077ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80077ae:	683b      	ldr	r3, [r7, #0]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	697a      	ldr	r2, [r7, #20]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	4a30      	ldr	r2, [pc, #192]	@ (800787c <TIM_OC1_SetConfig+0x11c>)
 80077bc:	4293      	cmp	r3, r2
 80077be:	d013      	beq.n	80077e8 <TIM_OC1_SetConfig+0x88>
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	4a2f      	ldr	r2, [pc, #188]	@ (8007880 <TIM_OC1_SetConfig+0x120>)
 80077c4:	4293      	cmp	r3, r2
 80077c6:	d00f      	beq.n	80077e8 <TIM_OC1_SetConfig+0x88>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	4a2e      	ldr	r2, [pc, #184]	@ (8007884 <TIM_OC1_SetConfig+0x124>)
 80077cc:	4293      	cmp	r3, r2
 80077ce:	d00b      	beq.n	80077e8 <TIM_OC1_SetConfig+0x88>
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	4a2d      	ldr	r2, [pc, #180]	@ (8007888 <TIM_OC1_SetConfig+0x128>)
 80077d4:	4293      	cmp	r3, r2
 80077d6:	d007      	beq.n	80077e8 <TIM_OC1_SetConfig+0x88>
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	4a2c      	ldr	r2, [pc, #176]	@ (800788c <TIM_OC1_SetConfig+0x12c>)
 80077dc:	4293      	cmp	r3, r2
 80077de:	d003      	beq.n	80077e8 <TIM_OC1_SetConfig+0x88>
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a2b      	ldr	r2, [pc, #172]	@ (8007890 <TIM_OC1_SetConfig+0x130>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d10c      	bne.n	8007802 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	f023 0308 	bic.w	r3, r3, #8
 80077ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	68db      	ldr	r3, [r3, #12]
 80077f4:	697a      	ldr	r2, [r7, #20]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	f023 0304 	bic.w	r3, r3, #4
 8007800:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	4a1d      	ldr	r2, [pc, #116]	@ (800787c <TIM_OC1_SetConfig+0x11c>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d013      	beq.n	8007832 <TIM_OC1_SetConfig+0xd2>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4a1c      	ldr	r2, [pc, #112]	@ (8007880 <TIM_OC1_SetConfig+0x120>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d00f      	beq.n	8007832 <TIM_OC1_SetConfig+0xd2>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	4a1b      	ldr	r2, [pc, #108]	@ (8007884 <TIM_OC1_SetConfig+0x124>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d00b      	beq.n	8007832 <TIM_OC1_SetConfig+0xd2>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	4a1a      	ldr	r2, [pc, #104]	@ (8007888 <TIM_OC1_SetConfig+0x128>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d007      	beq.n	8007832 <TIM_OC1_SetConfig+0xd2>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a19      	ldr	r2, [pc, #100]	@ (800788c <TIM_OC1_SetConfig+0x12c>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d003      	beq.n	8007832 <TIM_OC1_SetConfig+0xd2>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a18      	ldr	r2, [pc, #96]	@ (8007890 <TIM_OC1_SetConfig+0x130>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d111      	bne.n	8007856 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	695b      	ldr	r3, [r3, #20]
 8007846:	693a      	ldr	r2, [r7, #16]
 8007848:	4313      	orrs	r3, r2
 800784a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	693a      	ldr	r2, [r7, #16]
 8007852:	4313      	orrs	r3, r2
 8007854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	68fa      	ldr	r2, [r7, #12]
 8007860:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	685a      	ldr	r2, [r3, #4]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	697a      	ldr	r2, [r7, #20]
 800786e:	621a      	str	r2, [r3, #32]
}
 8007870:	bf00      	nop
 8007872:	371c      	adds	r7, #28
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr
 800787c:	40012c00 	.word	0x40012c00
 8007880:	40013400 	.word	0x40013400
 8007884:	40014000 	.word	0x40014000
 8007888:	40014400 	.word	0x40014400
 800788c:	40014800 	.word	0x40014800
 8007890:	40015000 	.word	0x40015000

08007894 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007894:	b480      	push	{r7}
 8007896:	b087      	sub	sp, #28
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a1b      	ldr	r3, [r3, #32]
 80078a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a1b      	ldr	r3, [r3, #32]
 80078a8:	f023 0210 	bic.w	r2, r3, #16
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	699b      	ldr	r3, [r3, #24]
 80078ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80078c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	021b      	lsls	r3, r3, #8
 80078d6:	68fa      	ldr	r2, [r7, #12]
 80078d8:	4313      	orrs	r3, r2
 80078da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	f023 0320 	bic.w	r3, r3, #32
 80078e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	011b      	lsls	r3, r3, #4
 80078ea:	697a      	ldr	r2, [r7, #20]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	4a2c      	ldr	r2, [pc, #176]	@ (80079a4 <TIM_OC2_SetConfig+0x110>)
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d007      	beq.n	8007908 <TIM_OC2_SetConfig+0x74>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	4a2b      	ldr	r2, [pc, #172]	@ (80079a8 <TIM_OC2_SetConfig+0x114>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d003      	beq.n	8007908 <TIM_OC2_SetConfig+0x74>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	4a2a      	ldr	r2, [pc, #168]	@ (80079ac <TIM_OC2_SetConfig+0x118>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d10d      	bne.n	8007924 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800790e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	011b      	lsls	r3, r3, #4
 8007916:	697a      	ldr	r2, [r7, #20]
 8007918:	4313      	orrs	r3, r2
 800791a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007922:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4a1f      	ldr	r2, [pc, #124]	@ (80079a4 <TIM_OC2_SetConfig+0x110>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d013      	beq.n	8007954 <TIM_OC2_SetConfig+0xc0>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	4a1e      	ldr	r2, [pc, #120]	@ (80079a8 <TIM_OC2_SetConfig+0x114>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d00f      	beq.n	8007954 <TIM_OC2_SetConfig+0xc0>
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	4a1e      	ldr	r2, [pc, #120]	@ (80079b0 <TIM_OC2_SetConfig+0x11c>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d00b      	beq.n	8007954 <TIM_OC2_SetConfig+0xc0>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	4a1d      	ldr	r2, [pc, #116]	@ (80079b4 <TIM_OC2_SetConfig+0x120>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d007      	beq.n	8007954 <TIM_OC2_SetConfig+0xc0>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	4a1c      	ldr	r2, [pc, #112]	@ (80079b8 <TIM_OC2_SetConfig+0x124>)
 8007948:	4293      	cmp	r3, r2
 800794a:	d003      	beq.n	8007954 <TIM_OC2_SetConfig+0xc0>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	4a17      	ldr	r2, [pc, #92]	@ (80079ac <TIM_OC2_SetConfig+0x118>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d113      	bne.n	800797c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800795a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800795c:	693b      	ldr	r3, [r7, #16]
 800795e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007962:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	695b      	ldr	r3, [r3, #20]
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	693a      	ldr	r2, [r7, #16]
 800796c:	4313      	orrs	r3, r2
 800796e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	699b      	ldr	r3, [r3, #24]
 8007974:	009b      	lsls	r3, r3, #2
 8007976:	693a      	ldr	r2, [r7, #16]
 8007978:	4313      	orrs	r3, r2
 800797a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	693a      	ldr	r2, [r7, #16]
 8007980:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	68fa      	ldr	r2, [r7, #12]
 8007986:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	685a      	ldr	r2, [r3, #4]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	697a      	ldr	r2, [r7, #20]
 8007994:	621a      	str	r2, [r3, #32]
}
 8007996:	bf00      	nop
 8007998:	371c      	adds	r7, #28
 800799a:	46bd      	mov	sp, r7
 800799c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop
 80079a4:	40012c00 	.word	0x40012c00
 80079a8:	40013400 	.word	0x40013400
 80079ac:	40015000 	.word	0x40015000
 80079b0:	40014000 	.word	0x40014000
 80079b4:	40014400 	.word	0x40014400
 80079b8:	40014800 	.word	0x40014800

080079bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80079bc:	b480      	push	{r7}
 80079be:	b087      	sub	sp, #28
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
 80079c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6a1b      	ldr	r3, [r3, #32]
 80079ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	6a1b      	ldr	r3, [r3, #32]
 80079d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	69db      	ldr	r3, [r3, #28]
 80079e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80079ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80079ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	f023 0303 	bic.w	r3, r3, #3
 80079f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68fa      	ldr	r2, [r7, #12]
 80079fe:	4313      	orrs	r3, r2
 8007a00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007a02:	697b      	ldr	r3, [r7, #20]
 8007a04:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007a08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	021b      	lsls	r3, r3, #8
 8007a10:	697a      	ldr	r2, [r7, #20]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	4a2b      	ldr	r2, [pc, #172]	@ (8007ac8 <TIM_OC3_SetConfig+0x10c>)
 8007a1a:	4293      	cmp	r3, r2
 8007a1c:	d007      	beq.n	8007a2e <TIM_OC3_SetConfig+0x72>
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	4a2a      	ldr	r2, [pc, #168]	@ (8007acc <TIM_OC3_SetConfig+0x110>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d003      	beq.n	8007a2e <TIM_OC3_SetConfig+0x72>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4a29      	ldr	r2, [pc, #164]	@ (8007ad0 <TIM_OC3_SetConfig+0x114>)
 8007a2a:	4293      	cmp	r3, r2
 8007a2c:	d10d      	bne.n	8007a4a <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007a34:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	68db      	ldr	r3, [r3, #12]
 8007a3a:	021b      	lsls	r3, r3, #8
 8007a3c:	697a      	ldr	r2, [r7, #20]
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007a48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	4a1e      	ldr	r2, [pc, #120]	@ (8007ac8 <TIM_OC3_SetConfig+0x10c>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d013      	beq.n	8007a7a <TIM_OC3_SetConfig+0xbe>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	4a1d      	ldr	r2, [pc, #116]	@ (8007acc <TIM_OC3_SetConfig+0x110>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d00f      	beq.n	8007a7a <TIM_OC3_SetConfig+0xbe>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	4a1d      	ldr	r2, [pc, #116]	@ (8007ad4 <TIM_OC3_SetConfig+0x118>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d00b      	beq.n	8007a7a <TIM_OC3_SetConfig+0xbe>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	4a1c      	ldr	r2, [pc, #112]	@ (8007ad8 <TIM_OC3_SetConfig+0x11c>)
 8007a66:	4293      	cmp	r3, r2
 8007a68:	d007      	beq.n	8007a7a <TIM_OC3_SetConfig+0xbe>
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	4a1b      	ldr	r2, [pc, #108]	@ (8007adc <TIM_OC3_SetConfig+0x120>)
 8007a6e:	4293      	cmp	r3, r2
 8007a70:	d003      	beq.n	8007a7a <TIM_OC3_SetConfig+0xbe>
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	4a16      	ldr	r2, [pc, #88]	@ (8007ad0 <TIM_OC3_SetConfig+0x114>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d113      	bne.n	8007aa2 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007a80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007a88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	695b      	ldr	r3, [r3, #20]
 8007a8e:	011b      	lsls	r3, r3, #4
 8007a90:	693a      	ldr	r2, [r7, #16]
 8007a92:	4313      	orrs	r3, r2
 8007a94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	699b      	ldr	r3, [r3, #24]
 8007a9a:	011b      	lsls	r3, r3, #4
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	693a      	ldr	r2, [r7, #16]
 8007aa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	68fa      	ldr	r2, [r7, #12]
 8007aac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	685a      	ldr	r2, [r3, #4]
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	697a      	ldr	r2, [r7, #20]
 8007aba:	621a      	str	r2, [r3, #32]
}
 8007abc:	bf00      	nop
 8007abe:	371c      	adds	r7, #28
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr
 8007ac8:	40012c00 	.word	0x40012c00
 8007acc:	40013400 	.word	0x40013400
 8007ad0:	40015000 	.word	0x40015000
 8007ad4:	40014000 	.word	0x40014000
 8007ad8:	40014400 	.word	0x40014400
 8007adc:	40014800 	.word	0x40014800

08007ae0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b087      	sub	sp, #28
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6a1b      	ldr	r3, [r3, #32]
 8007aee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6a1b      	ldr	r3, [r3, #32]
 8007af4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	69db      	ldr	r3, [r3, #28]
 8007b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007b0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	021b      	lsls	r3, r3, #8
 8007b22:	68fa      	ldr	r2, [r7, #12]
 8007b24:	4313      	orrs	r3, r2
 8007b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007b2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007b30:	683b      	ldr	r3, [r7, #0]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	031b      	lsls	r3, r3, #12
 8007b36:	697a      	ldr	r2, [r7, #20]
 8007b38:	4313      	orrs	r3, r2
 8007b3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	4a2c      	ldr	r2, [pc, #176]	@ (8007bf0 <TIM_OC4_SetConfig+0x110>)
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d007      	beq.n	8007b54 <TIM_OC4_SetConfig+0x74>
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	4a2b      	ldr	r2, [pc, #172]	@ (8007bf4 <TIM_OC4_SetConfig+0x114>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d003      	beq.n	8007b54 <TIM_OC4_SetConfig+0x74>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	4a2a      	ldr	r2, [pc, #168]	@ (8007bf8 <TIM_OC4_SetConfig+0x118>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d10d      	bne.n	8007b70 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	68db      	ldr	r3, [r3, #12]
 8007b60:	031b      	lsls	r3, r3, #12
 8007b62:	697a      	ldr	r2, [r7, #20]
 8007b64:	4313      	orrs	r3, r2
 8007b66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007b6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	4a1f      	ldr	r2, [pc, #124]	@ (8007bf0 <TIM_OC4_SetConfig+0x110>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d013      	beq.n	8007ba0 <TIM_OC4_SetConfig+0xc0>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	4a1e      	ldr	r2, [pc, #120]	@ (8007bf4 <TIM_OC4_SetConfig+0x114>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d00f      	beq.n	8007ba0 <TIM_OC4_SetConfig+0xc0>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	4a1e      	ldr	r2, [pc, #120]	@ (8007bfc <TIM_OC4_SetConfig+0x11c>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d00b      	beq.n	8007ba0 <TIM_OC4_SetConfig+0xc0>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4a1d      	ldr	r2, [pc, #116]	@ (8007c00 <TIM_OC4_SetConfig+0x120>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d007      	beq.n	8007ba0 <TIM_OC4_SetConfig+0xc0>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	4a1c      	ldr	r2, [pc, #112]	@ (8007c04 <TIM_OC4_SetConfig+0x124>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d003      	beq.n	8007ba0 <TIM_OC4_SetConfig+0xc0>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	4a17      	ldr	r2, [pc, #92]	@ (8007bf8 <TIM_OC4_SetConfig+0x118>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d113      	bne.n	8007bc8 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007ba6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007ba8:	693b      	ldr	r3, [r7, #16]
 8007baa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007bae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	695b      	ldr	r3, [r3, #20]
 8007bb4:	019b      	lsls	r3, r3, #6
 8007bb6:	693a      	ldr	r2, [r7, #16]
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	699b      	ldr	r3, [r3, #24]
 8007bc0:	019b      	lsls	r3, r3, #6
 8007bc2:	693a      	ldr	r2, [r7, #16]
 8007bc4:	4313      	orrs	r3, r2
 8007bc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	693a      	ldr	r2, [r7, #16]
 8007bcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	68fa      	ldr	r2, [r7, #12]
 8007bd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	685a      	ldr	r2, [r3, #4]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	697a      	ldr	r2, [r7, #20]
 8007be0:	621a      	str	r2, [r3, #32]
}
 8007be2:	bf00      	nop
 8007be4:	371c      	adds	r7, #28
 8007be6:	46bd      	mov	sp, r7
 8007be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bec:	4770      	bx	lr
 8007bee:	bf00      	nop
 8007bf0:	40012c00 	.word	0x40012c00
 8007bf4:	40013400 	.word	0x40013400
 8007bf8:	40015000 	.word	0x40015000
 8007bfc:	40014000 	.word	0x40014000
 8007c00:	40014400 	.word	0x40014400
 8007c04:	40014800 	.word	0x40014800

08007c08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b087      	sub	sp, #28
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6a1b      	ldr	r3, [r3, #32]
 8007c16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	6a1b      	ldr	r3, [r3, #32]
 8007c1c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007c2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	68fa      	ldr	r2, [r7, #12]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007c4c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	041b      	lsls	r3, r3, #16
 8007c54:	693a      	ldr	r2, [r7, #16]
 8007c56:	4313      	orrs	r3, r2
 8007c58:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4a19      	ldr	r2, [pc, #100]	@ (8007cc4 <TIM_OC5_SetConfig+0xbc>)
 8007c5e:	4293      	cmp	r3, r2
 8007c60:	d013      	beq.n	8007c8a <TIM_OC5_SetConfig+0x82>
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4a18      	ldr	r2, [pc, #96]	@ (8007cc8 <TIM_OC5_SetConfig+0xc0>)
 8007c66:	4293      	cmp	r3, r2
 8007c68:	d00f      	beq.n	8007c8a <TIM_OC5_SetConfig+0x82>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4a17      	ldr	r2, [pc, #92]	@ (8007ccc <TIM_OC5_SetConfig+0xc4>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d00b      	beq.n	8007c8a <TIM_OC5_SetConfig+0x82>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	4a16      	ldr	r2, [pc, #88]	@ (8007cd0 <TIM_OC5_SetConfig+0xc8>)
 8007c76:	4293      	cmp	r3, r2
 8007c78:	d007      	beq.n	8007c8a <TIM_OC5_SetConfig+0x82>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	4a15      	ldr	r2, [pc, #84]	@ (8007cd4 <TIM_OC5_SetConfig+0xcc>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d003      	beq.n	8007c8a <TIM_OC5_SetConfig+0x82>
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	4a14      	ldr	r2, [pc, #80]	@ (8007cd8 <TIM_OC5_SetConfig+0xd0>)
 8007c86:	4293      	cmp	r3, r2
 8007c88:	d109      	bne.n	8007c9e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007c8a:	697b      	ldr	r3, [r7, #20]
 8007c8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c90:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	695b      	ldr	r3, [r3, #20]
 8007c96:	021b      	lsls	r3, r3, #8
 8007c98:	697a      	ldr	r2, [r7, #20]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	697a      	ldr	r2, [r7, #20]
 8007ca2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	685a      	ldr	r2, [r3, #4]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	693a      	ldr	r2, [r7, #16]
 8007cb6:	621a      	str	r2, [r3, #32]
}
 8007cb8:	bf00      	nop
 8007cba:	371c      	adds	r7, #28
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr
 8007cc4:	40012c00 	.word	0x40012c00
 8007cc8:	40013400 	.word	0x40013400
 8007ccc:	40014000 	.word	0x40014000
 8007cd0:	40014400 	.word	0x40014400
 8007cd4:	40014800 	.word	0x40014800
 8007cd8:	40015000 	.word	0x40015000

08007cdc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b087      	sub	sp, #28
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6a1b      	ldr	r3, [r3, #32]
 8007cea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	6a1b      	ldr	r3, [r3, #32]
 8007cf0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	685b      	ldr	r3, [r3, #4]
 8007cfc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007d0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007d0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	021b      	lsls	r3, r3, #8
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	4313      	orrs	r3, r2
 8007d1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007d22:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	051b      	lsls	r3, r3, #20
 8007d2a:	693a      	ldr	r2, [r7, #16]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	4a1a      	ldr	r2, [pc, #104]	@ (8007d9c <TIM_OC6_SetConfig+0xc0>)
 8007d34:	4293      	cmp	r3, r2
 8007d36:	d013      	beq.n	8007d60 <TIM_OC6_SetConfig+0x84>
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	4a19      	ldr	r2, [pc, #100]	@ (8007da0 <TIM_OC6_SetConfig+0xc4>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d00f      	beq.n	8007d60 <TIM_OC6_SetConfig+0x84>
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	4a18      	ldr	r2, [pc, #96]	@ (8007da4 <TIM_OC6_SetConfig+0xc8>)
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d00b      	beq.n	8007d60 <TIM_OC6_SetConfig+0x84>
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	4a17      	ldr	r2, [pc, #92]	@ (8007da8 <TIM_OC6_SetConfig+0xcc>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d007      	beq.n	8007d60 <TIM_OC6_SetConfig+0x84>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	4a16      	ldr	r2, [pc, #88]	@ (8007dac <TIM_OC6_SetConfig+0xd0>)
 8007d54:	4293      	cmp	r3, r2
 8007d56:	d003      	beq.n	8007d60 <TIM_OC6_SetConfig+0x84>
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	4a15      	ldr	r2, [pc, #84]	@ (8007db0 <TIM_OC6_SetConfig+0xd4>)
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d109      	bne.n	8007d74 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007d66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007d68:	683b      	ldr	r3, [r7, #0]
 8007d6a:	695b      	ldr	r3, [r3, #20]
 8007d6c:	029b      	lsls	r3, r3, #10
 8007d6e:	697a      	ldr	r2, [r7, #20]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	697a      	ldr	r2, [r7, #20]
 8007d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	68fa      	ldr	r2, [r7, #12]
 8007d7e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	685a      	ldr	r2, [r3, #4]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	693a      	ldr	r2, [r7, #16]
 8007d8c:	621a      	str	r2, [r3, #32]
}
 8007d8e:	bf00      	nop
 8007d90:	371c      	adds	r7, #28
 8007d92:	46bd      	mov	sp, r7
 8007d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d98:	4770      	bx	lr
 8007d9a:	bf00      	nop
 8007d9c:	40012c00 	.word	0x40012c00
 8007da0:	40013400 	.word	0x40013400
 8007da4:	40014000 	.word	0x40014000
 8007da8:	40014400 	.word	0x40014400
 8007dac:	40014800 	.word	0x40014800
 8007db0:	40015000 	.word	0x40015000

08007db4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b087      	sub	sp, #28
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	60f8      	str	r0, [r7, #12]
 8007dbc:	60b9      	str	r1, [r7, #8]
 8007dbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6a1b      	ldr	r3, [r3, #32]
 8007dc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	6a1b      	ldr	r3, [r3, #32]
 8007dca:	f023 0201 	bic.w	r2, r3, #1
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	699b      	ldr	r3, [r3, #24]
 8007dd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007dde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	011b      	lsls	r3, r3, #4
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	f023 030a 	bic.w	r3, r3, #10
 8007df0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007df2:	697a      	ldr	r2, [r7, #20]
 8007df4:	68bb      	ldr	r3, [r7, #8]
 8007df6:	4313      	orrs	r3, r2
 8007df8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	693a      	ldr	r2, [r7, #16]
 8007dfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	697a      	ldr	r2, [r7, #20]
 8007e04:	621a      	str	r2, [r3, #32]
}
 8007e06:	bf00      	nop
 8007e08:	371c      	adds	r7, #28
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e10:	4770      	bx	lr

08007e12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007e12:	b480      	push	{r7}
 8007e14:	b087      	sub	sp, #28
 8007e16:	af00      	add	r7, sp, #0
 8007e18:	60f8      	str	r0, [r7, #12]
 8007e1a:	60b9      	str	r1, [r7, #8]
 8007e1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	6a1b      	ldr	r3, [r3, #32]
 8007e22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6a1b      	ldr	r3, [r3, #32]
 8007e28:	f023 0210 	bic.w	r2, r3, #16
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	699b      	ldr	r3, [r3, #24]
 8007e34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007e3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	031b      	lsls	r3, r3, #12
 8007e42:	693a      	ldr	r2, [r7, #16]
 8007e44:	4313      	orrs	r3, r2
 8007e46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007e4e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007e50:	68bb      	ldr	r3, [r7, #8]
 8007e52:	011b      	lsls	r3, r3, #4
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	693a      	ldr	r2, [r7, #16]
 8007e5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	697a      	ldr	r2, [r7, #20]
 8007e64:	621a      	str	r2, [r3, #32]
}
 8007e66:	bf00      	nop
 8007e68:	371c      	adds	r7, #28
 8007e6a:	46bd      	mov	sp, r7
 8007e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e70:	4770      	bx	lr

08007e72 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007e72:	b480      	push	{r7}
 8007e74:	b085      	sub	sp, #20
 8007e76:	af00      	add	r7, sp, #0
 8007e78:	6078      	str	r0, [r7, #4]
 8007e7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007e88:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007e8c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007e8e:	683a      	ldr	r2, [r7, #0]
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	f043 0307 	orr.w	r3, r3, #7
 8007e98:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	68fa      	ldr	r2, [r7, #12]
 8007e9e:	609a      	str	r2, [r3, #8]
}
 8007ea0:	bf00      	nop
 8007ea2:	3714      	adds	r7, #20
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007eac:	b480      	push	{r7}
 8007eae:	b087      	sub	sp, #28
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	607a      	str	r2, [r7, #4]
 8007eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007ec6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	021a      	lsls	r2, r3, #8
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	431a      	orrs	r2, r3
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	697a      	ldr	r2, [r7, #20]
 8007ed6:	4313      	orrs	r3, r2
 8007ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	697a      	ldr	r2, [r7, #20]
 8007ede:	609a      	str	r2, [r3, #8]
}
 8007ee0:	bf00      	nop
 8007ee2:	371c      	adds	r7, #28
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eea:	4770      	bx	lr

08007eec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007eec:	b480      	push	{r7}
 8007eee:	b087      	sub	sp, #28
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	f003 031f 	and.w	r3, r3, #31
 8007efe:	2201      	movs	r2, #1
 8007f00:	fa02 f303 	lsl.w	r3, r2, r3
 8007f04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	6a1a      	ldr	r2, [r3, #32]
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	43db      	mvns	r3, r3
 8007f0e:	401a      	ands	r2, r3
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6a1a      	ldr	r2, [r3, #32]
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	f003 031f 	and.w	r3, r3, #31
 8007f1e:	6879      	ldr	r1, [r7, #4]
 8007f20:	fa01 f303 	lsl.w	r3, r1, r3
 8007f24:	431a      	orrs	r2, r3
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	621a      	str	r2, [r3, #32]
}
 8007f2a:	bf00      	nop
 8007f2c:	371c      	adds	r7, #28
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f34:	4770      	bx	lr
	...

08007f38 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a26      	ldr	r2, [pc, #152]	@ (8007fdc <TIM_ResetCallback+0xa4>)
 8007f44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4a25      	ldr	r2, [pc, #148]	@ (8007fe0 <TIM_ResetCallback+0xa8>)
 8007f4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4a24      	ldr	r2, [pc, #144]	@ (8007fe4 <TIM_ResetCallback+0xac>)
 8007f54:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4a23      	ldr	r2, [pc, #140]	@ (8007fe8 <TIM_ResetCallback+0xb0>)
 8007f5c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	4a22      	ldr	r2, [pc, #136]	@ (8007fec <TIM_ResetCallback+0xb4>)
 8007f64:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4a21      	ldr	r2, [pc, #132]	@ (8007ff0 <TIM_ResetCallback+0xb8>)
 8007f6c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	4a20      	ldr	r2, [pc, #128]	@ (8007ff4 <TIM_ResetCallback+0xbc>)
 8007f74:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a1f      	ldr	r2, [pc, #124]	@ (8007ff8 <TIM_ResetCallback+0xc0>)
 8007f7c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a1e      	ldr	r2, [pc, #120]	@ (8007ffc <TIM_ResetCallback+0xc4>)
 8007f84:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a1d      	ldr	r2, [pc, #116]	@ (8008000 <TIM_ResetCallback+0xc8>)
 8007f8c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a1c      	ldr	r2, [pc, #112]	@ (8008004 <TIM_ResetCallback+0xcc>)
 8007f94:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	4a1b      	ldr	r2, [pc, #108]	@ (8008008 <TIM_ResetCallback+0xd0>)
 8007f9c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	4a1a      	ldr	r2, [pc, #104]	@ (800800c <TIM_ResetCallback+0xd4>)
 8007fa4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	4a19      	ldr	r2, [pc, #100]	@ (8008010 <TIM_ResetCallback+0xd8>)
 8007fac:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	4a18      	ldr	r2, [pc, #96]	@ (8008014 <TIM_ResetCallback+0xdc>)
 8007fb4:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	4a17      	ldr	r2, [pc, #92]	@ (8008018 <TIM_ResetCallback+0xe0>)
 8007fbc:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	4a16      	ldr	r2, [pc, #88]	@ (800801c <TIM_ResetCallback+0xe4>)
 8007fc4:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	4a15      	ldr	r2, [pc, #84]	@ (8008020 <TIM_ResetCallback+0xe8>)
 8007fcc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr
 8007fdc:	080024c5 	.word	0x080024c5
 8007fe0:	08007285 	.word	0x08007285
 8007fe4:	080072fd 	.word	0x080072fd
 8007fe8:	08007311 	.word	0x08007311
 8007fec:	080072ad 	.word	0x080072ad
 8007ff0:	080072c1 	.word	0x080072c1
 8007ff4:	08007299 	.word	0x08007299
 8007ff8:	080072d5 	.word	0x080072d5
 8007ffc:	080072e9 	.word	0x080072e9
 8008000:	08007325 	.word	0x08007325
 8008004:	08008279 	.word	0x08008279
 8008008:	0800828d 	.word	0x0800828d
 800800c:	080082a1 	.word	0x080082a1
 8008010:	080082b5 	.word	0x080082b5
 8008014:	080082c9 	.word	0x080082c9
 8008018:	080082dd 	.word	0x080082dd
 800801c:	080082f1 	.word	0x080082f1
 8008020:	08008305 	.word	0x08008305

08008024 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	6078      	str	r0, [r7, #4]
 800802c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008034:	2b01      	cmp	r3, #1
 8008036:	d101      	bne.n	800803c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008038:	2302      	movs	r3, #2
 800803a:	e074      	b.n	8008126 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2202      	movs	r2, #2
 8008048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	685b      	ldr	r3, [r3, #4]
 8008052:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a34      	ldr	r2, [pc, #208]	@ (8008134 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d009      	beq.n	800807a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	4a33      	ldr	r2, [pc, #204]	@ (8008138 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d004      	beq.n	800807a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a31      	ldr	r2, [pc, #196]	@ (800813c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d108      	bne.n	800808c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008080:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	4313      	orrs	r3, r2
 800808a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8008092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008096:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	4313      	orrs	r3, r2
 80080a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a21      	ldr	r2, [pc, #132]	@ (8008134 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d022      	beq.n	80080fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80080bc:	d01d      	beq.n	80080fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a1f      	ldr	r2, [pc, #124]	@ (8008140 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d018      	beq.n	80080fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a1d      	ldr	r2, [pc, #116]	@ (8008144 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d013      	beq.n	80080fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a1c      	ldr	r2, [pc, #112]	@ (8008148 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d00e      	beq.n	80080fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a15      	ldr	r2, [pc, #84]	@ (8008138 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d009      	beq.n	80080fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a18      	ldr	r2, [pc, #96]	@ (800814c <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d004      	beq.n	80080fa <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a11      	ldr	r2, [pc, #68]	@ (800813c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d10c      	bne.n	8008114 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008100:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	689b      	ldr	r3, [r3, #8]
 8008106:	68ba      	ldr	r2, [r7, #8]
 8008108:	4313      	orrs	r3, r2
 800810a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68ba      	ldr	r2, [r7, #8]
 8008112:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	2201      	movs	r2, #1
 8008118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2200      	movs	r2, #0
 8008120:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3714      	adds	r7, #20
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
 8008132:	bf00      	nop
 8008134:	40012c00 	.word	0x40012c00
 8008138:	40013400 	.word	0x40013400
 800813c:	40015000 	.word	0x40015000
 8008140:	40000400 	.word	0x40000400
 8008144:	40000800 	.word	0x40000800
 8008148:	40000c00 	.word	0x40000c00
 800814c:	40014000 	.word	0x40014000

08008150 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008150:	b480      	push	{r7}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800815a:	2300      	movs	r3, #0
 800815c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008164:	2b01      	cmp	r3, #1
 8008166:	d101      	bne.n	800816c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008168:	2302      	movs	r3, #2
 800816a:	e078      	b.n	800825e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800817a:	683b      	ldr	r3, [r7, #0]
 800817c:	68db      	ldr	r3, [r3, #12]
 800817e:	4313      	orrs	r3, r2
 8008180:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008188:	683b      	ldr	r3, [r7, #0]
 800818a:	689b      	ldr	r3, [r3, #8]
 800818c:	4313      	orrs	r3, r2
 800818e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	685b      	ldr	r3, [r3, #4]
 800819a:	4313      	orrs	r3, r2
 800819c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80081a4:	683b      	ldr	r3, [r7, #0]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4313      	orrs	r3, r2
 80081aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	691b      	ldr	r3, [r3, #16]
 80081b6:	4313      	orrs	r3, r2
 80081b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	695b      	ldr	r3, [r3, #20]
 80081c4:	4313      	orrs	r3, r2
 80081c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80081ce:	683b      	ldr	r3, [r7, #0]
 80081d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081d2:	4313      	orrs	r3, r2
 80081d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	699b      	ldr	r3, [r3, #24]
 80081e0:	041b      	lsls	r3, r3, #16
 80081e2:	4313      	orrs	r3, r2
 80081e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80081ec:	683b      	ldr	r3, [r7, #0]
 80081ee:	69db      	ldr	r3, [r3, #28]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	4a1c      	ldr	r2, [pc, #112]	@ (800826c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80081fa:	4293      	cmp	r3, r2
 80081fc:	d009      	beq.n	8008212 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	4a1b      	ldr	r2, [pc, #108]	@ (8008270 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d004      	beq.n	8008212 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	4a19      	ldr	r2, [pc, #100]	@ (8008274 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 800820e:	4293      	cmp	r3, r2
 8008210:	d11c      	bne.n	800824c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800821c:	051b      	lsls	r3, r3, #20
 800821e:	4313      	orrs	r3, r2
 8008220:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	6a1b      	ldr	r3, [r3, #32]
 800822c:	4313      	orrs	r3, r2
 800822e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8008236:	683b      	ldr	r3, [r7, #0]
 8008238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800823a:	4313      	orrs	r3, r2
 800823c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008248:	4313      	orrs	r3, r2
 800824a:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	68fa      	ldr	r2, [r7, #12]
 8008252:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800825c:	2300      	movs	r3, #0
}
 800825e:	4618      	mov	r0, r3
 8008260:	3714      	adds	r7, #20
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	40012c00 	.word	0x40012c00
 8008270:	40013400 	.word	0x40013400
 8008274:	40015000 	.word	0x40015000

08008278 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008278:	b480      	push	{r7}
 800827a:	b083      	sub	sp, #12
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008280:	bf00      	nop
 8008282:	370c      	adds	r7, #12
 8008284:	46bd      	mov	sp, r7
 8008286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800828a:	4770      	bx	lr

0800828c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800828c:	b480      	push	{r7}
 800828e:	b083      	sub	sp, #12
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8008294:	bf00      	nop
 8008296:	370c      	adds	r7, #12
 8008298:	46bd      	mov	sp, r7
 800829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800829e:	4770      	bx	lr

080082a0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082a0:	b480      	push	{r7}
 80082a2:	b083      	sub	sp, #12
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082a8:	bf00      	nop
 80082aa:	370c      	adds	r7, #12
 80082ac:	46bd      	mov	sp, r7
 80082ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b2:	4770      	bx	lr

080082b4 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80082b4:	b480      	push	{r7}
 80082b6:	b083      	sub	sp, #12
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80082bc:	bf00      	nop
 80082be:	370c      	adds	r7, #12
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b083      	sub	sp, #12
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80082d0:	bf00      	nop
 80082d2:	370c      	adds	r7, #12
 80082d4:	46bd      	mov	sp, r7
 80082d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082da:	4770      	bx	lr

080082dc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80082dc:	b480      	push	{r7}
 80082de:	b083      	sub	sp, #12
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80082e4:	bf00      	nop
 80082e6:	370c      	adds	r7, #12
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80082f8:	bf00      	nop
 80082fa:	370c      	adds	r7, #12
 80082fc:	46bd      	mov	sp, r7
 80082fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008302:	4770      	bx	lr

08008304 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008304:	b480      	push	{r7}
 8008306:	b083      	sub	sp, #12
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800830c:	bf00      	nop
 800830e:	370c      	adds	r7, #12
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b082      	sub	sp, #8
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d101      	bne.n	800832a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008326:	2301      	movs	r3, #1
 8008328:	e050      	b.n	80083cc <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008330:	2b00      	cmp	r3, #0
 8008332:	d114      	bne.n	800835e <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800833c:	6878      	ldr	r0, [r7, #4]
 800833e:	f000 fdc5 	bl	8008ecc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8008348:	2b00      	cmp	r3, #0
 800834a:	d103      	bne.n	8008354 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	4a21      	ldr	r2, [pc, #132]	@ (80083d4 <HAL_UART_Init+0xbc>)
 8008350:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2224      	movs	r2, #36	@ 0x24
 8008362:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	681a      	ldr	r2, [r3, #0]
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f022 0201 	bic.w	r2, r2, #1
 8008374:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800837a:	2b00      	cmp	r3, #0
 800837c:	d002      	beq.n	8008384 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800837e:	6878      	ldr	r0, [r7, #4]
 8008380:	f001 f8f2 	bl	8009568 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008384:	6878      	ldr	r0, [r7, #4]
 8008386:	f000 fdf3 	bl	8008f70 <UART_SetConfig>
 800838a:	4603      	mov	r3, r0
 800838c:	2b01      	cmp	r3, #1
 800838e:	d101      	bne.n	8008394 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8008390:	2301      	movs	r3, #1
 8008392:	e01b      	b.n	80083cc <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	685a      	ldr	r2, [r3, #4]
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80083a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	689a      	ldr	r2, [r3, #8]
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80083b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	f042 0201 	orr.w	r2, r2, #1
 80083c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80083c4:	6878      	ldr	r0, [r7, #4]
 80083c6:	f001 f971 	bl	80096ac <UART_CheckIdleState>
 80083ca:	4603      	mov	r3, r0
}
 80083cc:	4618      	mov	r0, r3
 80083ce:	3708      	adds	r7, #8
 80083d0:	46bd      	mov	sp, r7
 80083d2:	bd80      	pop	{r7, pc}
 80083d4:	08004081 	.word	0x08004081

080083d8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80083d8:	b480      	push	{r7}
 80083da:	b087      	sub	sp, #28
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	460b      	mov	r3, r1
 80083e2:	607a      	str	r2, [r7, #4]
 80083e4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80083e6:	2300      	movs	r3, #0
 80083e8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d109      	bne.n	8008404 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80083f6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8008400:	2301      	movs	r3, #1
 8008402:	e09c      	b.n	800853e <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800840a:	2b20      	cmp	r3, #32
 800840c:	d16c      	bne.n	80084e8 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800840e:	7afb      	ldrb	r3, [r7, #11]
 8008410:	2b0c      	cmp	r3, #12
 8008412:	d85e      	bhi.n	80084d2 <HAL_UART_RegisterCallback+0xfa>
 8008414:	a201      	add	r2, pc, #4	@ (adr r2, 800841c <HAL_UART_RegisterCallback+0x44>)
 8008416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800841a:	bf00      	nop
 800841c:	08008451 	.word	0x08008451
 8008420:	0800845b 	.word	0x0800845b
 8008424:	08008465 	.word	0x08008465
 8008428:	0800846f 	.word	0x0800846f
 800842c:	08008479 	.word	0x08008479
 8008430:	08008483 	.word	0x08008483
 8008434:	0800848d 	.word	0x0800848d
 8008438:	08008497 	.word	0x08008497
 800843c:	080084a1 	.word	0x080084a1
 8008440:	080084ab 	.word	0x080084ab
 8008444:	080084b5 	.word	0x080084b5
 8008448:	080084bf 	.word	0x080084bf
 800844c:	080084c9 	.word	0x080084c9
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	687a      	ldr	r2, [r7, #4]
 8008454:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8008458:	e070      	b.n	800853c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008462:	e06b      	b.n	800853c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	687a      	ldr	r2, [r7, #4]
 8008468:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800846c:	e066      	b.n	800853c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008476:	e061      	b.n	800853c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	687a      	ldr	r2, [r7, #4]
 800847c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008480:	e05c      	b.n	800853c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800848a:	e057      	b.n	800853c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	687a      	ldr	r2, [r7, #4]
 8008490:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008494:	e052      	b.n	800853c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800849e:	e04d      	b.n	800853c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	687a      	ldr	r2, [r7, #4]
 80084a4:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80084a8:	e048      	b.n	800853c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80084b2:	e043      	b.n	800853c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	687a      	ldr	r2, [r7, #4]
 80084b8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80084bc:	e03e      	b.n	800853c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80084c6:	e039      	b.n	800853c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	687a      	ldr	r2, [r7, #4]
 80084cc:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80084d0:	e034      	b.n	800853c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084d8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	75fb      	strb	r3, [r7, #23]
        break;
 80084e6:	e029      	b.n	800853c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d11a      	bne.n	8008528 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 80084f2:	7afb      	ldrb	r3, [r7, #11]
 80084f4:	2b0b      	cmp	r3, #11
 80084f6:	d002      	beq.n	80084fe <HAL_UART_RegisterCallback+0x126>
 80084f8:	2b0c      	cmp	r3, #12
 80084fa:	d005      	beq.n	8008508 <HAL_UART_RegisterCallback+0x130>
 80084fc:	e009      	b.n	8008512 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	687a      	ldr	r2, [r7, #4]
 8008502:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008506:	e019      	b.n	800853c <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	687a      	ldr	r2, [r7, #4]
 800850c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008510:	e014      	b.n	800853c <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008518:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	75fb      	strb	r3, [r7, #23]
        break;
 8008526:	e009      	b.n	800853c <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800852e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800853c:	7dfb      	ldrb	r3, [r7, #23]
}
 800853e:	4618      	mov	r0, r3
 8008540:	371c      	adds	r7, #28
 8008542:	46bd      	mov	sp, r7
 8008544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008548:	4770      	bx	lr
 800854a:	bf00      	nop

0800854c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b08a      	sub	sp, #40	@ 0x28
 8008550:	af00      	add	r7, sp, #0
 8008552:	60f8      	str	r0, [r7, #12]
 8008554:	60b9      	str	r1, [r7, #8]
 8008556:	4613      	mov	r3, r2
 8008558:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008560:	2b20      	cmp	r3, #32
 8008562:	d167      	bne.n	8008634 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d002      	beq.n	8008570 <HAL_UART_Transmit_DMA+0x24>
 800856a:	88fb      	ldrh	r3, [r7, #6]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d101      	bne.n	8008574 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	e060      	b.n	8008636 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	68ba      	ldr	r2, [r7, #8]
 8008578:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	88fa      	ldrh	r2, [r7, #6]
 800857e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	88fa      	ldrh	r2, [r7, #6]
 8008586:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2221      	movs	r2, #33	@ 0x21
 8008596:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d028      	beq.n	80085f4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085a6:	4a26      	ldr	r2, [pc, #152]	@ (8008640 <HAL_UART_Transmit_DMA+0xf4>)
 80085a8:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085ae:	4a25      	ldr	r2, [pc, #148]	@ (8008644 <HAL_UART_Transmit_DMA+0xf8>)
 80085b0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085b6:	4a24      	ldr	r2, [pc, #144]	@ (8008648 <HAL_UART_Transmit_DMA+0xfc>)
 80085b8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80085be:	2200      	movs	r2, #0
 80085c0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80085ca:	4619      	mov	r1, r3
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	3328      	adds	r3, #40	@ 0x28
 80085d2:	461a      	mov	r2, r3
 80085d4:	88fb      	ldrh	r3, [r7, #6]
 80085d6:	f7fc f90d 	bl	80047f4 <HAL_DMA_Start_IT>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d009      	beq.n	80085f4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	2210      	movs	r2, #16
 80085e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2220      	movs	r2, #32
 80085ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80085f0:	2301      	movs	r3, #1
 80085f2:	e020      	b.n	8008636 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	2240      	movs	r2, #64	@ 0x40
 80085fa:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	3308      	adds	r3, #8
 8008602:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008604:	697b      	ldr	r3, [r7, #20]
 8008606:	e853 3f00 	ldrex	r3, [r3]
 800860a:	613b      	str	r3, [r7, #16]
   return(result);
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008612:	627b      	str	r3, [r7, #36]	@ 0x24
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	3308      	adds	r3, #8
 800861a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800861c:	623a      	str	r2, [r7, #32]
 800861e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008620:	69f9      	ldr	r1, [r7, #28]
 8008622:	6a3a      	ldr	r2, [r7, #32]
 8008624:	e841 2300 	strex	r3, r2, [r1]
 8008628:	61bb      	str	r3, [r7, #24]
   return(result);
 800862a:	69bb      	ldr	r3, [r7, #24]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d1e5      	bne.n	80085fc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8008630:	2300      	movs	r3, #0
 8008632:	e000      	b.n	8008636 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8008634:	2302      	movs	r3, #2
  }
}
 8008636:	4618      	mov	r0, r3
 8008638:	3728      	adds	r7, #40	@ 0x28
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	bf00      	nop
 8008640:	08009b77 	.word	0x08009b77
 8008644:	08009c15 	.word	0x08009c15
 8008648:	08009daf 	.word	0x08009daf

0800864c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b08a      	sub	sp, #40	@ 0x28
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	4613      	mov	r3, r2
 8008658:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008660:	2b20      	cmp	r3, #32
 8008662:	d137      	bne.n	80086d4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d002      	beq.n	8008670 <HAL_UART_Receive_DMA+0x24>
 800866a:	88fb      	ldrh	r3, [r7, #6]
 800866c:	2b00      	cmp	r3, #0
 800866e:	d101      	bne.n	8008674 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008670:	2301      	movs	r3, #1
 8008672:	e030      	b.n	80086d6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	2200      	movs	r2, #0
 8008678:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a18      	ldr	r2, [pc, #96]	@ (80086e0 <HAL_UART_Receive_DMA+0x94>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d01f      	beq.n	80086c4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800868e:	2b00      	cmp	r3, #0
 8008690:	d018      	beq.n	80086c4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	e853 3f00 	ldrex	r3, [r3]
 800869e:	613b      	str	r3, [r7, #16]
   return(result);
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80086a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	461a      	mov	r2, r3
 80086ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b0:	623b      	str	r3, [r7, #32]
 80086b2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b4:	69f9      	ldr	r1, [r7, #28]
 80086b6:	6a3a      	ldr	r2, [r7, #32]
 80086b8:	e841 2300 	strex	r3, r2, [r1]
 80086bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d1e6      	bne.n	8008692 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80086c4:	88fb      	ldrh	r3, [r7, #6]
 80086c6:	461a      	mov	r2, r3
 80086c8:	68b9      	ldr	r1, [r7, #8]
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f001 f906 	bl	80098dc <UART_Start_Receive_DMA>
 80086d0:	4603      	mov	r3, r0
 80086d2:	e000      	b.n	80086d6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80086d4:	2302      	movs	r3, #2
  }
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3728      	adds	r7, #40	@ 0x28
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	40008000 	.word	0x40008000

080086e4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b0ba      	sub	sp, #232	@ 0xe8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	69db      	ldr	r3, [r3, #28]
 80086f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	689b      	ldr	r3, [r3, #8]
 8008706:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800870a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800870e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8008712:	4013      	ands	r3, r2
 8008714:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8008718:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800871c:	2b00      	cmp	r3, #0
 800871e:	d11b      	bne.n	8008758 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008724:	f003 0320 	and.w	r3, r3, #32
 8008728:	2b00      	cmp	r3, #0
 800872a:	d015      	beq.n	8008758 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800872c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008730:	f003 0320 	and.w	r3, r3, #32
 8008734:	2b00      	cmp	r3, #0
 8008736:	d105      	bne.n	8008744 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800873c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008740:	2b00      	cmp	r3, #0
 8008742:	d009      	beq.n	8008758 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008748:	2b00      	cmp	r3, #0
 800874a:	f000 82f3 	beq.w	8008d34 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	4798      	blx	r3
      }
      return;
 8008756:	e2ed      	b.n	8008d34 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008758:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800875c:	2b00      	cmp	r3, #0
 800875e:	f000 8129 	beq.w	80089b4 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008762:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008766:	4b90      	ldr	r3, [pc, #576]	@ (80089a8 <HAL_UART_IRQHandler+0x2c4>)
 8008768:	4013      	ands	r3, r2
 800876a:	2b00      	cmp	r3, #0
 800876c:	d106      	bne.n	800877c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800876e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008772:	4b8e      	ldr	r3, [pc, #568]	@ (80089ac <HAL_UART_IRQHandler+0x2c8>)
 8008774:	4013      	ands	r3, r2
 8008776:	2b00      	cmp	r3, #0
 8008778:	f000 811c 	beq.w	80089b4 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800877c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008780:	f003 0301 	and.w	r3, r3, #1
 8008784:	2b00      	cmp	r3, #0
 8008786:	d011      	beq.n	80087ac <HAL_UART_IRQHandler+0xc8>
 8008788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800878c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00b      	beq.n	80087ac <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	2201      	movs	r2, #1
 800879a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087a2:	f043 0201 	orr.w	r2, r3, #1
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087b0:	f003 0302 	and.w	r3, r3, #2
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d011      	beq.n	80087dc <HAL_UART_IRQHandler+0xf8>
 80087b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087bc:	f003 0301 	and.w	r3, r3, #1
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d00b      	beq.n	80087dc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	2202      	movs	r2, #2
 80087ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80087d2:	f043 0204 	orr.w	r2, r3, #4
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80087dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80087e0:	f003 0304 	and.w	r3, r3, #4
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d011      	beq.n	800880c <HAL_UART_IRQHandler+0x128>
 80087e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80087ec:	f003 0301 	and.w	r3, r3, #1
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d00b      	beq.n	800880c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	2204      	movs	r2, #4
 80087fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008802:	f043 0202 	orr.w	r2, r3, #2
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800880c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008810:	f003 0308 	and.w	r3, r3, #8
 8008814:	2b00      	cmp	r3, #0
 8008816:	d017      	beq.n	8008848 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800881c:	f003 0320 	and.w	r3, r3, #32
 8008820:	2b00      	cmp	r3, #0
 8008822:	d105      	bne.n	8008830 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008824:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008828:	4b5f      	ldr	r3, [pc, #380]	@ (80089a8 <HAL_UART_IRQHandler+0x2c4>)
 800882a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800882c:	2b00      	cmp	r3, #0
 800882e:	d00b      	beq.n	8008848 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2208      	movs	r2, #8
 8008836:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800883e:	f043 0208 	orr.w	r2, r3, #8
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800884c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008850:	2b00      	cmp	r3, #0
 8008852:	d012      	beq.n	800887a <HAL_UART_IRQHandler+0x196>
 8008854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008858:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800885c:	2b00      	cmp	r3, #0
 800885e:	d00c      	beq.n	800887a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008868:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008870:	f043 0220 	orr.w	r2, r3, #32
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008880:	2b00      	cmp	r3, #0
 8008882:	f000 8259 	beq.w	8008d38 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800888a:	f003 0320 	and.w	r3, r3, #32
 800888e:	2b00      	cmp	r3, #0
 8008890:	d013      	beq.n	80088ba <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008892:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008896:	f003 0320 	and.w	r3, r3, #32
 800889a:	2b00      	cmp	r3, #0
 800889c:	d105      	bne.n	80088aa <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800889e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80088a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d007      	beq.n	80088ba <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d003      	beq.n	80088ba <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80088c0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	689b      	ldr	r3, [r3, #8]
 80088ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088ce:	2b40      	cmp	r3, #64	@ 0x40
 80088d0:	d005      	beq.n	80088de <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80088d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80088d6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d058      	beq.n	8008990 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f001 f8e3 	bl	8009aaa <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	689b      	ldr	r3, [r3, #8]
 80088ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80088ee:	2b40      	cmp	r3, #64	@ 0x40
 80088f0:	d148      	bne.n	8008984 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	3308      	adds	r3, #8
 80088f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008900:	e853 3f00 	ldrex	r3, [r3]
 8008904:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008908:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800890c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008910:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	3308      	adds	r3, #8
 800891a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800891e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008922:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008926:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800892a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800892e:	e841 2300 	strex	r3, r2, [r1]
 8008932:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008936:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1d9      	bne.n	80088f2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008944:	2b00      	cmp	r3, #0
 8008946:	d017      	beq.n	8008978 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800894e:	4a18      	ldr	r2, [pc, #96]	@ (80089b0 <HAL_UART_IRQHandler+0x2cc>)
 8008950:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008958:	4618      	mov	r0, r3
 800895a:	f7fc f81f 	bl	800499c <HAL_DMA_Abort_IT>
 800895e:	4603      	mov	r3, r0
 8008960:	2b00      	cmp	r3, #0
 8008962:	d01f      	beq.n	80089a4 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800896a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800896c:	687a      	ldr	r2, [r7, #4]
 800896e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008972:	4610      	mov	r0, r2
 8008974:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008976:	e015      	b.n	80089a4 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008982:	e00f      	b.n	80089a4 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800898e:	e009      	b.n	80089a4 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2200      	movs	r2, #0
 800899e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80089a2:	e1c9      	b.n	8008d38 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089a4:	bf00      	nop
    return;
 80089a6:	e1c7      	b.n	8008d38 <HAL_UART_IRQHandler+0x654>
 80089a8:	10000001 	.word	0x10000001
 80089ac:	04000120 	.word	0x04000120
 80089b0:	08009e33 	.word	0x08009e33

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	f040 8157 	bne.w	8008c6c <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80089be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089c2:	f003 0310 	and.w	r3, r3, #16
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	f000 8150 	beq.w	8008c6c <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80089cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089d0:	f003 0310 	and.w	r3, r3, #16
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f000 8149 	beq.w	8008c6c <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	2210      	movs	r2, #16
 80089e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	689b      	ldr	r3, [r3, #8]
 80089e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80089ec:	2b40      	cmp	r3, #64	@ 0x40
 80089ee:	f040 80bd 	bne.w	8008b6c <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	685b      	ldr	r3, [r3, #4]
 80089fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008a00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	f000 8199 	beq.w	8008d3c <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008a10:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a14:	429a      	cmp	r2, r3
 8008a16:	f080 8191 	bcs.w	8008d3c <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008a20:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	f003 0320 	and.w	r3, r3, #32
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	f040 8087 	bne.w	8008b46 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a40:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008a44:	e853 3f00 	ldrex	r3, [r3]
 8008a48:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008a4c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008a50:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008a54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008a62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008a66:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008a6e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008a72:	e841 2300 	strex	r3, r2, [r1]
 8008a76:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008a7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1da      	bne.n	8008a38 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	3308      	adds	r3, #8
 8008a88:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a8a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008a8c:	e853 3f00 	ldrex	r3, [r3]
 8008a90:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008a92:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008a94:	f023 0301 	bic.w	r3, r3, #1
 8008a98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	3308      	adds	r3, #8
 8008aa2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008aa6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008aaa:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aac:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008aae:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008ab2:	e841 2300 	strex	r3, r2, [r1]
 8008ab6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008ab8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d1e1      	bne.n	8008a82 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	3308      	adds	r3, #8
 8008ac4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008ac8:	e853 3f00 	ldrex	r3, [r3]
 8008acc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8008ace:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008ad0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ad4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	3308      	adds	r3, #8
 8008ade:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008ae2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008ae4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008ae8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008aea:	e841 2300 	strex	r3, r2, [r1]
 8008aee:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008af0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d1e3      	bne.n	8008abe <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2220      	movs	r2, #32
 8008afa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	2200      	movs	r2, #0
 8008b02:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b0a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b0c:	e853 3f00 	ldrex	r3, [r3]
 8008b10:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008b12:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b14:	f023 0310 	bic.w	r3, r3, #16
 8008b18:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	461a      	mov	r2, r3
 8008b22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8008b26:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b28:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b2a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008b2c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b2e:	e841 2300 	strex	r3, r2, [r1]
 8008b32:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008b34:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d1e4      	bne.n	8008b04 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7fb fed2 	bl	80048ea <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2202      	movs	r2, #2
 8008b4a:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008b52:	687a      	ldr	r2, [r7, #4]
 8008b54:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8008b5e:	b292      	uxth	r2, r2
 8008b60:	1a8a      	subs	r2, r1, r2
 8008b62:	b292      	uxth	r2, r2
 8008b64:	4611      	mov	r1, r2
 8008b66:	6878      	ldr	r0, [r7, #4]
 8008b68:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008b6a:	e0e7      	b.n	8008d3c <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b78:	b29b      	uxth	r3, r3
 8008b7a:	1ad3      	subs	r3, r2, r3
 8008b7c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	f000 80d9 	beq.w	8008d40 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8008b8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	f000 80d4 	beq.w	8008d40 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ba0:	e853 3f00 	ldrex	r3, [r3]
 8008ba4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ba8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008bac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	461a      	mov	r2, r3
 8008bb6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8008bba:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bbc:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bbe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008bc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008bc2:	e841 2300 	strex	r3, r2, [r1]
 8008bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008bc8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d1e4      	bne.n	8008b98 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	3308      	adds	r3, #8
 8008bd4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bd8:	e853 3f00 	ldrex	r3, [r3]
 8008bdc:	623b      	str	r3, [r7, #32]
   return(result);
 8008bde:	6a3b      	ldr	r3, [r7, #32]
 8008be0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008be4:	f023 0301 	bic.w	r3, r3, #1
 8008be8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	3308      	adds	r3, #8
 8008bf2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008bf6:	633a      	str	r2, [r7, #48]	@ 0x30
 8008bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bfc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bfe:	e841 2300 	strex	r3, r2, [r1]
 8008c02:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d1e1      	bne.n	8008bce <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2220      	movs	r2, #32
 8008c0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	2200      	movs	r2, #0
 8008c16:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	e853 3f00 	ldrex	r3, [r3]
 8008c2a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	f023 0310 	bic.w	r3, r3, #16
 8008c32:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	461a      	mov	r2, r3
 8008c3c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8008c40:	61fb      	str	r3, [r7, #28]
 8008c42:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c44:	69b9      	ldr	r1, [r7, #24]
 8008c46:	69fa      	ldr	r2, [r7, #28]
 8008c48:	e841 2300 	strex	r3, r2, [r1]
 8008c4c:	617b      	str	r3, [r7, #20]
   return(result);
 8008c4e:	697b      	ldr	r3, [r7, #20]
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d1e4      	bne.n	8008c1e <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2202      	movs	r2, #2
 8008c58:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008c60:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8008c64:	4611      	mov	r1, r2
 8008c66:	6878      	ldr	r0, [r7, #4]
 8008c68:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008c6a:	e069      	b.n	8008d40 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c70:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d010      	beq.n	8008c9a <HAL_UART_IRQHandler+0x5b6>
 8008c78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008c7c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d00a      	beq.n	8008c9a <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8008c8c:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c98:	e055      	b.n	8008d46 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008c9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d014      	beq.n	8008cd0 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008ca6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008caa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d105      	bne.n	8008cbe <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008cb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008cb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d008      	beq.n	8008cd0 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d03e      	beq.n	8008d44 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	4798      	blx	r3
    }
    return;
 8008cce:	e039      	b.n	8008d44 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d009      	beq.n	8008cf0 <HAL_UART_IRQHandler+0x60c>
 8008cdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008ce0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	d003      	beq.n	8008cf0 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f001 f8ba 	bl	8009e62 <UART_EndTransmit_IT>
    return;
 8008cee:	e02a      	b.n	8008d46 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cf4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d00b      	beq.n	8008d14 <HAL_UART_IRQHandler+0x630>
 8008cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d00:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d005      	beq.n	8008d14 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8008d0e:	6878      	ldr	r0, [r7, #4]
 8008d10:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d12:	e018      	b.n	8008d46 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d012      	beq.n	8008d46 <HAL_UART_IRQHandler+0x662>
 8008d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	da0e      	bge.n	8008d46 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8008d2e:	6878      	ldr	r0, [r7, #4]
 8008d30:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d32:	e008      	b.n	8008d46 <HAL_UART_IRQHandler+0x662>
      return;
 8008d34:	bf00      	nop
 8008d36:	e006      	b.n	8008d46 <HAL_UART_IRQHandler+0x662>
    return;
 8008d38:	bf00      	nop
 8008d3a:	e004      	b.n	8008d46 <HAL_UART_IRQHandler+0x662>
      return;
 8008d3c:	bf00      	nop
 8008d3e:	e002      	b.n	8008d46 <HAL_UART_IRQHandler+0x662>
      return;
 8008d40:	bf00      	nop
 8008d42:	e000      	b.n	8008d46 <HAL_UART_IRQHandler+0x662>
    return;
 8008d44:	bf00      	nop
  }
}
 8008d46:	37e8      	adds	r7, #232	@ 0xe8
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b083      	sub	sp, #12
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008d54:	bf00      	nop
 8008d56:	370c      	adds	r7, #12
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr

08008d60 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008d60:	b480      	push	{r7}
 8008d62:	b083      	sub	sp, #12
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008d68:	bf00      	nop
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008d7c:	bf00      	nop
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008d90:	bf00      	nop
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008da4:	bf00      	nop
 8008da6:	370c      	adds	r7, #12
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr

08008db0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008db0:	b480      	push	{r7}
 8008db2:	b083      	sub	sp, #12
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008db8:	bf00      	nop
 8008dba:	370c      	adds	r7, #12
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc2:	4770      	bx	lr

08008dc4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008dcc:	bf00      	nop
 8008dce:	370c      	adds	r7, #12
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd6:	4770      	bx	lr

08008dd8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b083      	sub	sp, #12
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008de0:	bf00      	nop
 8008de2:	370c      	adds	r7, #12
 8008de4:	46bd      	mov	sp, r7
 8008de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dea:	4770      	bx	lr

08008dec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008dec:	b480      	push	{r7}
 8008dee:	b083      	sub	sp, #12
 8008df0:	af00      	add	r7, sp, #0
 8008df2:	6078      	str	r0, [r7, #4]
 8008df4:	460b      	mov	r3, r1
 8008df6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008df8:	bf00      	nop
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr

08008e04 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b083      	sub	sp, #12
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	6078      	str	r0, [r7, #4]
 8008e0c:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a09      	ldr	r2, [pc, #36]	@ (8008e38 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d009      	beq.n	8008e2c <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	695b      	ldr	r3, [r3, #20]
 8008e1e:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	683a      	ldr	r2, [r7, #0]
 8008e28:	430a      	orrs	r2, r1
 8008e2a:	615a      	str	r2, [r3, #20]
  }
}
 8008e2c:	bf00      	nop
 8008e2e:	370c      	adds	r7, #12
 8008e30:	46bd      	mov	sp, r7
 8008e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e36:	4770      	bx	lr
 8008e38:	40008000 	.word	0x40008000

08008e3c <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8008e3c:	b480      	push	{r7}
 8008e3e:	b083      	sub	sp, #12
 8008e40:	af00      	add	r7, sp, #0
 8008e42:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a18      	ldr	r2, [pc, #96]	@ (8008eac <HAL_UART_EnableReceiverTimeout+0x70>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d027      	beq.n	8008e9e <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e54:	2b20      	cmp	r3, #32
 8008e56:	d120      	bne.n	8008e9a <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d101      	bne.n	8008e66 <HAL_UART_EnableReceiverTimeout+0x2a>
 8008e62:	2302      	movs	r3, #2
 8008e64:	e01c      	b.n	8008ea0 <HAL_UART_EnableReceiverTimeout+0x64>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	2201      	movs	r2, #1
 8008e6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	2224      	movs	r2, #36	@ 0x24
 8008e72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	685a      	ldr	r2, [r3, #4]
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8008e84:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2220      	movs	r2, #32
 8008e8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2200      	movs	r2, #0
 8008e92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8008e96:	2300      	movs	r3, #0
 8008e98:	e002      	b.n	8008ea0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8008e9a:	2302      	movs	r3, #2
 8008e9c:	e000      	b.n	8008ea0 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
  }
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr
 8008eac:	40008000 	.word	0x40008000

08008eb0 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	370c      	adds	r7, #12
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ec8:	4770      	bx	lr
	...

08008ecc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008ecc:	b480      	push	{r7}
 8008ece:	b083      	sub	sp, #12
 8008ed0:	af00      	add	r7, sp, #0
 8008ed2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	4a1a      	ldr	r2, [pc, #104]	@ (8008f40 <UART_InitCallbacksToDefault+0x74>)
 8008ed8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	4a19      	ldr	r2, [pc, #100]	@ (8008f44 <UART_InitCallbacksToDefault+0x78>)
 8008ee0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	4a18      	ldr	r2, [pc, #96]	@ (8008f48 <UART_InitCallbacksToDefault+0x7c>)
 8008ee8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4a17      	ldr	r2, [pc, #92]	@ (8008f4c <UART_InitCallbacksToDefault+0x80>)
 8008ef0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a16      	ldr	r2, [pc, #88]	@ (8008f50 <UART_InitCallbacksToDefault+0x84>)
 8008ef8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	4a15      	ldr	r2, [pc, #84]	@ (8008f54 <UART_InitCallbacksToDefault+0x88>)
 8008f00:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	4a14      	ldr	r2, [pc, #80]	@ (8008f58 <UART_InitCallbacksToDefault+0x8c>)
 8008f08:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	4a13      	ldr	r2, [pc, #76]	@ (8008f5c <UART_InitCallbacksToDefault+0x90>)
 8008f10:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	4a12      	ldr	r2, [pc, #72]	@ (8008f60 <UART_InitCallbacksToDefault+0x94>)
 8008f18:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4a11      	ldr	r2, [pc, #68]	@ (8008f64 <UART_InitCallbacksToDefault+0x98>)
 8008f20:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	4a10      	ldr	r2, [pc, #64]	@ (8008f68 <UART_InitCallbacksToDefault+0x9c>)
 8008f28:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a0f      	ldr	r2, [pc, #60]	@ (8008f6c <UART_InitCallbacksToDefault+0xa0>)
 8008f30:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8008f34:	bf00      	nop
 8008f36:	370c      	adds	r7, #12
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr
 8008f40:	08008d61 	.word	0x08008d61
 8008f44:	08008d4d 	.word	0x08008d4d
 8008f48:	08008d89 	.word	0x08008d89
 8008f4c:	08008d75 	.word	0x08008d75
 8008f50:	08008d9d 	.word	0x08008d9d
 8008f54:	08008db1 	.word	0x08008db1
 8008f58:	08008dc5 	.word	0x08008dc5
 8008f5c:	08008dd9 	.word	0x08008dd9
 8008f60:	08009ebd 	.word	0x08009ebd
 8008f64:	08009ed1 	.word	0x08009ed1
 8008f68:	08009ee5 	.word	0x08009ee5
 8008f6c:	08008ded 	.word	0x08008ded

08008f70 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008f74:	b08c      	sub	sp, #48	@ 0x30
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008f80:	697b      	ldr	r3, [r7, #20]
 8008f82:	689a      	ldr	r2, [r3, #8]
 8008f84:	697b      	ldr	r3, [r7, #20]
 8008f86:	691b      	ldr	r3, [r3, #16]
 8008f88:	431a      	orrs	r2, r3
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	695b      	ldr	r3, [r3, #20]
 8008f8e:	431a      	orrs	r2, r3
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	69db      	ldr	r3, [r3, #28]
 8008f94:	4313      	orrs	r3, r2
 8008f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008f98:	697b      	ldr	r3, [r7, #20]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	4baa      	ldr	r3, [pc, #680]	@ (8009248 <UART_SetConfig+0x2d8>)
 8008fa0:	4013      	ands	r3, r2
 8008fa2:	697a      	ldr	r2, [r7, #20]
 8008fa4:	6812      	ldr	r2, [r2, #0]
 8008fa6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008fa8:	430b      	orrs	r3, r1
 8008faa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008fac:	697b      	ldr	r3, [r7, #20]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008fb6:	697b      	ldr	r3, [r7, #20]
 8008fb8:	68da      	ldr	r2, [r3, #12]
 8008fba:	697b      	ldr	r3, [r7, #20]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	430a      	orrs	r2, r1
 8008fc0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008fc2:	697b      	ldr	r3, [r7, #20]
 8008fc4:	699b      	ldr	r3, [r3, #24]
 8008fc6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a9f      	ldr	r2, [pc, #636]	@ (800924c <UART_SetConfig+0x2dc>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d004      	beq.n	8008fdc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	6a1b      	ldr	r3, [r3, #32]
 8008fd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008fdc:	697b      	ldr	r3, [r7, #20]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	689b      	ldr	r3, [r3, #8]
 8008fe2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008fe6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008fea:	697a      	ldr	r2, [r7, #20]
 8008fec:	6812      	ldr	r2, [r2, #0]
 8008fee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008ff0:	430b      	orrs	r3, r1
 8008ff2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008ff4:	697b      	ldr	r3, [r7, #20]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ffa:	f023 010f 	bic.w	r1, r3, #15
 8008ffe:	697b      	ldr	r3, [r7, #20]
 8009000:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	430a      	orrs	r2, r1
 8009008:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	4a90      	ldr	r2, [pc, #576]	@ (8009250 <UART_SetConfig+0x2e0>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d125      	bne.n	8009060 <UART_SetConfig+0xf0>
 8009014:	4b8f      	ldr	r3, [pc, #572]	@ (8009254 <UART_SetConfig+0x2e4>)
 8009016:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800901a:	f003 0303 	and.w	r3, r3, #3
 800901e:	2b03      	cmp	r3, #3
 8009020:	d81a      	bhi.n	8009058 <UART_SetConfig+0xe8>
 8009022:	a201      	add	r2, pc, #4	@ (adr r2, 8009028 <UART_SetConfig+0xb8>)
 8009024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009028:	08009039 	.word	0x08009039
 800902c:	08009049 	.word	0x08009049
 8009030:	08009041 	.word	0x08009041
 8009034:	08009051 	.word	0x08009051
 8009038:	2301      	movs	r3, #1
 800903a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800903e:	e116      	b.n	800926e <UART_SetConfig+0x2fe>
 8009040:	2302      	movs	r3, #2
 8009042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009046:	e112      	b.n	800926e <UART_SetConfig+0x2fe>
 8009048:	2304      	movs	r3, #4
 800904a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800904e:	e10e      	b.n	800926e <UART_SetConfig+0x2fe>
 8009050:	2308      	movs	r3, #8
 8009052:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009056:	e10a      	b.n	800926e <UART_SetConfig+0x2fe>
 8009058:	2310      	movs	r3, #16
 800905a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800905e:	e106      	b.n	800926e <UART_SetConfig+0x2fe>
 8009060:	697b      	ldr	r3, [r7, #20]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a7c      	ldr	r2, [pc, #496]	@ (8009258 <UART_SetConfig+0x2e8>)
 8009066:	4293      	cmp	r3, r2
 8009068:	d138      	bne.n	80090dc <UART_SetConfig+0x16c>
 800906a:	4b7a      	ldr	r3, [pc, #488]	@ (8009254 <UART_SetConfig+0x2e4>)
 800906c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009070:	f003 030c 	and.w	r3, r3, #12
 8009074:	2b0c      	cmp	r3, #12
 8009076:	d82d      	bhi.n	80090d4 <UART_SetConfig+0x164>
 8009078:	a201      	add	r2, pc, #4	@ (adr r2, 8009080 <UART_SetConfig+0x110>)
 800907a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800907e:	bf00      	nop
 8009080:	080090b5 	.word	0x080090b5
 8009084:	080090d5 	.word	0x080090d5
 8009088:	080090d5 	.word	0x080090d5
 800908c:	080090d5 	.word	0x080090d5
 8009090:	080090c5 	.word	0x080090c5
 8009094:	080090d5 	.word	0x080090d5
 8009098:	080090d5 	.word	0x080090d5
 800909c:	080090d5 	.word	0x080090d5
 80090a0:	080090bd 	.word	0x080090bd
 80090a4:	080090d5 	.word	0x080090d5
 80090a8:	080090d5 	.word	0x080090d5
 80090ac:	080090d5 	.word	0x080090d5
 80090b0:	080090cd 	.word	0x080090cd
 80090b4:	2300      	movs	r3, #0
 80090b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090ba:	e0d8      	b.n	800926e <UART_SetConfig+0x2fe>
 80090bc:	2302      	movs	r3, #2
 80090be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090c2:	e0d4      	b.n	800926e <UART_SetConfig+0x2fe>
 80090c4:	2304      	movs	r3, #4
 80090c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090ca:	e0d0      	b.n	800926e <UART_SetConfig+0x2fe>
 80090cc:	2308      	movs	r3, #8
 80090ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090d2:	e0cc      	b.n	800926e <UART_SetConfig+0x2fe>
 80090d4:	2310      	movs	r3, #16
 80090d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80090da:	e0c8      	b.n	800926e <UART_SetConfig+0x2fe>
 80090dc:	697b      	ldr	r3, [r7, #20]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4a5e      	ldr	r2, [pc, #376]	@ (800925c <UART_SetConfig+0x2ec>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d125      	bne.n	8009132 <UART_SetConfig+0x1c2>
 80090e6:	4b5b      	ldr	r3, [pc, #364]	@ (8009254 <UART_SetConfig+0x2e4>)
 80090e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090ec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80090f0:	2b30      	cmp	r3, #48	@ 0x30
 80090f2:	d016      	beq.n	8009122 <UART_SetConfig+0x1b2>
 80090f4:	2b30      	cmp	r3, #48	@ 0x30
 80090f6:	d818      	bhi.n	800912a <UART_SetConfig+0x1ba>
 80090f8:	2b20      	cmp	r3, #32
 80090fa:	d00a      	beq.n	8009112 <UART_SetConfig+0x1a2>
 80090fc:	2b20      	cmp	r3, #32
 80090fe:	d814      	bhi.n	800912a <UART_SetConfig+0x1ba>
 8009100:	2b00      	cmp	r3, #0
 8009102:	d002      	beq.n	800910a <UART_SetConfig+0x19a>
 8009104:	2b10      	cmp	r3, #16
 8009106:	d008      	beq.n	800911a <UART_SetConfig+0x1aa>
 8009108:	e00f      	b.n	800912a <UART_SetConfig+0x1ba>
 800910a:	2300      	movs	r3, #0
 800910c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009110:	e0ad      	b.n	800926e <UART_SetConfig+0x2fe>
 8009112:	2302      	movs	r3, #2
 8009114:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009118:	e0a9      	b.n	800926e <UART_SetConfig+0x2fe>
 800911a:	2304      	movs	r3, #4
 800911c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009120:	e0a5      	b.n	800926e <UART_SetConfig+0x2fe>
 8009122:	2308      	movs	r3, #8
 8009124:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009128:	e0a1      	b.n	800926e <UART_SetConfig+0x2fe>
 800912a:	2310      	movs	r3, #16
 800912c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009130:	e09d      	b.n	800926e <UART_SetConfig+0x2fe>
 8009132:	697b      	ldr	r3, [r7, #20]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	4a4a      	ldr	r2, [pc, #296]	@ (8009260 <UART_SetConfig+0x2f0>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d125      	bne.n	8009188 <UART_SetConfig+0x218>
 800913c:	4b45      	ldr	r3, [pc, #276]	@ (8009254 <UART_SetConfig+0x2e4>)
 800913e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009142:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009146:	2bc0      	cmp	r3, #192	@ 0xc0
 8009148:	d016      	beq.n	8009178 <UART_SetConfig+0x208>
 800914a:	2bc0      	cmp	r3, #192	@ 0xc0
 800914c:	d818      	bhi.n	8009180 <UART_SetConfig+0x210>
 800914e:	2b80      	cmp	r3, #128	@ 0x80
 8009150:	d00a      	beq.n	8009168 <UART_SetConfig+0x1f8>
 8009152:	2b80      	cmp	r3, #128	@ 0x80
 8009154:	d814      	bhi.n	8009180 <UART_SetConfig+0x210>
 8009156:	2b00      	cmp	r3, #0
 8009158:	d002      	beq.n	8009160 <UART_SetConfig+0x1f0>
 800915a:	2b40      	cmp	r3, #64	@ 0x40
 800915c:	d008      	beq.n	8009170 <UART_SetConfig+0x200>
 800915e:	e00f      	b.n	8009180 <UART_SetConfig+0x210>
 8009160:	2300      	movs	r3, #0
 8009162:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009166:	e082      	b.n	800926e <UART_SetConfig+0x2fe>
 8009168:	2302      	movs	r3, #2
 800916a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800916e:	e07e      	b.n	800926e <UART_SetConfig+0x2fe>
 8009170:	2304      	movs	r3, #4
 8009172:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009176:	e07a      	b.n	800926e <UART_SetConfig+0x2fe>
 8009178:	2308      	movs	r3, #8
 800917a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800917e:	e076      	b.n	800926e <UART_SetConfig+0x2fe>
 8009180:	2310      	movs	r3, #16
 8009182:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009186:	e072      	b.n	800926e <UART_SetConfig+0x2fe>
 8009188:	697b      	ldr	r3, [r7, #20]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	4a35      	ldr	r2, [pc, #212]	@ (8009264 <UART_SetConfig+0x2f4>)
 800918e:	4293      	cmp	r3, r2
 8009190:	d12a      	bne.n	80091e8 <UART_SetConfig+0x278>
 8009192:	4b30      	ldr	r3, [pc, #192]	@ (8009254 <UART_SetConfig+0x2e4>)
 8009194:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009198:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800919c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80091a0:	d01a      	beq.n	80091d8 <UART_SetConfig+0x268>
 80091a2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80091a6:	d81b      	bhi.n	80091e0 <UART_SetConfig+0x270>
 80091a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091ac:	d00c      	beq.n	80091c8 <UART_SetConfig+0x258>
 80091ae:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80091b2:	d815      	bhi.n	80091e0 <UART_SetConfig+0x270>
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d003      	beq.n	80091c0 <UART_SetConfig+0x250>
 80091b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091bc:	d008      	beq.n	80091d0 <UART_SetConfig+0x260>
 80091be:	e00f      	b.n	80091e0 <UART_SetConfig+0x270>
 80091c0:	2300      	movs	r3, #0
 80091c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091c6:	e052      	b.n	800926e <UART_SetConfig+0x2fe>
 80091c8:	2302      	movs	r3, #2
 80091ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091ce:	e04e      	b.n	800926e <UART_SetConfig+0x2fe>
 80091d0:	2304      	movs	r3, #4
 80091d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091d6:	e04a      	b.n	800926e <UART_SetConfig+0x2fe>
 80091d8:	2308      	movs	r3, #8
 80091da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091de:	e046      	b.n	800926e <UART_SetConfig+0x2fe>
 80091e0:	2310      	movs	r3, #16
 80091e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80091e6:	e042      	b.n	800926e <UART_SetConfig+0x2fe>
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a17      	ldr	r2, [pc, #92]	@ (800924c <UART_SetConfig+0x2dc>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d13a      	bne.n	8009268 <UART_SetConfig+0x2f8>
 80091f2:	4b18      	ldr	r3, [pc, #96]	@ (8009254 <UART_SetConfig+0x2e4>)
 80091f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80091f8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80091fc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009200:	d01a      	beq.n	8009238 <UART_SetConfig+0x2c8>
 8009202:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009206:	d81b      	bhi.n	8009240 <UART_SetConfig+0x2d0>
 8009208:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800920c:	d00c      	beq.n	8009228 <UART_SetConfig+0x2b8>
 800920e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009212:	d815      	bhi.n	8009240 <UART_SetConfig+0x2d0>
 8009214:	2b00      	cmp	r3, #0
 8009216:	d003      	beq.n	8009220 <UART_SetConfig+0x2b0>
 8009218:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800921c:	d008      	beq.n	8009230 <UART_SetConfig+0x2c0>
 800921e:	e00f      	b.n	8009240 <UART_SetConfig+0x2d0>
 8009220:	2300      	movs	r3, #0
 8009222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009226:	e022      	b.n	800926e <UART_SetConfig+0x2fe>
 8009228:	2302      	movs	r3, #2
 800922a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800922e:	e01e      	b.n	800926e <UART_SetConfig+0x2fe>
 8009230:	2304      	movs	r3, #4
 8009232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009236:	e01a      	b.n	800926e <UART_SetConfig+0x2fe>
 8009238:	2308      	movs	r3, #8
 800923a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800923e:	e016      	b.n	800926e <UART_SetConfig+0x2fe>
 8009240:	2310      	movs	r3, #16
 8009242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8009246:	e012      	b.n	800926e <UART_SetConfig+0x2fe>
 8009248:	cfff69f3 	.word	0xcfff69f3
 800924c:	40008000 	.word	0x40008000
 8009250:	40013800 	.word	0x40013800
 8009254:	40021000 	.word	0x40021000
 8009258:	40004400 	.word	0x40004400
 800925c:	40004800 	.word	0x40004800
 8009260:	40004c00 	.word	0x40004c00
 8009264:	40005000 	.word	0x40005000
 8009268:	2310      	movs	r3, #16
 800926a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800926e:	697b      	ldr	r3, [r7, #20]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	4aae      	ldr	r2, [pc, #696]	@ (800952c <UART_SetConfig+0x5bc>)
 8009274:	4293      	cmp	r3, r2
 8009276:	f040 8097 	bne.w	80093a8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800927a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800927e:	2b08      	cmp	r3, #8
 8009280:	d823      	bhi.n	80092ca <UART_SetConfig+0x35a>
 8009282:	a201      	add	r2, pc, #4	@ (adr r2, 8009288 <UART_SetConfig+0x318>)
 8009284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009288:	080092ad 	.word	0x080092ad
 800928c:	080092cb 	.word	0x080092cb
 8009290:	080092b5 	.word	0x080092b5
 8009294:	080092cb 	.word	0x080092cb
 8009298:	080092bb 	.word	0x080092bb
 800929c:	080092cb 	.word	0x080092cb
 80092a0:	080092cb 	.word	0x080092cb
 80092a4:	080092cb 	.word	0x080092cb
 80092a8:	080092c3 	.word	0x080092c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80092ac:	f7fc fc8c 	bl	8005bc8 <HAL_RCC_GetPCLK1Freq>
 80092b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80092b2:	e010      	b.n	80092d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80092b4:	4b9e      	ldr	r3, [pc, #632]	@ (8009530 <UART_SetConfig+0x5c0>)
 80092b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80092b8:	e00d      	b.n	80092d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80092ba:	f7fc fc17 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 80092be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80092c0:	e009      	b.n	80092d6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80092c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80092c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80092c8:	e005      	b.n	80092d6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80092ca:	2300      	movs	r3, #0
 80092cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80092ce:	2301      	movs	r3, #1
 80092d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80092d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80092d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d8:	2b00      	cmp	r3, #0
 80092da:	f000 8130 	beq.w	800953e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80092de:	697b      	ldr	r3, [r7, #20]
 80092e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092e2:	4a94      	ldr	r2, [pc, #592]	@ (8009534 <UART_SetConfig+0x5c4>)
 80092e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092e8:	461a      	mov	r2, r3
 80092ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ec:	fbb3 f3f2 	udiv	r3, r3, r2
 80092f0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	685a      	ldr	r2, [r3, #4]
 80092f6:	4613      	mov	r3, r2
 80092f8:	005b      	lsls	r3, r3, #1
 80092fa:	4413      	add	r3, r2
 80092fc:	69ba      	ldr	r2, [r7, #24]
 80092fe:	429a      	cmp	r2, r3
 8009300:	d305      	bcc.n	800930e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009302:	697b      	ldr	r3, [r7, #20]
 8009304:	685b      	ldr	r3, [r3, #4]
 8009306:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009308:	69ba      	ldr	r2, [r7, #24]
 800930a:	429a      	cmp	r2, r3
 800930c:	d903      	bls.n	8009316 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800930e:	2301      	movs	r3, #1
 8009310:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009314:	e113      	b.n	800953e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009318:	2200      	movs	r2, #0
 800931a:	60bb      	str	r3, [r7, #8]
 800931c:	60fa      	str	r2, [r7, #12]
 800931e:	697b      	ldr	r3, [r7, #20]
 8009320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009322:	4a84      	ldr	r2, [pc, #528]	@ (8009534 <UART_SetConfig+0x5c4>)
 8009324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009328:	b29b      	uxth	r3, r3
 800932a:	2200      	movs	r2, #0
 800932c:	603b      	str	r3, [r7, #0]
 800932e:	607a      	str	r2, [r7, #4]
 8009330:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009334:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8009338:	f7f7 fc5c 	bl	8000bf4 <__aeabi_uldivmod>
 800933c:	4602      	mov	r2, r0
 800933e:	460b      	mov	r3, r1
 8009340:	4610      	mov	r0, r2
 8009342:	4619      	mov	r1, r3
 8009344:	f04f 0200 	mov.w	r2, #0
 8009348:	f04f 0300 	mov.w	r3, #0
 800934c:	020b      	lsls	r3, r1, #8
 800934e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009352:	0202      	lsls	r2, r0, #8
 8009354:	6979      	ldr	r1, [r7, #20]
 8009356:	6849      	ldr	r1, [r1, #4]
 8009358:	0849      	lsrs	r1, r1, #1
 800935a:	2000      	movs	r0, #0
 800935c:	460c      	mov	r4, r1
 800935e:	4605      	mov	r5, r0
 8009360:	eb12 0804 	adds.w	r8, r2, r4
 8009364:	eb43 0905 	adc.w	r9, r3, r5
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	2200      	movs	r2, #0
 800936e:	469a      	mov	sl, r3
 8009370:	4693      	mov	fp, r2
 8009372:	4652      	mov	r2, sl
 8009374:	465b      	mov	r3, fp
 8009376:	4640      	mov	r0, r8
 8009378:	4649      	mov	r1, r9
 800937a:	f7f7 fc3b 	bl	8000bf4 <__aeabi_uldivmod>
 800937e:	4602      	mov	r2, r0
 8009380:	460b      	mov	r3, r1
 8009382:	4613      	mov	r3, r2
 8009384:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009386:	6a3b      	ldr	r3, [r7, #32]
 8009388:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800938c:	d308      	bcc.n	80093a0 <UART_SetConfig+0x430>
 800938e:	6a3b      	ldr	r3, [r7, #32]
 8009390:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009394:	d204      	bcs.n	80093a0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	6a3a      	ldr	r2, [r7, #32]
 800939c:	60da      	str	r2, [r3, #12]
 800939e:	e0ce      	b.n	800953e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80093a0:	2301      	movs	r3, #1
 80093a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80093a6:	e0ca      	b.n	800953e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093a8:	697b      	ldr	r3, [r7, #20]
 80093aa:	69db      	ldr	r3, [r3, #28]
 80093ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80093b0:	d166      	bne.n	8009480 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80093b2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80093b6:	2b08      	cmp	r3, #8
 80093b8:	d827      	bhi.n	800940a <UART_SetConfig+0x49a>
 80093ba:	a201      	add	r2, pc, #4	@ (adr r2, 80093c0 <UART_SetConfig+0x450>)
 80093bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c0:	080093e5 	.word	0x080093e5
 80093c4:	080093ed 	.word	0x080093ed
 80093c8:	080093f5 	.word	0x080093f5
 80093cc:	0800940b 	.word	0x0800940b
 80093d0:	080093fb 	.word	0x080093fb
 80093d4:	0800940b 	.word	0x0800940b
 80093d8:	0800940b 	.word	0x0800940b
 80093dc:	0800940b 	.word	0x0800940b
 80093e0:	08009403 	.word	0x08009403
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093e4:	f7fc fbf0 	bl	8005bc8 <HAL_RCC_GetPCLK1Freq>
 80093e8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80093ea:	e014      	b.n	8009416 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093ec:	f7fc fc02 	bl	8005bf4 <HAL_RCC_GetPCLK2Freq>
 80093f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80093f2:	e010      	b.n	8009416 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093f4:	4b4e      	ldr	r3, [pc, #312]	@ (8009530 <UART_SetConfig+0x5c0>)
 80093f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80093f8:	e00d      	b.n	8009416 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80093fa:	f7fc fb77 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 80093fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009400:	e009      	b.n	8009416 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009402:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009406:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009408:	e005      	b.n	8009416 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800940a:	2300      	movs	r3, #0
 800940c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800940e:	2301      	movs	r3, #1
 8009410:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009414:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009418:	2b00      	cmp	r3, #0
 800941a:	f000 8090 	beq.w	800953e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800941e:	697b      	ldr	r3, [r7, #20]
 8009420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009422:	4a44      	ldr	r2, [pc, #272]	@ (8009534 <UART_SetConfig+0x5c4>)
 8009424:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009428:	461a      	mov	r2, r3
 800942a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800942c:	fbb3 f3f2 	udiv	r3, r3, r2
 8009430:	005a      	lsls	r2, r3, #1
 8009432:	697b      	ldr	r3, [r7, #20]
 8009434:	685b      	ldr	r3, [r3, #4]
 8009436:	085b      	lsrs	r3, r3, #1
 8009438:	441a      	add	r2, r3
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009442:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009444:	6a3b      	ldr	r3, [r7, #32]
 8009446:	2b0f      	cmp	r3, #15
 8009448:	d916      	bls.n	8009478 <UART_SetConfig+0x508>
 800944a:	6a3b      	ldr	r3, [r7, #32]
 800944c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009450:	d212      	bcs.n	8009478 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009452:	6a3b      	ldr	r3, [r7, #32]
 8009454:	b29b      	uxth	r3, r3
 8009456:	f023 030f 	bic.w	r3, r3, #15
 800945a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800945c:	6a3b      	ldr	r3, [r7, #32]
 800945e:	085b      	lsrs	r3, r3, #1
 8009460:	b29b      	uxth	r3, r3
 8009462:	f003 0307 	and.w	r3, r3, #7
 8009466:	b29a      	uxth	r2, r3
 8009468:	8bfb      	ldrh	r3, [r7, #30]
 800946a:	4313      	orrs	r3, r2
 800946c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	8bfa      	ldrh	r2, [r7, #30]
 8009474:	60da      	str	r2, [r3, #12]
 8009476:	e062      	b.n	800953e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009478:	2301      	movs	r3, #1
 800947a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800947e:	e05e      	b.n	800953e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009480:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009484:	2b08      	cmp	r3, #8
 8009486:	d828      	bhi.n	80094da <UART_SetConfig+0x56a>
 8009488:	a201      	add	r2, pc, #4	@ (adr r2, 8009490 <UART_SetConfig+0x520>)
 800948a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800948e:	bf00      	nop
 8009490:	080094b5 	.word	0x080094b5
 8009494:	080094bd 	.word	0x080094bd
 8009498:	080094c5 	.word	0x080094c5
 800949c:	080094db 	.word	0x080094db
 80094a0:	080094cb 	.word	0x080094cb
 80094a4:	080094db 	.word	0x080094db
 80094a8:	080094db 	.word	0x080094db
 80094ac:	080094db 	.word	0x080094db
 80094b0:	080094d3 	.word	0x080094d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094b4:	f7fc fb88 	bl	8005bc8 <HAL_RCC_GetPCLK1Freq>
 80094b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80094ba:	e014      	b.n	80094e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094bc:	f7fc fb9a 	bl	8005bf4 <HAL_RCC_GetPCLK2Freq>
 80094c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80094c2:	e010      	b.n	80094e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80094c4:	4b1a      	ldr	r3, [pc, #104]	@ (8009530 <UART_SetConfig+0x5c0>)
 80094c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80094c8:	e00d      	b.n	80094e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80094ca:	f7fc fb0f 	bl	8005aec <HAL_RCC_GetSysClockFreq>
 80094ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80094d0:	e009      	b.n	80094e6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80094d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80094d8:	e005      	b.n	80094e6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80094da:	2300      	movs	r3, #0
 80094dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80094de:	2301      	movs	r3, #1
 80094e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80094e4:	bf00      	nop
    }

    if (pclk != 0U)
 80094e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d028      	beq.n	800953e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094f0:	4a10      	ldr	r2, [pc, #64]	@ (8009534 <UART_SetConfig+0x5c4>)
 80094f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094f6:	461a      	mov	r2, r3
 80094f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	085b      	lsrs	r3, r3, #1
 8009504:	441a      	add	r2, r3
 8009506:	697b      	ldr	r3, [r7, #20]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	fbb2 f3f3 	udiv	r3, r2, r3
 800950e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009510:	6a3b      	ldr	r3, [r7, #32]
 8009512:	2b0f      	cmp	r3, #15
 8009514:	d910      	bls.n	8009538 <UART_SetConfig+0x5c8>
 8009516:	6a3b      	ldr	r3, [r7, #32]
 8009518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800951c:	d20c      	bcs.n	8009538 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800951e:	6a3b      	ldr	r3, [r7, #32]
 8009520:	b29a      	uxth	r2, r3
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	60da      	str	r2, [r3, #12]
 8009528:	e009      	b.n	800953e <UART_SetConfig+0x5ce>
 800952a:	bf00      	nop
 800952c:	40008000 	.word	0x40008000
 8009530:	00f42400 	.word	0x00f42400
 8009534:	0800a1a4 	.word	0x0800a1a4
      }
      else
      {
        ret = HAL_ERROR;
 8009538:	2301      	movs	r3, #1
 800953a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	2201      	movs	r2, #1
 8009542:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	2201      	movs	r2, #1
 800954a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	2200      	movs	r2, #0
 8009552:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	2200      	movs	r2, #0
 8009558:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800955a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800955e:	4618      	mov	r0, r3
 8009560:	3730      	adds	r7, #48	@ 0x30
 8009562:	46bd      	mov	sp, r7
 8009564:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009568 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009574:	f003 0308 	and.w	r3, r3, #8
 8009578:	2b00      	cmp	r3, #0
 800957a:	d00a      	beq.n	8009592 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	685b      	ldr	r3, [r3, #4]
 8009582:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	430a      	orrs	r2, r1
 8009590:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009596:	f003 0301 	and.w	r3, r3, #1
 800959a:	2b00      	cmp	r3, #0
 800959c:	d00a      	beq.n	80095b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	430a      	orrs	r2, r1
 80095b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095b8:	f003 0302 	and.w	r3, r3, #2
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d00a      	beq.n	80095d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	685b      	ldr	r3, [r3, #4]
 80095c6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	430a      	orrs	r2, r1
 80095d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095da:	f003 0304 	and.w	r3, r3, #4
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d00a      	beq.n	80095f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	430a      	orrs	r2, r1
 80095f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095fc:	f003 0310 	and.w	r3, r3, #16
 8009600:	2b00      	cmp	r3, #0
 8009602:	d00a      	beq.n	800961a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	430a      	orrs	r2, r1
 8009618:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800961e:	f003 0320 	and.w	r3, r3, #32
 8009622:	2b00      	cmp	r3, #0
 8009624:	d00a      	beq.n	800963c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	689b      	ldr	r3, [r3, #8]
 800962c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	430a      	orrs	r2, r1
 800963a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009640:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009644:	2b00      	cmp	r3, #0
 8009646:	d01a      	beq.n	800967e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	430a      	orrs	r2, r1
 800965c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009662:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009666:	d10a      	bne.n	800967e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	685b      	ldr	r3, [r3, #4]
 800966e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	430a      	orrs	r2, r1
 800967c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009686:	2b00      	cmp	r3, #0
 8009688:	d00a      	beq.n	80096a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	430a      	orrs	r2, r1
 800969e:	605a      	str	r2, [r3, #4]
  }
}
 80096a0:	bf00      	nop
 80096a2:	370c      	adds	r7, #12
 80096a4:	46bd      	mov	sp, r7
 80096a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096aa:	4770      	bx	lr

080096ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80096ac:	b580      	push	{r7, lr}
 80096ae:	b098      	sub	sp, #96	@ 0x60
 80096b0:	af02      	add	r7, sp, #8
 80096b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80096bc:	f7fa feb4 	bl	8004428 <HAL_GetTick>
 80096c0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f003 0308 	and.w	r3, r3, #8
 80096cc:	2b08      	cmp	r3, #8
 80096ce:	d12f      	bne.n	8009730 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80096d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80096d4:	9300      	str	r3, [sp, #0]
 80096d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80096d8:	2200      	movs	r2, #0
 80096da:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80096de:	6878      	ldr	r0, [r7, #4]
 80096e0:	f000 f88e 	bl	8009800 <UART_WaitOnFlagUntilTimeout>
 80096e4:	4603      	mov	r3, r0
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d022      	beq.n	8009730 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80096f2:	e853 3f00 	ldrex	r3, [r3]
 80096f6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80096f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80096fe:	653b      	str	r3, [r7, #80]	@ 0x50
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	461a      	mov	r2, r3
 8009706:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009708:	647b      	str	r3, [r7, #68]	@ 0x44
 800970a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800970c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800970e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009710:	e841 2300 	strex	r3, r2, [r1]
 8009714:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009718:	2b00      	cmp	r3, #0
 800971a:	d1e6      	bne.n	80096ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2220      	movs	r2, #32
 8009720:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2200      	movs	r2, #0
 8009728:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800972c:	2303      	movs	r3, #3
 800972e:	e063      	b.n	80097f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f003 0304 	and.w	r3, r3, #4
 800973a:	2b04      	cmp	r3, #4
 800973c:	d149      	bne.n	80097d2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800973e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009742:	9300      	str	r3, [sp, #0]
 8009744:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009746:	2200      	movs	r2, #0
 8009748:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	f000 f857 	bl	8009800 <UART_WaitOnFlagUntilTimeout>
 8009752:	4603      	mov	r3, r0
 8009754:	2b00      	cmp	r3, #0
 8009756:	d03c      	beq.n	80097d2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800975e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009760:	e853 3f00 	ldrex	r3, [r3]
 8009764:	623b      	str	r3, [r7, #32]
   return(result);
 8009766:	6a3b      	ldr	r3, [r7, #32]
 8009768:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800976c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	461a      	mov	r2, r3
 8009774:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009776:	633b      	str	r3, [r7, #48]	@ 0x30
 8009778:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800977a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800977c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800977e:	e841 2300 	strex	r3, r2, [r1]
 8009782:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009786:	2b00      	cmp	r3, #0
 8009788:	d1e6      	bne.n	8009758 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	3308      	adds	r3, #8
 8009790:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	e853 3f00 	ldrex	r3, [r3]
 8009798:	60fb      	str	r3, [r7, #12]
   return(result);
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	f023 0301 	bic.w	r3, r3, #1
 80097a0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	3308      	adds	r3, #8
 80097a8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097aa:	61fa      	str	r2, [r7, #28]
 80097ac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ae:	69b9      	ldr	r1, [r7, #24]
 80097b0:	69fa      	ldr	r2, [r7, #28]
 80097b2:	e841 2300 	strex	r3, r2, [r1]
 80097b6:	617b      	str	r3, [r7, #20]
   return(result);
 80097b8:	697b      	ldr	r3, [r7, #20]
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d1e5      	bne.n	800978a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	2220      	movs	r2, #32
 80097c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	2200      	movs	r2, #0
 80097ca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097ce:	2303      	movs	r3, #3
 80097d0:	e012      	b.n	80097f8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2220      	movs	r2, #32
 80097d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2220      	movs	r2, #32
 80097de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2200      	movs	r2, #0
 80097e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2200      	movs	r2, #0
 80097ec:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	2200      	movs	r2, #0
 80097f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80097f6:	2300      	movs	r3, #0
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3758      	adds	r7, #88	@ 0x58
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}

08009800 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	60f8      	str	r0, [r7, #12]
 8009808:	60b9      	str	r1, [r7, #8]
 800980a:	603b      	str	r3, [r7, #0]
 800980c:	4613      	mov	r3, r2
 800980e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009810:	e04f      	b.n	80098b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009812:	69bb      	ldr	r3, [r7, #24]
 8009814:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009818:	d04b      	beq.n	80098b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800981a:	f7fa fe05 	bl	8004428 <HAL_GetTick>
 800981e:	4602      	mov	r2, r0
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	1ad3      	subs	r3, r2, r3
 8009824:	69ba      	ldr	r2, [r7, #24]
 8009826:	429a      	cmp	r2, r3
 8009828:	d302      	bcc.n	8009830 <UART_WaitOnFlagUntilTimeout+0x30>
 800982a:	69bb      	ldr	r3, [r7, #24]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d101      	bne.n	8009834 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009830:	2303      	movs	r3, #3
 8009832:	e04e      	b.n	80098d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	f003 0304 	and.w	r3, r3, #4
 800983e:	2b00      	cmp	r3, #0
 8009840:	d037      	beq.n	80098b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	2b80      	cmp	r3, #128	@ 0x80
 8009846:	d034      	beq.n	80098b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	2b40      	cmp	r3, #64	@ 0x40
 800984c:	d031      	beq.n	80098b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	69db      	ldr	r3, [r3, #28]
 8009854:	f003 0308 	and.w	r3, r3, #8
 8009858:	2b08      	cmp	r3, #8
 800985a:	d110      	bne.n	800987e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2208      	movs	r2, #8
 8009862:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f000 f920 	bl	8009aaa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	2208      	movs	r2, #8
 800986e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	2200      	movs	r2, #0
 8009876:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800987a:	2301      	movs	r3, #1
 800987c:	e029      	b.n	80098d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	69db      	ldr	r3, [r3, #28]
 8009884:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009888:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800988c:	d111      	bne.n	80098b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009896:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009898:	68f8      	ldr	r0, [r7, #12]
 800989a:	f000 f906 	bl	8009aaa <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	2220      	movs	r2, #32
 80098a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2200      	movs	r2, #0
 80098aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80098ae:	2303      	movs	r3, #3
 80098b0:	e00f      	b.n	80098d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	69da      	ldr	r2, [r3, #28]
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	4013      	ands	r3, r2
 80098bc:	68ba      	ldr	r2, [r7, #8]
 80098be:	429a      	cmp	r2, r3
 80098c0:	bf0c      	ite	eq
 80098c2:	2301      	moveq	r3, #1
 80098c4:	2300      	movne	r3, #0
 80098c6:	b2db      	uxtb	r3, r3
 80098c8:	461a      	mov	r2, r3
 80098ca:	79fb      	ldrb	r3, [r7, #7]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d0a0      	beq.n	8009812 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80098d0:	2300      	movs	r3, #0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3710      	adds	r7, #16
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}
	...

080098dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80098dc:	b580      	push	{r7, lr}
 80098de:	b096      	sub	sp, #88	@ 0x58
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	60f8      	str	r0, [r7, #12]
 80098e4:	60b9      	str	r1, [r7, #8]
 80098e6:	4613      	mov	r3, r2
 80098e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	68ba      	ldr	r2, [r7, #8]
 80098ee:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	88fa      	ldrh	r2, [r7, #6]
 80098f4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	2222      	movs	r2, #34	@ 0x22
 8009904:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800990e:	2b00      	cmp	r3, #0
 8009910:	d02d      	beq.n	800996e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009918:	4a40      	ldr	r2, [pc, #256]	@ (8009a1c <UART_Start_Receive_DMA+0x140>)
 800991a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009922:	4a3f      	ldr	r2, [pc, #252]	@ (8009a20 <UART_Start_Receive_DMA+0x144>)
 8009924:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800992c:	4a3d      	ldr	r2, [pc, #244]	@ (8009a24 <UART_Start_Receive_DMA+0x148>)
 800992e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009936:	2200      	movs	r2, #0
 8009938:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	3324      	adds	r3, #36	@ 0x24
 8009946:	4619      	mov	r1, r3
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800994c:	461a      	mov	r2, r3
 800994e:	88fb      	ldrh	r3, [r7, #6]
 8009950:	f7fa ff50 	bl	80047f4 <HAL_DMA_Start_IT>
 8009954:	4603      	mov	r3, r0
 8009956:	2b00      	cmp	r3, #0
 8009958:	d009      	beq.n	800996e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2210      	movs	r2, #16
 800995e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	2220      	movs	r2, #32
 8009966:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800996a:	2301      	movs	r3, #1
 800996c:	e051      	b.n	8009a12 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	691b      	ldr	r3, [r3, #16]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d018      	beq.n	80099a8 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800997c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800997e:	e853 3f00 	ldrex	r3, [r3]
 8009982:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009986:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800998a:	657b      	str	r3, [r7, #84]	@ 0x54
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	461a      	mov	r2, r3
 8009992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009994:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009996:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009998:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800999a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800999c:	e841 2300 	strex	r3, r2, [r1]
 80099a0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80099a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d1e6      	bne.n	8009976 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	3308      	adds	r3, #8
 80099ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099b2:	e853 3f00 	ldrex	r3, [r3]
 80099b6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80099b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ba:	f043 0301 	orr.w	r3, r3, #1
 80099be:	653b      	str	r3, [r7, #80]	@ 0x50
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	3308      	adds	r3, #8
 80099c6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80099c8:	637a      	str	r2, [r7, #52]	@ 0x34
 80099ca:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099cc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80099ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80099d0:	e841 2300 	strex	r3, r2, [r1]
 80099d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80099d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d1e5      	bne.n	80099a8 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	3308      	adds	r3, #8
 80099e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e4:	697b      	ldr	r3, [r7, #20]
 80099e6:	e853 3f00 	ldrex	r3, [r3]
 80099ea:	613b      	str	r3, [r7, #16]
   return(result);
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	3308      	adds	r3, #8
 80099fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80099fc:	623a      	str	r2, [r7, #32]
 80099fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a00:	69f9      	ldr	r1, [r7, #28]
 8009a02:	6a3a      	ldr	r2, [r7, #32]
 8009a04:	e841 2300 	strex	r3, r2, [r1]
 8009a08:	61bb      	str	r3, [r7, #24]
   return(result);
 8009a0a:	69bb      	ldr	r3, [r7, #24]
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d1e5      	bne.n	80099dc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8009a10:	2300      	movs	r3, #0
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	3758      	adds	r7, #88	@ 0x58
 8009a16:	46bd      	mov	sp, r7
 8009a18:	bd80      	pop	{r7, pc}
 8009a1a:	bf00      	nop
 8009a1c:	08009c35 	.word	0x08009c35
 8009a20:	08009d69 	.word	0x08009d69
 8009a24:	08009daf 	.word	0x08009daf

08009a28 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b08f      	sub	sp, #60	@ 0x3c
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a36:	6a3b      	ldr	r3, [r7, #32]
 8009a38:	e853 3f00 	ldrex	r3, [r3]
 8009a3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009a44:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	461a      	mov	r2, r3
 8009a4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009a4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a50:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a56:	e841 2300 	strex	r3, r2, [r1]
 8009a5a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d1e6      	bne.n	8009a30 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	3308      	adds	r3, #8
 8009a68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	e853 3f00 	ldrex	r3, [r3]
 8009a70:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a72:	68bb      	ldr	r3, [r7, #8]
 8009a74:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009a78:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	3308      	adds	r3, #8
 8009a80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009a82:	61ba      	str	r2, [r7, #24]
 8009a84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a86:	6979      	ldr	r1, [r7, #20]
 8009a88:	69ba      	ldr	r2, [r7, #24]
 8009a8a:	e841 2300 	strex	r3, r2, [r1]
 8009a8e:	613b      	str	r3, [r7, #16]
   return(result);
 8009a90:	693b      	ldr	r3, [r7, #16]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d1e5      	bne.n	8009a62 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2220      	movs	r2, #32
 8009a9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009a9e:	bf00      	nop
 8009aa0:	373c      	adds	r7, #60	@ 0x3c
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa8:	4770      	bx	lr

08009aaa <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009aaa:	b480      	push	{r7}
 8009aac:	b095      	sub	sp, #84	@ 0x54
 8009aae:	af00      	add	r7, sp, #0
 8009ab0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aba:	e853 3f00 	ldrex	r3, [r3]
 8009abe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009ac0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ac2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ac6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	461a      	mov	r2, r3
 8009ace:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009ad0:	643b      	str	r3, [r7, #64]	@ 0x40
 8009ad2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009ad6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009ad8:	e841 2300 	strex	r3, r2, [r1]
 8009adc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009ade:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d1e6      	bne.n	8009ab2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	3308      	adds	r3, #8
 8009aea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aec:	6a3b      	ldr	r3, [r7, #32]
 8009aee:	e853 3f00 	ldrex	r3, [r3]
 8009af2:	61fb      	str	r3, [r7, #28]
   return(result);
 8009af4:	69fb      	ldr	r3, [r7, #28]
 8009af6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009afa:	f023 0301 	bic.w	r3, r3, #1
 8009afe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	3308      	adds	r3, #8
 8009b06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009b08:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009b0e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009b10:	e841 2300 	strex	r3, r2, [r1]
 8009b14:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d1e3      	bne.n	8009ae4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d118      	bne.n	8009b56 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	e853 3f00 	ldrex	r3, [r3]
 8009b30:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	f023 0310 	bic.w	r3, r3, #16
 8009b38:	647b      	str	r3, [r7, #68]	@ 0x44
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	461a      	mov	r2, r3
 8009b40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b42:	61bb      	str	r3, [r7, #24]
 8009b44:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b46:	6979      	ldr	r1, [r7, #20]
 8009b48:	69ba      	ldr	r2, [r7, #24]
 8009b4a:	e841 2300 	strex	r3, r2, [r1]
 8009b4e:	613b      	str	r3, [r7, #16]
   return(result);
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d1e6      	bne.n	8009b24 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2220      	movs	r2, #32
 8009b5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8009b6a:	bf00      	nop
 8009b6c:	3754      	adds	r7, #84	@ 0x54
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr

08009b76 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009b76:	b580      	push	{r7, lr}
 8009b78:	b090      	sub	sp, #64	@ 0x40
 8009b7a:	af00      	add	r7, sp, #0
 8009b7c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009b82:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f003 0320 	and.w	r3, r3, #32
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d137      	bne.n	8009c02 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009b92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b94:	2200      	movs	r2, #0
 8009b96:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8009b9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	3308      	adds	r3, #8
 8009ba0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ba4:	e853 3f00 	ldrex	r3, [r3]
 8009ba8:	623b      	str	r3, [r7, #32]
   return(result);
 8009baa:	6a3b      	ldr	r3, [r7, #32]
 8009bac:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009bb0:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009bb2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	3308      	adds	r3, #8
 8009bb8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009bba:	633a      	str	r2, [r7, #48]	@ 0x30
 8009bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009bc0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009bc2:	e841 2300 	strex	r3, r2, [r1]
 8009bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d1e5      	bne.n	8009b9a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009bce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bd4:	693b      	ldr	r3, [r7, #16]
 8009bd6:	e853 3f00 	ldrex	r3, [r3]
 8009bda:	60fb      	str	r3, [r7, #12]
   return(result);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009be2:	637b      	str	r3, [r7, #52]	@ 0x34
 8009be4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	461a      	mov	r2, r3
 8009bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009bec:	61fb      	str	r3, [r7, #28]
 8009bee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bf0:	69b9      	ldr	r1, [r7, #24]
 8009bf2:	69fa      	ldr	r2, [r7, #28]
 8009bf4:	e841 2300 	strex	r3, r2, [r1]
 8009bf8:	617b      	str	r3, [r7, #20]
   return(result);
 8009bfa:	697b      	ldr	r3, [r7, #20]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d1e6      	bne.n	8009bce <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009c00:	e004      	b.n	8009c0c <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 8009c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009c04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009c08:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009c0a:	4798      	blx	r3
}
 8009c0c:	bf00      	nop
 8009c0e:	3740      	adds	r7, #64	@ 0x40
 8009c10:	46bd      	mov	sp, r7
 8009c12:	bd80      	pop	{r7, pc}

08009c14 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c20:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8009c28:	68f8      	ldr	r0, [r7, #12]
 8009c2a:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c2c:	bf00      	nop
 8009c2e:	3710      	adds	r7, #16
 8009c30:	46bd      	mov	sp, r7
 8009c32:	bd80      	pop	{r7, pc}

08009c34 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b09c      	sub	sp, #112	@ 0x70
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009c40:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f003 0320 	and.w	r3, r3, #32
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d171      	bne.n	8009d34 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8009c50:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c52:	2200      	movs	r2, #0
 8009c54:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009c58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009c60:	e853 3f00 	ldrex	r3, [r3]
 8009c64:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009c66:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009c68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c6c:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009c6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	461a      	mov	r2, r3
 8009c74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009c76:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009c78:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c7a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009c7c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009c7e:	e841 2300 	strex	r3, r2, [r1]
 8009c82:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009c84:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d1e6      	bne.n	8009c58 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	3308      	adds	r3, #8
 8009c90:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c94:	e853 3f00 	ldrex	r3, [r3]
 8009c98:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009c9c:	f023 0301 	bic.w	r3, r3, #1
 8009ca0:	667b      	str	r3, [r7, #100]	@ 0x64
 8009ca2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	3308      	adds	r3, #8
 8009ca8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009caa:	647a      	str	r2, [r7, #68]	@ 0x44
 8009cac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009cb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009cb2:	e841 2300 	strex	r3, r2, [r1]
 8009cb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009cb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d1e5      	bne.n	8009c8a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009cbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	3308      	adds	r3, #8
 8009cc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009cc8:	e853 3f00 	ldrex	r3, [r3]
 8009ccc:	623b      	str	r3, [r7, #32]
   return(result);
 8009cce:	6a3b      	ldr	r3, [r7, #32]
 8009cd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009cd4:	663b      	str	r3, [r7, #96]	@ 0x60
 8009cd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	3308      	adds	r3, #8
 8009cdc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009cde:	633a      	str	r2, [r7, #48]	@ 0x30
 8009ce0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ce2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009ce4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009ce6:	e841 2300 	strex	r3, r2, [r1]
 8009cea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d1e5      	bne.n	8009cbe <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009cf2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cf4:	2220      	movs	r2, #32
 8009cf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009cfa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009cfc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009cfe:	2b01      	cmp	r3, #1
 8009d00:	d118      	bne.n	8009d34 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	e853 3f00 	ldrex	r3, [r3]
 8009d0e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	f023 0310 	bic.w	r3, r3, #16
 8009d16:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009d18:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	461a      	mov	r2, r3
 8009d1e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d20:	61fb      	str	r3, [r7, #28]
 8009d22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d24:	69b9      	ldr	r1, [r7, #24]
 8009d26:	69fa      	ldr	r2, [r7, #28]
 8009d28:	e841 2300 	strex	r3, r2, [r1]
 8009d2c:	617b      	str	r3, [r7, #20]
   return(result);
 8009d2e:	697b      	ldr	r3, [r7, #20]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1e6      	bne.n	8009d02 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009d34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d36:	2200      	movs	r2, #0
 8009d38:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	d109      	bne.n	8009d56 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8009d42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d44:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009d48:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009d4a:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009d4e:	4611      	mov	r1, r2
 8009d50:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009d52:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009d54:	e004      	b.n	8009d60 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 8009d56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009d58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009d5c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009d5e:	4798      	blx	r3
}
 8009d60:	bf00      	nop
 8009d62:	3770      	adds	r7, #112	@ 0x70
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d74:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	2201      	movs	r2, #1
 8009d7a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d10b      	bne.n	8009d9c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009d8a:	68fa      	ldr	r2, [r7, #12]
 8009d8c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009d90:	0852      	lsrs	r2, r2, #1
 8009d92:	b292      	uxth	r2, r2
 8009d94:	4611      	mov	r1, r2
 8009d96:	68f8      	ldr	r0, [r7, #12]
 8009d98:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009d9a:	e004      	b.n	8009da6 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	4798      	blx	r3
}
 8009da6:	bf00      	nop
 8009da8:	3710      	adds	r7, #16
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}

08009dae <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009dae:	b580      	push	{r7, lr}
 8009db0:	b086      	sub	sp, #24
 8009db2:	af00      	add	r7, sp, #0
 8009db4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dba:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009dbc:	697b      	ldr	r3, [r7, #20]
 8009dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dc2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009dc4:	697b      	ldr	r3, [r7, #20]
 8009dc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009dca:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	689b      	ldr	r3, [r3, #8]
 8009dd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009dd6:	2b80      	cmp	r3, #128	@ 0x80
 8009dd8:	d109      	bne.n	8009dee <UART_DMAError+0x40>
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	2b21      	cmp	r3, #33	@ 0x21
 8009dde:	d106      	bne.n	8009dee <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009de0:	697b      	ldr	r3, [r7, #20]
 8009de2:	2200      	movs	r2, #0
 8009de4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009de8:	6978      	ldr	r0, [r7, #20]
 8009dea:	f7ff fe1d 	bl	8009a28 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	689b      	ldr	r3, [r3, #8]
 8009df4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009df8:	2b40      	cmp	r3, #64	@ 0x40
 8009dfa:	d109      	bne.n	8009e10 <UART_DMAError+0x62>
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	2b22      	cmp	r3, #34	@ 0x22
 8009e00:	d106      	bne.n	8009e10 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009e02:	697b      	ldr	r3, [r7, #20]
 8009e04:	2200      	movs	r2, #0
 8009e06:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009e0a:	6978      	ldr	r0, [r7, #20]
 8009e0c:	f7ff fe4d 	bl	8009aaa <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009e16:	f043 0210 	orr.w	r2, r3, #16
 8009e1a:	697b      	ldr	r3, [r7, #20]
 8009e1c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009e20:	697b      	ldr	r3, [r7, #20]
 8009e22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009e26:	6978      	ldr	r0, [r7, #20]
 8009e28:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e2a:	bf00      	nop
 8009e2c:	3718      	adds	r7, #24
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}

08009e32 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009e32:	b580      	push	{r7, lr}
 8009e34:	b084      	sub	sp, #16
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	2200      	movs	r2, #0
 8009e44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009e56:	68f8      	ldr	r0, [r7, #12]
 8009e58:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009e5a:	bf00      	nop
 8009e5c:	3710      	adds	r7, #16
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	bd80      	pop	{r7, pc}

08009e62 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009e62:	b580      	push	{r7, lr}
 8009e64:	b088      	sub	sp, #32
 8009e66:	af00      	add	r7, sp, #0
 8009e68:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	e853 3f00 	ldrex	r3, [r3]
 8009e76:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009e7e:	61fb      	str	r3, [r7, #28]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	461a      	mov	r2, r3
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	61bb      	str	r3, [r7, #24]
 8009e8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e8c:	6979      	ldr	r1, [r7, #20]
 8009e8e:	69ba      	ldr	r2, [r7, #24]
 8009e90:	e841 2300 	strex	r3, r2, [r1]
 8009e94:	613b      	str	r3, [r7, #16]
   return(result);
 8009e96:	693b      	ldr	r3, [r7, #16]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d1e6      	bne.n	8009e6a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2220      	movs	r2, #32
 8009ea0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009eb4:	bf00      	nop
 8009eb6:	3720      	adds	r7, #32
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009ebc:	b480      	push	{r7}
 8009ebe:	b083      	sub	sp, #12
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009ec4:	bf00      	nop
 8009ec6:	370c      	adds	r7, #12
 8009ec8:	46bd      	mov	sp, r7
 8009eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ece:	4770      	bx	lr

08009ed0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009ed0:	b480      	push	{r7}
 8009ed2:	b083      	sub	sp, #12
 8009ed4:	af00      	add	r7, sp, #0
 8009ed6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009ed8:	bf00      	nop
 8009eda:	370c      	adds	r7, #12
 8009edc:	46bd      	mov	sp, r7
 8009ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee2:	4770      	bx	lr

08009ee4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b083      	sub	sp, #12
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009eec:	bf00      	nop
 8009eee:	370c      	adds	r7, #12
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef6:	4770      	bx	lr

08009ef8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ef8:	b480      	push	{r7}
 8009efa:	b085      	sub	sp, #20
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f06:	2b01      	cmp	r3, #1
 8009f08:	d101      	bne.n	8009f0e <HAL_UARTEx_DisableFifoMode+0x16>
 8009f0a:	2302      	movs	r3, #2
 8009f0c:	e027      	b.n	8009f5e <HAL_UARTEx_DisableFifoMode+0x66>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2201      	movs	r2, #1
 8009f12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	2224      	movs	r2, #36	@ 0x24
 8009f1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f022 0201 	bic.w	r2, r2, #1
 8009f34:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009f3c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2200      	movs	r2, #0
 8009f42:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	68fa      	ldr	r2, [r7, #12]
 8009f4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2220      	movs	r2, #32
 8009f50:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2200      	movs	r2, #0
 8009f58:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009f5c:	2300      	movs	r3, #0
}
 8009f5e:	4618      	mov	r0, r3
 8009f60:	3714      	adds	r7, #20
 8009f62:	46bd      	mov	sp, r7
 8009f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f68:	4770      	bx	lr

08009f6a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009f6a:	b580      	push	{r7, lr}
 8009f6c:	b084      	sub	sp, #16
 8009f6e:	af00      	add	r7, sp, #0
 8009f70:	6078      	str	r0, [r7, #4]
 8009f72:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d101      	bne.n	8009f82 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009f7e:	2302      	movs	r3, #2
 8009f80:	e02d      	b.n	8009fde <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2201      	movs	r2, #1
 8009f86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2224      	movs	r2, #36	@ 0x24
 8009f8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f022 0201 	bic.w	r2, r2, #1
 8009fa8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	689b      	ldr	r3, [r3, #8]
 8009fb0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	683a      	ldr	r2, [r7, #0]
 8009fba:	430a      	orrs	r2, r1
 8009fbc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009fbe:	6878      	ldr	r0, [r7, #4]
 8009fc0:	f000 f850 	bl	800a064 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	68fa      	ldr	r2, [r7, #12]
 8009fca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2220      	movs	r2, #32
 8009fd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	2200      	movs	r2, #0
 8009fd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009fdc:	2300      	movs	r3, #0
}
 8009fde:	4618      	mov	r0, r3
 8009fe0:	3710      	adds	r7, #16
 8009fe2:	46bd      	mov	sp, r7
 8009fe4:	bd80      	pop	{r7, pc}

08009fe6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009fe6:	b580      	push	{r7, lr}
 8009fe8:	b084      	sub	sp, #16
 8009fea:	af00      	add	r7, sp, #0
 8009fec:	6078      	str	r0, [r7, #4]
 8009fee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ff6:	2b01      	cmp	r3, #1
 8009ff8:	d101      	bne.n	8009ffe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009ffa:	2302      	movs	r3, #2
 8009ffc:	e02d      	b.n	800a05a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2201      	movs	r2, #1
 800a002:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2224      	movs	r2, #36	@ 0x24
 800a00a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	681a      	ldr	r2, [r3, #0]
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f022 0201 	bic.w	r2, r2, #1
 800a024:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	689b      	ldr	r3, [r3, #8]
 800a02c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	683a      	ldr	r2, [r7, #0]
 800a036:	430a      	orrs	r2, r1
 800a038:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 f812 	bl	800a064 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	68fa      	ldr	r2, [r7, #12]
 800a046:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2220      	movs	r2, #32
 800a04c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3710      	adds	r7, #16
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
	...

0800a064 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a064:	b480      	push	{r7}
 800a066:	b085      	sub	sp, #20
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a070:	2b00      	cmp	r3, #0
 800a072:	d108      	bne.n	800a086 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2201      	movs	r2, #1
 800a078:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	2201      	movs	r2, #1
 800a080:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a084:	e031      	b.n	800a0ea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a086:	2308      	movs	r3, #8
 800a088:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a08a:	2308      	movs	r3, #8
 800a08c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	0e5b      	lsrs	r3, r3, #25
 800a096:	b2db      	uxtb	r3, r3
 800a098:	f003 0307 	and.w	r3, r3, #7
 800a09c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	0f5b      	lsrs	r3, r3, #29
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	f003 0307 	and.w	r3, r3, #7
 800a0ac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a0ae:	7bbb      	ldrb	r3, [r7, #14]
 800a0b0:	7b3a      	ldrb	r2, [r7, #12]
 800a0b2:	4911      	ldr	r1, [pc, #68]	@ (800a0f8 <UARTEx_SetNbDataToProcess+0x94>)
 800a0b4:	5c8a      	ldrb	r2, [r1, r2]
 800a0b6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800a0ba:	7b3a      	ldrb	r2, [r7, #12]
 800a0bc:	490f      	ldr	r1, [pc, #60]	@ (800a0fc <UARTEx_SetNbDataToProcess+0x98>)
 800a0be:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800a0c0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0c4:	b29a      	uxth	r2, r3
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a0cc:	7bfb      	ldrb	r3, [r7, #15]
 800a0ce:	7b7a      	ldrb	r2, [r7, #13]
 800a0d0:	4909      	ldr	r1, [pc, #36]	@ (800a0f8 <UARTEx_SetNbDataToProcess+0x94>)
 800a0d2:	5c8a      	ldrb	r2, [r1, r2]
 800a0d4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800a0d8:	7b7a      	ldrb	r2, [r7, #13]
 800a0da:	4908      	ldr	r1, [pc, #32]	@ (800a0fc <UARTEx_SetNbDataToProcess+0x98>)
 800a0dc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800a0de:	fb93 f3f2 	sdiv	r3, r3, r2
 800a0e2:	b29a      	uxth	r2, r3
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800a0ea:	bf00      	nop
 800a0ec:	3714      	adds	r7, #20
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f4:	4770      	bx	lr
 800a0f6:	bf00      	nop
 800a0f8:	0800a1bc 	.word	0x0800a1bc
 800a0fc:	0800a1c4 	.word	0x0800a1c4

0800a100 <memset>:
 800a100:	4402      	add	r2, r0
 800a102:	4603      	mov	r3, r0
 800a104:	4293      	cmp	r3, r2
 800a106:	d100      	bne.n	800a10a <memset+0xa>
 800a108:	4770      	bx	lr
 800a10a:	f803 1b01 	strb.w	r1, [r3], #1
 800a10e:	e7f9      	b.n	800a104 <memset+0x4>

0800a110 <__libc_init_array>:
 800a110:	b570      	push	{r4, r5, r6, lr}
 800a112:	4d0d      	ldr	r5, [pc, #52]	@ (800a148 <__libc_init_array+0x38>)
 800a114:	4c0d      	ldr	r4, [pc, #52]	@ (800a14c <__libc_init_array+0x3c>)
 800a116:	1b64      	subs	r4, r4, r5
 800a118:	10a4      	asrs	r4, r4, #2
 800a11a:	2600      	movs	r6, #0
 800a11c:	42a6      	cmp	r6, r4
 800a11e:	d109      	bne.n	800a134 <__libc_init_array+0x24>
 800a120:	4d0b      	ldr	r5, [pc, #44]	@ (800a150 <__libc_init_array+0x40>)
 800a122:	4c0c      	ldr	r4, [pc, #48]	@ (800a154 <__libc_init_array+0x44>)
 800a124:	f000 f826 	bl	800a174 <_init>
 800a128:	1b64      	subs	r4, r4, r5
 800a12a:	10a4      	asrs	r4, r4, #2
 800a12c:	2600      	movs	r6, #0
 800a12e:	42a6      	cmp	r6, r4
 800a130:	d105      	bne.n	800a13e <__libc_init_array+0x2e>
 800a132:	bd70      	pop	{r4, r5, r6, pc}
 800a134:	f855 3b04 	ldr.w	r3, [r5], #4
 800a138:	4798      	blx	r3
 800a13a:	3601      	adds	r6, #1
 800a13c:	e7ee      	b.n	800a11c <__libc_init_array+0xc>
 800a13e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a142:	4798      	blx	r3
 800a144:	3601      	adds	r6, #1
 800a146:	e7f2      	b.n	800a12e <__libc_init_array+0x1e>
 800a148:	0800a1d4 	.word	0x0800a1d4
 800a14c:	0800a1d4 	.word	0x0800a1d4
 800a150:	0800a1d4 	.word	0x0800a1d4
 800a154:	0800a1d8 	.word	0x0800a1d8

0800a158 <memcpy>:
 800a158:	440a      	add	r2, r1
 800a15a:	4291      	cmp	r1, r2
 800a15c:	f100 33ff 	add.w	r3, r0, #4294967295
 800a160:	d100      	bne.n	800a164 <memcpy+0xc>
 800a162:	4770      	bx	lr
 800a164:	b510      	push	{r4, lr}
 800a166:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a16a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a16e:	4291      	cmp	r1, r2
 800a170:	d1f9      	bne.n	800a166 <memcpy+0xe>
 800a172:	bd10      	pop	{r4, pc}

0800a174 <_init>:
 800a174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a176:	bf00      	nop
 800a178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a17a:	bc08      	pop	{r3}
 800a17c:	469e      	mov	lr, r3
 800a17e:	4770      	bx	lr

0800a180 <_fini>:
 800a180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a182:	bf00      	nop
 800a184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a186:	bc08      	pop	{r3}
 800a188:	469e      	mov	lr, r3
 800a18a:	4770      	bx	lr
