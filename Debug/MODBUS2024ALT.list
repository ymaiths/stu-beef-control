
MODBUS2024ALT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c54  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009e2c  08009e2c  0000ae2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e6c  08009e6c  0000b220  2**0
                  CONTENTS
  4 .ARM          00000008  08009e6c  08009e6c  0000ae6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009e74  08009e74  0000b220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e74  08009e74  0000ae74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e78  08009e78  0000ae78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08009e7c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000e3c  20000220  0800a09c  0000b220  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000105c  0800a09c  0000c05c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016650  00000000  00000000  0000b250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a6f  00000000  00000000  000218a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e8  00000000  00000000  00024310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e0d  00000000  00000000  000254f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000270aa  00000000  00000000  00026305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001635f  00000000  00000000  0004d3af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe2e5  00000000  00000000  0006370e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001619f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e70  00000000  00000000  00161a38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  001668a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000220 	.word	0x20000220
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009e14 	.word	0x08009e14

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000224 	.word	0x20000224
 8000214:	08009e14 	.word	0x08009e14

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2uiz>:
 8000b14:	004a      	lsls	r2, r1, #1
 8000b16:	d211      	bcs.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b18:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b1c:	d211      	bcs.n	8000b42 <__aeabi_d2uiz+0x2e>
 8000b1e:	d50d      	bpl.n	8000b3c <__aeabi_d2uiz+0x28>
 8000b20:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b24:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b28:	d40e      	bmi.n	8000b48 <__aeabi_d2uiz+0x34>
 8000b2a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b32:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b36:	fa23 f002 	lsr.w	r0, r3, r2
 8000b3a:	4770      	bx	lr
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b46:	d102      	bne.n	8000b4e <__aeabi_d2uiz+0x3a>
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	4770      	bx	lr
 8000b4e:	f04f 0000 	mov.w	r0, #0
 8000b52:	4770      	bx	lr

08000b54 <__aeabi_d2f>:
 8000b54:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b58:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b5c:	bf24      	itt	cs
 8000b5e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b62:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b66:	d90d      	bls.n	8000b84 <__aeabi_d2f+0x30>
 8000b68:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b6c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b70:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b74:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b78:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b7c:	bf08      	it	eq
 8000b7e:	f020 0001 	biceq.w	r0, r0, #1
 8000b82:	4770      	bx	lr
 8000b84:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b88:	d121      	bne.n	8000bce <__aeabi_d2f+0x7a>
 8000b8a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b8e:	bfbc      	itt	lt
 8000b90:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b94:	4770      	bxlt	lr
 8000b96:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b9a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b9e:	f1c2 0218 	rsb	r2, r2, #24
 8000ba2:	f1c2 0c20 	rsb	ip, r2, #32
 8000ba6:	fa10 f30c 	lsls.w	r3, r0, ip
 8000baa:	fa20 f002 	lsr.w	r0, r0, r2
 8000bae:	bf18      	it	ne
 8000bb0:	f040 0001 	orrne.w	r0, r0, #1
 8000bb4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bbc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc0:	ea40 000c 	orr.w	r0, r0, ip
 8000bc4:	fa23 f302 	lsr.w	r3, r3, r2
 8000bc8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bcc:	e7cc      	b.n	8000b68 <__aeabi_d2f+0x14>
 8000bce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bd2:	d107      	bne.n	8000be4 <__aeabi_d2f+0x90>
 8000bd4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bd8:	bf1e      	ittt	ne
 8000bda:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000bde:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000be2:	4770      	bxne	lr
 8000be4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bec:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop

08000bf4 <__aeabi_uldivmod>:
 8000bf4:	b953      	cbnz	r3, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf6:	b94a      	cbnz	r2, 8000c0c <__aeabi_uldivmod+0x18>
 8000bf8:	2900      	cmp	r1, #0
 8000bfa:	bf08      	it	eq
 8000bfc:	2800      	cmpeq	r0, #0
 8000bfe:	bf1c      	itt	ne
 8000c00:	f04f 31ff 	movne.w	r1, #4294967295
 8000c04:	f04f 30ff 	movne.w	r0, #4294967295
 8000c08:	f000 b96a 	b.w	8000ee0 <__aeabi_idiv0>
 8000c0c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c10:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c14:	f000 f806 	bl	8000c24 <__udivmoddi4>
 8000c18:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c20:	b004      	add	sp, #16
 8000c22:	4770      	bx	lr

08000c24 <__udivmoddi4>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	9d08      	ldr	r5, [sp, #32]
 8000c2a:	460c      	mov	r4, r1
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d14e      	bne.n	8000cce <__udivmoddi4+0xaa>
 8000c30:	4694      	mov	ip, r2
 8000c32:	458c      	cmp	ip, r1
 8000c34:	4686      	mov	lr, r0
 8000c36:	fab2 f282 	clz	r2, r2
 8000c3a:	d962      	bls.n	8000d02 <__udivmoddi4+0xde>
 8000c3c:	b14a      	cbz	r2, 8000c52 <__udivmoddi4+0x2e>
 8000c3e:	f1c2 0320 	rsb	r3, r2, #32
 8000c42:	4091      	lsls	r1, r2
 8000c44:	fa20 f303 	lsr.w	r3, r0, r3
 8000c48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c4c:	4319      	orrs	r1, r3
 8000c4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c56:	fa1f f68c 	uxth.w	r6, ip
 8000c5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c62:	fb07 1114 	mls	r1, r7, r4, r1
 8000c66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6a:	fb04 f106 	mul.w	r1, r4, r6
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	d90a      	bls.n	8000c88 <__udivmoddi4+0x64>
 8000c72:	eb1c 0303 	adds.w	r3, ip, r3
 8000c76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c7a:	f080 8112 	bcs.w	8000ea2 <__udivmoddi4+0x27e>
 8000c7e:	4299      	cmp	r1, r3
 8000c80:	f240 810f 	bls.w	8000ea2 <__udivmoddi4+0x27e>
 8000c84:	3c02      	subs	r4, #2
 8000c86:	4463      	add	r3, ip
 8000c88:	1a59      	subs	r1, r3, r1
 8000c8a:	fa1f f38e 	uxth.w	r3, lr
 8000c8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c92:	fb07 1110 	mls	r1, r7, r0, r1
 8000c96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c9a:	fb00 f606 	mul.w	r6, r0, r6
 8000c9e:	429e      	cmp	r6, r3
 8000ca0:	d90a      	bls.n	8000cb8 <__udivmoddi4+0x94>
 8000ca2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ca6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000caa:	f080 80fc 	bcs.w	8000ea6 <__udivmoddi4+0x282>
 8000cae:	429e      	cmp	r6, r3
 8000cb0:	f240 80f9 	bls.w	8000ea6 <__udivmoddi4+0x282>
 8000cb4:	4463      	add	r3, ip
 8000cb6:	3802      	subs	r0, #2
 8000cb8:	1b9b      	subs	r3, r3, r6
 8000cba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	b11d      	cbz	r5, 8000cca <__udivmoddi4+0xa6>
 8000cc2:	40d3      	lsrs	r3, r2
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cce:	428b      	cmp	r3, r1
 8000cd0:	d905      	bls.n	8000cde <__udivmoddi4+0xba>
 8000cd2:	b10d      	cbz	r5, 8000cd8 <__udivmoddi4+0xb4>
 8000cd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd8:	2100      	movs	r1, #0
 8000cda:	4608      	mov	r0, r1
 8000cdc:	e7f5      	b.n	8000cca <__udivmoddi4+0xa6>
 8000cde:	fab3 f183 	clz	r1, r3
 8000ce2:	2900      	cmp	r1, #0
 8000ce4:	d146      	bne.n	8000d74 <__udivmoddi4+0x150>
 8000ce6:	42a3      	cmp	r3, r4
 8000ce8:	d302      	bcc.n	8000cf0 <__udivmoddi4+0xcc>
 8000cea:	4290      	cmp	r0, r2
 8000cec:	f0c0 80f0 	bcc.w	8000ed0 <__udivmoddi4+0x2ac>
 8000cf0:	1a86      	subs	r6, r0, r2
 8000cf2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cf6:	2001      	movs	r0, #1
 8000cf8:	2d00      	cmp	r5, #0
 8000cfa:	d0e6      	beq.n	8000cca <__udivmoddi4+0xa6>
 8000cfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000d00:	e7e3      	b.n	8000cca <__udivmoddi4+0xa6>
 8000d02:	2a00      	cmp	r2, #0
 8000d04:	f040 8090 	bne.w	8000e28 <__udivmoddi4+0x204>
 8000d08:	eba1 040c 	sub.w	r4, r1, ip
 8000d0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d10:	fa1f f78c 	uxth.w	r7, ip
 8000d14:	2101      	movs	r1, #1
 8000d16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000d22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d26:	fb07 f006 	mul.w	r0, r7, r6
 8000d2a:	4298      	cmp	r0, r3
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x11c>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d36:	d202      	bcs.n	8000d3e <__udivmoddi4+0x11a>
 8000d38:	4298      	cmp	r0, r3
 8000d3a:	f200 80cd 	bhi.w	8000ed8 <__udivmoddi4+0x2b4>
 8000d3e:	4626      	mov	r6, r4
 8000d40:	1a1c      	subs	r4, r3, r0
 8000d42:	fa1f f38e 	uxth.w	r3, lr
 8000d46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d52:	fb00 f707 	mul.w	r7, r0, r7
 8000d56:	429f      	cmp	r7, r3
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x148>
 8000d5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x146>
 8000d64:	429f      	cmp	r7, r3
 8000d66:	f200 80b0 	bhi.w	8000eca <__udivmoddi4+0x2a6>
 8000d6a:	4620      	mov	r0, r4
 8000d6c:	1bdb      	subs	r3, r3, r7
 8000d6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d72:	e7a5      	b.n	8000cc0 <__udivmoddi4+0x9c>
 8000d74:	f1c1 0620 	rsb	r6, r1, #32
 8000d78:	408b      	lsls	r3, r1
 8000d7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d7e:	431f      	orrs	r7, r3
 8000d80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d84:	fa04 f301 	lsl.w	r3, r4, r1
 8000d88:	ea43 030c 	orr.w	r3, r3, ip
 8000d8c:	40f4      	lsrs	r4, r6
 8000d8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d92:	0c38      	lsrs	r0, r7, #16
 8000d94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d98:	fbb4 fef0 	udiv	lr, r4, r0
 8000d9c:	fa1f fc87 	uxth.w	ip, r7
 8000da0:	fb00 441e 	mls	r4, r0, lr, r4
 8000da4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000da8:	fb0e f90c 	mul.w	r9, lr, ip
 8000dac:	45a1      	cmp	r9, r4
 8000dae:	fa02 f201 	lsl.w	r2, r2, r1
 8000db2:	d90a      	bls.n	8000dca <__udivmoddi4+0x1a6>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000dba:	f080 8084 	bcs.w	8000ec6 <__udivmoddi4+0x2a2>
 8000dbe:	45a1      	cmp	r9, r4
 8000dc0:	f240 8081 	bls.w	8000ec6 <__udivmoddi4+0x2a2>
 8000dc4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000dc8:	443c      	add	r4, r7
 8000dca:	eba4 0409 	sub.w	r4, r4, r9
 8000dce:	fa1f f983 	uxth.w	r9, r3
 8000dd2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000dd6:	fb00 4413 	mls	r4, r0, r3, r4
 8000dda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dde:	fb03 fc0c 	mul.w	ip, r3, ip
 8000de2:	45a4      	cmp	ip, r4
 8000de4:	d907      	bls.n	8000df6 <__udivmoddi4+0x1d2>
 8000de6:	193c      	adds	r4, r7, r4
 8000de8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dec:	d267      	bcs.n	8000ebe <__udivmoddi4+0x29a>
 8000dee:	45a4      	cmp	ip, r4
 8000df0:	d965      	bls.n	8000ebe <__udivmoddi4+0x29a>
 8000df2:	3b02      	subs	r3, #2
 8000df4:	443c      	add	r4, r7
 8000df6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dfa:	fba0 9302 	umull	r9, r3, r0, r2
 8000dfe:	eba4 040c 	sub.w	r4, r4, ip
 8000e02:	429c      	cmp	r4, r3
 8000e04:	46ce      	mov	lr, r9
 8000e06:	469c      	mov	ip, r3
 8000e08:	d351      	bcc.n	8000eae <__udivmoddi4+0x28a>
 8000e0a:	d04e      	beq.n	8000eaa <__udivmoddi4+0x286>
 8000e0c:	b155      	cbz	r5, 8000e24 <__udivmoddi4+0x200>
 8000e0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000e12:	eb64 040c 	sbc.w	r4, r4, ip
 8000e16:	fa04 f606 	lsl.w	r6, r4, r6
 8000e1a:	40cb      	lsrs	r3, r1
 8000e1c:	431e      	orrs	r6, r3
 8000e1e:	40cc      	lsrs	r4, r1
 8000e20:	e9c5 6400 	strd	r6, r4, [r5]
 8000e24:	2100      	movs	r1, #0
 8000e26:	e750      	b.n	8000cca <__udivmoddi4+0xa6>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000e30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e34:	fa24 f303 	lsr.w	r3, r4, r3
 8000e38:	4094      	lsls	r4, r2
 8000e3a:	430c      	orrs	r4, r1
 8000e3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e44:	fa1f f78c 	uxth.w	r7, ip
 8000e48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e50:	0c23      	lsrs	r3, r4, #16
 8000e52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e56:	fb00 f107 	mul.w	r1, r0, r7
 8000e5a:	4299      	cmp	r1, r3
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x24c>
 8000e5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e66:	d22c      	bcs.n	8000ec2 <__udivmoddi4+0x29e>
 8000e68:	4299      	cmp	r1, r3
 8000e6a:	d92a      	bls.n	8000ec2 <__udivmoddi4+0x29e>
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	4463      	add	r3, ip
 8000e70:	1a5b      	subs	r3, r3, r1
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e78:	fb08 3311 	mls	r3, r8, r1, r3
 8000e7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e80:	fb01 f307 	mul.w	r3, r1, r7
 8000e84:	42a3      	cmp	r3, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x276>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e90:	d213      	bcs.n	8000eba <__udivmoddi4+0x296>
 8000e92:	42a3      	cmp	r3, r4
 8000e94:	d911      	bls.n	8000eba <__udivmoddi4+0x296>
 8000e96:	3902      	subs	r1, #2
 8000e98:	4464      	add	r4, ip
 8000e9a:	1ae4      	subs	r4, r4, r3
 8000e9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ea0:	e739      	b.n	8000d16 <__udivmoddi4+0xf2>
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	e6f0      	b.n	8000c88 <__udivmoddi4+0x64>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e706      	b.n	8000cb8 <__udivmoddi4+0x94>
 8000eaa:	45c8      	cmp	r8, r9
 8000eac:	d2ae      	bcs.n	8000e0c <__udivmoddi4+0x1e8>
 8000eae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000eb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000eb6:	3801      	subs	r0, #1
 8000eb8:	e7a8      	b.n	8000e0c <__udivmoddi4+0x1e8>
 8000eba:	4631      	mov	r1, r6
 8000ebc:	e7ed      	b.n	8000e9a <__udivmoddi4+0x276>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	e799      	b.n	8000df6 <__udivmoddi4+0x1d2>
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	e7d4      	b.n	8000e70 <__udivmoddi4+0x24c>
 8000ec6:	46d6      	mov	lr, sl
 8000ec8:	e77f      	b.n	8000dca <__udivmoddi4+0x1a6>
 8000eca:	4463      	add	r3, ip
 8000ecc:	3802      	subs	r0, #2
 8000ece:	e74d      	b.n	8000d6c <__udivmoddi4+0x148>
 8000ed0:	4606      	mov	r6, r0
 8000ed2:	4623      	mov	r3, r4
 8000ed4:	4608      	mov	r0, r1
 8000ed6:	e70f      	b.n	8000cf8 <__udivmoddi4+0xd4>
 8000ed8:	3e02      	subs	r6, #2
 8000eda:	4463      	add	r3, ip
 8000edc:	e730      	b.n	8000d40 <__udivmoddi4+0x11c>
 8000ede:	bf00      	nop

08000ee0 <__aeabi_idiv0>:
 8000ee0:	4770      	bx	lr
 8000ee2:	bf00      	nop

08000ee4 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000ee8:	4b0d      	ldr	r3, [pc, #52]	@ (8000f20 <modbus_1t5_Timeout+0x3c>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	2201      	movs	r2, #1
 8000eee:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000ef0:	4b0b      	ldr	r3, [pc, #44]	@ (8000f20 <modbus_1t5_Timeout+0x3c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	691b      	ldr	r3, [r3, #16]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000efc:	4b08      	ldr	r3, [pc, #32]	@ (8000f20 <modbus_1t5_Timeout+0x3c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	691b      	ldr	r3, [r3, #16]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	4b06      	ldr	r3, [pc, #24]	@ (8000f20 <modbus_1t5_Timeout+0x3c>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	691b      	ldr	r3, [r3, #16]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f042 0201 	orr.w	r2, r2, #1
 8000f12:	601a      	str	r2, [r3, #0]
}
 8000f14:	bf00      	nop
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	2000023c 	.word	0x2000023c

08000f24 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000f2c:	4b04      	ldr	r3, [pc, #16]	@ (8000f40 <modbus_3t5_Timeout+0x1c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	2201      	movs	r2, #1
 8000f32:	755a      	strb	r2, [r3, #21]

}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	2000023c 	.word	0x2000023c

08000f44 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f007 fdff 	bl	8008b50 <HAL_UART_GetError>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b20      	cmp	r3, #32
 8000f56:	d101      	bne.n	8000f5c <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8000f58:	f7ff ffc4 	bl	8000ee4 <modbus_1t5_Timeout>

	}
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b082      	sub	sp, #8
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000f6e:	4a25      	ldr	r2, [pc, #148]	@ (8001004 <Modbus_init+0xa0>)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000f74:	4b23      	ldr	r3, [pc, #140]	@ (8001004 <Modbus_init+0xa0>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	683a      	ldr	r2, [r7, #0]
 8000f7a:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	691b      	ldr	r3, [r3, #16]
 8000f80:	4a21      	ldr	r2, [pc, #132]	@ (8001008 <Modbus_init+0xa4>)
 8000f82:	210e      	movs	r1, #14
 8000f84:	4618      	mov	r0, r3
 8000f86:	f006 f827 	bl	8006fd8 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	68db      	ldr	r3, [r3, #12]
 8000f8e:	2110      	movs	r1, #16
 8000f90:	4618      	mov	r0, r3
 8000f92:	f007 fd87 	bl	8008aa4 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f007 fd9e 	bl	8008adc <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	4a19      	ldr	r2, [pc, #100]	@ (800100c <Modbus_init+0xa8>)
 8000fa6:	2104      	movs	r1, #4
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f007 f865 	bl	8008078 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8000fae:	4b15      	ldr	r3, [pc, #84]	@ (8001004 <Modbus_init+0xa0>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8000fb4:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <Modbus_init+0xa0>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	4b12      	ldr	r3, [pc, #72]	@ (8001004 <Modbus_init+0xa0>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8000fc0:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000fc4:	4413      	add	r3, r2
 8000fc6:	3302      	adds	r3, #2
 8000fc8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f007 f98d 	bl	80082ec <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000fd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001004 <Modbus_init+0xa0>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	691b      	ldr	r3, [r3, #16]
 8000fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d10c      	bne.n	8000ffc <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000fe2:	4b08      	ldr	r3, [pc, #32]	@ (8001004 <Modbus_init+0xa0>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f004 ffd1 	bl	8005f90 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000fee:	4b05      	ldr	r3, [pc, #20]	@ (8001004 <Modbus_init+0xa0>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	691b      	ldr	r3, [r3, #16]
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f005 fa20 	bl	800643c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000ffc:	bf00      	nop
 8000ffe:	3708      	adds	r7, #8
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	2000023c 	.word	0x2000023c
 8001008:	08000f25 	.word	0x08000f25
 800100c:	08000f45 	.word	0x08000f45

08001010 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
 8001018:	460b      	mov	r3, r1
 800101a:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 800101c:	23ff      	movs	r3, #255	@ 0xff
 800101e:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001020:	23ff      	movs	r3, #255	@ 0xff
 8001022:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8001024:	e013      	b.n	800104e <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	1c5a      	adds	r2, r3, #1
 800102a:	607a      	str	r2, [r7, #4]
 800102c:	781a      	ldrb	r2, [r3, #0]
 800102e:	7bbb      	ldrb	r3, [r7, #14]
 8001030:	4053      	eors	r3, r2
 8001032:	b2db      	uxtb	r3, r3
 8001034:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8001036:	4a0f      	ldr	r2, [pc, #60]	@ (8001074 <CRC16+0x64>)
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	4413      	add	r3, r2
 800103c:	781a      	ldrb	r2, [r3, #0]
 800103e:	7bfb      	ldrb	r3, [r7, #15]
 8001040:	4053      	eors	r3, r2
 8001042:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001044:	4a0c      	ldr	r2, [pc, #48]	@ (8001078 <CRC16+0x68>)
 8001046:	68bb      	ldr	r3, [r7, #8]
 8001048:	4413      	add	r3, r2
 800104a:	781b      	ldrb	r3, [r3, #0]
 800104c:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800104e:	883b      	ldrh	r3, [r7, #0]
 8001050:	1e5a      	subs	r2, r3, #1
 8001052:	803a      	strh	r2, [r7, #0]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d1e6      	bne.n	8001026 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	b21a      	sxth	r2, r3
 800105e:	7bbb      	ldrb	r3, [r7, #14]
 8001060:	b21b      	sxth	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b21b      	sxth	r3, r3
 8001066:	b29b      	uxth	r3, r3
}
 8001068:	4618      	mov	r0, r3
 800106a:	3714      	adds	r7, #20
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	20000100 	.word	0x20000100
 8001078:	20000000 	.word	0x20000000

0800107c <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b082      	sub	sp, #8
 8001080:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8001082:	4b7e      	ldr	r3, [pc, #504]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	7ddb      	ldrb	r3, [r3, #23]
 8001088:	3b01      	subs	r3, #1
 800108a:	2b03      	cmp	r3, #3
 800108c:	d80a      	bhi.n	80010a4 <Modbus_Protocal_Worker+0x28>
 800108e:	a201      	add	r2, pc, #4	@ (adr r2, 8001094 <Modbus_Protocal_Worker+0x18>)
 8001090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001094:	080010af 	.word	0x080010af
 8001098:	08001243 	.word	0x08001243
 800109c:	0800113b 	.word	0x0800113b
 80010a0:	0800117f 	.word	0x0800117f
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80010a4:	4b75      	ldr	r3, [pc, #468]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2201      	movs	r2, #1
 80010aa:	75da      	strb	r2, [r3, #23]
		break;
 80010ac:	e0e1      	b.n	8001272 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80010ae:	4b73      	ldr	r3, [pc, #460]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d006      	beq.n	80010c8 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80010ba:	4b70      	ldr	r3, [pc, #448]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2202      	movs	r2, #2
 80010c0:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80010c2:	f000 f9cd 	bl	8001460 <Modbus_Emission>
 80010c6:	e018      	b.n	80010fa <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80010c8:	4b6c      	ldr	r3, [pc, #432]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68db      	ldr	r3, [r3, #12]
 80010ce:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80010d2:	4b6a      	ldr	r3, [pc, #424]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80010dc:	b29b      	uxth	r3, r3
 80010de:	429a      	cmp	r2, r3
 80010e0:	d00b      	beq.n	80010fa <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80010e2:	4b66      	ldr	r3, [pc, #408]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2200      	movs	r2, #0
 80010e8:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80010ea:	4b64      	ldr	r3, [pc, #400]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	2200      	movs	r2, #0
 80010f0:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80010f2:	4b62      	ldr	r3, [pc, #392]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2203      	movs	r2, #3
 80010f8:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80010fa:	4b60      	ldr	r3, [pc, #384]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001104:	2b20      	cmp	r3, #32
 8001106:	f040 80ad 	bne.w	8001264 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800110a:	4b5c      	ldr	r3, [pc, #368]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2200      	movs	r2, #0
 8001110:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001114:	4b59      	ldr	r3, [pc, #356]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800111a:	4b58      	ldr	r3, [pc, #352]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	4b57      	ldr	r3, [pc, #348]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8001126:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800112a:	4413      	add	r3, r2
 800112c:	3302      	adds	r3, #2
 800112e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001132:	4619      	mov	r1, r3
 8001134:	f007 f8da 	bl	80082ec <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 8001138:	e094      	b.n	8001264 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800113a:	4b50      	ldr	r3, [pc, #320]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	7d1b      	ldrb	r3, [r3, #20]
 8001140:	2b00      	cmp	r3, #0
 8001142:	f000 8091 	beq.w	8001268 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001146:	4b4d      	ldr	r3, [pc, #308]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	22fe      	movs	r2, #254	@ 0xfe
 800114c:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800114e:	4b4b      	ldr	r3, [pc, #300]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	68db      	ldr	r3, [r3, #12]
 8001154:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001158:	4b48      	ldr	r3, [pc, #288]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	68db      	ldr	r3, [r3, #12]
 800115e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	685b      	ldr	r3, [r3, #4]
 8001166:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001168:	4b44      	ldr	r3, [pc, #272]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 800116a:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800116c:	1a8a      	subs	r2, r1, r2
 800116e:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8001170:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001174:	4b41      	ldr	r3, [pc, #260]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	2204      	movs	r2, #4
 800117a:	75da      	strb	r2, [r3, #23]
		}
		break;
 800117c:	e074      	b.n	8001268 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800117e:	4b3f      	ldr	r3, [pc, #252]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001186:	f113 0f02 	cmn.w	r3, #2
 800118a:	d150      	bne.n	800122e <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 800118c:	4b3b      	ldr	r3, [pc, #236]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2200      	movs	r2, #0
 8001192:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001194:	4b39      	ldr	r3, [pc, #228]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f203 2272 	addw	r2, r3, #626	@ 0x272
 800119c:	4b37      	ldr	r3, [pc, #220]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80011a4:	3b02      	subs	r3, #2
 80011a6:	4619      	mov	r1, r3
 80011a8:	4610      	mov	r0, r2
 80011aa:	f7ff ff31 	bl	8001010 <CRC16>
 80011ae:	4603      	mov	r3, r0
 80011b0:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80011b2:	793a      	ldrb	r2, [r7, #4]
 80011b4:	4b31      	ldr	r3, [pc, #196]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 80011b6:	6819      	ldr	r1, [r3, #0]
 80011b8:	4b30      	ldr	r3, [pc, #192]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80011c0:	3b02      	subs	r3, #2
 80011c2:	440b      	add	r3, r1
 80011c4:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d10c      	bne.n	80011e6 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80011cc:	797a      	ldrb	r2, [r7, #5]
 80011ce:	4b2b      	ldr	r3, [pc, #172]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 80011d0:	6819      	ldr	r1, [r3, #0]
 80011d2:	4b2a      	ldr	r3, [pc, #168]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80011da:	3b01      	subs	r3, #1
 80011dc:	440b      	add	r3, r1
 80011de:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d004      	beq.n	80011f0 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80011e6:	4b25      	ldr	r3, [pc, #148]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	22ff      	movs	r2, #255	@ 0xff
 80011ec:	759a      	strb	r2, [r3, #22]
				break;
 80011ee:	e040      	b.n	8001272 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80011f0:	4b22      	ldr	r3, [pc, #136]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 80011f8:	4b20      	ldr	r3, [pc, #128]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	429a      	cmp	r2, r3
 8001200:	d113      	bne.n	800122a <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8001202:	4b1e      	ldr	r3, [pc, #120]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800120a:	4b1c      	ldr	r3, [pc, #112]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8001212:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8001214:	4b19      	ldr	r3, [pc, #100]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800121c:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 800121e:	461a      	mov	r2, r3
 8001220:	f008 fdea 	bl	8009df8 <memcpy>

			//execute command
			Modbus_frame_response();
 8001224:	f000 f904 	bl	8001430 <Modbus_frame_response>
 8001228:	e001      	b.n	800122e <Modbus_Protocal_Worker+0x1b2>
				break;
 800122a:	bf00      	nop
					}
		break;


	}
}
 800122c:	e021      	b.n	8001272 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 800122e:	4b13      	ldr	r3, [pc, #76]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	7d5b      	ldrb	r3, [r3, #21]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d019      	beq.n	800126c <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 8001238:	4b10      	ldr	r3, [pc, #64]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2201      	movs	r2, #1
 800123e:	75da      	strb	r2, [r3, #23]
		break;
 8001240:	e014      	b.n	800126c <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800124c:	2b20      	cmp	r3, #32
 800124e:	d10f      	bne.n	8001270 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8001250:	4b0a      	ldr	r3, [pc, #40]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2200      	movs	r2, #0
 8001256:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800125a:	4b08      	ldr	r3, [pc, #32]	@ (800127c <Modbus_Protocal_Worker+0x200>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2201      	movs	r2, #1
 8001260:	75da      	strb	r2, [r3, #23]
		break;
 8001262:	e005      	b.n	8001270 <Modbus_Protocal_Worker+0x1f4>
		break;
 8001264:	bf00      	nop
 8001266:	e004      	b.n	8001272 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001268:	bf00      	nop
 800126a:	e002      	b.n	8001272 <Modbus_Protocal_Worker+0x1f6>
		break;
 800126c:	bf00      	nop
 800126e:	e000      	b.n	8001272 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001270:	bf00      	nop
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	2000023c 	.word	0x2000023c

08001280 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001286:	4b1d      	ldr	r3, [pc, #116]	@ (80012fc <modbusWrite1Register+0x7c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	7e5b      	ldrb	r3, [r3, #25]
 800128c:	021b      	lsls	r3, r3, #8
 800128e:	b29b      	uxth	r3, r3
 8001290:	4a1a      	ldr	r2, [pc, #104]	@ (80012fc <modbusWrite1Register+0x7c>)
 8001292:	6812      	ldr	r2, [r2, #0]
 8001294:	7e92      	ldrb	r2, [r2, #26]
 8001296:	4413      	add	r3, r2
 8001298:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800129a:	88fa      	ldrh	r2, [r7, #6]
 800129c:	4b17      	ldr	r3, [pc, #92]	@ (80012fc <modbusWrite1Register+0x7c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	429a      	cmp	r2, r3
 80012a4:	d903      	bls.n	80012ae <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80012a6:	2002      	movs	r0, #2
 80012a8:	f000 f8a0 	bl	80013ec <ModbusErrorReply>
			 return;
 80012ac:	e023      	b.n	80012f6 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80012ae:	4b13      	ldr	r3, [pc, #76]	@ (80012fc <modbusWrite1Register+0x7c>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	4b12      	ldr	r3, [pc, #72]	@ (80012fc <modbusWrite1Register+0x7c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6859      	ldr	r1, [r3, #4]
 80012b8:	88fb      	ldrh	r3, [r7, #6]
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	440b      	add	r3, r1
 80012be:	7ed2      	ldrb	r2, [r2, #27]
 80012c0:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80012c2:	4b0e      	ldr	r3, [pc, #56]	@ (80012fc <modbusWrite1Register+0x7c>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	4b0d      	ldr	r3, [pc, #52]	@ (80012fc <modbusWrite1Register+0x7c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	6859      	ldr	r1, [r3, #4]
 80012cc:	88fb      	ldrh	r3, [r7, #6]
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	440b      	add	r3, r1
 80012d2:	7f12      	ldrb	r2, [r2, #28]
 80012d4:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80012d6:	4b09      	ldr	r3, [pc, #36]	@ (80012fc <modbusWrite1Register+0x7c>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 80012de:	4b07      	ldr	r3, [pc, #28]	@ (80012fc <modbusWrite1Register+0x7c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 80012e4:	2208      	movs	r2, #8
 80012e6:	4619      	mov	r1, r3
 80012e8:	f008 fd86 	bl	8009df8 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80012ec:	4b03      	ldr	r3, [pc, #12]	@ (80012fc <modbusWrite1Register+0x7c>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	2205      	movs	r2, #5
 80012f2:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	2000023c 	.word	0x2000023c

08001300 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 8001306:	4b38      	ldr	r3, [pc, #224]	@ (80013e8 <modbusRead1Register+0xe8>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	7edb      	ldrb	r3, [r3, #27]
 800130c:	021b      	lsls	r3, r3, #8
 800130e:	b29b      	uxth	r3, r3
 8001310:	4a35      	ldr	r2, [pc, #212]	@ (80013e8 <modbusRead1Register+0xe8>)
 8001312:	6812      	ldr	r2, [r2, #0]
 8001314:	7f12      	ldrb	r2, [r2, #28]
 8001316:	4413      	add	r3, r2
 8001318:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800131a:	4b33      	ldr	r3, [pc, #204]	@ (80013e8 <modbusRead1Register+0xe8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	7e5b      	ldrb	r3, [r3, #25]
 8001320:	021b      	lsls	r3, r3, #8
 8001322:	b29b      	uxth	r3, r3
 8001324:	4a30      	ldr	r2, [pc, #192]	@ (80013e8 <modbusRead1Register+0xe8>)
 8001326:	6812      	ldr	r2, [r2, #0]
 8001328:	7e92      	ldrb	r2, [r2, #26]
 800132a:	4413      	add	r3, r2
 800132c:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800132e:	88fb      	ldrh	r3, [r7, #6]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d002      	beq.n	800133a <modbusRead1Register+0x3a>
 8001334:	88fb      	ldrh	r3, [r7, #6]
 8001336:	2b7d      	cmp	r3, #125	@ 0x7d
 8001338:	d903      	bls.n	8001342 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800133a:	2003      	movs	r0, #3
 800133c:	f000 f856 	bl	80013ec <ModbusErrorReply>
		 return;
 8001340:	e04e      	b.n	80013e0 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8001342:	88ba      	ldrh	r2, [r7, #4]
 8001344:	4b28      	ldr	r3, [pc, #160]	@ (80013e8 <modbusRead1Register+0xe8>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	429a      	cmp	r2, r3
 800134c:	d808      	bhi.n	8001360 <modbusRead1Register+0x60>
 800134e:	88ba      	ldrh	r2, [r7, #4]
 8001350:	88fb      	ldrh	r3, [r7, #6]
 8001352:	4413      	add	r3, r2
 8001354:	461a      	mov	r2, r3
 8001356:	4b24      	ldr	r3, [pc, #144]	@ (80013e8 <modbusRead1Register+0xe8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	689b      	ldr	r3, [r3, #8]
 800135c:	429a      	cmp	r2, r3
 800135e:	d903      	bls.n	8001368 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001360:	2002      	movs	r0, #2
 8001362:	f000 f843 	bl	80013ec <ModbusErrorReply>
		 return;
 8001366:	e03b      	b.n	80013e0 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001368:	4b1f      	ldr	r3, [pc, #124]	@ (80013e8 <modbusRead1Register+0xe8>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2203      	movs	r2, #3
 800136e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001372:	88fb      	ldrh	r3, [r7, #6]
 8001374:	b2da      	uxtb	r2, r3
 8001376:	4b1c      	ldr	r3, [pc, #112]	@ (80013e8 <modbusRead1Register+0xe8>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	0052      	lsls	r2, r2, #1
 800137c:	b2d2      	uxtb	r2, r2
 800137e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001382:	2400      	movs	r4, #0
 8001384:	e020      	b.n	80013c8 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001386:	4b18      	ldr	r3, [pc, #96]	@ (80013e8 <modbusRead1Register+0xe8>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	685a      	ldr	r2, [r3, #4]
 800138c:	88bb      	ldrh	r3, [r7, #4]
 800138e:	4423      	add	r3, r4
 8001390:	005b      	lsls	r3, r3, #1
 8001392:	18d1      	adds	r1, r2, r3
 8001394:	4b14      	ldr	r3, [pc, #80]	@ (80013e8 <modbusRead1Register+0xe8>)
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	1c63      	adds	r3, r4, #1
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	7849      	ldrb	r1, [r1, #1]
 800139e:	4413      	add	r3, r2
 80013a0:	460a      	mov	r2, r1
 80013a2:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80013a6:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <modbusRead1Register+0xe8>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	685a      	ldr	r2, [r3, #4]
 80013ac:	88bb      	ldrh	r3, [r7, #4]
 80013ae:	4423      	add	r3, r4
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	18d1      	adds	r1, r2, r3
 80013b4:	4b0c      	ldr	r3, [pc, #48]	@ (80013e8 <modbusRead1Register+0xe8>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	0063      	lsls	r3, r4, #1
 80013ba:	3303      	adds	r3, #3
 80013bc:	7809      	ldrb	r1, [r1, #0]
 80013be:	4413      	add	r3, r2
 80013c0:	460a      	mov	r2, r1
 80013c2:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80013c6:	3401      	adds	r4, #1
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	429c      	cmp	r4, r3
 80013cc:	dbdb      	blt.n	8001386 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80013ce:	88fb      	ldrh	r3, [r7, #6]
 80013d0:	3301      	adds	r3, #1
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	4b04      	ldr	r3, [pc, #16]	@ (80013e8 <modbusRead1Register+0xe8>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	0052      	lsls	r2, r2, #1
 80013da:	b2d2      	uxtb	r2, r2
 80013dc:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd90      	pop	{r4, r7, pc}
 80013e6:	bf00      	nop
 80013e8:	2000023c 	.word	0x2000023c

080013ec <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80013f6:	4b0d      	ldr	r3, [pc, #52]	@ (800142c <ModbusErrorReply+0x40>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	7e1a      	ldrb	r2, [r3, #24]
 80013fc:	4b0b      	ldr	r3, [pc, #44]	@ (800142c <ModbusErrorReply+0x40>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8001404:	b2d2      	uxtb	r2, r2
 8001406:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 800140a:	4b08      	ldr	r3, [pc, #32]	@ (800142c <ModbusErrorReply+0x40>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	79fa      	ldrb	r2, [r7, #7]
 8001410:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8001414:	4b05      	ldr	r3, [pc, #20]	@ (800142c <ModbusErrorReply+0x40>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	2202      	movs	r2, #2
 800141a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	2000023c 	.word	0x2000023c

08001430 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001434:	4b09      	ldr	r3, [pc, #36]	@ (800145c <Modbus_frame_response+0x2c>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	7e1b      	ldrb	r3, [r3, #24]
 800143a:	2b03      	cmp	r3, #3
 800143c:	d004      	beq.n	8001448 <Modbus_frame_response+0x18>
 800143e:	2b06      	cmp	r3, #6
 8001440:	d105      	bne.n	800144e <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001442:	f7ff ff1d 	bl	8001280 <modbusWrite1Register>
		break;
 8001446:	e006      	b.n	8001456 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001448:	f7ff ff5a 	bl	8001300 <modbusRead1Register>
		break;
 800144c:	e003      	b.n	8001456 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800144e:	2001      	movs	r0, #1
 8001450:	f7ff ffcc 	bl	80013ec <ModbusErrorReply>
		break;
 8001454:	bf00      	nop

	}
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	2000023c 	.word	0x2000023c

08001460 <Modbus_Emission>:

void Modbus_Emission()
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001466:	4b38      	ldr	r3, [pc, #224]	@ (8001548 <Modbus_Emission+0xe8>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001470:	2b20      	cmp	r3, #32
 8001472:	d15d      	bne.n	8001530 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001474:	4b34      	ldr	r3, [pc, #208]	@ (8001548 <Modbus_Emission+0xe8>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b33      	ldr	r3, [pc, #204]	@ (8001548 <Modbus_Emission+0xe8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	7812      	ldrb	r2, [r2, #0]
 800147e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001482:	4b31      	ldr	r3, [pc, #196]	@ (8001548 <Modbus_Emission+0xe8>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 800148a:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800148c:	4b2e      	ldr	r3, [pc, #184]	@ (8001548 <Modbus_Emission+0xe8>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8001494:	4b2c      	ldr	r3, [pc, #176]	@ (8001548 <Modbus_Emission+0xe8>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 800149c:	461a      	mov	r2, r3
 800149e:	f008 fcab 	bl	8009df8 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80014a2:	4b29      	ldr	r3, [pc, #164]	@ (8001548 <Modbus_Emission+0xe8>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b26      	ldr	r3, [pc, #152]	@ (8001548 <Modbus_Emission+0xe8>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	3203      	adds	r2, #3
 80014b2:	b292      	uxth	r2, r2
 80014b4:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80014b8:	4b23      	ldr	r3, [pc, #140]	@ (8001548 <Modbus_Emission+0xe8>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80014c0:	4b21      	ldr	r3, [pc, #132]	@ (8001548 <Modbus_Emission+0xe8>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80014c8:	3b02      	subs	r3, #2
 80014ca:	4619      	mov	r1, r3
 80014cc:	4610      	mov	r0, r2
 80014ce:	f7ff fd9f 	bl	8001010 <CRC16>
 80014d2:	4603      	mov	r3, r0
 80014d4:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80014d6:	4b1c      	ldr	r3, [pc, #112]	@ (8001548 <Modbus_Emission+0xe8>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	4b1b      	ldr	r3, [pc, #108]	@ (8001548 <Modbus_Emission+0xe8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80014e2:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80014e4:	7939      	ldrb	r1, [r7, #4]
 80014e6:	4413      	add	r3, r2
 80014e8:	460a      	mov	r2, r1
 80014ea:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80014ee:	4b16      	ldr	r3, [pc, #88]	@ (8001548 <Modbus_Emission+0xe8>)
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <Modbus_Emission+0xe8>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80014fa:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80014fc:	7979      	ldrb	r1, [r7, #5]
 80014fe:	4413      	add	r3, r2
 8001500:	460a      	mov	r2, r1
 8001502:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001506:	4b10      	ldr	r3, [pc, #64]	@ (8001548 <Modbus_Emission+0xe8>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	68db      	ldr	r3, [r3, #12]
 800150c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001510:	2b20      	cmp	r3, #32
 8001512:	d10d      	bne.n	8001530 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8001514:	4b0c      	ldr	r3, [pc, #48]	@ (8001548 <Modbus_Emission+0xe8>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 800151a:	4b0b      	ldr	r3, [pc, #44]	@ (8001548 <Modbus_Emission+0xe8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001522:	4b09      	ldr	r3, [pc, #36]	@ (8001548 <Modbus_Emission+0xe8>)
 8001524:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8001526:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 800152a:	461a      	mov	r2, r3
 800152c:	f006 fe5e 	bl	80081ec <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001530:	4b05      	ldr	r3, [pc, #20]	@ (8001548 <Modbus_Emission+0xe8>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2200      	movs	r2, #0
 8001536:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001538:	4b03      	ldr	r3, [pc, #12]	@ (8001548 <Modbus_Emission+0xe8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	2200      	movs	r2, #0
 800153e:	755a      	strb	r2, [r3, #21]

}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	2000023c 	.word	0x2000023c

0800154c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800154c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001550:	b086      	sub	sp, #24
 8001552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001554:	f002 fd53 	bl	8003ffe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001558:	f000 fc0e 	bl	8001d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800155c:	f000 fedc 	bl	8002318 <MX_GPIO_Init>
  MX_DMA_Init();
 8001560:	f000 fea8 	bl	80022b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001564:	f000 fe58 	bl	8002218 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8001568:	f000 fe26 	bl	80021b8 <MX_TIM16_Init>
  MX_TIM5_Init();
 800156c:	f000 fdd6 	bl	800211c <MX_TIM5_Init>
  MX_TIM1_Init();
 8001570:	f000 fc4e 	bl	8001e10 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001574:	f000 fce0 	bl	8001f38 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001578:	f000 fd2c 	bl	8001fd4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800157c:	f000 fd80 	bl	8002080 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  //pwm setup
  	 relay[0] = 1;
 8001580:	4bac      	ldr	r3, [pc, #688]	@ (8001834 <main+0x2e8>)
 8001582:	2201      	movs	r2, #1
 8001584:	701a      	strb	r2, [r3, #0]
  	 relay[1] = 0;
 8001586:	4bab      	ldr	r3, [pc, #684]	@ (8001834 <main+0x2e8>)
 8001588:	2200      	movs	r2, #0
 800158a:	705a      	strb	r2, [r3, #1]
  	 relay[2] = 0;
 800158c:	4ba9      	ldr	r3, [pc, #676]	@ (8001834 <main+0x2e8>)
 800158e:	2200      	movs	r2, #0
 8001590:	709a      	strb	r2, [r3, #2]

	HAL_TIM_Base_Start(&htim1);
 8001592:	48a9      	ldr	r0, [pc, #676]	@ (8001838 <main+0x2ec>)
 8001594:	f004 fc8c 	bl	8005eb0 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001598:	2100      	movs	r1, #0
 800159a:	48a7      	ldr	r0, [pc, #668]	@ (8001838 <main+0x2ec>)
 800159c:	f004 fdd4 	bl	8006148 <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80015a0:	4ba5      	ldr	r3, [pc, #660]	@ (8001838 <main+0x2ec>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2200      	movs	r2, #0
 80015a6:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80015a8:	213c      	movs	r1, #60	@ 0x3c
 80015aa:	48a4      	ldr	r0, [pc, #656]	@ (800183c <main+0x2f0>)
 80015ac:	f005 f888 	bl	80066c0 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 80015b0:	48a3      	ldr	r0, [pc, #652]	@ (8001840 <main+0x2f4>)
 80015b2:	f004 fced 	bl	8005f90 <HAL_TIM_Base_Start_IT>
	upper = 0;
 80015b6:	49a3      	ldr	r1, [pc, #652]	@ (8001844 <main+0x2f8>)
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	f04f 0300 	mov.w	r3, #0
 80015c0:	e9c1 2300 	strd	r2, r3, [r1]
	PID_init(&pid_control, pid_p, pid_i, pid_d ,timerange);
 80015c4:	4ba0      	ldr	r3, [pc, #640]	@ (8001848 <main+0x2fc>)
 80015c6:	edd3 7a00 	vldr	s15, [r3]
 80015ca:	4ba0      	ldr	r3, [pc, #640]	@ (800184c <main+0x300>)
 80015cc:	ed93 7a00 	vldr	s14, [r3]
 80015d0:	4b9f      	ldr	r3, [pc, #636]	@ (8001850 <main+0x304>)
 80015d2:	edd3 6a00 	vldr	s13, [r3]
 80015d6:	4b9f      	ldr	r3, [pc, #636]	@ (8001854 <main+0x308>)
 80015d8:	881b      	ldrh	r3, [r3, #0]
 80015da:	ee06 3a10 	vmov	s12, r3
 80015de:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 80015e2:	eef0 1a46 	vmov.f32	s3, s12
 80015e6:	eeb0 1a66 	vmov.f32	s2, s13
 80015ea:	eef0 0a47 	vmov.f32	s1, s14
 80015ee:	eeb0 0a67 	vmov.f32	s0, s15
 80015f2:	4899      	ldr	r0, [pc, #612]	@ (8001858 <main+0x30c>)
 80015f4:	f002 f8f2 	bl	80037dc <PID_init>

	hmodbus.huart = &huart2;
 80015f8:	4b98      	ldr	r3, [pc, #608]	@ (800185c <main+0x310>)
 80015fa:	4a99      	ldr	r2, [pc, #612]	@ (8001860 <main+0x314>)
 80015fc:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 80015fe:	4b97      	ldr	r3, [pc, #604]	@ (800185c <main+0x310>)
 8001600:	4a98      	ldr	r2, [pc, #608]	@ (8001864 <main+0x318>)
 8001602:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 8001604:	4b95      	ldr	r3, [pc, #596]	@ (800185c <main+0x310>)
 8001606:	2215      	movs	r2, #21
 8001608:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize =200;
 800160a:	4b94      	ldr	r3, [pc, #592]	@ (800185c <main+0x310>)
 800160c:	22c8      	movs	r2, #200	@ 0xc8
 800160e:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 8001610:	4995      	ldr	r1, [pc, #596]	@ (8001868 <main+0x31c>)
 8001612:	4892      	ldr	r0, [pc, #584]	@ (800185c <main+0x310>)
 8001614:	f7ff fca6 	bl	8000f64 <Modbus_init>

	HAL_TIM_Base_Start_IT(&htim5);
 8001618:	4894      	ldr	r0, [pc, #592]	@ (800186c <main+0x320>)
 800161a:	f004 fcb9 	bl	8005f90 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if(flagstart == 0){
 800161e:	4b94      	ldr	r3, [pc, #592]	@ (8001870 <main+0x324>)
 8001620:	781b      	ldrb	r3, [r3, #0]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d10b      	bne.n	800163e <main+0xf2>
		relay[0] = 0;
 8001626:	4b83      	ldr	r3, [pc, #524]	@ (8001834 <main+0x2e8>)
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
		relay[1] = 0;
 800162c:	4b81      	ldr	r3, [pc, #516]	@ (8001834 <main+0x2e8>)
 800162e:	2200      	movs	r2, #0
 8001630:	705a      	strb	r2, [r3, #1]
		relay[2] = 0;
 8001632:	4b80      	ldr	r3, [pc, #512]	@ (8001834 <main+0x2e8>)
 8001634:	2200      	movs	r2, #0
 8001636:	709a      	strb	r2, [r3, #2]
		flagstart = 1;
 8001638:	4b8d      	ldr	r3, [pc, #564]	@ (8001870 <main+0x324>)
 800163a:	2201      	movs	r2, #1
 800163c:	701a      	strb	r2, [r3, #0]
	}


	Modbus_Protocal_Worker();
 800163e:	f7ff fd1d 	bl	800107c <Modbus_Protocal_Worker>
	registerFrame[0x11].U16 = QEIdata.TotalPos*10; //ZPos
 8001642:	4b8c      	ldr	r3, [pc, #560]	@ (8001874 <main+0x328>)
 8001644:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8001648:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 800164c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001650:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001654:	ee17 3a90 	vmov	r3, s15
 8001658:	b29a      	uxth	r2, r3
 800165a:	4b83      	ldr	r3, [pc, #524]	@ (8001868 <main+0x31c>)
 800165c:	845a      	strh	r2, [r3, #34]	@ 0x22
	//registerFrame[0x11].U16 = b_check[0];
	registerFrame[0x12].U16 = fabs(linearspeed[NEW]*10); //ZSpeed
 800165e:	4b86      	ldr	r3, [pc, #536]	@ (8001878 <main+0x32c>)
 8001660:	edd3 7a00 	vldr	s15, [r3]
 8001664:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001668:	ee67 7a87 	vmul.f32	s15, s15, s14
 800166c:	eef0 7ae7 	vabs.f32	s15, s15
 8001670:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001674:	ee17 3a90 	vmov	r3, s15
 8001678:	b29a      	uxth	r2, r3
 800167a:	4b7b      	ldr	r3, [pc, #492]	@ (8001868 <main+0x31c>)
 800167c:	849a      	strh	r2, [r3, #36]	@ 0x24
	registerFrame[0x13].U16 = fabs(linearacc); //ZAccel
 800167e:	4b7f      	ldr	r3, [pc, #508]	@ (800187c <main+0x330>)
 8001680:	edd3 7a00 	vldr	s15, [r3]
 8001684:	eef0 7ae7 	vabs.f32	s15, s15
 8001688:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800168c:	ee17 3a90 	vmov	r3, s15
 8001690:	b29a      	uxth	r2, r3
 8001692:	4b75      	ldr	r3, [pc, #468]	@ (8001868 <main+0x31c>)
 8001694:	84da      	strh	r2, [r3, #38]	@ 0x26
	registerFrame[0x40].U16 = Z[3]/10; //XPos
 8001696:	4b7a      	ldr	r3, [pc, #488]	@ (8001880 <main+0x334>)
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	4a7a      	ldr	r2, [pc, #488]	@ (8001884 <main+0x338>)
 800169c:	fb82 1203 	smull	r1, r2, r2, r3
 80016a0:	1092      	asrs	r2, r2, #2
 80016a2:	17db      	asrs	r3, r3, #31
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	b29a      	uxth	r2, r3
 80016a8:	4b6f      	ldr	r3, [pc, #444]	@ (8001868 <main+0x31c>)
 80016aa:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
	BaseVacuum = registerFrame[2].U16; // 0 = off , 1 = on
 80016ae:	4b6e      	ldr	r3, [pc, #440]	@ (8001868 <main+0x31c>)
 80016b0:	889b      	ldrh	r3, [r3, #4]
 80016b2:	b2da      	uxtb	r2, r3
 80016b4:	4b74      	ldr	r3, [pc, #464]	@ (8001888 <main+0x33c>)
 80016b6:	701a      	strb	r2, [r3, #0]
	BaseGripper = registerFrame[3].U16; // 0 = Backward , 1 = Forward
 80016b8:	4b6b      	ldr	r3, [pc, #428]	@ (8001868 <main+0x31c>)
 80016ba:	88db      	ldrh	r3, [r3, #6]
 80016bc:	b2da      	uxtb	r2, r3
 80016be:	4b73      	ldr	r3, [pc, #460]	@ (800188c <main+0x340>)
 80016c0:	701a      	strb	r2, [r3, #0]

	//re counter
	if (LimitBottomFlag == 1) {
 80016c2:	4b73      	ldr	r3, [pc, #460]	@ (8001890 <main+0x344>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b01      	cmp	r3, #1
 80016c8:	d11f      	bne.n	800170a <main+0x1be>
		memset(&QEIdata, 0, sizeof(QEIdata));
 80016ca:	2230      	movs	r2, #48	@ 0x30
 80016cc:	2100      	movs	r1, #0
 80016ce:	4869      	ldr	r0, [pc, #420]	@ (8001874 <main+0x328>)
 80016d0:	f008 fb66 	bl	8009da0 <memset>

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 500);
 80016d4:	4b58      	ldr	r3, [pc, #352]	@ (8001838 <main+0x2ec>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80016dc:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 80016de:	2200      	movs	r2, #0
 80016e0:	2108      	movs	r1, #8
 80016e2:	486c      	ldr	r0, [pc, #432]	@ (8001894 <main+0x348>)
 80016e4:	f003 fafa 	bl	8004cdc <HAL_GPIO_WritePin>
		HAL_Delay(200);
 80016e8:	20c8      	movs	r0, #200	@ 0xc8
 80016ea:	f002 fcf9 	bl	80040e0 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80016ee:	4b52      	ldr	r3, [pc, #328]	@ (8001838 <main+0x2ec>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2200      	movs	r2, #0
 80016f4:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_SET_COUNTER(&htim3,0);
 80016f6:	4b51      	ldr	r3, [pc, #324]	@ (800183c <main+0x2f0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2200      	movs	r2, #0
 80016fc:	625a      	str	r2, [r3, #36]	@ 0x24
		registerFrame[0x10].U16 = 0;
 80016fe:	4b5a      	ldr	r3, [pc, #360]	@ (8001868 <main+0x31c>)
 8001700:	2200      	movs	r2, #0
 8001702:	841a      	strh	r2, [r3, #32]
		LimitBottomFlag = 0;
 8001704:	4b62      	ldr	r3, [pc, #392]	@ (8001890 <main+0x344>)
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]
	}

	if(Lo4 == 0  && flagEmer==0){
 800170a:	4b63      	ldr	r3, [pc, #396]	@ (8001898 <main+0x34c>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d113      	bne.n	800173a <main+0x1ee>
 8001712:	4b62      	ldr	r3, [pc, #392]	@ (800189c <main+0x350>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d10f      	bne.n	800173a <main+0x1ee>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800171a:	4b47      	ldr	r3, [pc, #284]	@ (8001838 <main+0x2ec>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2200      	movs	r2, #0
 8001720:	635a      	str	r2, [r3, #52]	@ 0x34
		relay[0] = 0; //Gripper pull
 8001722:	4b44      	ldr	r3, [pc, #272]	@ (8001834 <main+0x2e8>)
 8001724:	2200      	movs	r2, #0
 8001726:	701a      	strb	r2, [r3, #0]
		relay[1] = 0;
 8001728:	4b42      	ldr	r3, [pc, #264]	@ (8001834 <main+0x2e8>)
 800172a:	2200      	movs	r2, #0
 800172c:	705a      	strb	r2, [r3, #1]
		relay[2] = 0;
 800172e:	4b41      	ldr	r3, [pc, #260]	@ (8001834 <main+0x2e8>)
 8001730:	2200      	movs	r2, #0
 8001732:	709a      	strb	r2, [r3, #2]
		flagEmer = 1;
 8001734:	4b59      	ldr	r3, [pc, #356]	@ (800189c <main+0x350>)
 8001736:	2201      	movs	r2, #1
 8001738:	701a      	strb	r2, [r3, #0]
	}
	if((Lo4 == 1) && (flagEmer == 1)){
 800173a:	4b57      	ldr	r3, [pc, #348]	@ (8001898 <main+0x34c>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b01      	cmp	r3, #1
 8001740:	d10a      	bne.n	8001758 <main+0x20c>
 8001742:	4b56      	ldr	r3, [pc, #344]	@ (800189c <main+0x350>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b01      	cmp	r3, #1
 8001748:	d106      	bne.n	8001758 <main+0x20c>
		MotorDriveFlag = 1;
 800174a:	4b55      	ldr	r3, [pc, #340]	@ (80018a0 <main+0x354>)
 800174c:	2201      	movs	r2, #1
 800174e:	701a      	strb	r2, [r3, #0]
		flagEmer = 0;
 8001750:	4b52      	ldr	r3, [pc, #328]	@ (800189c <main+0x350>)
 8001752:	2200      	movs	r2, #0
 8001754:	701a      	strb	r2, [r3, #0]
 8001756:	e011      	b.n	800177c <main+0x230>
	}else if((flagEmer == 1)&&(bt5 == 0)){
 8001758:	4b50      	ldr	r3, [pc, #320]	@ (800189c <main+0x350>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d10d      	bne.n	800177c <main+0x230>
 8001760:	4b50      	ldr	r3, [pc, #320]	@ (80018a4 <main+0x358>)
 8001762:	781b      	ldrb	r3, [r3, #0]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d109      	bne.n	800177c <main+0x230>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001768:	4b33      	ldr	r3, [pc, #204]	@ (8001838 <main+0x2ec>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2200      	movs	r2, #0
 800176e:	635a      	str	r2, [r3, #52]	@ 0x34
		registerFrame[0x10].U16 = 0;
 8001770:	4b3d      	ldr	r3, [pc, #244]	@ (8001868 <main+0x31c>)
 8001772:	2200      	movs	r2, #0
 8001774:	841a      	strh	r2, [r3, #32]
		flagEmer = 2;
 8001776:	4b49      	ldr	r3, [pc, #292]	@ (800189c <main+0x350>)
 8001778:	2202      	movs	r2, #2
 800177a:	701a      	strb	r2, [r3, #0]
	}


	static uint64_t timestamp = 0;
	int64_t currentTime = Micros();
 800177c:	f001 f86e 	bl	800285c <Micros>
 8001780:	4602      	mov	r2, r0
 8001782:	460b      	mov	r3, r1
 8001784:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if (currentTime > timestamp) {
 8001788:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800178c:	4946      	ldr	r1, [pc, #280]	@ (80018a8 <main+0x35c>)
 800178e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001792:	4290      	cmp	r0, r2
 8001794:	eb71 0303 	sbcs.w	r3, r1, r3
 8001798:	d212      	bcs.n	80017c0 <main+0x274>
		timestamp = currentTime + timerange;	 //us
 800179a:	4b2e      	ldr	r3, [pc, #184]	@ (8001854 <main+0x308>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	b29b      	uxth	r3, r3
 80017a0:	2200      	movs	r2, #0
 80017a2:	461c      	mov	r4, r3
 80017a4:	4615      	mov	r5, r2
 80017a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017aa:	eb14 0a02 	adds.w	sl, r4, r2
 80017ae:	eb45 0b03 	adc.w	fp, r5, r3
 80017b2:	4652      	mov	r2, sl
 80017b4:	465b      	mov	r3, fp
 80017b6:	493c      	ldr	r1, [pc, #240]	@ (80018a8 <main+0x35c>)
 80017b8:	e9c1 2300 	strd	r2, r3, [r1]
		QEIEncoderPosVel_Update();
 80017bc:	f001 f880 	bl	80028c0 <QEIEncoderPosVel_Update>
	}

	RelayDrive();
 80017c0:	f001 ffc2 	bl	8003748 <RelayDrive>
	ReadButton();
 80017c4:	f001 f9d6 	bl	8002b74 <ReadButton>
	ReadLogicConv();
 80017c8:	f001 f98a 	bl	8002ae0 <ReadLogicConv>
	ReadLimit();
 80017cc:	f001 ffe4 	bl	8003798 <ReadLimit>
	if (mode == 0){
 80017d0:	4b36      	ldr	r3, [pc, #216]	@ (80018ac <main+0x360>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d101      	bne.n	80017dc <main+0x290>
		MotorDrive();
 80017d8:	f001 fa0e 	bl	8002bf8 <MotorDrive>
	}


	if (LimitBottom == 0) {
 80017dc:	4b34      	ldr	r3, [pc, #208]	@ (80018b0 <main+0x364>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d102      	bne.n	80017ea <main+0x29e>
		LimitBottomFlag = 1;
 80017e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001890 <main+0x344>)
 80017e6:	2201      	movs	r2, #1
 80017e8:	701a      	strb	r2, [r3, #0]
	}

	if (LimitTop == 0) {
 80017ea:	4b32      	ldr	r3, [pc, #200]	@ (80018b4 <main+0x368>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d106      	bne.n	8001800 <main+0x2b4>
		mode = 1;
 80017f2:	4b2e      	ldr	r3, [pc, #184]	@ (80018ac <main+0x360>)
 80017f4:	2201      	movs	r2, #1
 80017f6:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80017f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001838 <main+0x2ec>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2200      	movs	r2, #0
 80017fe:	635a      	str	r2, [r3, #52]	@ 0x34
	}

	if (Lo3 == 1 && mode !=0) { //joy manual
 8001800:	4b2d      	ldr	r3, [pc, #180]	@ (80018b8 <main+0x36c>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b01      	cmp	r3, #1
 8001806:	f040 8088 	bne.w	800191a <main+0x3ce>
 800180a:	4b28      	ldr	r3, [pc, #160]	@ (80018ac <main+0x360>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	f000 8083 	beq.w	800191a <main+0x3ce>
			if (bt3 == 0) {
 8001814:	4b29      	ldr	r3, [pc, #164]	@ (80018bc <main+0x370>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d153      	bne.n	80018c4 <main+0x378>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 800181c:	2201      	movs	r2, #1
 800181e:	2108      	movs	r1, #8
 8001820:	481c      	ldr	r0, [pc, #112]	@ (8001894 <main+0x348>)
 8001822:	f003 fa5b 	bl	8004cdc <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);
 8001826:	4b26      	ldr	r3, [pc, #152]	@ (80018c0 <main+0x374>)
 8001828:	881a      	ldrh	r2, [r3, #0]
 800182a:	4b03      	ldr	r3, [pc, #12]	@ (8001838 <main+0x2ec>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	635a      	str	r2, [r3, #52]	@ 0x34
 8001830:	e06f      	b.n	8001912 <main+0x3c6>
 8001832:	bf00      	nop
 8001834:	200008ac 	.word	0x200008ac
 8001838:	20000240 	.word	0x20000240
 800183c:	200003d8 	.word	0x200003d8
 8001840:	200004a4 	.word	0x200004a4
 8001844:	20000898 	.word	0x20000898
 8001848:	20000208 	.word	0x20000208
 800184c:	2000020c 	.word	0x2000020c
 8001850:	20000210 	.word	0x20000210
 8001854:	20000200 	.word	0x20000200
 8001858:	20000908 	.word	0x20000908
 800185c:	20000920 	.word	0x20000920
 8001860:	20000708 	.word	0x20000708
 8001864:	2000063c 	.word	0x2000063c
 8001868:	20000df8 	.word	0x20000df8
 800186c:	20000570 	.word	0x20000570
 8001870:	20001022 	.word	0x20001022
 8001874:	200008c0 	.word	0x200008c0
 8001878:	200008a0 	.word	0x200008a0
 800187c:	200008a8 	.word	0x200008a8
 8001880:	20000f9c 	.word	0x20000f9c
 8001884:	66666667 	.word	0x66666667
 8001888:	20000fac 	.word	0x20000fac
 800188c:	20000fad 	.word	0x20000fad
 8001890:	2000101c 	.word	0x2000101c
 8001894:	48000800 	.word	0x48000800
 8001898:	20000204 	.word	0x20000204
 800189c:	20001021 	.word	0x20001021
 80018a0:	20001008 	.word	0x20001008
 80018a4:	200008f7 	.word	0x200008f7
 80018a8:	20001028 	.word	0x20001028
 80018ac:	20000205 	.word	0x20000205
 80018b0:	200008fa 	.word	0x200008fa
 80018b4:	200008f9 	.word	0x200008f9
 80018b8:	200008f2 	.word	0x200008f2
 80018bc:	200008f5 	.word	0x200008f5
 80018c0:	20000202 	.word	0x20000202
			} else if (bt2 == 0) {
 80018c4:	4b75      	ldr	r3, [pc, #468]	@ (8001a9c <main+0x550>)
 80018c6:	781b      	ldrb	r3, [r3, #0]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d10a      	bne.n	80018e2 <main+0x396>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 80018cc:	2200      	movs	r2, #0
 80018ce:	2108      	movs	r1, #8
 80018d0:	4873      	ldr	r0, [pc, #460]	@ (8001aa0 <main+0x554>)
 80018d2:	f003 fa03 	bl	8004cdc <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);
 80018d6:	4b73      	ldr	r3, [pc, #460]	@ (8001aa4 <main+0x558>)
 80018d8:	881a      	ldrh	r2, [r3, #0]
 80018da:	4b73      	ldr	r3, [pc, #460]	@ (8001aa8 <main+0x55c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	635a      	str	r2, [r3, #52]	@ 0x34
 80018e0:	e017      	b.n	8001912 <main+0x3c6>
			} else if (bt1 == 0){
 80018e2:	4b72      	ldr	r3, [pc, #456]	@ (8001aac <main+0x560>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d105      	bne.n	80018f6 <main+0x3aa>
				Z[3] = Z[3] + 1 ;
 80018ea:	4b71      	ldr	r3, [pc, #452]	@ (8001ab0 <main+0x564>)
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	3301      	adds	r3, #1
 80018f0:	4a6f      	ldr	r2, [pc, #444]	@ (8001ab0 <main+0x564>)
 80018f2:	60d3      	str	r3, [r2, #12]
 80018f4:	e00d      	b.n	8001912 <main+0x3c6>
			}else if(bt4 == 0){
 80018f6:	4b6f      	ldr	r3, [pc, #444]	@ (8001ab4 <main+0x568>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d105      	bne.n	800190a <main+0x3be>
				Z[3] = Z[3] - 1 ;
 80018fe:	4b6c      	ldr	r3, [pc, #432]	@ (8001ab0 <main+0x564>)
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	3b01      	subs	r3, #1
 8001904:	4a6a      	ldr	r2, [pc, #424]	@ (8001ab0 <main+0x564>)
 8001906:	60d3      	str	r3, [r2, #12]
 8001908:	e003      	b.n	8001912 <main+0x3c6>
			}else {
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800190a:	4b67      	ldr	r3, [pc, #412]	@ (8001aa8 <main+0x55c>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	2200      	movs	r2, #0
 8001910:	635a      	str	r2, [r3, #52]	@ 0x34
			}

			relay[3] = 0;
 8001912:	4b69      	ldr	r3, [pc, #420]	@ (8001ab8 <main+0x56c>)
 8001914:	2200      	movs	r2, #0
 8001916:	70da      	strb	r2, [r3, #3]
 8001918:	e209      	b.n	8001d2e <main+0x7e2>
		} else if (Lo3 == 0 && mode!=0) {
 800191a:	4b68      	ldr	r3, [pc, #416]	@ (8001abc <main+0x570>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b00      	cmp	r3, #0
 8001920:	f47f ae7d 	bne.w	800161e <main+0xd2>
 8001924:	4b66      	ldr	r3, [pc, #408]	@ (8001ac0 <main+0x574>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	f43f ae78 	beq.w	800161e <main+0xd2>
			relay[3] = 1;
 800192e:	4b62      	ldr	r3, [pc, #392]	@ (8001ab8 <main+0x56c>)
 8001930:	2201      	movs	r2, #1
 8001932:	70da      	strb	r2, [r3, #3]
			 if (bt1 == 0){
 8001934:	4b5d      	ldr	r3, [pc, #372]	@ (8001aac <main+0x560>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d105      	bne.n	8001948 <main+0x3fc>
				 Z[3] = Z[3] + 1 ;
 800193c:	4b5c      	ldr	r3, [pc, #368]	@ (8001ab0 <main+0x564>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	3301      	adds	r3, #1
 8001942:	4a5b      	ldr	r2, [pc, #364]	@ (8001ab0 <main+0x564>)
 8001944:	60d3      	str	r3, [r2, #12]
 8001946:	e008      	b.n	800195a <main+0x40e>
			}else if(bt4 == 0){
 8001948:	4b5a      	ldr	r3, [pc, #360]	@ (8001ab4 <main+0x568>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d104      	bne.n	800195a <main+0x40e>
				Z[3] = Z[3] - 1 ;
 8001950:	4b57      	ldr	r3, [pc, #348]	@ (8001ab0 <main+0x564>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	3b01      	subs	r3, #1
 8001956:	4a56      	ldr	r2, [pc, #344]	@ (8001ab0 <main+0x564>)
 8001958:	60d3      	str	r3, [r2, #12]
			}
			if(registerFrame[0x10].U16 == 0){
 800195a:	4b5a      	ldr	r3, [pc, #360]	@ (8001ac4 <main+0x578>)
 800195c:	8c1b      	ldrh	r3, [r3, #32]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d123      	bne.n	80019aa <main+0x45e>

				if(BaseGripper==1){
 8001962:	4b59      	ldr	r3, [pc, #356]	@ (8001ac8 <main+0x57c>)
 8001964:	781b      	ldrb	r3, [r3, #0]
 8001966:	2b01      	cmp	r3, #1
 8001968:	d106      	bne.n	8001978 <main+0x42c>
					relay[0] = 0; //Gripper push
 800196a:	4b53      	ldr	r3, [pc, #332]	@ (8001ab8 <main+0x56c>)
 800196c:	2200      	movs	r2, #0
 800196e:	701a      	strb	r2, [r3, #0]
					relay[1] = 1;
 8001970:	4b51      	ldr	r3, [pc, #324]	@ (8001ab8 <main+0x56c>)
 8001972:	2201      	movs	r2, #1
 8001974:	705a      	strb	r2, [r3, #1]
 8001976:	e009      	b.n	800198c <main+0x440>
				}else if(BaseGripper == 0){
 8001978:	4b53      	ldr	r3, [pc, #332]	@ (8001ac8 <main+0x57c>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d105      	bne.n	800198c <main+0x440>
					relay[0] = 1; //Gripper push
 8001980:	4b4d      	ldr	r3, [pc, #308]	@ (8001ab8 <main+0x56c>)
 8001982:	2201      	movs	r2, #1
 8001984:	701a      	strb	r2, [r3, #0]
					relay[1] = 0;
 8001986:	4b4c      	ldr	r3, [pc, #304]	@ (8001ab8 <main+0x56c>)
 8001988:	2200      	movs	r2, #0
 800198a:	705a      	strb	r2, [r3, #1]
				}
				if(BaseVacuum==1){
 800198c:	4b4f      	ldr	r3, [pc, #316]	@ (8001acc <main+0x580>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d103      	bne.n	800199c <main+0x450>
					relay[2] = 1;
 8001994:	4b48      	ldr	r3, [pc, #288]	@ (8001ab8 <main+0x56c>)
 8001996:	2201      	movs	r2, #1
 8001998:	709a      	strb	r2, [r3, #2]
 800199a:	e006      	b.n	80019aa <main+0x45e>
				}else if(BaseVacuum == 0){
 800199c:	4b4b      	ldr	r3, [pc, #300]	@ (8001acc <main+0x580>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d102      	bne.n	80019aa <main+0x45e>
					relay[2] = 0;
 80019a4:	4b44      	ldr	r3, [pc, #272]	@ (8001ab8 <main+0x56c>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	709a      	strb	r2, [r3, #2]
				}
			}


			//Set Home
			if(registerFrame[0x01].U16 == 2){
 80019aa:	4b46      	ldr	r3, [pc, #280]	@ (8001ac4 <main+0x578>)
 80019ac:	885b      	ldrh	r3, [r3, #2]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d105      	bne.n	80019be <main+0x472>
				registerFrame[0x10].U16 = 2;
 80019b2:	4b44      	ldr	r3, [pc, #272]	@ (8001ac4 <main+0x578>)
 80019b4:	2202      	movs	r2, #2
 80019b6:	841a      	strh	r2, [r3, #32]
				registerFrame[0x01].U16 = 0;
 80019b8:	4b42      	ldr	r3, [pc, #264]	@ (8001ac4 <main+0x578>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	805a      	strh	r2, [r3, #2]
			}
			//Set Shelves
			if (registerFrame[0x01].U16 == 1){
 80019be:	4b41      	ldr	r3, [pc, #260]	@ (8001ac4 <main+0x578>)
 80019c0:	885b      	ldrh	r3, [r3, #2]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d105      	bne.n	80019d2 <main+0x486>
				registerFrame[0x01].U16 = 0;
 80019c6:	4b3f      	ldr	r3, [pc, #252]	@ (8001ac4 <main+0x578>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	805a      	strh	r2, [r3, #2]
				registerFrame[0x10].U16 = 1;
 80019cc:	4b3d      	ldr	r3, [pc, #244]	@ (8001ac4 <main+0x578>)
 80019ce:	2201      	movs	r2, #1
 80019d0:	841a      	strh	r2, [r3, #32]
			}


			//Set Shelves
			if(registerFrame[0x10].U16 == 1){
 80019d2:	4b3c      	ldr	r3, [pc, #240]	@ (8001ac4 <main+0x578>)
 80019d4:	8c1b      	ldrh	r3, [r3, #32]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	f040 80e6 	bne.w	8001ba8 <main+0x65c>

				if ((bt2 == 0) && (bt1 == 1)) {
 80019dc:	4b2f      	ldr	r3, [pc, #188]	@ (8001a9c <main+0x550>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d10e      	bne.n	8001a02 <main+0x4b6>
 80019e4:	4b31      	ldr	r3, [pc, #196]	@ (8001aac <main+0x560>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d10a      	bne.n	8001a02 <main+0x4b6>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0); //Go Up
 80019ec:	2200      	movs	r2, #0
 80019ee:	2108      	movs	r1, #8
 80019f0:	482b      	ldr	r0, [pc, #172]	@ (8001aa0 <main+0x554>)
 80019f2:	f003 f973 	bl	8004cdc <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 700);
 80019f6:	4b2c      	ldr	r3, [pc, #176]	@ (8001aa8 <main+0x55c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f44f 722f 	mov.w	r2, #700	@ 0x2bc
 80019fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a00:	e016      	b.n	8001a30 <main+0x4e4>
				} else if((bt2 == 1) && (bt1 == 0)){
 8001a02:	4b26      	ldr	r3, [pc, #152]	@ (8001a9c <main+0x550>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d10e      	bne.n	8001a28 <main+0x4dc>
 8001a0a:	4b28      	ldr	r3, [pc, #160]	@ (8001aac <main+0x560>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10a      	bne.n	8001a28 <main+0x4dc>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1); //Go Down
 8001a12:	2201      	movs	r2, #1
 8001a14:	2108      	movs	r1, #8
 8001a16:	4822      	ldr	r0, [pc, #136]	@ (8001aa0 <main+0x554>)
 8001a18:	f003 f960 	bl	8004cdc <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 500);
 8001a1c:	4b22      	ldr	r3, [pc, #136]	@ (8001aa8 <main+0x55c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001a24:	635a      	str	r2, [r3, #52]	@ 0x34
 8001a26:	e003      	b.n	8001a30 <main+0x4e4>
				} else{
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001a28:	4b1f      	ldr	r3, [pc, #124]	@ (8001aa8 <main+0x55c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	635a      	str	r2, [r3, #52]	@ 0x34
				}

				// Handle bt5 press, to ensure that this function only trigger once.
				static uint8_t flagbt5 = 0;
				if(bt5 == 0) {
 8001a30:	4b27      	ldr	r3, [pc, #156]	@ (8001ad0 <main+0x584>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d157      	bne.n	8001ae8 <main+0x59c>
					static uint64_t timestampbt5 = 0;
					if(HAL_GetTick() > timestampbt5 && flagbt5 == 0) {
 8001a38:	f002 fb46 	bl	80040c8 <HAL_GetTick>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2200      	movs	r2, #0
 8001a40:	4698      	mov	r8, r3
 8001a42:	4691      	mov	r9, r2
 8001a44:	4b23      	ldr	r3, [pc, #140]	@ (8001ad4 <main+0x588>)
 8001a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a4a:	4542      	cmp	r2, r8
 8001a4c:	eb73 0309 	sbcs.w	r3, r3, r9
 8001a50:	d24d      	bcs.n	8001aee <main+0x5a2>
 8001a52:	4b21      	ldr	r3, [pc, #132]	@ (8001ad8 <main+0x58c>)
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d149      	bne.n	8001aee <main+0x5a2>
						timestampbt5 = HAL_GetTick() + 1000;
 8001a5a:	f002 fb35 	bl	80040c8 <HAL_GetTick>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001a64:	2200      	movs	r2, #0
 8001a66:	603b      	str	r3, [r7, #0]
 8001a68:	607a      	str	r2, [r7, #4]
 8001a6a:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad4 <main+0x588>)
 8001a6c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8001a70:	e9c3 1200 	strd	r1, r2, [r3]
						ShelvePos[i] = QEIdata.TotalPos;
 8001a74:	4b19      	ldr	r3, [pc, #100]	@ (8001adc <main+0x590>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	4618      	mov	r0, r3
 8001a7a:	4b19      	ldr	r3, [pc, #100]	@ (8001ae0 <main+0x594>)
 8001a7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a7e:	4919      	ldr	r1, [pc, #100]	@ (8001ae4 <main+0x598>)
 8001a80:	0083      	lsls	r3, r0, #2
 8001a82:	440b      	add	r3, r1
 8001a84:	601a      	str	r2, [r3, #0]
						i+=1;
 8001a86:	4b15      	ldr	r3, [pc, #84]	@ (8001adc <main+0x590>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	b2da      	uxtb	r2, r3
 8001a8e:	4b13      	ldr	r3, [pc, #76]	@ (8001adc <main+0x590>)
 8001a90:	701a      	strb	r2, [r3, #0]
						flagbt5 = 1;
 8001a92:	4b11      	ldr	r3, [pc, #68]	@ (8001ad8 <main+0x58c>)
 8001a94:	2201      	movs	r2, #1
 8001a96:	701a      	strb	r2, [r3, #0]
 8001a98:	e029      	b.n	8001aee <main+0x5a2>
 8001a9a:	bf00      	nop
 8001a9c:	200008f4 	.word	0x200008f4
 8001aa0:	48000800 	.word	0x48000800
 8001aa4:	20000202 	.word	0x20000202
 8001aa8:	20000240 	.word	0x20000240
 8001aac:	200008f3 	.word	0x200008f3
 8001ab0:	20000f9c 	.word	0x20000f9c
 8001ab4:	200008f6 	.word	0x200008f6
 8001ab8:	200008ac 	.word	0x200008ac
 8001abc:	200008f2 	.word	0x200008f2
 8001ac0:	20000205 	.word	0x20000205
 8001ac4:	20000df8 	.word	0x20000df8
 8001ac8:	20000fad 	.word	0x20000fad
 8001acc:	20000fac 	.word	0x20000fac
 8001ad0:	200008f7 	.word	0x200008f7
 8001ad4:	20001030 	.word	0x20001030
 8001ad8:	20001038 	.word	0x20001038
 8001adc:	20000fdd 	.word	0x20000fdd
 8001ae0:	200008c0 	.word	0x200008c0
 8001ae4:	20000f88 	.word	0x20000f88
					}
				} else {
					flagbt5 = 0;
 8001ae8:	4b91      	ldr	r3, [pc, #580]	@ (8001d30 <main+0x7e4>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	701a      	strb	r2, [r3, #0]
				}

				// Set registerFrame 0x10 to 0 (idle) if finish running
				if(i > 4){
 8001aee:	4b91      	ldr	r3, [pc, #580]	@ (8001d34 <main+0x7e8>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	d909      	bls.n	8001b0a <main+0x5be>
					i = 0;
 8001af6:	4b8f      	ldr	r3, [pc, #572]	@ (8001d34 <main+0x7e8>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001afc:	4b8e      	ldr	r3, [pc, #568]	@ (8001d38 <main+0x7ec>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	2200      	movs	r2, #0
 8001b02:	635a      	str	r2, [r3, #52]	@ 0x34
					registerFrame[0x10].U16 = 0;
 8001b04:	4b8d      	ldr	r3, [pc, #564]	@ (8001d3c <main+0x7f0>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	841a      	strh	r2, [r3, #32]
				}


				bt5prev = bt5;
 8001b0a:	4b8d      	ldr	r3, [pc, #564]	@ (8001d40 <main+0x7f4>)
 8001b0c:	781a      	ldrb	r2, [r3, #0]
 8001b0e:	4b8d      	ldr	r3, [pc, #564]	@ (8001d44 <main+0x7f8>)
 8001b10:	701a      	strb	r2, [r3, #0]
				registerFrame[0x23].U16 = ShelvePos[0]*10;
 8001b12:	4b8d      	ldr	r3, [pc, #564]	@ (8001d48 <main+0x7fc>)
 8001b14:	edd3 7a00 	vldr	s15, [r3]
 8001b18:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001b1c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b24:	ee17 3a90 	vmov	r3, s15
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	4b84      	ldr	r3, [pc, #528]	@ (8001d3c <main+0x7f0>)
 8001b2c:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
				registerFrame[0x24].U16 = ShelvePos[1]*10;
 8001b30:	4b85      	ldr	r3, [pc, #532]	@ (8001d48 <main+0x7fc>)
 8001b32:	edd3 7a01 	vldr	s15, [r3, #4]
 8001b36:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001b3a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b42:	ee17 3a90 	vmov	r3, s15
 8001b46:	b29a      	uxth	r2, r3
 8001b48:	4b7c      	ldr	r3, [pc, #496]	@ (8001d3c <main+0x7f0>)
 8001b4a:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
				registerFrame[0x25].U16 = ShelvePos[2]*10;
 8001b4e:	4b7e      	ldr	r3, [pc, #504]	@ (8001d48 <main+0x7fc>)
 8001b50:	edd3 7a02 	vldr	s15, [r3, #8]
 8001b54:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001b58:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b60:	ee17 3a90 	vmov	r3, s15
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	4b75      	ldr	r3, [pc, #468]	@ (8001d3c <main+0x7f0>)
 8001b68:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
				registerFrame[0x26].U16 = ShelvePos[3]*10;
 8001b6c:	4b76      	ldr	r3, [pc, #472]	@ (8001d48 <main+0x7fc>)
 8001b6e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001b72:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001b76:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b7e:	ee17 3a90 	vmov	r3, s15
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	4b6d      	ldr	r3, [pc, #436]	@ (8001d3c <main+0x7f0>)
 8001b86:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
				registerFrame[0x27].U16 = ShelvePos[4]*10;
 8001b8a:	4b6f      	ldr	r3, [pc, #444]	@ (8001d48 <main+0x7fc>)
 8001b8c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001b90:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001b94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b9c:	ee17 3a90 	vmov	r3, s15
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	4b66      	ldr	r3, [pc, #408]	@ (8001d3c <main+0x7f0>)
 8001ba4:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
				//timestamp = HAL_GetTick()+2000;
			}


			//Set Home Run To limit switch
			if(registerFrame[0x10].U16 == 2){
 8001ba8:	4b64      	ldr	r3, [pc, #400]	@ (8001d3c <main+0x7f0>)
 8001baa:	8c1b      	ldrh	r3, [r3, #32]
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d109      	bne.n	8001bc4 <main+0x678>

				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 800);
 8001bb0:	4b61      	ldr	r3, [pc, #388]	@ (8001d38 <main+0x7ec>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001bb8:	635a      	str	r2, [r3, #52]	@ 0x34
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1); //End effector Go Down
 8001bba:	2201      	movs	r2, #1
 8001bbc:	2108      	movs	r1, #8
 8001bbe:	4863      	ldr	r0, [pc, #396]	@ (8001d4c <main+0x800>)
 8001bc0:	f003 f88c 	bl	8004cdc <HAL_GPIO_WritePin>

			}

			//Run Point Mode
				if(registerFrame[0x01].U16 == 8) {
 8001bc4:	4b5d      	ldr	r3, [pc, #372]	@ (8001d3c <main+0x7f0>)
 8001bc6:	885b      	ldrh	r3, [r3, #2]
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d11a      	bne.n	8001c02 <main+0x6b6>
					registerFrame[0x01].U16 = 0;
 8001bcc:	4b5b      	ldr	r3, [pc, #364]	@ (8001d3c <main+0x7f0>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	805a      	strh	r2, [r3, #2]
					registerFrame[0x10].U16 = 16;
 8001bd2:	4b5a      	ldr	r3, [pc, #360]	@ (8001d3c <main+0x7f0>)
 8001bd4:	2210      	movs	r2, #16
 8001bd6:	841a      	strh	r2, [r3, #32]
					Arrived = 0;
 8001bd8:	4b5d      	ldr	r3, [pc, #372]	@ (8001d50 <main+0x804>)
 8001bda:	2200      	movs	r2, #0
 8001bdc:	701a      	strb	r2, [r3, #0]
					MotorDriveFlag = 0;
 8001bde:	4b5d      	ldr	r3, [pc, #372]	@ (8001d54 <main+0x808>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]
					Goal = registerFrame[48].U16/10;
 8001be4:	4b55      	ldr	r3, [pc, #340]	@ (8001d3c <main+0x7f0>)
 8001be6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8001bea:	4a5b      	ldr	r2, [pc, #364]	@ (8001d58 <main+0x80c>)
 8001bec:	fba2 2303 	umull	r2, r3, r2, r3
 8001bf0:	08db      	lsrs	r3, r3, #3
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	ee07 3a90 	vmov	s15, r3
 8001bf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bfc:	4b57      	ldr	r3, [pc, #348]	@ (8001d5c <main+0x810>)
 8001bfe:	edc3 7a00 	vstr	s15, [r3]

				}

				if(registerFrame[0x10].U16 == 16){
 8001c02:	4b4e      	ldr	r3, [pc, #312]	@ (8001d3c <main+0x7f0>)
 8001c04:	8c1b      	ldrh	r3, [r3, #32]
 8001c06:	2b10      	cmp	r3, #16
 8001c08:	d101      	bne.n	8001c0e <main+0x6c2>
					MotorDrivePoint();
 8001c0a:	f001 fa99 	bl	8003140 <MotorDrivePoint>
				}
				if(Arrived == 1 && registerFrame[0x10].U16 == 16) {
 8001c0e:	4b50      	ldr	r3, [pc, #320]	@ (8001d50 <main+0x804>)
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d109      	bne.n	8001c2a <main+0x6de>
 8001c16:	4b49      	ldr	r3, [pc, #292]	@ (8001d3c <main+0x7f0>)
 8001c18:	8c1b      	ldrh	r3, [r3, #32]
 8001c1a:	2b10      	cmp	r3, #16
 8001c1c:	d105      	bne.n	8001c2a <main+0x6de>
					registerFrame[0x10].U16 = 0;
 8001c1e:	4b47      	ldr	r3, [pc, #284]	@ (8001d3c <main+0x7f0>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	841a      	strh	r2, [r3, #32]
					MotorDriveFlag = 0;
 8001c24:	4b4b      	ldr	r3, [pc, #300]	@ (8001d54 <main+0x808>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]
				}

			//Run Jog Mode
			if(registerFrame[0x01].U16 == 4){
 8001c2a:	4b44      	ldr	r3, [pc, #272]	@ (8001d3c <main+0x7f0>)
 8001c2c:	885b      	ldrh	r3, [r3, #2]
 8001c2e:	2b04      	cmp	r3, #4
 8001c30:	d146      	bne.n	8001cc0 <main+0x774>
				convert_to_string(registerFrame[0x21].U16, PickOrder, sizeof(PickOrder));
 8001c32:	4b42      	ldr	r3, [pc, #264]	@ (8001d3c <main+0x7f0>)
 8001c34:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001c38:	2206      	movs	r2, #6
 8001c3a:	4949      	ldr	r1, [pc, #292]	@ (8001d60 <main+0x814>)
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f000 fc75 	bl	800252c <convert_to_string>
				convert_to_string(registerFrame[0x22].U16, PlaceOrder, sizeof(PlaceOrder));
 8001c42:	4b3e      	ldr	r3, [pc, #248]	@ (8001d3c <main+0x7f0>)
 8001c44:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001c48:	2206      	movs	r2, #6
 8001c4a:	4946      	ldr	r1, [pc, #280]	@ (8001d64 <main+0x818>)
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f000 fc6d 	bl	800252c <convert_to_string>
				registerFrame[0x01].U16 = 0;
 8001c52:	4b3a      	ldr	r3, [pc, #232]	@ (8001d3c <main+0x7f0>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	805a      	strh	r2, [r3, #2]
				registerFrame[0x10].U16 = 4;
 8001c58:	4b38      	ldr	r3, [pc, #224]	@ (8001d3c <main+0x7f0>)
 8001c5a:	2204      	movs	r2, #4
 8001c5c:	841a      	strh	r2, [r3, #32]
				for(int i = 0;i<=4;i++){
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	e02a      	b.n	8001cba <main+0x76e>

					GoalPick[i] = ShelvePos[PickOrder[4-i]-'0'-1];
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f1c3 0304 	rsb	r3, r3, #4
 8001c6a:	4a3d      	ldr	r2, [pc, #244]	@ (8001d60 <main+0x814>)
 8001c6c:	5cd3      	ldrb	r3, [r2, r3]
 8001c6e:	3b31      	subs	r3, #49	@ 0x31
 8001c70:	4a35      	ldr	r2, [pc, #212]	@ (8001d48 <main+0x7fc>)
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	4413      	add	r3, r2
 8001c76:	edd3 7a00 	vldr	s15, [r3]
 8001c7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c7e:	ee17 3a90 	vmov	r3, s15
 8001c82:	b299      	uxth	r1, r3
 8001c84:	4a38      	ldr	r2, [pc, #224]	@ (8001d68 <main+0x81c>)
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					GoalPlace[i] = ShelvePos[PlaceOrder[4-i]-'0'-1];
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	f1c3 0304 	rsb	r3, r3, #4
 8001c92:	4a34      	ldr	r2, [pc, #208]	@ (8001d64 <main+0x818>)
 8001c94:	5cd3      	ldrb	r3, [r2, r3]
 8001c96:	3b31      	subs	r3, #49	@ 0x31
 8001c98:	4a2b      	ldr	r2, [pc, #172]	@ (8001d48 <main+0x7fc>)
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	edd3 7a00 	vldr	s15, [r3]
 8001ca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ca6:	ee17 3a90 	vmov	r3, s15
 8001caa:	b299      	uxth	r1, r3
 8001cac:	4a2f      	ldr	r2, [pc, #188]	@ (8001d6c <main+0x820>)
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(int i = 0;i<=4;i++){
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	3301      	adds	r3, #1
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	2b04      	cmp	r3, #4
 8001cbe:	ddd1      	ble.n	8001c64 <main+0x718>
//					GoalPlace[i] =(i+1)*100 +10;
				}
			}

		/////////////////START JOG////////////////////////////////////////////////////////////
			if(registerFrame[0x10].U16 == 4 && j < 5){
 8001cc0:	4b1e      	ldr	r3, [pc, #120]	@ (8001d3c <main+0x7f0>)
 8001cc2:	8c1b      	ldrh	r3, [r3, #32]
 8001cc4:	2b04      	cmp	r3, #4
 8001cc6:	d106      	bne.n	8001cd6 <main+0x78a>
 8001cc8:	4b29      	ldr	r3, [pc, #164]	@ (8001d70 <main+0x824>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2b04      	cmp	r3, #4
 8001cce:	dc02      	bgt.n	8001cd6 <main+0x78a>
				GoPick();
 8001cd0:	f000 fc62 	bl	8002598 <GoPick>
 8001cd4:	e02b      	b.n	8001d2e <main+0x7e2>
			}else if(registerFrame[0x10].U16 == 8 && j < 5){
 8001cd6:	4b19      	ldr	r3, [pc, #100]	@ (8001d3c <main+0x7f0>)
 8001cd8:	8c1b      	ldrh	r3, [r3, #32]
 8001cda:	2b08      	cmp	r3, #8
 8001cdc:	d106      	bne.n	8001cec <main+0x7a0>
 8001cde:	4b24      	ldr	r3, [pc, #144]	@ (8001d70 <main+0x824>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	2b04      	cmp	r3, #4
 8001ce4:	dc02      	bgt.n	8001cec <main+0x7a0>
				GoPlace();
 8001ce6:	f000 fcff 	bl	80026e8 <GoPlace>
 8001cea:	e020      	b.n	8001d2e <main+0x7e2>
			}else if(j==5){
 8001cec:	4b20      	ldr	r3, [pc, #128]	@ (8001d70 <main+0x824>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b05      	cmp	r3, #5
 8001cf2:	f47f ac94 	bne.w	800161e <main+0xd2>
				registerFrame[0x10].U16 = 0;
 8001cf6:	4b11      	ldr	r3, [pc, #68]	@ (8001d3c <main+0x7f0>)
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	841a      	strh	r2, [r3, #32]
				for(int i = 0;i<=4;i++){
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	e00c      	b.n	8001d1c <main+0x7d0>
					GoalPick[i] = 0;
 8001d02:	4a19      	ldr	r2, [pc, #100]	@ (8001d68 <main+0x81c>)
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	2100      	movs	r1, #0
 8001d08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					GoalPlace[i] = 0;
 8001d0c:	4a17      	ldr	r2, [pc, #92]	@ (8001d6c <main+0x820>)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	2100      	movs	r1, #0
 8001d12:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(int i = 0;i<=4;i++){
 8001d16:	693b      	ldr	r3, [r7, #16]
 8001d18:	3301      	adds	r3, #1
 8001d1a:	613b      	str	r3, [r7, #16]
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	ddef      	ble.n	8001d02 <main+0x7b6>
			}


				j = 0;
 8001d22:	4b13      	ldr	r3, [pc, #76]	@ (8001d70 <main+0x824>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]
				a = 7;
 8001d28:	4b12      	ldr	r3, [pc, #72]	@ (8001d74 <main+0x828>)
 8001d2a:	2207      	movs	r2, #7
 8001d2c:	701a      	strb	r2, [r3, #0]
  {
 8001d2e:	e476      	b.n	800161e <main+0xd2>
 8001d30:	20001038 	.word	0x20001038
 8001d34:	20000fdd 	.word	0x20000fdd
 8001d38:	20000240 	.word	0x20000240
 8001d3c:	20000df8 	.word	0x20000df8
 8001d40:	200008f7 	.word	0x200008f7
 8001d44:	200008f8 	.word	0x200008f8
 8001d48:	20000f88 	.word	0x20000f88
 8001d4c:	48000800 	.word	0x48000800
 8001d50:	20000fdc 	.word	0x20000fdc
 8001d54:	20001008 	.word	0x20001008
 8001d58:	cccccccd 	.word	0xcccccccd
 8001d5c:	20000900 	.word	0x20000900
 8001d60:	20000fb0 	.word	0x20000fb0
 8001d64:	20000fb8 	.word	0x20000fb8
 8001d68:	20000fc0 	.word	0x20000fc0
 8001d6c:	20000fcc 	.word	0x20000fcc
 8001d70:	20000fd8 	.word	0x20000fd8
 8001d74:	20000fde 	.word	0x20000fde

08001d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b094      	sub	sp, #80	@ 0x50
 8001d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d7e:	f107 0318 	add.w	r3, r7, #24
 8001d82:	2238      	movs	r2, #56	@ 0x38
 8001d84:	2100      	movs	r1, #0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f008 f80a 	bl	8009da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d8c:	1d3b      	adds	r3, r7, #4
 8001d8e:	2200      	movs	r2, #0
 8001d90:	601a      	str	r2, [r3, #0]
 8001d92:	605a      	str	r2, [r3, #4]
 8001d94:	609a      	str	r2, [r3, #8]
 8001d96:	60da      	str	r2, [r3, #12]
 8001d98:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f002 fff4 	bl	8004d88 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001da0:	2302      	movs	r3, #2
 8001da2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001da4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001da8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001daa:	2340      	movs	r3, #64	@ 0x40
 8001dac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dae:	2302      	movs	r3, #2
 8001db0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001db2:	2302      	movs	r3, #2
 8001db4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001db6:	2304      	movs	r3, #4
 8001db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001dba:	2355      	movs	r3, #85	@ 0x55
 8001dbc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dca:	f107 0318 	add.w	r3, r7, #24
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f003 f88e 	bl	8004ef0 <HAL_RCC_OscConfig>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001dda:	f001 fcf9 	bl	80037d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dde:	230f      	movs	r3, #15
 8001de0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001de2:	2303      	movs	r3, #3
 8001de4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001de6:	2300      	movs	r3, #0
 8001de8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dea:	2300      	movs	r3, #0
 8001dec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	2104      	movs	r1, #4
 8001df6:	4618      	mov	r0, r3
 8001df8:	f003 fb8c 	bl	8005514 <HAL_RCC_ClockConfig>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001e02:	f001 fce5 	bl	80037d0 <Error_Handler>
  }
}
 8001e06:	bf00      	nop
 8001e08:	3750      	adds	r7, #80	@ 0x50
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
	...

08001e10 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b098      	sub	sp, #96	@ 0x60
 8001e14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e16:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	605a      	str	r2, [r3, #4]
 8001e20:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e22:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]
 8001e30:	611a      	str	r2, [r3, #16]
 8001e32:	615a      	str	r2, [r3, #20]
 8001e34:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e36:	1d3b      	adds	r3, r7, #4
 8001e38:	2234      	movs	r2, #52	@ 0x34
 8001e3a:	2100      	movs	r1, #0
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f007 ffaf 	bl	8009da0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001e42:	4b3b      	ldr	r3, [pc, #236]	@ (8001f30 <MX_TIM1_Init+0x120>)
 8001e44:	4a3b      	ldr	r2, [pc, #236]	@ (8001f34 <MX_TIM1_Init+0x124>)
 8001e46:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8001e48:	4b39      	ldr	r3, [pc, #228]	@ (8001f30 <MX_TIM1_Init+0x120>)
 8001e4a:	22a9      	movs	r2, #169	@ 0xa9
 8001e4c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e4e:	4b38      	ldr	r3, [pc, #224]	@ (8001f30 <MX_TIM1_Init+0x120>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 8001e54:	4b36      	ldr	r3, [pc, #216]	@ (8001f30 <MX_TIM1_Init+0x120>)
 8001e56:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8001e5a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e5c:	4b34      	ldr	r3, [pc, #208]	@ (8001f30 <MX_TIM1_Init+0x120>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001e62:	4b33      	ldr	r3, [pc, #204]	@ (8001f30 <MX_TIM1_Init+0x120>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e68:	4b31      	ldr	r3, [pc, #196]	@ (8001f30 <MX_TIM1_Init+0x120>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001e6e:	4830      	ldr	r0, [pc, #192]	@ (8001f30 <MX_TIM1_Init+0x120>)
 8001e70:	f004 f906 	bl	8006080 <HAL_TIM_PWM_Init>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001e7a:	f001 fca9 	bl	80037d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001e82:	2300      	movs	r3, #0
 8001e84:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e86:	2300      	movs	r3, #0
 8001e88:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001e8a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4827      	ldr	r0, [pc, #156]	@ (8001f30 <MX_TIM1_Init+0x120>)
 8001e92:	f005 ff17 	bl	8007cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001e9c:	f001 fc98 	bl	80037d0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ea0:	2360      	movs	r3, #96	@ 0x60
 8001ea2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001eac:	2300      	movs	r3, #0
 8001eae:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ebc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	481a      	ldr	r0, [pc, #104]	@ (8001f30 <MX_TIM1_Init+0x120>)
 8001ec6:	f004 fe03 	bl	8006ad0 <HAL_TIM_PWM_ConfigChannel>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001ed0:	f001 fc7e 	bl	80037d0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ee8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001eec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001efa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001efe:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001f00:	2300      	movs	r3, #0
 8001f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001f04:	2300      	movs	r3, #0
 8001f06:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001f0c:	1d3b      	adds	r3, r7, #4
 8001f0e:	4619      	mov	r1, r3
 8001f10:	4807      	ldr	r0, [pc, #28]	@ (8001f30 <MX_TIM1_Init+0x120>)
 8001f12:	f005 ff6d 	bl	8007df0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001f1c:	f001 fc58 	bl	80037d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001f20:	4803      	ldr	r0, [pc, #12]	@ (8001f30 <MX_TIM1_Init+0x120>)
 8001f22:	f001 fec5 	bl	8003cb0 <HAL_TIM_MspPostInit>

}
 8001f26:	bf00      	nop
 8001f28:	3760      	adds	r7, #96	@ 0x60
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20000240 	.word	0x20000240
 8001f34:	40012c00 	.word	0x40012c00

08001f38 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f3e:	f107 0310 	add.w	r3, r7, #16
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f4c:	1d3b      	adds	r3, r7, #4
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001f56:	4b1e      	ldr	r3, [pc, #120]	@ (8001fd0 <MX_TIM2_Init+0x98>)
 8001f58:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001f5c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd0 <MX_TIM2_Init+0x98>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f64:	4b1a      	ldr	r3, [pc, #104]	@ (8001fd0 <MX_TIM2_Init+0x98>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001f6a:	4b19      	ldr	r3, [pc, #100]	@ (8001fd0 <MX_TIM2_Init+0x98>)
 8001f6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f72:	4b17      	ldr	r3, [pc, #92]	@ (8001fd0 <MX_TIM2_Init+0x98>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f78:	4b15      	ldr	r3, [pc, #84]	@ (8001fd0 <MX_TIM2_Init+0x98>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001f7e:	4814      	ldr	r0, [pc, #80]	@ (8001fd0 <MX_TIM2_Init+0x98>)
 8001f80:	f003 ff32 	bl	8005de8 <HAL_TIM_Base_Init>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001f8a:	f001 fc21 	bl	80037d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f8e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f94:	f107 0310 	add.w	r3, r7, #16
 8001f98:	4619      	mov	r1, r3
 8001f9a:	480d      	ldr	r0, [pc, #52]	@ (8001fd0 <MX_TIM2_Init+0x98>)
 8001f9c:	f004 feac 	bl	8006cf8 <HAL_TIM_ConfigClockSource>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001fa6:	f001 fc13 	bl	80037d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001faa:	2300      	movs	r3, #0
 8001fac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001fb2:	1d3b      	adds	r3, r7, #4
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	4806      	ldr	r0, [pc, #24]	@ (8001fd0 <MX_TIM2_Init+0x98>)
 8001fb8:	f005 fe84 	bl	8007cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d001      	beq.n	8001fc6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001fc2:	f001 fc05 	bl	80037d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001fc6:	bf00      	nop
 8001fc8:	3720      	adds	r7, #32
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	2000030c 	.word	0x2000030c

08001fd4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b08c      	sub	sp, #48	@ 0x30
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001fda:	f107 030c 	add.w	r3, r7, #12
 8001fde:	2224      	movs	r2, #36	@ 0x24
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f007 fedc 	bl	8009da0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe8:	463b      	mov	r3, r7
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ff2:	4b21      	ldr	r3, [pc, #132]	@ (8002078 <MX_TIM3_Init+0xa4>)
 8001ff4:	4a21      	ldr	r2, [pc, #132]	@ (800207c <MX_TIM3_Init+0xa8>)
 8001ff6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8002078 <MX_TIM3_Init+0xa4>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ffe:	4b1e      	ldr	r3, [pc, #120]	@ (8002078 <MX_TIM3_Init+0xa4>)
 8002000:	2200      	movs	r2, #0
 8002002:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64799;
 8002004:	4b1c      	ldr	r3, [pc, #112]	@ (8002078 <MX_TIM3_Init+0xa4>)
 8002006:	f64f 521f 	movw	r2, #64799	@ 0xfd1f
 800200a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800200c:	4b1a      	ldr	r3, [pc, #104]	@ (8002078 <MX_TIM3_Init+0xa4>)
 800200e:	2200      	movs	r2, #0
 8002010:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002012:	4b19      	ldr	r3, [pc, #100]	@ (8002078 <MX_TIM3_Init+0xa4>)
 8002014:	2200      	movs	r2, #0
 8002016:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002018:	2303      	movs	r3, #3
 800201a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800201c:	2300      	movs	r3, #0
 800201e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002020:	2301      	movs	r3, #1
 8002022:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002024:	2300      	movs	r3, #0
 8002026:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 3;
 8002028:	2303      	movs	r3, #3
 800202a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800202c:	2300      	movs	r3, #0
 800202e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002030:	2301      	movs	r3, #1
 8002032:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002034:	2300      	movs	r3, #0
 8002036:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 3;
 8002038:	2303      	movs	r3, #3
 800203a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800203c:	f107 030c 	add.w	r3, r7, #12
 8002040:	4619      	mov	r1, r3
 8002042:	480d      	ldr	r0, [pc, #52]	@ (8002078 <MX_TIM3_Init+0xa4>)
 8002044:	f004 fa88 	bl	8006558 <HAL_TIM_Encoder_Init>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800204e:	f001 fbbf 	bl	80037d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002052:	2300      	movs	r3, #0
 8002054:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002056:	2300      	movs	r3, #0
 8002058:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800205a:	463b      	mov	r3, r7
 800205c:	4619      	mov	r1, r3
 800205e:	4806      	ldr	r0, [pc, #24]	@ (8002078 <MX_TIM3_Init+0xa4>)
 8002060:	f005 fe30 	bl	8007cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8002064:	4603      	mov	r3, r0
 8002066:	2b00      	cmp	r3, #0
 8002068:	d001      	beq.n	800206e <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 800206a:	f001 fbb1 	bl	80037d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800206e:	bf00      	nop
 8002070:	3730      	adds	r7, #48	@ 0x30
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	200003d8 	.word	0x200003d8
 800207c:	40000400 	.word	0x40000400

08002080 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002086:	f107 0310 	add.w	r3, r7, #16
 800208a:	2200      	movs	r2, #0
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	605a      	str	r2, [r3, #4]
 8002090:	609a      	str	r2, [r3, #8]
 8002092:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800209e:	4b1d      	ldr	r3, [pc, #116]	@ (8002114 <MX_TIM4_Init+0x94>)
 80020a0:	4a1d      	ldr	r2, [pc, #116]	@ (8002118 <MX_TIM4_Init+0x98>)
 80020a2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 80020a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002114 <MX_TIM4_Init+0x94>)
 80020a6:	22a9      	movs	r2, #169	@ 0xa9
 80020a8:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020aa:	4b1a      	ldr	r3, [pc, #104]	@ (8002114 <MX_TIM4_Init+0x94>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4999;
 80020b0:	4b18      	ldr	r3, [pc, #96]	@ (8002114 <MX_TIM4_Init+0x94>)
 80020b2:	f241 3287 	movw	r2, #4999	@ 0x1387
 80020b6:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020b8:	4b16      	ldr	r3, [pc, #88]	@ (8002114 <MX_TIM4_Init+0x94>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020be:	4b15      	ldr	r3, [pc, #84]	@ (8002114 <MX_TIM4_Init+0x94>)
 80020c0:	2200      	movs	r2, #0
 80020c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80020c4:	4813      	ldr	r0, [pc, #76]	@ (8002114 <MX_TIM4_Init+0x94>)
 80020c6:	f003 fe8f 	bl	8005de8 <HAL_TIM_Base_Init>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 80020d0:	f001 fb7e 	bl	80037d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020d4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80020da:	f107 0310 	add.w	r3, r7, #16
 80020de:	4619      	mov	r1, r3
 80020e0:	480c      	ldr	r0, [pc, #48]	@ (8002114 <MX_TIM4_Init+0x94>)
 80020e2:	f004 fe09 	bl	8006cf8 <HAL_TIM_ConfigClockSource>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 80020ec:	f001 fb70 	bl	80037d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020f0:	2300      	movs	r3, #0
 80020f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020f4:	2300      	movs	r3, #0
 80020f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80020f8:	1d3b      	adds	r3, r7, #4
 80020fa:	4619      	mov	r1, r3
 80020fc:	4805      	ldr	r0, [pc, #20]	@ (8002114 <MX_TIM4_Init+0x94>)
 80020fe:	f005 fde1 	bl	8007cc4 <HAL_TIMEx_MasterConfigSynchronization>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8002108:	f001 fb62 	bl	80037d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800210c:	bf00      	nop
 800210e:	3720      	adds	r7, #32
 8002110:	46bd      	mov	sp, r7
 8002112:	bd80      	pop	{r7, pc}
 8002114:	200004a4 	.word	0x200004a4
 8002118:	40000800 	.word	0x40000800

0800211c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002122:	f107 0310 	add.w	r3, r7, #16
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002130:	1d3b      	adds	r3, r7, #4
 8002132:	2200      	movs	r2, #0
 8002134:	601a      	str	r2, [r3, #0]
 8002136:	605a      	str	r2, [r3, #4]
 8002138:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800213a:	4b1d      	ldr	r3, [pc, #116]	@ (80021b0 <MX_TIM5_Init+0x94>)
 800213c:	4a1d      	ldr	r2, [pc, #116]	@ (80021b4 <MX_TIM5_Init+0x98>)
 800213e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8002140:	4b1b      	ldr	r3, [pc, #108]	@ (80021b0 <MX_TIM5_Init+0x94>)
 8002142:	22a9      	movs	r2, #169	@ 0xa9
 8002144:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002146:	4b1a      	ldr	r3, [pc, #104]	@ (80021b0 <MX_TIM5_Init+0x94>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800214c:	4b18      	ldr	r3, [pc, #96]	@ (80021b0 <MX_TIM5_Init+0x94>)
 800214e:	f04f 32ff 	mov.w	r2, #4294967295
 8002152:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002154:	4b16      	ldr	r3, [pc, #88]	@ (80021b0 <MX_TIM5_Init+0x94>)
 8002156:	2200      	movs	r2, #0
 8002158:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800215a:	4b15      	ldr	r3, [pc, #84]	@ (80021b0 <MX_TIM5_Init+0x94>)
 800215c:	2200      	movs	r2, #0
 800215e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002160:	4813      	ldr	r0, [pc, #76]	@ (80021b0 <MX_TIM5_Init+0x94>)
 8002162:	f003 fe41 	bl	8005de8 <HAL_TIM_Base_Init>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 800216c:	f001 fb30 	bl	80037d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002170:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002174:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002176:	f107 0310 	add.w	r3, r7, #16
 800217a:	4619      	mov	r1, r3
 800217c:	480c      	ldr	r0, [pc, #48]	@ (80021b0 <MX_TIM5_Init+0x94>)
 800217e:	f004 fdbb 	bl	8006cf8 <HAL_TIM_ConfigClockSource>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002188:	f001 fb22 	bl	80037d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800218c:	2300      	movs	r3, #0
 800218e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002190:	2300      	movs	r3, #0
 8002192:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002194:	1d3b      	adds	r3, r7, #4
 8002196:	4619      	mov	r1, r3
 8002198:	4805      	ldr	r0, [pc, #20]	@ (80021b0 <MX_TIM5_Init+0x94>)
 800219a:	f005 fd93 	bl	8007cc4 <HAL_TIMEx_MasterConfigSynchronization>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d001      	beq.n	80021a8 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80021a4:	f001 fb14 	bl	80037d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80021a8:	bf00      	nop
 80021aa:	3720      	adds	r7, #32
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20000570 	.word	0x20000570
 80021b4:	40000c00 	.word	0x40000c00

080021b8 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80021bc:	4b14      	ldr	r3, [pc, #80]	@ (8002210 <MX_TIM16_Init+0x58>)
 80021be:	4a15      	ldr	r2, [pc, #84]	@ (8002214 <MX_TIM16_Init+0x5c>)
 80021c0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 80021c2:	4b13      	ldr	r3, [pc, #76]	@ (8002210 <MX_TIM16_Init+0x58>)
 80021c4:	22a9      	movs	r2, #169	@ 0xa9
 80021c6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021c8:	4b11      	ldr	r3, [pc, #68]	@ (8002210 <MX_TIM16_Init+0x58>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 80021ce:	4b10      	ldr	r3, [pc, #64]	@ (8002210 <MX_TIM16_Init+0x58>)
 80021d0:	f240 4279 	movw	r2, #1145	@ 0x479
 80021d4:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021d6:	4b0e      	ldr	r3, [pc, #56]	@ (8002210 <MX_TIM16_Init+0x58>)
 80021d8:	2200      	movs	r2, #0
 80021da:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80021dc:	4b0c      	ldr	r3, [pc, #48]	@ (8002210 <MX_TIM16_Init+0x58>)
 80021de:	2200      	movs	r2, #0
 80021e0:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021e2:	4b0b      	ldr	r3, [pc, #44]	@ (8002210 <MX_TIM16_Init+0x58>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80021e8:	4809      	ldr	r0, [pc, #36]	@ (8002210 <MX_TIM16_Init+0x58>)
 80021ea:	f003 fdfd 	bl	8005de8 <HAL_TIM_Base_Init>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80021f4:	f001 faec 	bl	80037d0 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 80021f8:	2108      	movs	r1, #8
 80021fa:	4805      	ldr	r0, [pc, #20]	@ (8002210 <MX_TIM16_Init+0x58>)
 80021fc:	f004 f8b6 	bl	800636c <HAL_TIM_OnePulse_Init>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8002206:	f001 fae3 	bl	80037d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800220a:	bf00      	nop
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	2000063c 	.word	0x2000063c
 8002214:	40014400 	.word	0x40014400

08002218 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800221c:	4b23      	ldr	r3, [pc, #140]	@ (80022ac <MX_USART2_UART_Init+0x94>)
 800221e:	4a24      	ldr	r2, [pc, #144]	@ (80022b0 <MX_USART2_UART_Init+0x98>)
 8002220:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002222:	4b22      	ldr	r3, [pc, #136]	@ (80022ac <MX_USART2_UART_Init+0x94>)
 8002224:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8002228:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800222a:	4b20      	ldr	r3, [pc, #128]	@ (80022ac <MX_USART2_UART_Init+0x94>)
 800222c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002230:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002232:	4b1e      	ldr	r3, [pc, #120]	@ (80022ac <MX_USART2_UART_Init+0x94>)
 8002234:	2200      	movs	r2, #0
 8002236:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002238:	4b1c      	ldr	r3, [pc, #112]	@ (80022ac <MX_USART2_UART_Init+0x94>)
 800223a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800223e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002240:	4b1a      	ldr	r3, [pc, #104]	@ (80022ac <MX_USART2_UART_Init+0x94>)
 8002242:	220c      	movs	r2, #12
 8002244:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002246:	4b19      	ldr	r3, [pc, #100]	@ (80022ac <MX_USART2_UART_Init+0x94>)
 8002248:	2200      	movs	r2, #0
 800224a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800224c:	4b17      	ldr	r3, [pc, #92]	@ (80022ac <MX_USART2_UART_Init+0x94>)
 800224e:	2200      	movs	r2, #0
 8002250:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002252:	4b16      	ldr	r3, [pc, #88]	@ (80022ac <MX_USART2_UART_Init+0x94>)
 8002254:	2200      	movs	r2, #0
 8002256:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002258:	4b14      	ldr	r3, [pc, #80]	@ (80022ac <MX_USART2_UART_Init+0x94>)
 800225a:	2200      	movs	r2, #0
 800225c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800225e:	4b13      	ldr	r3, [pc, #76]	@ (80022ac <MX_USART2_UART_Init+0x94>)
 8002260:	2200      	movs	r2, #0
 8002262:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002264:	4811      	ldr	r0, [pc, #68]	@ (80022ac <MX_USART2_UART_Init+0x94>)
 8002266:	f005 fea7 	bl	8007fb8 <HAL_UART_Init>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8002270:	f001 faae 	bl	80037d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002274:	2100      	movs	r1, #0
 8002276:	480d      	ldr	r0, [pc, #52]	@ (80022ac <MX_USART2_UART_Init+0x94>)
 8002278:	f007 fcc7 	bl	8009c0a <HAL_UARTEx_SetTxFifoThreshold>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8002282:	f001 faa5 	bl	80037d0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002286:	2100      	movs	r1, #0
 8002288:	4808      	ldr	r0, [pc, #32]	@ (80022ac <MX_USART2_UART_Init+0x94>)
 800228a:	f007 fcfc 	bl	8009c86 <HAL_UARTEx_SetRxFifoThreshold>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8002294:	f001 fa9c 	bl	80037d0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002298:	4804      	ldr	r0, [pc, #16]	@ (80022ac <MX_USART2_UART_Init+0x94>)
 800229a:	f007 fc7d 	bl	8009b98 <HAL_UARTEx_DisableFifoMode>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80022a4:	f001 fa94 	bl	80037d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022a8:	bf00      	nop
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20000708 	.word	0x20000708
 80022b0:	40004400 	.word	0x40004400

080022b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80022ba:	4b16      	ldr	r3, [pc, #88]	@ (8002314 <MX_DMA_Init+0x60>)
 80022bc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022be:	4a15      	ldr	r2, [pc, #84]	@ (8002314 <MX_DMA_Init+0x60>)
 80022c0:	f043 0304 	orr.w	r3, r3, #4
 80022c4:	6493      	str	r3, [r2, #72]	@ 0x48
 80022c6:	4b13      	ldr	r3, [pc, #76]	@ (8002314 <MX_DMA_Init+0x60>)
 80022c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	607b      	str	r3, [r7, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022d2:	4b10      	ldr	r3, [pc, #64]	@ (8002314 <MX_DMA_Init+0x60>)
 80022d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002314 <MX_DMA_Init+0x60>)
 80022d8:	f043 0301 	orr.w	r3, r3, #1
 80022dc:	6493      	str	r3, [r2, #72]	@ 0x48
 80022de:	4b0d      	ldr	r3, [pc, #52]	@ (8002314 <MX_DMA_Init+0x60>)
 80022e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022e2:	f003 0301 	and.w	r3, r3, #1
 80022e6:	603b      	str	r3, [r7, #0]
 80022e8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80022ea:	2200      	movs	r2, #0
 80022ec:	2100      	movs	r1, #0
 80022ee:	200b      	movs	r0, #11
 80022f0:	f001 fff3 	bl	80042da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80022f4:	200b      	movs	r0, #11
 80022f6:	f002 f80a 	bl	800430e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80022fa:	2200      	movs	r2, #0
 80022fc:	2100      	movs	r1, #0
 80022fe:	200c      	movs	r0, #12
 8002300:	f001 ffeb 	bl	80042da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8002304:	200c      	movs	r0, #12
 8002306:	f002 f802 	bl	800430e <HAL_NVIC_EnableIRQ>

}
 800230a:	bf00      	nop
 800230c:	3708      	adds	r7, #8
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40021000 	.word	0x40021000

08002318 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b08a      	sub	sp, #40	@ 0x28
 800231c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231e:	f107 0314 	add.w	r3, r7, #20
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
 8002326:	605a      	str	r2, [r3, #4]
 8002328:	609a      	str	r2, [r3, #8]
 800232a:	60da      	str	r2, [r3, #12]
 800232c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800232e:	4b63      	ldr	r3, [pc, #396]	@ (80024bc <MX_GPIO_Init+0x1a4>)
 8002330:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002332:	4a62      	ldr	r2, [pc, #392]	@ (80024bc <MX_GPIO_Init+0x1a4>)
 8002334:	f043 0304 	orr.w	r3, r3, #4
 8002338:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800233a:	4b60      	ldr	r3, [pc, #384]	@ (80024bc <MX_GPIO_Init+0x1a4>)
 800233c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800233e:	f003 0304 	and.w	r3, r3, #4
 8002342:	613b      	str	r3, [r7, #16]
 8002344:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002346:	4b5d      	ldr	r3, [pc, #372]	@ (80024bc <MX_GPIO_Init+0x1a4>)
 8002348:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800234a:	4a5c      	ldr	r2, [pc, #368]	@ (80024bc <MX_GPIO_Init+0x1a4>)
 800234c:	f043 0320 	orr.w	r3, r3, #32
 8002350:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002352:	4b5a      	ldr	r3, [pc, #360]	@ (80024bc <MX_GPIO_Init+0x1a4>)
 8002354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002356:	f003 0320 	and.w	r3, r3, #32
 800235a:	60fb      	str	r3, [r7, #12]
 800235c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800235e:	4b57      	ldr	r3, [pc, #348]	@ (80024bc <MX_GPIO_Init+0x1a4>)
 8002360:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002362:	4a56      	ldr	r2, [pc, #344]	@ (80024bc <MX_GPIO_Init+0x1a4>)
 8002364:	f043 0301 	orr.w	r3, r3, #1
 8002368:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800236a:	4b54      	ldr	r3, [pc, #336]	@ (80024bc <MX_GPIO_Init+0x1a4>)
 800236c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	60bb      	str	r3, [r7, #8]
 8002374:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002376:	4b51      	ldr	r3, [pc, #324]	@ (80024bc <MX_GPIO_Init+0x1a4>)
 8002378:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800237a:	4a50      	ldr	r2, [pc, #320]	@ (80024bc <MX_GPIO_Init+0x1a4>)
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002382:	4b4e      	ldr	r3, [pc, #312]	@ (80024bc <MX_GPIO_Init+0x1a4>)
 8002384:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	607b      	str	r3, [r7, #4]
 800238c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 800238e:	2200      	movs	r2, #0
 8002390:	210a      	movs	r1, #10
 8002392:	484b      	ldr	r0, [pc, #300]	@ (80024c0 <MX_GPIO_Init+0x1a8>)
 8002394:	f002 fca2 	bl	8004cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002398:	2200      	movs	r2, #0
 800239a:	2120      	movs	r1, #32
 800239c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023a0:	f002 fc9c 	bl	8004cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|Relay4_Pin, GPIO_PIN_RESET);
 80023a4:	2200      	movs	r2, #0
 80023a6:	f240 2106 	movw	r1, #518	@ 0x206
 80023aa:	4846      	ldr	r0, [pc, #280]	@ (80024c4 <MX_GPIO_Init+0x1ac>)
 80023ac:	f002 fc96 	bl	8004cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80023b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80023b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80023b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80023ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80023c0:	f107 0314 	add.w	r3, r7, #20
 80023c4:	4619      	mov	r1, r3
 80023c6:	483e      	ldr	r0, [pc, #248]	@ (80024c0 <MX_GPIO_Init+0x1a8>)
 80023c8:	f002 faee 	bl	80049a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80023cc:	230a      	movs	r3, #10
 80023ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023d0:	2301      	movs	r3, #1
 80023d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d8:	2300      	movs	r3, #0
 80023da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023dc:	f107 0314 	add.w	r3, r7, #20
 80023e0:	4619      	mov	r1, r3
 80023e2:	4837      	ldr	r0, [pc, #220]	@ (80024c0 <MX_GPIO_Init+0x1a8>)
 80023e4:	f002 fae0 	bl	80049a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA8
                           PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8
 80023e8:	f240 7313 	movw	r3, #1811	@ 0x713
 80023ec:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023ee:	2300      	movs	r3, #0
 80023f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80023f2:	2301      	movs	r3, #1
 80023f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f6:	f107 0314 	add.w	r3, r7, #20
 80023fa:	4619      	mov	r1, r3
 80023fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002400:	f002 fad2 	bl	80049a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002404:	2320      	movs	r3, #32
 8002406:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002408:	2301      	movs	r3, #1
 800240a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240c:	2300      	movs	r3, #0
 800240e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002410:	2300      	movs	r3, #0
 8002412:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	4619      	mov	r1, r3
 800241a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800241e:	f002 fac3 	bl	80049a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002422:	2301      	movs	r3, #1
 8002424:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002426:	2300      	movs	r3, #0
 8002428:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800242a:	2301      	movs	r3, #1
 800242c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800242e:	f107 0314 	add.w	r3, r7, #20
 8002432:	4619      	mov	r1, r3
 8002434:	4823      	ldr	r0, [pc, #140]	@ (80024c4 <MX_GPIO_Init+0x1ac>)
 8002436:	f002 fab7 	bl	80049a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 Relay4_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|Relay4_Pin;
 800243a:	f240 2306 	movw	r3, #518	@ 0x206
 800243e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002440:	2301      	movs	r3, #1
 8002442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002448:	2300      	movs	r3, #0
 800244a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800244c:	f107 0314 	add.w	r3, r7, #20
 8002450:	4619      	mov	r1, r3
 8002452:	481c      	ldr	r0, [pc, #112]	@ (80024c4 <MX_GPIO_Init+0x1ac>)
 8002454:	f002 faa8 	bl	80049a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002458:	2380      	movs	r3, #128	@ 0x80
 800245a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800245c:	2300      	movs	r3, #0
 800245e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002460:	2300      	movs	r3, #0
 8002462:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002464:	f107 0314 	add.w	r3, r7, #20
 8002468:	4619      	mov	r1, r3
 800246a:	4815      	ldr	r0, [pc, #84]	@ (80024c0 <MX_GPIO_Init+0x1a8>)
 800246c:	f002 fa9c 	bl	80049a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002470:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002476:	2300      	movs	r3, #0
 8002478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800247a:	2301      	movs	r3, #1
 800247c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800247e:	f107 0314 	add.w	r3, r7, #20
 8002482:	4619      	mov	r1, r3
 8002484:	480e      	ldr	r0, [pc, #56]	@ (80024c0 <MX_GPIO_Init+0x1a8>)
 8002486:	f002 fa8f 	bl	80049a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800248a:	2340      	movs	r3, #64	@ 0x40
 800248c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800248e:	2300      	movs	r3, #0
 8002490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002492:	2300      	movs	r3, #0
 8002494:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002496:	f107 0314 	add.w	r3, r7, #20
 800249a:	4619      	mov	r1, r3
 800249c:	4809      	ldr	r0, [pc, #36]	@ (80024c4 <MX_GPIO_Init+0x1ac>)
 800249e:	f002 fa83 	bl	80049a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80024a2:	2200      	movs	r2, #0
 80024a4:	2100      	movs	r1, #0
 80024a6:	2028      	movs	r0, #40	@ 0x28
 80024a8:	f001 ff17 	bl	80042da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80024ac:	2028      	movs	r0, #40	@ 0x28
 80024ae:	f001 ff2e 	bl	800430e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80024b2:	bf00      	nop
 80024b4:	3728      	adds	r7, #40	@ 0x28
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	40021000 	.word	0x40021000
 80024c0:	48000800 	.word	0x48000800
 80024c4:	48000400 	.word	0x48000400

080024c8 <HAL_TIM_PeriodElapsedCallback>:
//	}
//
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80024c8:	b5b0      	push	{r4, r5, r7, lr}
 80024ca:	b082      	sub	sp, #8
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	4a11      	ldr	r2, [pc, #68]	@ (8002518 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d108      	bne.n	80024ea <HAL_TIM_PeriodElapsedCallback+0x22>
	{
		registerFrame[0].U16 = 22881;
 80024d8:	4b10      	ldr	r3, [pc, #64]	@ (800251c <HAL_TIM_PeriodElapsedCallback+0x54>)
 80024da:	f645 1261 	movw	r2, #22881	@ 0x5961
 80024de:	801a      	strh	r2, [r3, #0]
		CountGripper += 1;
 80024e0:	4b0f      	ldr	r3, [pc, #60]	@ (8002520 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	3301      	adds	r3, #1
 80024e6:	4a0e      	ldr	r2, [pc, #56]	@ (8002520 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80024e8:	6013      	str	r3, [r2, #0]
	}
	if (htim == &htim5) {
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002524 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d10d      	bne.n	800250e <HAL_TIM_PeriodElapsedCallback+0x46>
		upper += 1;
 80024f2:	4b0d      	ldr	r3, [pc, #52]	@ (8002528 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80024f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f8:	1c54      	adds	r4, r2, #1
 80024fa:	f143 0500 	adc.w	r5, r3, #0
 80024fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002528 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002500:	e9c3 4500 	strd	r4, r5, [r3]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002504:	2120      	movs	r1, #32
 8002506:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800250a:	f002 fbff 	bl	8004d0c <HAL_GPIO_TogglePin>
	}
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bdb0      	pop	{r4, r5, r7, pc}
 8002516:	bf00      	nop
 8002518:	200004a4 	.word	0x200004a4
 800251c:	20000df8 	.word	0x20000df8
 8002520:	200008b8 	.word	0x200008b8
 8002524:	20000570 	.word	0x20000570
 8002528:	20000898 	.word	0x20000898

0800252c <convert_to_string>:

void convert_to_string(uint16_t number, char* buffer, int buffer_size) {
 800252c:	b480      	push	{r7}
 800252e:	b087      	sub	sp, #28
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	60b9      	str	r1, [r7, #8]
 8002536:	607a      	str	r2, [r7, #4]
 8002538:	81fb      	strh	r3, [r7, #14]
  if (buffer_size < 6) { // Ensure buffer size is at least 6 (for 5 digits + null terminator)    return; // Handle error (insufficient buffer size)
  }

  int index = 0;
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
  do {
    uint8_t digit = number % 10;
 800253e:	89fa      	ldrh	r2, [r7, #14]
 8002540:	4b14      	ldr	r3, [pc, #80]	@ (8002594 <convert_to_string+0x68>)
 8002542:	fba3 1302 	umull	r1, r3, r3, r2
 8002546:	08d9      	lsrs	r1, r3, #3
 8002548:	460b      	mov	r3, r1
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	1ad3      	subs	r3, r2, r3
 8002552:	b29b      	uxth	r3, r3
 8002554:	74fb      	strb	r3, [r7, #19]
    buffer[index++] = digit + '0';
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	1c5a      	adds	r2, r3, #1
 800255a:	617a      	str	r2, [r7, #20]
 800255c:	461a      	mov	r2, r3
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	4413      	add	r3, r2
 8002562:	7cfa      	ldrb	r2, [r7, #19]
 8002564:	3230      	adds	r2, #48	@ 0x30
 8002566:	b2d2      	uxtb	r2, r2
 8002568:	701a      	strb	r2, [r3, #0]
    number /= 10;
 800256a:	89fb      	ldrh	r3, [r7, #14]
 800256c:	4a09      	ldr	r2, [pc, #36]	@ (8002594 <convert_to_string+0x68>)
 800256e:	fba2 2303 	umull	r2, r3, r2, r3
 8002572:	08db      	lsrs	r3, r3, #3
 8002574:	81fb      	strh	r3, [r7, #14]
  } while (number > 0);
 8002576:	89fb      	ldrh	r3, [r7, #14]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1e0      	bne.n	800253e <convert_to_string+0x12>
  buffer[index] = '\0';
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	68ba      	ldr	r2, [r7, #8]
 8002580:	4413      	add	r3, r2
 8002582:	2200      	movs	r2, #0
 8002584:	701a      	strb	r2, [r3, #0]
}
 8002586:	bf00      	nop
 8002588:	371c      	adds	r7, #28
 800258a:	46bd      	mov	sp, r7
 800258c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002590:	4770      	bx	lr
 8002592:	bf00      	nop
 8002594:	cccccccd 	.word	0xcccccccd

08002598 <GoPick>:

void GoPick() {
 8002598:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800259c:	af00      	add	r7, sp, #0
	//a=0;
	b_check[5] = 1;
 800259e:	4b42      	ldr	r3, [pc, #264]	@ (80026a8 <GoPick+0x110>)
 80025a0:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80025a4:	615a      	str	r2, [r3, #20]
	Arrived = 0;
 80025a6:	4b41      	ldr	r3, [pc, #260]	@ (80026ac <GoPick+0x114>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	701a      	strb	r2, [r3, #0]

	Goal = GoalPick[j];
 80025ac:	4b40      	ldr	r3, [pc, #256]	@ (80026b0 <GoPick+0x118>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a40      	ldr	r2, [pc, #256]	@ (80026b4 <GoPick+0x11c>)
 80025b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80025b6:	ee07 3a90 	vmov	s15, r3
 80025ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025be:	4b3e      	ldr	r3, [pc, #248]	@ (80026b8 <GoPick+0x120>)
 80025c0:	edc3 7a00 	vstr	s15, [r3]
	MotorDrive();
 80025c4:	f000 fb18 	bl	8002bf8 <MotorDrive>

	static uint64_t timestampVacuum = 0;
  //Gripper FW Vacuum On
	if((Arrived == 1)&&(flagpickend ==0)){
 80025c8:	4b38      	ldr	r3, [pc, #224]	@ (80026ac <GoPick+0x114>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d129      	bne.n	8002624 <GoPick+0x8c>
 80025d0:	4b3a      	ldr	r3, [pc, #232]	@ (80026bc <GoPick+0x124>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d125      	bne.n	8002624 <GoPick+0x8c>
		relay[2] = 1; //Vacuum On
 80025d8:	4b39      	ldr	r3, [pc, #228]	@ (80026c0 <GoPick+0x128>)
 80025da:	2201      	movs	r2, #1
 80025dc:	709a      	strb	r2, [r3, #2]

		relay[0] = 0; //Gripper push
 80025de:	4b38      	ldr	r3, [pc, #224]	@ (80026c0 <GoPick+0x128>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	701a      	strb	r2, [r3, #0]
		relay[1] = 1;
 80025e4:	4b36      	ldr	r3, [pc, #216]	@ (80026c0 <GoPick+0x128>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	705a      	strb	r2, [r3, #1]

		a=1;
 80025ea:	4b36      	ldr	r3, [pc, #216]	@ (80026c4 <GoPick+0x12c>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	701a      	strb	r2, [r3, #0]
		if (GripperFlag == 0) {
 80025f0:	4b35      	ldr	r3, [pc, #212]	@ (80026c8 <GoPick+0x130>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d115      	bne.n	8002624 <GoPick+0x8c>
			timestampVacuum = HAL_GetTick()+500;
 80025f8:	f001 fd66 	bl	80040c8 <HAL_GetTick>
 80025fc:	4603      	mov	r3, r0
 80025fe:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8002602:	2200      	movs	r2, #0
 8002604:	4698      	mov	r8, r3
 8002606:	4691      	mov	r9, r2
 8002608:	4b30      	ldr	r3, [pc, #192]	@ (80026cc <GoPick+0x134>)
 800260a:	e9c3 8900 	strd	r8, r9, [r3]
			WaitGripper = CountGripper+150;
 800260e:	4b30      	ldr	r3, [pc, #192]	@ (80026d0 <GoPick+0x138>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	3396      	adds	r3, #150	@ 0x96
 8002614:	4a2f      	ldr	r2, [pc, #188]	@ (80026d4 <GoPick+0x13c>)
 8002616:	6013      	str	r3, [r2, #0]
			GripperFlag = 1;
 8002618:	4b2b      	ldr	r3, [pc, #172]	@ (80026c8 <GoPick+0x130>)
 800261a:	2201      	movs	r2, #1
 800261c:	701a      	strb	r2, [r3, #0]
			flagpickend = 0;
 800261e:	4b27      	ldr	r3, [pc, #156]	@ (80026bc <GoPick+0x124>)
 8002620:	2200      	movs	r2, #0
 8002622:	701a      	strb	r2, [r3, #0]
		}
	}
	if((ActualGripper == 1) && (flagpickend == 0) && (HAL_GetTick()>= timestampVacuum)){ //leed switch Out And wait 200 ms
 8002624:	4b2c      	ldr	r3, [pc, #176]	@ (80026d8 <GoPick+0x140>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	2b01      	cmp	r3, #1
 800262a:	d11f      	bne.n	800266c <GoPick+0xd4>
 800262c:	4b23      	ldr	r3, [pc, #140]	@ (80026bc <GoPick+0x124>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d11b      	bne.n	800266c <GoPick+0xd4>
 8002634:	f001 fd48 	bl	80040c8 <HAL_GetTick>
 8002638:	4603      	mov	r3, r0
 800263a:	2200      	movs	r2, #0
 800263c:	461c      	mov	r4, r3
 800263e:	4615      	mov	r5, r2
 8002640:	4b22      	ldr	r3, [pc, #136]	@ (80026cc <GoPick+0x134>)
 8002642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002646:	4294      	cmp	r4, r2
 8002648:	eb75 0303 	sbcs.w	r3, r5, r3
 800264c:	d30e      	bcc.n	800266c <GoPick+0xd4>
		relay[0] = 1; //Gripper pull
 800264e:	4b1c      	ldr	r3, [pc, #112]	@ (80026c0 <GoPick+0x128>)
 8002650:	2201      	movs	r2, #1
 8002652:	701a      	strb	r2, [r3, #0]
		relay[1] = 0;
 8002654:	4b1a      	ldr	r3, [pc, #104]	@ (80026c0 <GoPick+0x128>)
 8002656:	2200      	movs	r2, #0
 8002658:	705a      	strb	r2, [r3, #1]
		a=2;
 800265a:	4b1a      	ldr	r3, [pc, #104]	@ (80026c4 <GoPick+0x12c>)
 800265c:	2202      	movs	r2, #2
 800265e:	701a      	strb	r2, [r3, #0]
		flagpick = 1;
 8002660:	4b1e      	ldr	r3, [pc, #120]	@ (80026dc <GoPick+0x144>)
 8002662:	2201      	movs	r2, #1
 8002664:	701a      	strb	r2, [r3, #0]
		flagpickend = 1;
 8002666:	4b15      	ldr	r3, [pc, #84]	@ (80026bc <GoPick+0x124>)
 8002668:	2201      	movs	r2, #1
 800266a:	701a      	strb	r2, [r3, #0]
	}

	if((ActualGripper == 0) && (flagpick == 1) && (flagpickend == 1)){
 800266c:	4b1a      	ldr	r3, [pc, #104]	@ (80026d8 <GoPick+0x140>)
 800266e:	781b      	ldrb	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d116      	bne.n	80026a2 <GoPick+0x10a>
 8002674:	4b19      	ldr	r3, [pc, #100]	@ (80026dc <GoPick+0x144>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d112      	bne.n	80026a2 <GoPick+0x10a>
 800267c:	4b0f      	ldr	r3, [pc, #60]	@ (80026bc <GoPick+0x124>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d10e      	bne.n	80026a2 <GoPick+0x10a>
		GripperFlag = 0;
 8002684:	4b10      	ldr	r3, [pc, #64]	@ (80026c8 <GoPick+0x130>)
 8002686:	2200      	movs	r2, #0
 8002688:	701a      	strb	r2, [r3, #0]
		registerFrame[0x10].U16 = 8;
 800268a:	4b15      	ldr	r3, [pc, #84]	@ (80026e0 <GoPick+0x148>)
 800268c:	2208      	movs	r2, #8
 800268e:	841a      	strh	r2, [r3, #32]
		flagpick = 0;
 8002690:	4b12      	ldr	r3, [pc, #72]	@ (80026dc <GoPick+0x144>)
 8002692:	2200      	movs	r2, #0
 8002694:	701a      	strb	r2, [r3, #0]
		a=3;
 8002696:	4b0b      	ldr	r3, [pc, #44]	@ (80026c4 <GoPick+0x12c>)
 8002698:	2203      	movs	r2, #3
 800269a:	701a      	strb	r2, [r3, #0]
		MotorDriveFlag = 0;
 800269c:	4b11      	ldr	r3, [pc, #68]	@ (80026e4 <GoPick+0x14c>)
 800269e:	2200      	movs	r2, #0
 80026a0:	701a      	strb	r2, [r3, #0]
	}

}
 80026a2:	bf00      	nop
 80026a4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80026a8:	20000fe0 	.word	0x20000fe0
 80026ac:	20000fdc 	.word	0x20000fdc
 80026b0:	20000fd8 	.word	0x20000fd8
 80026b4:	20000fc0 	.word	0x20000fc0
 80026b8:	20000900 	.word	0x20000900
 80026bc:	2000101e 	.word	0x2000101e
 80026c0:	200008ac 	.word	0x200008ac
 80026c4:	20000fde 	.word	0x20000fde
 80026c8:	200008b4 	.word	0x200008b4
 80026cc:	20001040 	.word	0x20001040
 80026d0:	200008b8 	.word	0x200008b8
 80026d4:	200008b0 	.word	0x200008b0
 80026d8:	20000faf 	.word	0x20000faf
 80026dc:	2000101d 	.word	0x2000101d
 80026e0:	20000df8 	.word	0x20000df8
 80026e4:	20001008 	.word	0x20001008

080026e8 <GoPlace>:

void GoPlace() {
 80026e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80026ec:	af00      	add	r7, sp, #0

	static uint64_t timestampVacuum = 0;
	if((ActualGripper == 0)){//Gripper BW before move
 80026ee:	4b4a      	ldr	r3, [pc, #296]	@ (8002818 <GoPlace+0x130>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d114      	bne.n	8002720 <GoPlace+0x38>
		Arrived = 0;
 80026f6:	4b49      	ldr	r3, [pc, #292]	@ (800281c <GoPlace+0x134>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	701a      	strb	r2, [r3, #0]
		Goal = GoalPlace[j]+10;
 80026fc:	4b48      	ldr	r3, [pc, #288]	@ (8002820 <GoPlace+0x138>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a48      	ldr	r2, [pc, #288]	@ (8002824 <GoPlace+0x13c>)
 8002702:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002706:	330a      	adds	r3, #10
 8002708:	ee07 3a90 	vmov	s15, r3
 800270c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002710:	4b45      	ldr	r3, [pc, #276]	@ (8002828 <GoPlace+0x140>)
 8002712:	edc3 7a00 	vstr	s15, [r3]
		MotorDrive();
 8002716:	f000 fa6f 	bl	8002bf8 <MotorDrive>
		a = 4;
 800271a:	4b44      	ldr	r3, [pc, #272]	@ (800282c <GoPlace+0x144>)
 800271c:	2204      	movs	r2, #4
 800271e:	701a      	strb	r2, [r3, #0]
	}//Gripper FW Vacuum Off
	if((Arrived == 1)&&(flagplaceend == 0)){
 8002720:	4b3e      	ldr	r3, [pc, #248]	@ (800281c <GoPlace+0x134>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b01      	cmp	r3, #1
 8002726:	d126      	bne.n	8002776 <GoPlace+0x8e>
 8002728:	4b41      	ldr	r3, [pc, #260]	@ (8002830 <GoPlace+0x148>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d122      	bne.n	8002776 <GoPlace+0x8e>
		relay[2] = 0; //Vacuum Off
 8002730:	4b40      	ldr	r3, [pc, #256]	@ (8002834 <GoPlace+0x14c>)
 8002732:	2200      	movs	r2, #0
 8002734:	709a      	strb	r2, [r3, #2]

		relay[0] = 0;
 8002736:	4b3f      	ldr	r3, [pc, #252]	@ (8002834 <GoPlace+0x14c>)
 8002738:	2200      	movs	r2, #0
 800273a:	701a      	strb	r2, [r3, #0]
		relay[1] = 1; //Gripper push
 800273c:	4b3d      	ldr	r3, [pc, #244]	@ (8002834 <GoPlace+0x14c>)
 800273e:	2201      	movs	r2, #1
 8002740:	705a      	strb	r2, [r3, #1]
		if (GripperFlag == 0) {
 8002742:	4b3d      	ldr	r3, [pc, #244]	@ (8002838 <GoPlace+0x150>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d115      	bne.n	8002776 <GoPlace+0x8e>
			timestampVacuum = HAL_GetTick()+500;
 800274a:	f001 fcbd 	bl	80040c8 <HAL_GetTick>
 800274e:	4603      	mov	r3, r0
 8002750:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8002754:	2200      	movs	r2, #0
 8002756:	4698      	mov	r8, r3
 8002758:	4691      	mov	r9, r2
 800275a:	4b38      	ldr	r3, [pc, #224]	@ (800283c <GoPlace+0x154>)
 800275c:	e9c3 8900 	strd	r8, r9, [r3]
			WaitGripper = CountGripper+8;
 8002760:	4b37      	ldr	r3, [pc, #220]	@ (8002840 <GoPlace+0x158>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	3308      	adds	r3, #8
 8002766:	4a37      	ldr	r2, [pc, #220]	@ (8002844 <GoPlace+0x15c>)
 8002768:	6013      	str	r3, [r2, #0]
			GripperFlag = 1;
 800276a:	4b33      	ldr	r3, [pc, #204]	@ (8002838 <GoPlace+0x150>)
 800276c:	2201      	movs	r2, #1
 800276e:	701a      	strb	r2, [r3, #0]
			flagplaceend = 0;
 8002770:	4b2f      	ldr	r3, [pc, #188]	@ (8002830 <GoPlace+0x148>)
 8002772:	2200      	movs	r2, #0
 8002774:	701a      	strb	r2, [r3, #0]
		}
	}
	if((ActualGripper == 1) && (ActualVacuum == 0) &&(flagplaceend == 0) && (HAL_GetTick()>= timestampVacuum) ){
 8002776:	4b28      	ldr	r3, [pc, #160]	@ (8002818 <GoPlace+0x130>)
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d123      	bne.n	80027c6 <GoPlace+0xde>
 800277e:	4b32      	ldr	r3, [pc, #200]	@ (8002848 <GoPlace+0x160>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d11f      	bne.n	80027c6 <GoPlace+0xde>
 8002786:	4b2a      	ldr	r3, [pc, #168]	@ (8002830 <GoPlace+0x148>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d11b      	bne.n	80027c6 <GoPlace+0xde>
 800278e:	f001 fc9b 	bl	80040c8 <HAL_GetTick>
 8002792:	4603      	mov	r3, r0
 8002794:	2200      	movs	r2, #0
 8002796:	461c      	mov	r4, r3
 8002798:	4615      	mov	r5, r2
 800279a:	4b28      	ldr	r3, [pc, #160]	@ (800283c <GoPlace+0x154>)
 800279c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a0:	4294      	cmp	r4, r2
 80027a2:	eb75 0303 	sbcs.w	r3, r5, r3
 80027a6:	d30e      	bcc.n	80027c6 <GoPlace+0xde>
		//wait 400 ms
		flagplace = 1;
 80027a8:	4b28      	ldr	r3, [pc, #160]	@ (800284c <GoPlace+0x164>)
 80027aa:	2201      	movs	r2, #1
 80027ac:	701a      	strb	r2, [r3, #0]
		a = 5;
 80027ae:	4b1f      	ldr	r3, [pc, #124]	@ (800282c <GoPlace+0x144>)
 80027b0:	2205      	movs	r2, #5
 80027b2:	701a      	strb	r2, [r3, #0]
		relay[0] = 1; //pull
 80027b4:	4b1f      	ldr	r3, [pc, #124]	@ (8002834 <GoPlace+0x14c>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	701a      	strb	r2, [r3, #0]
		relay[1] = 0; //
 80027ba:	4b1e      	ldr	r3, [pc, #120]	@ (8002834 <GoPlace+0x14c>)
 80027bc:	2200      	movs	r2, #0
 80027be:	705a      	strb	r2, [r3, #1]
		flagplaceend = 1;
 80027c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002830 <GoPlace+0x148>)
 80027c2:	2201      	movs	r2, #1
 80027c4:	701a      	strb	r2, [r3, #0]

	}
	if((flagplace == 1) && (ActualGripper == 0)&&(flagplaceend == 1) ){
 80027c6:	4b21      	ldr	r3, [pc, #132]	@ (800284c <GoPlace+0x164>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d121      	bne.n	8002812 <GoPlace+0x12a>
 80027ce:	4b12      	ldr	r3, [pc, #72]	@ (8002818 <GoPlace+0x130>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d11d      	bne.n	8002812 <GoPlace+0x12a>
 80027d6:	4b16      	ldr	r3, [pc, #88]	@ (8002830 <GoPlace+0x148>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d119      	bne.n	8002812 <GoPlace+0x12a>
		GripperFlag = 0;
 80027de:	4b16      	ldr	r3, [pc, #88]	@ (8002838 <GoPlace+0x150>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	701a      	strb	r2, [r3, #0]
		registerFrame[0x10].U16 = 4;
 80027e4:	4b1a      	ldr	r3, [pc, #104]	@ (8002850 <GoPlace+0x168>)
 80027e6:	2204      	movs	r2, #4
 80027e8:	841a      	strh	r2, [r3, #32]
		j += 1; //use
 80027ea:	4b0d      	ldr	r3, [pc, #52]	@ (8002820 <GoPlace+0x138>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	3301      	adds	r3, #1
 80027f0:	4a0b      	ldr	r2, [pc, #44]	@ (8002820 <GoPlace+0x138>)
 80027f2:	6013      	str	r3, [r2, #0]
		a = 6;
 80027f4:	4b0d      	ldr	r3, [pc, #52]	@ (800282c <GoPlace+0x144>)
 80027f6:	2206      	movs	r2, #6
 80027f8:	701a      	strb	r2, [r3, #0]
		MotorDriveFlag = 0;
 80027fa:	4b16      	ldr	r3, [pc, #88]	@ (8002854 <GoPlace+0x16c>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	701a      	strb	r2, [r3, #0]
		flagplace = 0;
 8002800:	4b12      	ldr	r3, [pc, #72]	@ (800284c <GoPlace+0x164>)
 8002802:	2200      	movs	r2, #0
 8002804:	701a      	strb	r2, [r3, #0]
		flagplaceend = 0;
 8002806:	4b0a      	ldr	r3, [pc, #40]	@ (8002830 <GoPlace+0x148>)
 8002808:	2200      	movs	r2, #0
 800280a:	701a      	strb	r2, [r3, #0]
		flagpickend = 0;
 800280c:	4b12      	ldr	r3, [pc, #72]	@ (8002858 <GoPlace+0x170>)
 800280e:	2200      	movs	r2, #0
 8002810:	701a      	strb	r2, [r3, #0]

	}
}
 8002812:	bf00      	nop
 8002814:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002818:	20000faf 	.word	0x20000faf
 800281c:	20000fdc 	.word	0x20000fdc
 8002820:	20000fd8 	.word	0x20000fd8
 8002824:	20000fcc 	.word	0x20000fcc
 8002828:	20000900 	.word	0x20000900
 800282c:	20000fde 	.word	0x20000fde
 8002830:	20001020 	.word	0x20001020
 8002834:	200008ac 	.word	0x200008ac
 8002838:	200008b4 	.word	0x200008b4
 800283c:	20001048 	.word	0x20001048
 8002840:	200008b8 	.word	0x200008b8
 8002844:	200008b0 	.word	0x200008b0
 8002848:	20000fae 	.word	0x20000fae
 800284c:	2000101f 	.word	0x2000101f
 8002850:	20000df8 	.word	0x20000df8
 8002854:	20001008 	.word	0x20001008
 8002858:	2000101e 	.word	0x2000101e

0800285c <Micros>:


uint64_t Micros() {
 800285c:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8002860:	b084      	sub	sp, #16
 8002862:	af00      	add	r7, sp, #0
//	static uint32_t timestamp = 0;
	uint32_t lower = 0;
 8002864:	2300      	movs	r3, #0
 8002866:	60fb      	str	r3, [r7, #12]
	uint64_t time = 0;
 8002868:	f04f 0200 	mov.w	r2, #0
 800286c:	f04f 0300 	mov.w	r3, #0
 8002870:	e9c7 2300 	strd	r2, r3, [r7]
	lower = __HAL_TIM_GET_COUNTER(&htim5);
 8002874:	4b10      	ldr	r3, [pc, #64]	@ (80028b8 <Micros+0x5c>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800287a:	60fb      	str	r3, [r7, #12]
	time = (upper << 32) | lower;
 800287c:	4b0f      	ldr	r3, [pc, #60]	@ (80028bc <Micros+0x60>)
 800287e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	4643      	mov	r3, r8
 800288c:	2200      	movs	r2, #0
 800288e:	68fe      	ldr	r6, [r7, #12]
 8002890:	f04f 0c00 	mov.w	ip, #0
 8002894:	4630      	mov	r0, r6
 8002896:	4661      	mov	r1, ip
 8002898:	ea42 0400 	orr.w	r4, r2, r0
 800289c:	ea43 0501 	orr.w	r5, r3, r1
 80028a0:	e9c7 4500 	strd	r4, r5, [r7]
	return time;
 80028a4:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80028a8:	4610      	mov	r0, r2
 80028aa:	4619      	mov	r1, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	20000570 	.word	0x20000570
 80028bc:	20000898 	.word	0x20000898

080028c0 <QEIEncoderPosVel_Update>:

void QEIEncoderPosVel_Update() {
 80028c0:	b5b0      	push	{r4, r5, r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
	//CurrentPos = QEIdata.TotalPos-HomePos;
	//collect data
	QEIdata.TimeStamp[NEW] = Micros();
 80028c6:	f7ff ffc9 	bl	800285c <Micros>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	497a      	ldr	r1, [pc, #488]	@ (8002ab8 <QEIEncoderPosVel_Update+0x1f8>)
 80028d0:	e9c1 2302 	strd	r2, r3, [r1, #8]
	QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 80028d4:	4b79      	ldr	r3, [pc, #484]	@ (8002abc <QEIEncoderPosVel_Update+0x1fc>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028da:	4a77      	ldr	r2, [pc, #476]	@ (8002ab8 <QEIEncoderPosVel_Update+0x1f8>)
 80028dc:	6013      	str	r3, [r2, #0]

	//Position 1 turn calculation
	QEIdata.QEIPostion_1turn[NEW] = QEIdata.Position[NEW] % 800;
 80028de:	4b76      	ldr	r3, [pc, #472]	@ (8002ab8 <QEIEncoderPosVel_Update+0x1f8>)
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	4b77      	ldr	r3, [pc, #476]	@ (8002ac0 <QEIEncoderPosVel_Update+0x200>)
 80028e4:	fba3 1302 	umull	r1, r3, r3, r2
 80028e8:	0a1b      	lsrs	r3, r3, #8
 80028ea:	f44f 7148 	mov.w	r1, #800	@ 0x320
 80028ee:	fb01 f303 	mul.w	r3, r1, r3
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	ee07 3a90 	vmov	s15, r3
 80028f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028fc:	4b6e      	ldr	r3, [pc, #440]	@ (8002ab8 <QEIEncoderPosVel_Update+0x1f8>)
 80028fe:	edc3 7a06 	vstr	s15, [r3, #24]
	QEIdata.Angle = QEIdata.QEIPostion_1turn[NEW] * 360 / 800;
 8002902:	4b6d      	ldr	r3, [pc, #436]	@ (8002ab8 <QEIEncoderPosVel_Update+0x1f8>)
 8002904:	edd3 7a06 	vldr	s15, [r3, #24]
 8002908:	ed9f 7a6e 	vldr	s14, [pc, #440]	@ 8002ac4 <QEIEncoderPosVel_Update+0x204>
 800290c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002910:	eddf 6a6d 	vldr	s13, [pc, #436]	@ 8002ac8 <QEIEncoderPosVel_Update+0x208>
 8002914:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002918:	4b67      	ldr	r3, [pc, #412]	@ (8002ab8 <QEIEncoderPosVel_Update+0x1f8>)
 800291a:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	//calculate dx
	int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 800291e:	4b66      	ldr	r3, [pc, #408]	@ (8002ab8 <QEIEncoderPosVel_Update+0x1f8>)
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	4b65      	ldr	r3, [pc, #404]	@ (8002ab8 <QEIEncoderPosVel_Update+0x1f8>)
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	60fb      	str	r3, [r7, #12]
	int32_t diff1turn = QEIdata.QEIPostion_1turn[NEW] - QEIdata.QEIPostion_1turn[OLD];
 800292a:	4b63      	ldr	r3, [pc, #396]	@ (8002ab8 <QEIEncoderPosVel_Update+0x1f8>)
 800292c:	ed93 7a06 	vldr	s14, [r3, #24]
 8002930:	4b61      	ldr	r3, [pc, #388]	@ (8002ab8 <QEIEncoderPosVel_Update+0x1f8>)
 8002932:	edd3 7a07 	vldr	s15, [r3, #28]
 8002936:	ee77 7a67 	vsub.f32	s15, s14, s15
 800293a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800293e:	ee17 3a90 	vmov	r3, s15
 8002942:	60bb      	str	r3, [r7, #8]

	//Handle Warp around
	if (diffPosition > 32400) {
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	f647 6290 	movw	r2, #32400	@ 0x7e90
 800294a:	4293      	cmp	r3, r2
 800294c:	dd04      	ble.n	8002958 <QEIEncoderPosVel_Update+0x98>
		diffPosition -= 64800;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f5a3 437d 	sub.w	r3, r3, #64768	@ 0xfd00
 8002954:	3b20      	subs	r3, #32
 8002956:	60fb      	str	r3, [r7, #12]
	}
	if (diffPosition < -32400) {
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	4a5c      	ldr	r2, [pc, #368]	@ (8002acc <QEIEncoderPosVel_Update+0x20c>)
 800295c:	4293      	cmp	r3, r2
 800295e:	da04      	bge.n	800296a <QEIEncoderPosVel_Update+0xaa>
		diffPosition += 64800;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	f503 437d 	add.w	r3, r3, #64768	@ 0xfd00
 8002966:	3320      	adds	r3, #32
 8002968:	60fb      	str	r3, [r7, #12]
	}
	//Calculate Linear Position in mm unit
	if (diff1turn > 400) {
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8002970:	dd09      	ble.n	8002986 <QEIEncoderPosVel_Update+0xc6>
		QEIdata.QEIRound -= 1;
 8002972:	4b51      	ldr	r3, [pc, #324]	@ (8002ab8 <QEIEncoderPosVel_Update+0x1f8>)
 8002974:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002978:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800297c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002980:	4b4d      	ldr	r3, [pc, #308]	@ (8002ab8 <QEIEncoderPosVel_Update+0x1f8>)
 8002982:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}
	if (diff1turn < -400) {
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	f513 7fc8 	cmn.w	r3, #400	@ 0x190
 800298c:	da09      	bge.n	80029a2 <QEIEncoderPosVel_Update+0xe2>
		QEIdata.QEIRound += 1;
 800298e:	4b4a      	ldr	r3, [pc, #296]	@ (8002ab8 <QEIEncoderPosVel_Update+0x1f8>)
 8002990:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8002994:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002998:	ee77 7a87 	vadd.f32	s15, s15, s14
 800299c:	4b46      	ldr	r3, [pc, #280]	@ (8002ab8 <QEIEncoderPosVel_Update+0x1f8>)
 800299e:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}


	QEIdata.TotalPos = (QEIdata.QEIRound * 14) + QEIdata.QEIPostion_1turn[NEW] * 14 / 800; //linear pos in mm uint
 80029a2:	4b45      	ldr	r3, [pc, #276]	@ (8002ab8 <QEIEncoderPosVel_Update+0x1f8>)
 80029a4:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80029a8:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 80029ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80029b0:	4b41      	ldr	r3, [pc, #260]	@ (8002ab8 <QEIEncoderPosVel_Update+0x1f8>)
 80029b2:	edd3 7a06 	vldr	s15, [r3, #24]
 80029b6:	eef2 6a0c 	vmov.f32	s13, #44	@ 0x41600000  14.0
 80029ba:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80029be:	ed9f 6a42 	vldr	s12, [pc, #264]	@ 8002ac8 <QEIEncoderPosVel_Update+0x208>
 80029c2:	eec6 7a86 	vdiv.f32	s15, s13, s12
 80029c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ca:	4b3b      	ldr	r3, [pc, #236]	@ (8002ab8 <QEIEncoderPosVel_Update+0x1f8>)
 80029cc:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

			//calculate dt
	float diffTime = (QEIdata.TimeStamp[NEW] - QEIdata.TimeStamp[OLD])
 80029d0:	4b39      	ldr	r3, [pc, #228]	@ (8002ab8 <QEIEncoderPosVel_Update+0x1f8>)
 80029d2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80029d6:	4b38      	ldr	r3, [pc, #224]	@ (8002ab8 <QEIEncoderPosVel_Update+0x1f8>)
 80029d8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80029dc:	1a84      	subs	r4, r0, r2
 80029de:	eb61 0503 	sbc.w	r5, r1, r3
			* 1e-6;
 80029e2:	4620      	mov	r0, r4
 80029e4:	4629      	mov	r1, r5
 80029e6:	f7fd fd9d 	bl	8000524 <__aeabi_ul2d>
 80029ea:	a331      	add	r3, pc, #196	@ (adr r3, 8002ab0 <QEIEncoderPosVel_Update+0x1f0>)
 80029ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029f0:	f7fd fdce 	bl	8000590 <__aeabi_dmul>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
	float diffTime = (QEIdata.TimeStamp[NEW] - QEIdata.TimeStamp[OLD])
 80029f8:	4610      	mov	r0, r2
 80029fa:	4619      	mov	r1, r3
 80029fc:	f7fe f8aa 	bl	8000b54 <__aeabi_d2f>
 8002a00:	4603      	mov	r3, r0
 8002a02:	607b      	str	r3, [r7, #4]

	//calculate angular velocity
	QEIdata.QEIAngularVelocity = diffPosition / diffTime;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	ee07 3a90 	vmov	s15, r3
 8002a0a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002a0e:	ed97 7a01 	vldr	s14, [r7, #4]
 8002a12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a16:	4b28      	ldr	r3, [pc, #160]	@ (8002ab8 <QEIEncoderPosVel_Update+0x1f8>)
 8002a18:	edc3 7a08 	vstr	s15, [r3, #32]
	velodegree = QEIdata.QEIAngularVelocity;
 8002a1c:	4b26      	ldr	r3, [pc, #152]	@ (8002ab8 <QEIEncoderPosVel_Update+0x1f8>)
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	4a2b      	ldr	r2, [pc, #172]	@ (8002ad0 <QEIEncoderPosVel_Update+0x210>)
 8002a22:	6013      	str	r3, [r2, #0]
	velodegree = (velodegree * 60) / 800;
 8002a24:	4b2a      	ldr	r3, [pc, #168]	@ (8002ad0 <QEIEncoderPosVel_Update+0x210>)
 8002a26:	edd3 7a00 	vldr	s15, [r3]
 8002a2a:	ed9f 7a2a 	vldr	s14, [pc, #168]	@ 8002ad4 <QEIEncoderPosVel_Update+0x214>
 8002a2e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a32:	eddf 6a25 	vldr	s13, [pc, #148]	@ 8002ac8 <QEIEncoderPosVel_Update+0x208>
 8002a36:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a3a:	4b25      	ldr	r3, [pc, #148]	@ (8002ad0 <QEIEncoderPosVel_Update+0x210>)
 8002a3c:	edc3 7a00 	vstr	s15, [r3]
	linearspeed[NEW] = velodegree * 14 / 60.0;
 8002a40:	4b23      	ldr	r3, [pc, #140]	@ (8002ad0 <QEIEncoderPosVel_Update+0x210>)
 8002a42:	edd3 7a00 	vldr	s15, [r3]
 8002a46:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 8002a4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002a4e:	eddf 6a21 	vldr	s13, [pc, #132]	@ 8002ad4 <QEIEncoderPosVel_Update+0x214>
 8002a52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002a56:	4b20      	ldr	r3, [pc, #128]	@ (8002ad8 <QEIEncoderPosVel_Update+0x218>)
 8002a58:	edc3 7a00 	vstr	s15, [r3]


	float diffVel = linearspeed[NEW] - linearspeed[OLD];
 8002a5c:	4b1e      	ldr	r3, [pc, #120]	@ (8002ad8 <QEIEncoderPosVel_Update+0x218>)
 8002a5e:	ed93 7a00 	vldr	s14, [r3]
 8002a62:	4b1d      	ldr	r3, [pc, #116]	@ (8002ad8 <QEIEncoderPosVel_Update+0x218>)
 8002a64:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a6c:	edc7 7a00 	vstr	s15, [r7]
	linearacc = diffVel/diffTime;
 8002a70:	edd7 6a00 	vldr	s13, [r7]
 8002a74:	ed97 7a01 	vldr	s14, [r7, #4]
 8002a78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a7c:	4b17      	ldr	r3, [pc, #92]	@ (8002adc <QEIEncoderPosVel_Update+0x21c>)
 8002a7e:	edc3 7a00 	vstr	s15, [r3]
	//store value for next loop
	QEIdata.Position[OLD] = QEIdata.Position[NEW];
 8002a82:	4b0d      	ldr	r3, [pc, #52]	@ (8002ab8 <QEIEncoderPosVel_Update+0x1f8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a0c      	ldr	r2, [pc, #48]	@ (8002ab8 <QEIEncoderPosVel_Update+0x1f8>)
 8002a88:	6053      	str	r3, [r2, #4]
	QEIdata.TimeStamp[OLD] = QEIdata.TimeStamp[NEW];
 8002a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab8 <QEIEncoderPosVel_Update+0x1f8>)
 8002a8c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002a90:	4909      	ldr	r1, [pc, #36]	@ (8002ab8 <QEIEncoderPosVel_Update+0x1f8>)
 8002a92:	e9c1 2304 	strd	r2, r3, [r1, #16]
	QEIdata.QEIPostion_1turn[OLD] = QEIdata.QEIPostion_1turn[NEW];
 8002a96:	4b08      	ldr	r3, [pc, #32]	@ (8002ab8 <QEIEncoderPosVel_Update+0x1f8>)
 8002a98:	699b      	ldr	r3, [r3, #24]
 8002a9a:	4a07      	ldr	r2, [pc, #28]	@ (8002ab8 <QEIEncoderPosVel_Update+0x1f8>)
 8002a9c:	61d3      	str	r3, [r2, #28]
	linearspeed[OLD] = linearspeed[NEW];
 8002a9e:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad8 <QEIEncoderPosVel_Update+0x218>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a0d      	ldr	r2, [pc, #52]	@ (8002ad8 <QEIEncoderPosVel_Update+0x218>)
 8002aa4:	6053      	str	r3, [r2, #4]

}
 8002aa6:	bf00      	nop
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bdb0      	pop	{r4, r5, r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	a0b5ed8d 	.word	0xa0b5ed8d
 8002ab4:	3eb0c6f7 	.word	0x3eb0c6f7
 8002ab8:	200008c0 	.word	0x200008c0
 8002abc:	200003d8 	.word	0x200003d8
 8002ac0:	51eb851f 	.word	0x51eb851f
 8002ac4:	43b40000 	.word	0x43b40000
 8002ac8:	44480000 	.word	0x44480000
 8002acc:	ffff8170 	.word	0xffff8170
 8002ad0:	200008bc 	.word	0x200008bc
 8002ad4:	42700000 	.word	0x42700000
 8002ad8:	200008a0 	.word	0x200008a0
 8002adc:	200008a8 	.word	0x200008a8

08002ae0 <ReadLogicConv>:

void ReadLogicConv() {
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
	Lo1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0); //Lo1 Pull
 8002ae4:	2101      	movs	r1, #1
 8002ae6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002aea:	f002 f8df 	bl	8004cac <HAL_GPIO_ReadPin>
 8002aee:	4603      	mov	r3, r0
 8002af0:	461a      	mov	r2, r3
 8002af2:	4b1a      	ldr	r3, [pc, #104]	@ (8002b5c <ReadLogicConv+0x7c>)
 8002af4:	701a      	strb	r2, [r3, #0]
	Lo2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1); //Lo2 Push
 8002af6:	2102      	movs	r1, #2
 8002af8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002afc:	f002 f8d6 	bl	8004cac <HAL_GPIO_ReadPin>
 8002b00:	4603      	mov	r3, r0
 8002b02:	461a      	mov	r2, r3
 8002b04:	4b16      	ldr	r3, [pc, #88]	@ (8002b60 <ReadLogicConv+0x80>)
 8002b06:	701a      	strb	r2, [r3, #0]
	Lo3 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4); //Lo3
 8002b08:	2110      	movs	r1, #16
 8002b0a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002b0e:	f002 f8cd 	bl	8004cac <HAL_GPIO_ReadPin>
 8002b12:	4603      	mov	r3, r0
 8002b14:	461a      	mov	r2, r3
 8002b16:	4b13      	ldr	r3, [pc, #76]	@ (8002b64 <ReadLogicConv+0x84>)
 8002b18:	701a      	strb	r2, [r3, #0]
	Lo4 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0); //Lo4
 8002b1a:	2101      	movs	r1, #1
 8002b1c:	4812      	ldr	r0, [pc, #72]	@ (8002b68 <ReadLogicConv+0x88>)
 8002b1e:	f002 f8c5 	bl	8004cac <HAL_GPIO_ReadPin>
 8002b22:	4603      	mov	r3, r0
 8002b24:	461a      	mov	r2, r3
 8002b26:	4b11      	ldr	r3, [pc, #68]	@ (8002b6c <ReadLogicConv+0x8c>)
 8002b28:	701a      	strb	r2, [r3, #0]
	if(Lo1 == 0 && Lo2 == 1){ //Push
 8002b2a:	4b0c      	ldr	r3, [pc, #48]	@ (8002b5c <ReadLogicConv+0x7c>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d107      	bne.n	8002b42 <ReadLogicConv+0x62>
 8002b32:	4b0b      	ldr	r3, [pc, #44]	@ (8002b60 <ReadLogicConv+0x80>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d103      	bne.n	8002b42 <ReadLogicConv+0x62>
		ActualGripper = 1;
 8002b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8002b70 <ReadLogicConv+0x90>)
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	701a      	strb	r2, [r3, #0]
	}else if(Lo1 == 1 && Lo2 == 0){ //Pull
		ActualGripper = 0;
	}
}
 8002b40:	e00a      	b.n	8002b58 <ReadLogicConv+0x78>
	}else if(Lo1 == 1 && Lo2 == 0){ //Pull
 8002b42:	4b06      	ldr	r3, [pc, #24]	@ (8002b5c <ReadLogicConv+0x7c>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d106      	bne.n	8002b58 <ReadLogicConv+0x78>
 8002b4a:	4b05      	ldr	r3, [pc, #20]	@ (8002b60 <ReadLogicConv+0x80>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d102      	bne.n	8002b58 <ReadLogicConv+0x78>
		ActualGripper = 0;
 8002b52:	4b07      	ldr	r3, [pc, #28]	@ (8002b70 <ReadLogicConv+0x90>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	701a      	strb	r2, [r3, #0]
}
 8002b58:	bf00      	nop
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	200008f0 	.word	0x200008f0
 8002b60:	200008f1 	.word	0x200008f1
 8002b64:	200008f2 	.word	0x200008f2
 8002b68:	48000400 	.word	0x48000400
 8002b6c:	20000204 	.word	0x20000204
 8002b70:	20000faf 	.word	0x20000faf

08002b74 <ReadButton>:
void ReadButton() {
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
	bt1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8); //BT1
 8002b78:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002b7c:	4817      	ldr	r0, [pc, #92]	@ (8002bdc <ReadButton+0x68>)
 8002b7e:	f002 f895 	bl	8004cac <HAL_GPIO_ReadPin>
 8002b82:	4603      	mov	r3, r0
 8002b84:	461a      	mov	r2, r3
 8002b86:	4b16      	ldr	r3, [pc, #88]	@ (8002be0 <ReadButton+0x6c>)
 8002b88:	701a      	strb	r2, [r3, #0]
	bt2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9); //BT2
 8002b8a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002b8e:	4813      	ldr	r0, [pc, #76]	@ (8002bdc <ReadButton+0x68>)
 8002b90:	f002 f88c 	bl	8004cac <HAL_GPIO_ReadPin>
 8002b94:	4603      	mov	r3, r0
 8002b96:	461a      	mov	r2, r3
 8002b98:	4b12      	ldr	r3, [pc, #72]	@ (8002be4 <ReadButton+0x70>)
 8002b9a:	701a      	strb	r2, [r3, #0]
	bt3 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8); //BT3
 8002b9c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002ba0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002ba4:	f002 f882 	bl	8004cac <HAL_GPIO_ReadPin>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	461a      	mov	r2, r3
 8002bac:	4b0e      	ldr	r3, [pc, #56]	@ (8002be8 <ReadButton+0x74>)
 8002bae:	701a      	strb	r2, [r3, #0]
	bt4 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9); //BT4
 8002bb0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002bb4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bb8:	f002 f878 	bl	8004cac <HAL_GPIO_ReadPin>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	461a      	mov	r2, r3
 8002bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8002bec <ReadButton+0x78>)
 8002bc2:	701a      	strb	r2, [r3, #0]
	bt5 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10); //BT5
 8002bc4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002bc8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002bcc:	f002 f86e 	bl	8004cac <HAL_GPIO_ReadPin>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	4b06      	ldr	r3, [pc, #24]	@ (8002bf0 <ReadButton+0x7c>)
 8002bd6:	701a      	strb	r2, [r3, #0]
}
 8002bd8:	bf00      	nop
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	48000800 	.word	0x48000800
 8002be0:	200008f3 	.word	0x200008f3
 8002be4:	200008f4 	.word	0x200008f4
 8002be8:	200008f5 	.word	0x200008f5
 8002bec:	200008f6 	.word	0x200008f6
 8002bf0:	200008f7 	.word	0x200008f7
 8002bf4:	00000000 	.word	0x00000000

08002bf8 <MotorDrive>:


void MotorDrive() {
 8002bf8:	b5b0      	push	{r4, r5, r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
	if (MotorDriveFlag == 0) {
 8002bfe:	4bba      	ldr	r3, [pc, #744]	@ (8002ee8 <MotorDrive+0x2f0>)
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d124      	bne.n	8002c50 <MotorDrive+0x58>
		// Start: This box of code run only one time.
		StartTotalPos = QEIdata.TotalPos;
 8002c06:	4bb9      	ldr	r3, [pc, #740]	@ (8002eec <MotorDrive+0x2f4>)
 8002c08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c0a:	4ab9      	ldr	r2, [pc, #740]	@ (8002ef0 <MotorDrive+0x2f8>)
 8002c0c:	6013      	str	r3, [r2, #0]
		MotorDriveTravelDistance = Goal - QEIdata.TotalPos;
 8002c0e:	4bb9      	ldr	r3, [pc, #740]	@ (8002ef4 <MotorDrive+0x2fc>)
 8002c10:	ed93 7a00 	vldr	s14, [r3]
 8002c14:	4bb5      	ldr	r3, [pc, #724]	@ (8002eec <MotorDrive+0x2f4>)
 8002c16:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c1e:	4bb6      	ldr	r3, [pc, #728]	@ (8002ef8 <MotorDrive+0x300>)
 8002c20:	edc3 7a00 	vstr	s15, [r3]
		MotorDriveDampDistance = MotorDriveTravelDistance * 0.2;
 8002c24:	4bb4      	ldr	r3, [pc, #720]	@ (8002ef8 <MotorDrive+0x300>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7fd fc59 	bl	80004e0 <__aeabi_f2d>
 8002c2e:	a3a8      	add	r3, pc, #672	@ (adr r3, 8002ed0 <MotorDrive+0x2d8>)
 8002c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c34:	f7fd fcac 	bl	8000590 <__aeabi_dmul>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	4619      	mov	r1, r3
 8002c40:	f7fd ff88 	bl	8000b54 <__aeabi_d2f>
 8002c44:	4603      	mov	r3, r0
 8002c46:	4aad      	ldr	r2, [pc, #692]	@ (8002efc <MotorDrive+0x304>)
 8002c48:	6013      	str	r3, [r2, #0]
		// End
		MotorDriveFlag = 1;
 8002c4a:	4ba7      	ldr	r3, [pc, #668]	@ (8002ee8 <MotorDrive+0x2f0>)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	701a      	strb	r2, [r3, #0]
	}

	float PosNow = QEIdata.TotalPos - StartTotalPos;
 8002c50:	4ba6      	ldr	r3, [pc, #664]	@ (8002eec <MotorDrive+0x2f4>)
 8002c52:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002c56:	4ba6      	ldr	r3, [pc, #664]	@ (8002ef0 <MotorDrive+0x2f8>)
 8002c58:	edd3 7a00 	vldr	s15, [r3]
 8002c5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c60:	edc7 7a00 	vstr	s15, [r7]

	if((MotorDriveTravelDistance-PosNow) > 0.1 || ((MotorDriveTravelDistance-PosNow) < -0.1)){
 8002c64:	4ba4      	ldr	r3, [pc, #656]	@ (8002ef8 <MotorDrive+0x300>)
 8002c66:	ed93 7a00 	vldr	s14, [r3]
 8002c6a:	edd7 7a00 	vldr	s15, [r7]
 8002c6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c72:	ee17 0a90 	vmov	r0, s15
 8002c76:	f7fd fc33 	bl	80004e0 <__aeabi_f2d>
 8002c7a:	a397      	add	r3, pc, #604	@ (adr r3, 8002ed8 <MotorDrive+0x2e0>)
 8002c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c80:	f7fd ff16 	bl	8000ab0 <__aeabi_dcmpgt>
 8002c84:	4603      	mov	r3, r0
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d113      	bne.n	8002cb2 <MotorDrive+0xba>
 8002c8a:	4b9b      	ldr	r3, [pc, #620]	@ (8002ef8 <MotorDrive+0x300>)
 8002c8c:	ed93 7a00 	vldr	s14, [r3]
 8002c90:	edd7 7a00 	vldr	s15, [r7]
 8002c94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c98:	ee17 0a90 	vmov	r0, s15
 8002c9c:	f7fd fc20 	bl	80004e0 <__aeabi_f2d>
 8002ca0:	a38f      	add	r3, pc, #572	@ (adr r3, 8002ee0 <MotorDrive+0x2e8>)
 8002ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca6:	f7fd fee5 	bl	8000a74 <__aeabi_dcmplt>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	f000 8210 	beq.w	80030d2 <MotorDrive+0x4da>
		Arrived = 0;
 8002cb2:	4b93      	ldr	r3, [pc, #588]	@ (8002f00 <MotorDrive+0x308>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	701a      	strb	r2, [r3, #0]
		b_check[8] = PosNow;
 8002cb8:	4a92      	ldr	r2, [pc, #584]	@ (8002f04 <MotorDrive+0x30c>)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	6213      	str	r3, [r2, #32]
		int8_t DriveDirection = 1; // direction is 1 if up, -1 if down.
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	71fb      	strb	r3, [r7, #7]
		if (Goal <= StartTotalPos) {
 8002cc2:	4b8c      	ldr	r3, [pc, #560]	@ (8002ef4 <MotorDrive+0x2fc>)
 8002cc4:	ed93 7a00 	vldr	s14, [r3]
 8002cc8:	4b89      	ldr	r3, [pc, #548]	@ (8002ef0 <MotorDrive+0x2f8>)
 8002cca:	edd3 7a00 	vldr	s15, [r3]
 8002cce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cd6:	d805      	bhi.n	8002ce4 <MotorDrive+0xec>
			DriveDirection = -1;
 8002cd8:	23ff      	movs	r3, #255	@ 0xff
 8002cda:	71fb      	strb	r3, [r7, #7]
			b_check[7] = 1;
 8002cdc:	4b89      	ldr	r3, [pc, #548]	@ (8002f04 <MotorDrive+0x30c>)
 8002cde:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002ce2:	61da      	str	r2, [r3, #28]
		}

		// Trajectory generator
		if(DriveDirection == -1){
 8002ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cec:	f040 8096 	bne.w	8002e1c <MotorDrive+0x224>
			if ((PosNow <= MotorDriveDampDistance) && (PosNow >= MotorDriveTravelDistance-MotorDriveDampDistance)) { // Middle
 8002cf0:	4b82      	ldr	r3, [pc, #520]	@ (8002efc <MotorDrive+0x304>)
 8002cf2:	edd3 7a00 	vldr	s15, [r3]
 8002cf6:	ed97 7a00 	vldr	s14, [r7]
 8002cfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d02:	d816      	bhi.n	8002d32 <MotorDrive+0x13a>
 8002d04:	4b7c      	ldr	r3, [pc, #496]	@ (8002ef8 <MotorDrive+0x300>)
 8002d06:	ed93 7a00 	vldr	s14, [r3]
 8002d0a:	4b7c      	ldr	r3, [pc, #496]	@ (8002efc <MotorDrive+0x304>)
 8002d0c:	edd3 7a00 	vldr	s15, [r3]
 8002d10:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d14:	ed97 7a00 	vldr	s14, [r7]
 8002d18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d20:	db07      	blt.n	8002d32 <MotorDrive+0x13a>
				RealVfeedback = 10;
 8002d22:	4b79      	ldr	r3, [pc, #484]	@ (8002f08 <MotorDrive+0x310>)
 8002d24:	4a79      	ldr	r2, [pc, #484]	@ (8002f0c <MotorDrive+0x314>)
 8002d26:	601a      	str	r2, [r3, #0]
				b_check[6]= 1;
 8002d28:	4b76      	ldr	r3, [pc, #472]	@ (8002f04 <MotorDrive+0x30c>)
 8002d2a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002d2e:	619a      	str	r2, [r3, #24]
 8002d30:	e074      	b.n	8002e1c <MotorDrive+0x224>
			} else if (PosNow > MotorDriveDampDistance) { // Start
 8002d32:	4b72      	ldr	r3, [pc, #456]	@ (8002efc <MotorDrive+0x304>)
 8002d34:	edd3 7a00 	vldr	s15, [r3]
 8002d38:	ed97 7a00 	vldr	s14, [r7]
 8002d3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d44:	dd32      	ble.n	8002dac <MotorDrive+0x1b4>
				//RealVfeedback = 1.5;
				RealVfeedback = (fabs(PosNow)+1)*13 / MotorDriveTravelDistance;
 8002d46:	edd7 7a00 	vldr	s15, [r7]
 8002d4a:	eef0 7ae7 	vabs.f32	s15, s15
 8002d4e:	ee17 0a90 	vmov	r0, s15
 8002d52:	f7fd fbc5 	bl	80004e0 <__aeabi_f2d>
 8002d56:	f04f 0200 	mov.w	r2, #0
 8002d5a:	4b6d      	ldr	r3, [pc, #436]	@ (8002f10 <MotorDrive+0x318>)
 8002d5c:	f7fd fa62 	bl	8000224 <__adddf3>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4610      	mov	r0, r2
 8002d66:	4619      	mov	r1, r3
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	4b69      	ldr	r3, [pc, #420]	@ (8002f14 <MotorDrive+0x31c>)
 8002d6e:	f7fd fc0f 	bl	8000590 <__aeabi_dmul>
 8002d72:	4602      	mov	r2, r0
 8002d74:	460b      	mov	r3, r1
 8002d76:	4614      	mov	r4, r2
 8002d78:	461d      	mov	r5, r3
 8002d7a:	4b5f      	ldr	r3, [pc, #380]	@ (8002ef8 <MotorDrive+0x300>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7fd fbae 	bl	80004e0 <__aeabi_f2d>
 8002d84:	4602      	mov	r2, r0
 8002d86:	460b      	mov	r3, r1
 8002d88:	4620      	mov	r0, r4
 8002d8a:	4629      	mov	r1, r5
 8002d8c:	f7fd fd2a 	bl	80007e4 <__aeabi_ddiv>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4610      	mov	r0, r2
 8002d96:	4619      	mov	r1, r3
 8002d98:	f7fd fedc 	bl	8000b54 <__aeabi_d2f>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	4a5a      	ldr	r2, [pc, #360]	@ (8002f08 <MotorDrive+0x310>)
 8002da0:	6013      	str	r3, [r2, #0]
				b_check[6]= 2;
 8002da2:	4b58      	ldr	r3, [pc, #352]	@ (8002f04 <MotorDrive+0x30c>)
 8002da4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002da8:	619a      	str	r2, [r3, #24]
 8002daa:	e037      	b.n	8002e1c <MotorDrive+0x224>
			}  else if (PosNow <= MotorDriveTravelDistance) {  //Hard Stop
 8002dac:	4b52      	ldr	r3, [pc, #328]	@ (8002ef8 <MotorDrive+0x300>)
 8002dae:	edd3 7a00 	vldr	s15, [r3]
 8002db2:	ed97 7a00 	vldr	s14, [r7]
 8002db6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002dba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dbe:	d807      	bhi.n	8002dd0 <MotorDrive+0x1d8>
				RealVfeedback = 0;
 8002dc0:	4b51      	ldr	r3, [pc, #324]	@ (8002f08 <MotorDrive+0x310>)
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	601a      	str	r2, [r3, #0]
				b_check[6]= 3;
 8002dc8:	4b4e      	ldr	r3, [pc, #312]	@ (8002f04 <MotorDrive+0x30c>)
 8002dca:	4a53      	ldr	r2, [pc, #332]	@ (8002f18 <MotorDrive+0x320>)
 8002dcc:	619a      	str	r2, [r3, #24]
 8002dce:	e025      	b.n	8002e1c <MotorDrive+0x224>
			} else if (PosNow < MotorDriveTravelDistance - MotorDriveDampDistance) {  //Stop
 8002dd0:	4b49      	ldr	r3, [pc, #292]	@ (8002ef8 <MotorDrive+0x300>)
 8002dd2:	ed93 7a00 	vldr	s14, [r3]
 8002dd6:	4b49      	ldr	r3, [pc, #292]	@ (8002efc <MotorDrive+0x304>)
 8002dd8:	edd3 7a00 	vldr	s15, [r3]
 8002ddc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002de0:	ed97 7a00 	vldr	s14, [r7]
 8002de4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dec:	d516      	bpl.n	8002e1c <MotorDrive+0x224>
				//RealVfeedback = 1.5;
				RealVfeedback = (MotorDriveTravelDistance-PosNow)*10 / MotorDriveTravelDistance;
 8002dee:	4b42      	ldr	r3, [pc, #264]	@ (8002ef8 <MotorDrive+0x300>)
 8002df0:	ed93 7a00 	vldr	s14, [r3]
 8002df4:	edd7 7a00 	vldr	s15, [r7]
 8002df8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dfc:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002e00:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002e04:	4b3c      	ldr	r3, [pc, #240]	@ (8002ef8 <MotorDrive+0x300>)
 8002e06:	ed93 7a00 	vldr	s14, [r3]
 8002e0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e0e:	4b3e      	ldr	r3, [pc, #248]	@ (8002f08 <MotorDrive+0x310>)
 8002e10:	edc3 7a00 	vstr	s15, [r3]
				b_check[6]= 4;
 8002e14:	4b3b      	ldr	r3, [pc, #236]	@ (8002f04 <MotorDrive+0x30c>)
 8002e16:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8002e1a:	619a      	str	r2, [r3, #24]
			}
		}
		if(DriveDirection == 1){
 8002e1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	f040 80a9 	bne.w	8002f78 <MotorDrive+0x380>
			if ((PosNow >= MotorDriveDampDistance) && (PosNow <= MotorDriveTravelDistance-MotorDriveDampDistance)) { // Middle
 8002e26:	4b35      	ldr	r3, [pc, #212]	@ (8002efc <MotorDrive+0x304>)
 8002e28:	edd3 7a00 	vldr	s15, [r3]
 8002e2c:	ed97 7a00 	vldr	s14, [r7]
 8002e30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e38:	db15      	blt.n	8002e66 <MotorDrive+0x26e>
 8002e3a:	4b2f      	ldr	r3, [pc, #188]	@ (8002ef8 <MotorDrive+0x300>)
 8002e3c:	ed93 7a00 	vldr	s14, [r3]
 8002e40:	4b2e      	ldr	r3, [pc, #184]	@ (8002efc <MotorDrive+0x304>)
 8002e42:	edd3 7a00 	vldr	s15, [r3]
 8002e46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e4a:	ed97 7a00 	vldr	s14, [r7]
 8002e4e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e56:	d806      	bhi.n	8002e66 <MotorDrive+0x26e>
				RealVfeedback = 12;
 8002e58:	4b2b      	ldr	r3, [pc, #172]	@ (8002f08 <MotorDrive+0x310>)
 8002e5a:	4a30      	ldr	r2, [pc, #192]	@ (8002f1c <MotorDrive+0x324>)
 8002e5c:	601a      	str	r2, [r3, #0]
				b_check[6]= 5;
 8002e5e:	4b29      	ldr	r3, [pc, #164]	@ (8002f04 <MotorDrive+0x30c>)
 8002e60:	4a2f      	ldr	r2, [pc, #188]	@ (8002f20 <MotorDrive+0x328>)
 8002e62:	619a      	str	r2, [r3, #24]
 8002e64:	e088      	b.n	8002f78 <MotorDrive+0x380>
			} else if (PosNow < MotorDriveDampDistance) { // Start
 8002e66:	4b25      	ldr	r3, [pc, #148]	@ (8002efc <MotorDrive+0x304>)
 8002e68:	edd3 7a00 	vldr	s15, [r3]
 8002e6c:	ed97 7a00 	vldr	s14, [r7]
 8002e70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e78:	d515      	bpl.n	8002ea6 <MotorDrive+0x2ae>
				//RealVfeedback = 2;
				RealVfeedback = (PosNow+1) * 12/ MotorDriveDampDistance;
 8002e7a:	edd7 7a00 	vldr	s15, [r7]
 8002e7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e82:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002e86:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8002e8a:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002e8e:	4b1b      	ldr	r3, [pc, #108]	@ (8002efc <MotorDrive+0x304>)
 8002e90:	ed93 7a00 	vldr	s14, [r3]
 8002e94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e98:	4b1b      	ldr	r3, [pc, #108]	@ (8002f08 <MotorDrive+0x310>)
 8002e9a:	edc3 7a00 	vstr	s15, [r3]
				b_check[6]= 6;
 8002e9e:	4b19      	ldr	r3, [pc, #100]	@ (8002f04 <MotorDrive+0x30c>)
 8002ea0:	4a20      	ldr	r2, [pc, #128]	@ (8002f24 <MotorDrive+0x32c>)
 8002ea2:	619a      	str	r2, [r3, #24]
 8002ea4:	e068      	b.n	8002f78 <MotorDrive+0x380>
			} else if (PosNow > MotorDriveTravelDistance) {  //Hard Stop
 8002ea6:	4b14      	ldr	r3, [pc, #80]	@ (8002ef8 <MotorDrive+0x300>)
 8002ea8:	edd3 7a00 	vldr	s15, [r3]
 8002eac:	ed97 7a00 	vldr	s14, [r7]
 8002eb0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb8:	dd38      	ble.n	8002f2c <MotorDrive+0x334>
				RealVfeedback = 0;
 8002eba:	4b13      	ldr	r3, [pc, #76]	@ (8002f08 <MotorDrive+0x310>)
 8002ebc:	f04f 0200 	mov.w	r2, #0
 8002ec0:	601a      	str	r2, [r3, #0]
				b_check[6]= 7;
 8002ec2:	4b10      	ldr	r3, [pc, #64]	@ (8002f04 <MotorDrive+0x30c>)
 8002ec4:	4a18      	ldr	r2, [pc, #96]	@ (8002f28 <MotorDrive+0x330>)
 8002ec6:	619a      	str	r2, [r3, #24]
 8002ec8:	e056      	b.n	8002f78 <MotorDrive+0x380>
 8002eca:	bf00      	nop
 8002ecc:	f3af 8000 	nop.w
 8002ed0:	9999999a 	.word	0x9999999a
 8002ed4:	3fc99999 	.word	0x3fc99999
 8002ed8:	9999999a 	.word	0x9999999a
 8002edc:	3fb99999 	.word	0x3fb99999
 8002ee0:	9999999a 	.word	0x9999999a
 8002ee4:	bfb99999 	.word	0xbfb99999
 8002ee8:	20001008 	.word	0x20001008
 8002eec:	200008c0 	.word	0x200008c0
 8002ef0:	20001014 	.word	0x20001014
 8002ef4:	20000900 	.word	0x20000900
 8002ef8:	20001010 	.word	0x20001010
 8002efc:	2000100c 	.word	0x2000100c
 8002f00:	20000fdc 	.word	0x20000fdc
 8002f04:	20000fe0 	.word	0x20000fe0
 8002f08:	200008fc 	.word	0x200008fc
 8002f0c:	41200000 	.word	0x41200000
 8002f10:	3ff00000 	.word	0x3ff00000
 8002f14:	402a0000 	.word	0x402a0000
 8002f18:	40400000 	.word	0x40400000
 8002f1c:	41400000 	.word	0x41400000
 8002f20:	40a00000 	.word	0x40a00000
 8002f24:	40c00000 	.word	0x40c00000
 8002f28:	40e00000 	.word	0x40e00000
			} else if (PosNow > MotorDriveTravelDistance - MotorDriveDampDistance) {  //Stop
 8002f2c:	4b74      	ldr	r3, [pc, #464]	@ (8003100 <MotorDrive+0x508>)
 8002f2e:	ed93 7a00 	vldr	s14, [r3]
 8002f32:	4b74      	ldr	r3, [pc, #464]	@ (8003104 <MotorDrive+0x50c>)
 8002f34:	edd3 7a00 	vldr	s15, [r3]
 8002f38:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f3c:	ed97 7a00 	vldr	s14, [r7]
 8002f40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002f44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f48:	dd16      	ble.n	8002f78 <MotorDrive+0x380>
				//RealVfeedback = 1.5;
				RealVfeedback = (MotorDriveTravelDistance-PosNow) * 12 / MotorDriveDampDistance;
 8002f4a:	4b6d      	ldr	r3, [pc, #436]	@ (8003100 <MotorDrive+0x508>)
 8002f4c:	ed93 7a00 	vldr	s14, [r3]
 8002f50:	edd7 7a00 	vldr	s15, [r7]
 8002f54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f58:	eeb2 7a08 	vmov.f32	s14, #40	@ 0x41400000  12.0
 8002f5c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8002f60:	4b68      	ldr	r3, [pc, #416]	@ (8003104 <MotorDrive+0x50c>)
 8002f62:	ed93 7a00 	vldr	s14, [r3]
 8002f66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f6a:	4b67      	ldr	r3, [pc, #412]	@ (8003108 <MotorDrive+0x510>)
 8002f6c:	edc3 7a00 	vstr	s15, [r3]
				b_check[6]= 8;
 8002f70:	4b66      	ldr	r3, [pc, #408]	@ (800310c <MotorDrive+0x514>)
 8002f72:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 8002f76:	619a      	str	r2, [r3, #24]
			}
		}

		PIDVFeedback = Update_pid(&pid_control, MotorDriveTravelDistance-PosNow, 10, 12);
 8002f78:	4b61      	ldr	r3, [pc, #388]	@ (8003100 <MotorDrive+0x508>)
 8002f7a:	ed93 7a00 	vldr	s14, [r3]
 8002f7e:	edd7 7a00 	vldr	s15, [r7]
 8002f82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f86:	eeb2 1a08 	vmov.f32	s2, #40	@ 0x41400000  12.0
 8002f8a:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 8002f8e:	eeb0 0a67 	vmov.f32	s0, s15
 8002f92:	485f      	ldr	r0, [pc, #380]	@ (8003110 <MotorDrive+0x518>)
 8002f94:	f000 fc48 	bl	8003828 <Update_pid>
 8002f98:	ee07 0a90 	vmov	s15, r0
 8002f9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fa0:	4b5c      	ldr	r3, [pc, #368]	@ (8003114 <MotorDrive+0x51c>)
 8002fa2:	edc3 7a00 	vstr	s15, [r3]

		if (fabs(PIDVFeedback) < fabs(RealVfeedback)) {
 8002fa6:	4b5b      	ldr	r3, [pc, #364]	@ (8003114 <MotorDrive+0x51c>)
 8002fa8:	edd3 7a00 	vldr	s15, [r3]
 8002fac:	eeb0 7ae7 	vabs.f32	s14, s15
 8002fb0:	4b55      	ldr	r3, [pc, #340]	@ (8003108 <MotorDrive+0x510>)
 8002fb2:	edd3 7a00 	vldr	s15, [r3]
 8002fb6:	eef0 7ae7 	vabs.f32	s15, s15
 8002fba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc2:	d503      	bpl.n	8002fcc <MotorDrive+0x3d4>
			RealVfeedback = PIDVFeedback;
 8002fc4:	4b53      	ldr	r3, [pc, #332]	@ (8003114 <MotorDrive+0x51c>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a4f      	ldr	r2, [pc, #316]	@ (8003108 <MotorDrive+0x510>)
 8002fca:	6013      	str	r3, [r2, #0]
		}

		RealVfeedback = RealVfeedback * DriveDirection;
 8002fcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd0:	ee07 3a90 	vmov	s15, r3
 8002fd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fd8:	4b4b      	ldr	r3, [pc, #300]	@ (8003108 <MotorDrive+0x510>)
 8002fda:	edd3 7a00 	vldr	s15, [r3]
 8002fde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fe2:	4b49      	ldr	r3, [pc, #292]	@ (8003108 <MotorDrive+0x510>)
 8002fe4:	edc3 7a00 	vstr	s15, [r3]


		if (DriveDirection == 1) {  //go up
 8002fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d109      	bne.n	8003004 <MotorDrive+0x40c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2108      	movs	r1, #8
 8002ff4:	4848      	ldr	r0, [pc, #288]	@ (8003118 <MotorDrive+0x520>)
 8002ff6:	f001 fe71 	bl	8004cdc <HAL_GPIO_WritePin>
			b_check[9]= 4;
 8002ffa:	4b44      	ldr	r3, [pc, #272]	@ (800310c <MotorDrive+0x514>)
 8002ffc:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8003000:	625a      	str	r2, [r3, #36]	@ 0x24
 8003002:	e00f      	b.n	8003024 <MotorDrive+0x42c>
		} else {  //go down
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8003004:	2201      	movs	r2, #1
 8003006:	2108      	movs	r1, #8
 8003008:	4843      	ldr	r0, [pc, #268]	@ (8003118 <MotorDrive+0x520>)
 800300a:	f001 fe67 	bl	8004cdc <HAL_GPIO_WritePin>
			RealVfeedback = RealVfeedback * (-1);
 800300e:	4b3e      	ldr	r3, [pc, #248]	@ (8003108 <MotorDrive+0x510>)
 8003010:	edd3 7a00 	vldr	s15, [r3]
 8003014:	eef1 7a67 	vneg.f32	s15, s15
 8003018:	4b3b      	ldr	r3, [pc, #236]	@ (8003108 <MotorDrive+0x510>)
 800301a:	edc3 7a00 	vstr	s15, [r3]
			b_check[9]= 5;
 800301e:	4b3b      	ldr	r3, [pc, #236]	@ (800310c <MotorDrive+0x514>)
 8003020:	4a3e      	ldr	r2, [pc, #248]	@ (800311c <MotorDrive+0x524>)
 8003022:	625a      	str	r2, [r3, #36]	@ 0x24
		}

		if(fabs(RealVfeedback) < 1.6  && RealVfeedback!=0){
 8003024:	4b38      	ldr	r3, [pc, #224]	@ (8003108 <MotorDrive+0x510>)
 8003026:	edd3 7a00 	vldr	s15, [r3]
 800302a:	eef0 7ae7 	vabs.f32	s15, s15
 800302e:	ee17 0a90 	vmov	r0, s15
 8003032:	f7fd fa55 	bl	80004e0 <__aeabi_f2d>
 8003036:	a330      	add	r3, pc, #192	@ (adr r3, 80030f8 <MotorDrive+0x500>)
 8003038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800303c:	f7fd fd1a 	bl	8000a74 <__aeabi_dcmplt>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d013      	beq.n	800306e <MotorDrive+0x476>
 8003046:	4b30      	ldr	r3, [pc, #192]	@ (8003108 <MotorDrive+0x510>)
 8003048:	edd3 7a00 	vldr	s15, [r3]
 800304c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003054:	d00b      	beq.n	800306e <MotorDrive+0x476>
			if (DriveDirection == -1) {
 8003056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800305a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800305e:	d103      	bne.n	8003068 <MotorDrive+0x470>
				RealVfeedback = 1.25;
 8003060:	4b29      	ldr	r3, [pc, #164]	@ (8003108 <MotorDrive+0x510>)
 8003062:	4a2f      	ldr	r2, [pc, #188]	@ (8003120 <MotorDrive+0x528>)
 8003064:	601a      	str	r2, [r3, #0]
 8003066:	e002      	b.n	800306e <MotorDrive+0x476>
			} else {
				RealVfeedback = 1.6;
 8003068:	4b27      	ldr	r3, [pc, #156]	@ (8003108 <MotorDrive+0x510>)
 800306a:	4a2e      	ldr	r2, [pc, #184]	@ (8003124 <MotorDrive+0x52c>)
 800306c:	601a      	str	r2, [r3, #0]
			}
		}

		duty_cycle_pid = fabs(RealVfeedback) * 4000 / 12;
 800306e:	4b26      	ldr	r3, [pc, #152]	@ (8003108 <MotorDrive+0x510>)
 8003070:	edd3 7a00 	vldr	s15, [r3]
 8003074:	eef0 7ae7 	vabs.f32	s15, s15
 8003078:	ee17 0a90 	vmov	r0, s15
 800307c:	f7fd fa30 	bl	80004e0 <__aeabi_f2d>
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	4b28      	ldr	r3, [pc, #160]	@ (8003128 <MotorDrive+0x530>)
 8003086:	f7fd fa83 	bl	8000590 <__aeabi_dmul>
 800308a:	4602      	mov	r2, r0
 800308c:	460b      	mov	r3, r1
 800308e:	4610      	mov	r0, r2
 8003090:	4619      	mov	r1, r3
 8003092:	f04f 0200 	mov.w	r2, #0
 8003096:	4b25      	ldr	r3, [pc, #148]	@ (800312c <MotorDrive+0x534>)
 8003098:	f7fd fba4 	bl	80007e4 <__aeabi_ddiv>
 800309c:	4602      	mov	r2, r0
 800309e:	460b      	mov	r3, r1
 80030a0:	4610      	mov	r0, r2
 80030a2:	4619      	mov	r1, r3
 80030a4:	f7fd fd36 	bl	8000b14 <__aeabi_d2uiz>
 80030a8:	4603      	mov	r3, r0
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	4b20      	ldr	r3, [pc, #128]	@ (8003130 <MotorDrive+0x538>)
 80030ae:	801a      	strh	r2, [r3, #0]
		if(RealVfeedback == 0){
 80030b0:	4b15      	ldr	r3, [pc, #84]	@ (8003108 <MotorDrive+0x510>)
 80030b2:	edd3 7a00 	vldr	s15, [r3]
 80030b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80030ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030be:	d102      	bne.n	80030c6 <MotorDrive+0x4ce>
			duty_cycle_pid = 0;
 80030c0:	4b1b      	ldr	r3, [pc, #108]	@ (8003130 <MotorDrive+0x538>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	801a      	strh	r2, [r3, #0]
		}

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle_pid);
 80030c6:	4b1a      	ldr	r3, [pc, #104]	@ (8003130 <MotorDrive+0x538>)
 80030c8:	881a      	ldrh	r2, [r3, #0]
 80030ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003134 <MotorDrive+0x53c>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	635a      	str	r2, [r3, #52]	@ 0x34
	if((MotorDriveTravelDistance-PosNow) > 0.1 || ((MotorDriveTravelDistance-PosNow) < -0.1)){
 80030d0:	e00e      	b.n	80030f0 <MotorDrive+0x4f8>
	}else{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80030d2:	4b18      	ldr	r3, [pc, #96]	@ (8003134 <MotorDrive+0x53c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2200      	movs	r2, #0
 80030d8:	635a      	str	r2, [r3, #52]	@ 0x34
		Arrived = 1;
 80030da:	4b17      	ldr	r3, [pc, #92]	@ (8003138 <MotorDrive+0x540>)
 80030dc:	2201      	movs	r2, #1
 80030de:	701a      	strb	r2, [r3, #0]
		RealVfeedback = 0;
 80030e0:	4b09      	ldr	r3, [pc, #36]	@ (8003108 <MotorDrive+0x510>)
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	601a      	str	r2, [r3, #0]
		b_check[6] = 6;
 80030e8:	4b08      	ldr	r3, [pc, #32]	@ (800310c <MotorDrive+0x514>)
 80030ea:	4a14      	ldr	r2, [pc, #80]	@ (800313c <MotorDrive+0x544>)
 80030ec:	619a      	str	r2, [r3, #24]

	}
}
 80030ee:	bf00      	nop
 80030f0:	bf00      	nop
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bdb0      	pop	{r4, r5, r7, pc}
 80030f8:	9999999a 	.word	0x9999999a
 80030fc:	3ff99999 	.word	0x3ff99999
 8003100:	20001010 	.word	0x20001010
 8003104:	2000100c 	.word	0x2000100c
 8003108:	200008fc 	.word	0x200008fc
 800310c:	20000fe0 	.word	0x20000fe0
 8003110:	20000908 	.word	0x20000908
 8003114:	20001018 	.word	0x20001018
 8003118:	48000800 	.word	0x48000800
 800311c:	40a00000 	.word	0x40a00000
 8003120:	3fa00000 	.word	0x3fa00000
 8003124:	3fcccccd 	.word	0x3fcccccd
 8003128:	40af4000 	.word	0x40af4000
 800312c:	40280000 	.word	0x40280000
 8003130:	20000904 	.word	0x20000904
 8003134:	20000240 	.word	0x20000240
 8003138:	20000fdc 	.word	0x20000fdc
 800313c:	40c00000 	.word	0x40c00000

08003140 <MotorDrivePoint>:
void MotorDrivePoint() {
 8003140:	b5b0      	push	{r4, r5, r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
	if (MotorDriveFlag == 0) {
 8003146:	4bc0      	ldr	r3, [pc, #768]	@ (8003448 <MotorDrivePoint+0x308>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d124      	bne.n	8003198 <MotorDrivePoint+0x58>
		// Start: This box of code run only one time.
		StartTotalPos = QEIdata.TotalPos;
 800314e:	4bbf      	ldr	r3, [pc, #764]	@ (800344c <MotorDrivePoint+0x30c>)
 8003150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003152:	4abf      	ldr	r2, [pc, #764]	@ (8003450 <MotorDrivePoint+0x310>)
 8003154:	6013      	str	r3, [r2, #0]
		MotorDriveTravelDistance = Goal - QEIdata.TotalPos;
 8003156:	4bbf      	ldr	r3, [pc, #764]	@ (8003454 <MotorDrivePoint+0x314>)
 8003158:	ed93 7a00 	vldr	s14, [r3]
 800315c:	4bbb      	ldr	r3, [pc, #748]	@ (800344c <MotorDrivePoint+0x30c>)
 800315e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8003162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003166:	4bbc      	ldr	r3, [pc, #752]	@ (8003458 <MotorDrivePoint+0x318>)
 8003168:	edc3 7a00 	vstr	s15, [r3]
		MotorDriveDampDistance = MotorDriveTravelDistance * 0.4;
 800316c:	4bba      	ldr	r3, [pc, #744]	@ (8003458 <MotorDrivePoint+0x318>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f7fd f9b5 	bl	80004e0 <__aeabi_f2d>
 8003176:	a3ae      	add	r3, pc, #696	@ (adr r3, 8003430 <MotorDrivePoint+0x2f0>)
 8003178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800317c:	f7fd fa08 	bl	8000590 <__aeabi_dmul>
 8003180:	4602      	mov	r2, r0
 8003182:	460b      	mov	r3, r1
 8003184:	4610      	mov	r0, r2
 8003186:	4619      	mov	r1, r3
 8003188:	f7fd fce4 	bl	8000b54 <__aeabi_d2f>
 800318c:	4603      	mov	r3, r0
 800318e:	4ab3      	ldr	r2, [pc, #716]	@ (800345c <MotorDrivePoint+0x31c>)
 8003190:	6013      	str	r3, [r2, #0]
		// End
		MotorDriveFlag = 1;
 8003192:	4bad      	ldr	r3, [pc, #692]	@ (8003448 <MotorDrivePoint+0x308>)
 8003194:	2201      	movs	r2, #1
 8003196:	701a      	strb	r2, [r3, #0]
	}

	float PosNow = QEIdata.TotalPos - StartTotalPos;
 8003198:	4bac      	ldr	r3, [pc, #688]	@ (800344c <MotorDrivePoint+0x30c>)
 800319a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800319e:	4bac      	ldr	r3, [pc, #688]	@ (8003450 <MotorDrivePoint+0x310>)
 80031a0:	edd3 7a00 	vldr	s15, [r3]
 80031a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031a8:	edc7 7a00 	vstr	s15, [r7]

	if((MotorDriveTravelDistance-PosNow) > 0.1 || ((MotorDriveTravelDistance-PosNow) < -0.1)){
 80031ac:	4baa      	ldr	r3, [pc, #680]	@ (8003458 <MotorDrivePoint+0x318>)
 80031ae:	ed93 7a00 	vldr	s14, [r3]
 80031b2:	edd7 7a00 	vldr	s15, [r7]
 80031b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031ba:	ee17 0a90 	vmov	r0, s15
 80031be:	f7fd f98f 	bl	80004e0 <__aeabi_f2d>
 80031c2:	a39d      	add	r3, pc, #628	@ (adr r3, 8003438 <MotorDrivePoint+0x2f8>)
 80031c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031c8:	f7fd fc72 	bl	8000ab0 <__aeabi_dcmpgt>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d113      	bne.n	80031fa <MotorDrivePoint+0xba>
 80031d2:	4ba1      	ldr	r3, [pc, #644]	@ (8003458 <MotorDrivePoint+0x318>)
 80031d4:	ed93 7a00 	vldr	s14, [r3]
 80031d8:	edd7 7a00 	vldr	s15, [r7]
 80031dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80031e0:	ee17 0a90 	vmov	r0, s15
 80031e4:	f7fd f97c 	bl	80004e0 <__aeabi_f2d>
 80031e8:	a395      	add	r3, pc, #596	@ (adr r3, 8003440 <MotorDrivePoint+0x300>)
 80031ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ee:	f7fd fc41 	bl	8000a74 <__aeabi_dcmplt>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 8234 	beq.w	8003662 <MotorDrivePoint+0x522>
		Arrived = 0;
 80031fa:	4b99      	ldr	r3, [pc, #612]	@ (8003460 <MotorDrivePoint+0x320>)
 80031fc:	2200      	movs	r2, #0
 80031fe:	701a      	strb	r2, [r3, #0]
		b_check[8] = PosNow;
 8003200:	4a98      	ldr	r2, [pc, #608]	@ (8003464 <MotorDrivePoint+0x324>)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	6213      	str	r3, [r2, #32]
		int8_t DriveDirection = 1; // direction is 1 if up, -1 if down.
 8003206:	2301      	movs	r3, #1
 8003208:	71fb      	strb	r3, [r7, #7]
		if (Goal <= StartTotalPos) {
 800320a:	4b92      	ldr	r3, [pc, #584]	@ (8003454 <MotorDrivePoint+0x314>)
 800320c:	ed93 7a00 	vldr	s14, [r3]
 8003210:	4b8f      	ldr	r3, [pc, #572]	@ (8003450 <MotorDrivePoint+0x310>)
 8003212:	edd3 7a00 	vldr	s15, [r3]
 8003216:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800321a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800321e:	d805      	bhi.n	800322c <MotorDrivePoint+0xec>
			DriveDirection = -1;
 8003220:	23ff      	movs	r3, #255	@ 0xff
 8003222:	71fb      	strb	r3, [r7, #7]
			b_check[7] = 1;
 8003224:	4b8f      	ldr	r3, [pc, #572]	@ (8003464 <MotorDrivePoint+0x324>)
 8003226:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800322a:	61da      	str	r2, [r3, #28]
//		if(MotorDriveTravelDistance<=100){
//			RealVfeedback = 3;
//		}

		// Trajectory generator
		if((DriveDirection == -1)&&(MotorDriveTravelDistance<0)){
 800322c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003234:	f040 80a9 	bne.w	800338a <MotorDrivePoint+0x24a>
 8003238:	4b87      	ldr	r3, [pc, #540]	@ (8003458 <MotorDrivePoint+0x318>)
 800323a:	edd3 7a00 	vldr	s15, [r3]
 800323e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003242:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003246:	f140 80a0 	bpl.w	800338a <MotorDrivePoint+0x24a>
			if ((PosNow <= MotorDriveDampDistance) && (PosNow >= MotorDriveTravelDistance-MotorDriveDampDistance)) { // Middle
 800324a:	4b84      	ldr	r3, [pc, #528]	@ (800345c <MotorDrivePoint+0x31c>)
 800324c:	edd3 7a00 	vldr	s15, [r3]
 8003250:	ed97 7a00 	vldr	s14, [r7]
 8003254:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325c:	d815      	bhi.n	800328a <MotorDrivePoint+0x14a>
 800325e:	4b7e      	ldr	r3, [pc, #504]	@ (8003458 <MotorDrivePoint+0x318>)
 8003260:	ed93 7a00 	vldr	s14, [r3]
 8003264:	4b7d      	ldr	r3, [pc, #500]	@ (800345c <MotorDrivePoint+0x31c>)
 8003266:	edd3 7a00 	vldr	s15, [r3]
 800326a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800326e:	ed97 7a00 	vldr	s14, [r7]
 8003272:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327a:	db06      	blt.n	800328a <MotorDrivePoint+0x14a>
				RealVfeedback = 7;
 800327c:	4b7a      	ldr	r3, [pc, #488]	@ (8003468 <MotorDrivePoint+0x328>)
 800327e:	4a7b      	ldr	r2, [pc, #492]	@ (800346c <MotorDrivePoint+0x32c>)
 8003280:	601a      	str	r2, [r3, #0]
				b_check[6]= 9;
 8003282:	4b78      	ldr	r3, [pc, #480]	@ (8003464 <MotorDrivePoint+0x324>)
 8003284:	4a7a      	ldr	r2, [pc, #488]	@ (8003470 <MotorDrivePoint+0x330>)
 8003286:	619a      	str	r2, [r3, #24]
 8003288:	e07f      	b.n	800338a <MotorDrivePoint+0x24a>
			} else if (PosNow > MotorDriveDampDistance) { // Start
 800328a:	4b74      	ldr	r3, [pc, #464]	@ (800345c <MotorDrivePoint+0x31c>)
 800328c:	edd3 7a00 	vldr	s15, [r3]
 8003290:	ed97 7a00 	vldr	s14, [r7]
 8003294:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003298:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800329c:	dd3a      	ble.n	8003314 <MotorDrivePoint+0x1d4>
				//RealVfeedback = 1.5;
				RealVfeedback = ((fabs(PosNow)+1)*7 / MotorDriveTravelDistance)+1;
 800329e:	edd7 7a00 	vldr	s15, [r7]
 80032a2:	eef0 7ae7 	vabs.f32	s15, s15
 80032a6:	ee17 0a90 	vmov	r0, s15
 80032aa:	f7fd f919 	bl	80004e0 <__aeabi_f2d>
 80032ae:	f04f 0200 	mov.w	r2, #0
 80032b2:	4b70      	ldr	r3, [pc, #448]	@ (8003474 <MotorDrivePoint+0x334>)
 80032b4:	f7fc ffb6 	bl	8000224 <__adddf3>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4610      	mov	r0, r2
 80032be:	4619      	mov	r1, r3
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	4b6c      	ldr	r3, [pc, #432]	@ (8003478 <MotorDrivePoint+0x338>)
 80032c6:	f7fd f963 	bl	8000590 <__aeabi_dmul>
 80032ca:	4602      	mov	r2, r0
 80032cc:	460b      	mov	r3, r1
 80032ce:	4614      	mov	r4, r2
 80032d0:	461d      	mov	r5, r3
 80032d2:	4b61      	ldr	r3, [pc, #388]	@ (8003458 <MotorDrivePoint+0x318>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fd f902 	bl	80004e0 <__aeabi_f2d>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	4620      	mov	r0, r4
 80032e2:	4629      	mov	r1, r5
 80032e4:	f7fd fa7e 	bl	80007e4 <__aeabi_ddiv>
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	4610      	mov	r0, r2
 80032ee:	4619      	mov	r1, r3
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	4b5f      	ldr	r3, [pc, #380]	@ (8003474 <MotorDrivePoint+0x334>)
 80032f6:	f7fc ff95 	bl	8000224 <__adddf3>
 80032fa:	4602      	mov	r2, r0
 80032fc:	460b      	mov	r3, r1
 80032fe:	4610      	mov	r0, r2
 8003300:	4619      	mov	r1, r3
 8003302:	f7fd fc27 	bl	8000b54 <__aeabi_d2f>
 8003306:	4603      	mov	r3, r0
 8003308:	4a57      	ldr	r2, [pc, #348]	@ (8003468 <MotorDrivePoint+0x328>)
 800330a:	6013      	str	r3, [r2, #0]
				b_check[6]= 10;
 800330c:	4b55      	ldr	r3, [pc, #340]	@ (8003464 <MotorDrivePoint+0x324>)
 800330e:	4a5b      	ldr	r2, [pc, #364]	@ (800347c <MotorDrivePoint+0x33c>)
 8003310:	619a      	str	r2, [r3, #24]
 8003312:	e03a      	b.n	800338a <MotorDrivePoint+0x24a>
			}  else if (PosNow <= MotorDriveTravelDistance) {  //Hard Stop
 8003314:	4b50      	ldr	r3, [pc, #320]	@ (8003458 <MotorDrivePoint+0x318>)
 8003316:	edd3 7a00 	vldr	s15, [r3]
 800331a:	ed97 7a00 	vldr	s14, [r7]
 800331e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003326:	d807      	bhi.n	8003338 <MotorDrivePoint+0x1f8>
				RealVfeedback = 0;
 8003328:	4b4f      	ldr	r3, [pc, #316]	@ (8003468 <MotorDrivePoint+0x328>)
 800332a:	f04f 0200 	mov.w	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
				b_check[6]= 11;
 8003330:	4b4c      	ldr	r3, [pc, #304]	@ (8003464 <MotorDrivePoint+0x324>)
 8003332:	4a53      	ldr	r2, [pc, #332]	@ (8003480 <MotorDrivePoint+0x340>)
 8003334:	619a      	str	r2, [r3, #24]
 8003336:	e028      	b.n	800338a <MotorDrivePoint+0x24a>
			} else if (PosNow < MotorDriveTravelDistance - MotorDriveDampDistance) {  //Stop
 8003338:	4b47      	ldr	r3, [pc, #284]	@ (8003458 <MotorDrivePoint+0x318>)
 800333a:	ed93 7a00 	vldr	s14, [r3]
 800333e:	4b47      	ldr	r3, [pc, #284]	@ (800345c <MotorDrivePoint+0x31c>)
 8003340:	edd3 7a00 	vldr	s15, [r3]
 8003344:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003348:	ed97 7a00 	vldr	s14, [r7]
 800334c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003350:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003354:	d519      	bpl.n	800338a <MotorDrivePoint+0x24a>
				//RealVfeedback = 1.5;
				RealVfeedback = ((MotorDriveTravelDistance-PosNow)*7 / MotorDriveTravelDistance)+1;
 8003356:	4b40      	ldr	r3, [pc, #256]	@ (8003458 <MotorDrivePoint+0x318>)
 8003358:	ed93 7a00 	vldr	s14, [r3]
 800335c:	edd7 7a00 	vldr	s15, [r7]
 8003360:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003364:	eeb1 7a0c 	vmov.f32	s14, #28	@ 0x40e00000  7.0
 8003368:	ee67 6a87 	vmul.f32	s13, s15, s14
 800336c:	4b3a      	ldr	r3, [pc, #232]	@ (8003458 <MotorDrivePoint+0x318>)
 800336e:	ed93 7a00 	vldr	s14, [r3]
 8003372:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003376:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800337a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800337e:	4b3a      	ldr	r3, [pc, #232]	@ (8003468 <MotorDrivePoint+0x328>)
 8003380:	edc3 7a00 	vstr	s15, [r3]
				b_check[6]= 12;
 8003384:	4b37      	ldr	r3, [pc, #220]	@ (8003464 <MotorDrivePoint+0x324>)
 8003386:	4a3f      	ldr	r2, [pc, #252]	@ (8003484 <MotorDrivePoint+0x344>)
 8003388:	619a      	str	r2, [r3, #24]
			}
		}
		if((DriveDirection == 1)&&(MotorDriveTravelDistance>0)){
 800338a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800338e:	2b01      	cmp	r3, #1
 8003390:	f040 80ba 	bne.w	8003508 <MotorDrivePoint+0x3c8>
 8003394:	4b30      	ldr	r3, [pc, #192]	@ (8003458 <MotorDrivePoint+0x318>)
 8003396:	edd3 7a00 	vldr	s15, [r3]
 800339a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800339e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a2:	f340 80b1 	ble.w	8003508 <MotorDrivePoint+0x3c8>
			if ((PosNow >= MotorDriveDampDistance) && (PosNow <= MotorDriveTravelDistance-MotorDriveDampDistance)) { // Middle
 80033a6:	4b2d      	ldr	r3, [pc, #180]	@ (800345c <MotorDrivePoint+0x31c>)
 80033a8:	edd3 7a00 	vldr	s15, [r3]
 80033ac:	ed97 7a00 	vldr	s14, [r7]
 80033b0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033b8:	db16      	blt.n	80033e8 <MotorDrivePoint+0x2a8>
 80033ba:	4b27      	ldr	r3, [pc, #156]	@ (8003458 <MotorDrivePoint+0x318>)
 80033bc:	ed93 7a00 	vldr	s14, [r3]
 80033c0:	4b26      	ldr	r3, [pc, #152]	@ (800345c <MotorDrivePoint+0x31c>)
 80033c2:	edd3 7a00 	vldr	s15, [r3]
 80033c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80033ca:	ed97 7a00 	vldr	s14, [r7]
 80033ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033d6:	d807      	bhi.n	80033e8 <MotorDrivePoint+0x2a8>
				RealVfeedback = 8;
 80033d8:	4b23      	ldr	r3, [pc, #140]	@ (8003468 <MotorDrivePoint+0x328>)
 80033da:	f04f 4282 	mov.w	r2, #1090519040	@ 0x41000000
 80033de:	601a      	str	r2, [r3, #0]
				b_check[6]= 13;
 80033e0:	4b20      	ldr	r3, [pc, #128]	@ (8003464 <MotorDrivePoint+0x324>)
 80033e2:	4a29      	ldr	r2, [pc, #164]	@ (8003488 <MotorDrivePoint+0x348>)
 80033e4:	619a      	str	r2, [r3, #24]
 80033e6:	e08f      	b.n	8003508 <MotorDrivePoint+0x3c8>
			} else if (PosNow < MotorDriveDampDistance) { // Start
 80033e8:	4b1c      	ldr	r3, [pc, #112]	@ (800345c <MotorDrivePoint+0x31c>)
 80033ea:	edd3 7a00 	vldr	s15, [r3]
 80033ee:	ed97 7a00 	vldr	s14, [r7]
 80033f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80033f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033fa:	d549      	bpl.n	8003490 <MotorDrivePoint+0x350>
				//RealVfeedback = 2;
				RealVfeedback = ((PosNow+3) * 8/ MotorDriveDampDistance)+1;
 80033fc:	edd7 7a00 	vldr	s15, [r7]
 8003400:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8003404:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003408:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800340c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8003410:	4b12      	ldr	r3, [pc, #72]	@ (800345c <MotorDrivePoint+0x31c>)
 8003412:	ed93 7a00 	vldr	s14, [r3]
 8003416:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800341a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800341e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003422:	4b11      	ldr	r3, [pc, #68]	@ (8003468 <MotorDrivePoint+0x328>)
 8003424:	edc3 7a00 	vstr	s15, [r3]
				b_check[6]= 14;
 8003428:	4b0e      	ldr	r3, [pc, #56]	@ (8003464 <MotorDrivePoint+0x324>)
 800342a:	4a18      	ldr	r2, [pc, #96]	@ (800348c <MotorDrivePoint+0x34c>)
 800342c:	619a      	str	r2, [r3, #24]
 800342e:	e06b      	b.n	8003508 <MotorDrivePoint+0x3c8>
 8003430:	9999999a 	.word	0x9999999a
 8003434:	3fd99999 	.word	0x3fd99999
 8003438:	9999999a 	.word	0x9999999a
 800343c:	3fb99999 	.word	0x3fb99999
 8003440:	9999999a 	.word	0x9999999a
 8003444:	bfb99999 	.word	0xbfb99999
 8003448:	20001008 	.word	0x20001008
 800344c:	200008c0 	.word	0x200008c0
 8003450:	20001014 	.word	0x20001014
 8003454:	20000900 	.word	0x20000900
 8003458:	20001010 	.word	0x20001010
 800345c:	2000100c 	.word	0x2000100c
 8003460:	20000fdc 	.word	0x20000fdc
 8003464:	20000fe0 	.word	0x20000fe0
 8003468:	200008fc 	.word	0x200008fc
 800346c:	40e00000 	.word	0x40e00000
 8003470:	41100000 	.word	0x41100000
 8003474:	3ff00000 	.word	0x3ff00000
 8003478:	401c0000 	.word	0x401c0000
 800347c:	41200000 	.word	0x41200000
 8003480:	41300000 	.word	0x41300000
 8003484:	41400000 	.word	0x41400000
 8003488:	41500000 	.word	0x41500000
 800348c:	41600000 	.word	0x41600000
			} else if (PosNow >= MotorDriveTravelDistance) {  //Hard Stop
 8003490:	4b9b      	ldr	r3, [pc, #620]	@ (8003700 <MotorDrivePoint+0x5c0>)
 8003492:	edd3 7a00 	vldr	s15, [r3]
 8003496:	ed97 7a00 	vldr	s14, [r7]
 800349a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800349e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034a2:	db07      	blt.n	80034b4 <MotorDrivePoint+0x374>
				RealVfeedback = 0;
 80034a4:	4b97      	ldr	r3, [pc, #604]	@ (8003704 <MotorDrivePoint+0x5c4>)
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
				b_check[6]= 15;
 80034ac:	4b96      	ldr	r3, [pc, #600]	@ (8003708 <MotorDrivePoint+0x5c8>)
 80034ae:	4a97      	ldr	r2, [pc, #604]	@ (800370c <MotorDrivePoint+0x5cc>)
 80034b0:	619a      	str	r2, [r3, #24]
 80034b2:	e029      	b.n	8003508 <MotorDrivePoint+0x3c8>
			} else if (PosNow > MotorDriveTravelDistance - MotorDriveDampDistance) {  //Stop
 80034b4:	4b92      	ldr	r3, [pc, #584]	@ (8003700 <MotorDrivePoint+0x5c0>)
 80034b6:	ed93 7a00 	vldr	s14, [r3]
 80034ba:	4b95      	ldr	r3, [pc, #596]	@ (8003710 <MotorDrivePoint+0x5d0>)
 80034bc:	edd3 7a00 	vldr	s15, [r3]
 80034c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034c4:	ed97 7a00 	vldr	s14, [r7]
 80034c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80034cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034d0:	dd1a      	ble.n	8003508 <MotorDrivePoint+0x3c8>
				//RealVfeedback = 1.5;
				RealVfeedback = ((MotorDriveTravelDistance-PosNow) * 8 / MotorDriveDampDistance)+1;
 80034d2:	4b8b      	ldr	r3, [pc, #556]	@ (8003700 <MotorDrivePoint+0x5c0>)
 80034d4:	ed93 7a00 	vldr	s14, [r3]
 80034d8:	edd7 7a00 	vldr	s15, [r7]
 80034dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034e0:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 80034e4:	ee67 6a87 	vmul.f32	s13, s15, s14
 80034e8:	4b89      	ldr	r3, [pc, #548]	@ (8003710 <MotorDrivePoint+0x5d0>)
 80034ea:	ed93 7a00 	vldr	s14, [r3]
 80034ee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80034f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80034fa:	4b82      	ldr	r3, [pc, #520]	@ (8003704 <MotorDrivePoint+0x5c4>)
 80034fc:	edc3 7a00 	vstr	s15, [r3]
				b_check[6]= 16;
 8003500:	4b81      	ldr	r3, [pc, #516]	@ (8003708 <MotorDrivePoint+0x5c8>)
 8003502:	f04f 4283 	mov.w	r2, #1098907648	@ 0x41800000
 8003506:	619a      	str	r2, [r3, #24]
			}
		}

		PIDVFeedback = Update_pid(&pid_control, MotorDriveTravelDistance-PosNow, 10, 12);
 8003508:	4b7d      	ldr	r3, [pc, #500]	@ (8003700 <MotorDrivePoint+0x5c0>)
 800350a:	ed93 7a00 	vldr	s14, [r3]
 800350e:	edd7 7a00 	vldr	s15, [r7]
 8003512:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003516:	eeb2 1a08 	vmov.f32	s2, #40	@ 0x41400000  12.0
 800351a:	eef2 0a04 	vmov.f32	s1, #36	@ 0x41200000  10.0
 800351e:	eeb0 0a67 	vmov.f32	s0, s15
 8003522:	487c      	ldr	r0, [pc, #496]	@ (8003714 <MotorDrivePoint+0x5d4>)
 8003524:	f000 f980 	bl	8003828 <Update_pid>
 8003528:	ee07 0a90 	vmov	s15, r0
 800352c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003530:	4b79      	ldr	r3, [pc, #484]	@ (8003718 <MotorDrivePoint+0x5d8>)
 8003532:	edc3 7a00 	vstr	s15, [r3]

		if (fabs(PIDVFeedback) < fabs(RealVfeedback)) {
 8003536:	4b78      	ldr	r3, [pc, #480]	@ (8003718 <MotorDrivePoint+0x5d8>)
 8003538:	edd3 7a00 	vldr	s15, [r3]
 800353c:	eeb0 7ae7 	vabs.f32	s14, s15
 8003540:	4b70      	ldr	r3, [pc, #448]	@ (8003704 <MotorDrivePoint+0x5c4>)
 8003542:	edd3 7a00 	vldr	s15, [r3]
 8003546:	eef0 7ae7 	vabs.f32	s15, s15
 800354a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800354e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003552:	d503      	bpl.n	800355c <MotorDrivePoint+0x41c>
			RealVfeedback = PIDVFeedback;
 8003554:	4b70      	ldr	r3, [pc, #448]	@ (8003718 <MotorDrivePoint+0x5d8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a6a      	ldr	r2, [pc, #424]	@ (8003704 <MotorDrivePoint+0x5c4>)
 800355a:	6013      	str	r3, [r2, #0]
		}

		RealVfeedback = RealVfeedback * DriveDirection;
 800355c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003560:	ee07 3a90 	vmov	s15, r3
 8003564:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003568:	4b66      	ldr	r3, [pc, #408]	@ (8003704 <MotorDrivePoint+0x5c4>)
 800356a:	edd3 7a00 	vldr	s15, [r3]
 800356e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003572:	4b64      	ldr	r3, [pc, #400]	@ (8003704 <MotorDrivePoint+0x5c4>)
 8003574:	edc3 7a00 	vstr	s15, [r3]


		if (DriveDirection == 1) {  //go up
 8003578:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357c:	2b01      	cmp	r3, #1
 800357e:	d109      	bne.n	8003594 <MotorDrivePoint+0x454>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8003580:	2200      	movs	r2, #0
 8003582:	2108      	movs	r1, #8
 8003584:	4865      	ldr	r0, [pc, #404]	@ (800371c <MotorDrivePoint+0x5dc>)
 8003586:	f001 fba9 	bl	8004cdc <HAL_GPIO_WritePin>
			b_check[9]= 4;
 800358a:	4b5f      	ldr	r3, [pc, #380]	@ (8003708 <MotorDrivePoint+0x5c8>)
 800358c:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8003590:	625a      	str	r2, [r3, #36]	@ 0x24
 8003592:	e00f      	b.n	80035b4 <MotorDrivePoint+0x474>
		} else {  //go down
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8003594:	2201      	movs	r2, #1
 8003596:	2108      	movs	r1, #8
 8003598:	4860      	ldr	r0, [pc, #384]	@ (800371c <MotorDrivePoint+0x5dc>)
 800359a:	f001 fb9f 	bl	8004cdc <HAL_GPIO_WritePin>
			RealVfeedback = RealVfeedback * (-1);
 800359e:	4b59      	ldr	r3, [pc, #356]	@ (8003704 <MotorDrivePoint+0x5c4>)
 80035a0:	edd3 7a00 	vldr	s15, [r3]
 80035a4:	eef1 7a67 	vneg.f32	s15, s15
 80035a8:	4b56      	ldr	r3, [pc, #344]	@ (8003704 <MotorDrivePoint+0x5c4>)
 80035aa:	edc3 7a00 	vstr	s15, [r3]
			b_check[9]= 5;
 80035ae:	4b56      	ldr	r3, [pc, #344]	@ (8003708 <MotorDrivePoint+0x5c8>)
 80035b0:	4a5b      	ldr	r2, [pc, #364]	@ (8003720 <MotorDrivePoint+0x5e0>)
 80035b2:	625a      	str	r2, [r3, #36]	@ 0x24
		}

		if(fabs(RealVfeedback) < 1.6  && RealVfeedback!=0){
 80035b4:	4b53      	ldr	r3, [pc, #332]	@ (8003704 <MotorDrivePoint+0x5c4>)
 80035b6:	edd3 7a00 	vldr	s15, [r3]
 80035ba:	eef0 7ae7 	vabs.f32	s15, s15
 80035be:	ee17 0a90 	vmov	r0, s15
 80035c2:	f7fc ff8d 	bl	80004e0 <__aeabi_f2d>
 80035c6:	a348      	add	r3, pc, #288	@ (adr r3, 80036e8 <MotorDrivePoint+0x5a8>)
 80035c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035cc:	f7fd fa52 	bl	8000a74 <__aeabi_dcmplt>
 80035d0:	4603      	mov	r3, r0
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d013      	beq.n	80035fe <MotorDrivePoint+0x4be>
 80035d6:	4b4b      	ldr	r3, [pc, #300]	@ (8003704 <MotorDrivePoint+0x5c4>)
 80035d8:	edd3 7a00 	vldr	s15, [r3]
 80035dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80035e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035e4:	d00b      	beq.n	80035fe <MotorDrivePoint+0x4be>
			if (DriveDirection == -1) {
 80035e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ee:	d103      	bne.n	80035f8 <MotorDrivePoint+0x4b8>
				RealVfeedback = 1.2;
 80035f0:	4b44      	ldr	r3, [pc, #272]	@ (8003704 <MotorDrivePoint+0x5c4>)
 80035f2:	4a4c      	ldr	r2, [pc, #304]	@ (8003724 <MotorDrivePoint+0x5e4>)
 80035f4:	601a      	str	r2, [r3, #0]
 80035f6:	e002      	b.n	80035fe <MotorDrivePoint+0x4be>
			} else {
				RealVfeedback = 1.6;
 80035f8:	4b42      	ldr	r3, [pc, #264]	@ (8003704 <MotorDrivePoint+0x5c4>)
 80035fa:	4a4b      	ldr	r2, [pc, #300]	@ (8003728 <MotorDrivePoint+0x5e8>)
 80035fc:	601a      	str	r2, [r3, #0]
			}
		}

		duty_cycle_pid = fabs(RealVfeedback) * 4000 / 12;
 80035fe:	4b41      	ldr	r3, [pc, #260]	@ (8003704 <MotorDrivePoint+0x5c4>)
 8003600:	edd3 7a00 	vldr	s15, [r3]
 8003604:	eef0 7ae7 	vabs.f32	s15, s15
 8003608:	ee17 0a90 	vmov	r0, s15
 800360c:	f7fc ff68 	bl	80004e0 <__aeabi_f2d>
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	4b45      	ldr	r3, [pc, #276]	@ (800372c <MotorDrivePoint+0x5ec>)
 8003616:	f7fc ffbb 	bl	8000590 <__aeabi_dmul>
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	4610      	mov	r0, r2
 8003620:	4619      	mov	r1, r3
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	4b42      	ldr	r3, [pc, #264]	@ (8003730 <MotorDrivePoint+0x5f0>)
 8003628:	f7fd f8dc 	bl	80007e4 <__aeabi_ddiv>
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	4610      	mov	r0, r2
 8003632:	4619      	mov	r1, r3
 8003634:	f7fd fa6e 	bl	8000b14 <__aeabi_d2uiz>
 8003638:	4603      	mov	r3, r0
 800363a:	b29a      	uxth	r2, r3
 800363c:	4b3d      	ldr	r3, [pc, #244]	@ (8003734 <MotorDrivePoint+0x5f4>)
 800363e:	801a      	strh	r2, [r3, #0]
		if(RealVfeedback == 0){
 8003640:	4b30      	ldr	r3, [pc, #192]	@ (8003704 <MotorDrivePoint+0x5c4>)
 8003642:	edd3 7a00 	vldr	s15, [r3]
 8003646:	eef5 7a40 	vcmp.f32	s15, #0.0
 800364a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800364e:	d102      	bne.n	8003656 <MotorDrivePoint+0x516>
			duty_cycle_pid = 0;
 8003650:	4b38      	ldr	r3, [pc, #224]	@ (8003734 <MotorDrivePoint+0x5f4>)
 8003652:	2200      	movs	r2, #0
 8003654:	801a      	strh	r2, [r3, #0]
		}

		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle_pid);
 8003656:	4b37      	ldr	r3, [pc, #220]	@ (8003734 <MotorDrivePoint+0x5f4>)
 8003658:	881a      	ldrh	r2, [r3, #0]
 800365a:	4b37      	ldr	r3, [pc, #220]	@ (8003738 <MotorDrivePoint+0x5f8>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	635a      	str	r2, [r3, #52]	@ 0x34
	if((MotorDriveTravelDistance-PosNow) > 0.1 || ((MotorDriveTravelDistance-PosNow) < -0.1)){
 8003660:	e03b      	b.n	80036da <MotorDrivePoint+0x59a>
	}else if((MotorDriveTravelDistance-PosNow) < 0.1 || ((MotorDriveTravelDistance-PosNow) > -0.1)){
 8003662:	4b27      	ldr	r3, [pc, #156]	@ (8003700 <MotorDrivePoint+0x5c0>)
 8003664:	ed93 7a00 	vldr	s14, [r3]
 8003668:	edd7 7a00 	vldr	s15, [r7]
 800366c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003670:	ee17 0a90 	vmov	r0, s15
 8003674:	f7fc ff34 	bl	80004e0 <__aeabi_f2d>
 8003678:	a31d      	add	r3, pc, #116	@ (adr r3, 80036f0 <MotorDrivePoint+0x5b0>)
 800367a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367e:	f7fd f9f9 	bl	8000a74 <__aeabi_dcmplt>
 8003682:	4603      	mov	r3, r0
 8003684:	2b00      	cmp	r3, #0
 8003686:	d112      	bne.n	80036ae <MotorDrivePoint+0x56e>
 8003688:	4b1d      	ldr	r3, [pc, #116]	@ (8003700 <MotorDrivePoint+0x5c0>)
 800368a:	ed93 7a00 	vldr	s14, [r3]
 800368e:	edd7 7a00 	vldr	s15, [r7]
 8003692:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003696:	ee17 0a90 	vmov	r0, s15
 800369a:	f7fc ff21 	bl	80004e0 <__aeabi_f2d>
 800369e:	a316      	add	r3, pc, #88	@ (adr r3, 80036f8 <MotorDrivePoint+0x5b8>)
 80036a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036a4:	f7fd fa04 	bl	8000ab0 <__aeabi_dcmpgt>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d011      	beq.n	80036d2 <MotorDrivePoint+0x592>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80036ae:	4b22      	ldr	r3, [pc, #136]	@ (8003738 <MotorDrivePoint+0x5f8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2200      	movs	r2, #0
 80036b4:	635a      	str	r2, [r3, #52]	@ 0x34
		Arrived = 1;
 80036b6:	4b21      	ldr	r3, [pc, #132]	@ (800373c <MotorDrivePoint+0x5fc>)
 80036b8:	2201      	movs	r2, #1
 80036ba:	701a      	strb	r2, [r3, #0]
		RealVfeedback = 0;
 80036bc:	4b11      	ldr	r3, [pc, #68]	@ (8003704 <MotorDrivePoint+0x5c4>)
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	601a      	str	r2, [r3, #0]
		b_check[6] = 6;
 80036c4:	4b10      	ldr	r3, [pc, #64]	@ (8003708 <MotorDrivePoint+0x5c8>)
 80036c6:	4a1e      	ldr	r2, [pc, #120]	@ (8003740 <MotorDrivePoint+0x600>)
 80036c8:	619a      	str	r2, [r3, #24]
		registerFrame[0x10].U16 = 0;
 80036ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003744 <MotorDrivePoint+0x604>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	841a      	strh	r2, [r3, #32]
 80036d0:	e003      	b.n	80036da <MotorDrivePoint+0x59a>
	}else{
		Arrived = 2;
 80036d2:	4b1a      	ldr	r3, [pc, #104]	@ (800373c <MotorDrivePoint+0x5fc>)
 80036d4:	2202      	movs	r2, #2
 80036d6:	701a      	strb	r2, [r3, #0]
	}
}
 80036d8:	bf00      	nop
 80036da:	bf00      	nop
 80036dc:	3708      	adds	r7, #8
 80036de:	46bd      	mov	sp, r7
 80036e0:	bdb0      	pop	{r4, r5, r7, pc}
 80036e2:	bf00      	nop
 80036e4:	f3af 8000 	nop.w
 80036e8:	9999999a 	.word	0x9999999a
 80036ec:	3ff99999 	.word	0x3ff99999
 80036f0:	9999999a 	.word	0x9999999a
 80036f4:	3fb99999 	.word	0x3fb99999
 80036f8:	9999999a 	.word	0x9999999a
 80036fc:	bfb99999 	.word	0xbfb99999
 8003700:	20001010 	.word	0x20001010
 8003704:	200008fc 	.word	0x200008fc
 8003708:	20000fe0 	.word	0x20000fe0
 800370c:	41700000 	.word	0x41700000
 8003710:	2000100c 	.word	0x2000100c
 8003714:	20000908 	.word	0x20000908
 8003718:	20001018 	.word	0x20001018
 800371c:	48000800 	.word	0x48000800
 8003720:	40a00000 	.word	0x40a00000
 8003724:	3f99999a 	.word	0x3f99999a
 8003728:	3fcccccd 	.word	0x3fcccccd
 800372c:	40af4000 	.word	0x40af4000
 8003730:	40280000 	.word	0x40280000
 8003734:	20000904 	.word	0x20000904
 8003738:	20000240 	.word	0x20000240
 800373c:	20000fdc 	.word	0x20000fdc
 8003740:	40c00000 	.word	0x40c00000
 8003744:	20000df8 	.word	0x20000df8

08003748 <RelayDrive>:

void RelayDrive() {
 8003748:	b580      	push	{r7, lr}
 800374a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, relay[0]); // Pull
 800374c:	4b0f      	ldr	r3, [pc, #60]	@ (800378c <RelayDrive+0x44>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	461a      	mov	r2, r3
 8003752:	2102      	movs	r1, #2
 8003754:	480e      	ldr	r0, [pc, #56]	@ (8003790 <RelayDrive+0x48>)
 8003756:	f001 fac1 	bl	8004cdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, relay[1]); // Push
 800375a:	4b0c      	ldr	r3, [pc, #48]	@ (800378c <RelayDrive+0x44>)
 800375c:	785b      	ldrb	r3, [r3, #1]
 800375e:	461a      	mov	r2, r3
 8003760:	2102      	movs	r1, #2
 8003762:	480c      	ldr	r0, [pc, #48]	@ (8003794 <RelayDrive+0x4c>)
 8003764:	f001 faba 	bl	8004cdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, relay[2]); // Vacuum
 8003768:	4b08      	ldr	r3, [pc, #32]	@ (800378c <RelayDrive+0x44>)
 800376a:	789b      	ldrb	r3, [r3, #2]
 800376c:	461a      	mov	r2, r3
 800376e:	2104      	movs	r1, #4
 8003770:	4808      	ldr	r0, [pc, #32]	@ (8003794 <RelayDrive+0x4c>)
 8003772:	f001 fab3 	bl	8004cdc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, relay[3]); // mode status
 8003776:	4b05      	ldr	r3, [pc, #20]	@ (800378c <RelayDrive+0x44>)
 8003778:	78db      	ldrb	r3, [r3, #3]
 800377a:	461a      	mov	r2, r3
 800377c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003780:	4804      	ldr	r0, [pc, #16]	@ (8003794 <RelayDrive+0x4c>)
 8003782:	f001 faab 	bl	8004cdc <HAL_GPIO_WritePin>

}
 8003786:	bf00      	nop
 8003788:	bd80      	pop	{r7, pc}
 800378a:	bf00      	nop
 800378c:	200008ac 	.word	0x200008ac
 8003790:	48000800 	.word	0x48000800
 8003794:	48000400 	.word	0x48000400

08003798 <ReadLimit>:

void ReadLimit(){
 8003798:	b580      	push	{r7, lr}
 800379a:	af00      	add	r7, sp, #0

	LimitBottom = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7);//bottom
 800379c:	2180      	movs	r1, #128	@ 0x80
 800379e:	4808      	ldr	r0, [pc, #32]	@ (80037c0 <ReadLimit+0x28>)
 80037a0:	f001 fa84 	bl	8004cac <HAL_GPIO_ReadPin>
 80037a4:	4603      	mov	r3, r0
 80037a6:	461a      	mov	r2, r3
 80037a8:	4b06      	ldr	r3, [pc, #24]	@ (80037c4 <ReadLimit+0x2c>)
 80037aa:	701a      	strb	r2, [r3, #0]
	LimitTop = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);//top
 80037ac:	2140      	movs	r1, #64	@ 0x40
 80037ae:	4806      	ldr	r0, [pc, #24]	@ (80037c8 <ReadLimit+0x30>)
 80037b0:	f001 fa7c 	bl	8004cac <HAL_GPIO_ReadPin>
 80037b4:	4603      	mov	r3, r0
 80037b6:	461a      	mov	r2, r3
 80037b8:	4b04      	ldr	r3, [pc, #16]	@ (80037cc <ReadLimit+0x34>)
 80037ba:	701a      	strb	r2, [r3, #0]
}
 80037bc:	bf00      	nop
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	48000800 	.word	0x48000800
 80037c4:	200008fa 	.word	0x200008fa
 80037c8:	48000400 	.word	0x48000400
 80037cc:	200008f9 	.word	0x200008f9

080037d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80037d4:	b672      	cpsid	i
}
 80037d6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80037d8:	bf00      	nop
 80037da:	e7fd      	b.n	80037d8 <Error_Handler+0x8>

080037dc <PID_init>:
 *  Created on: Apr 26, 2024
 *      Author: naker
 */
#include "pid.h"

void PID_init(PID* pid, float32_t _kp,  float32_t _ki, float32_t _kd, float32_t _sampt){
 80037dc:	b480      	push	{r7}
 80037de:	b087      	sub	sp, #28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6178      	str	r0, [r7, #20]
 80037e4:	ed87 0a04 	vstr	s0, [r7, #16]
 80037e8:	edc7 0a03 	vstr	s1, [r7, #12]
 80037ec:	ed87 1a02 	vstr	s2, [r7, #8]
 80037f0:	edc7 1a01 	vstr	s3, [r7, #4]
	pid -> kp = _kp;
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	601a      	str	r2, [r3, #0]
	pid -> ki = _ki;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	605a      	str	r2, [r3, #4]
	pid -> kd = _kd;
 8003800:	697b      	ldr	r3, [r7, #20]
 8003802:	68ba      	ldr	r2, [r7, #8]
 8003804:	609a      	str	r2, [r3, #8]
	pid -> sampt = _sampt;
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	60da      	str	r2, [r3, #12]
	pid -> y_n = 0.0;
 800380c:	6979      	ldr	r1, [r7, #20]
 800380e:	f04f 0200 	mov.w	r2, #0
 8003812:	f04f 0300 	mov.w	r3, #0
 8003816:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800381a:	bf00      	nop
 800381c:	371c      	adds	r7, #28
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
	...

08003828 <Update_pid>:
int32_t Update_pid(PID *pid, float32_t error, float32_t pid_sat, float32_t plant_sat) {
 8003828:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800382c:	b08a      	sub	sp, #40	@ 0x28
 800382e:	af00      	add	r7, sp, #0
 8003830:	60f8      	str	r0, [r7, #12]
 8003832:	ed87 0a02 	vstr	s0, [r7, #8]
 8003836:	edc7 0a01 	vstr	s1, [r7, #4]
 800383a:	ed87 1a00 	vstr	s2, [r7]
//	static float32_t y_n = 0; // Output[n]
	static float32_t y_n_1 = 0; // Output[n-1]
	float32_t e_n = error; // error[n]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	61bb      	str	r3, [r7, #24]
	static float32_t e_n_1 = 0; // error[n-1]

	float32_t p_term = e_n * pid -> kp;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	edd3 7a00 	vldr	s15, [r3]
 8003848:	ed97 7a06 	vldr	s14, [r7, #24]
 800384c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003850:	edc7 7a05 	vstr	s15, [r7, #20]
	float32_t d_term = ((e_n - e_n_1) * pid -> kd) / pid -> sampt;
 8003854:	4b96      	ldr	r3, [pc, #600]	@ (8003ab0 <Update_pid+0x288>)
 8003856:	edd3 7a00 	vldr	s15, [r3]
 800385a:	ed97 7a06 	vldr	s14, [r7, #24]
 800385e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	edd3 7a02 	vldr	s15, [r3, #8]
 8003868:	ee67 6a27 	vmul.f32	s13, s14, s15
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	ed93 7a03 	vldr	s14, [r3, #12]
 8003872:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003876:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float32_t i_term = ((pid -> ki * pid -> sampt / 2.0)*(e_n + e_n_1)) + y_n_1;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	edd3 7a03 	vldr	s15, [r3, #12]
 8003886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800388a:	ee17 0a90 	vmov	r0, s15
 800388e:	f7fc fe27 	bl	80004e0 <__aeabi_f2d>
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800389a:	f7fc ffa3 	bl	80007e4 <__aeabi_ddiv>
 800389e:	4602      	mov	r2, r0
 80038a0:	460b      	mov	r3, r1
 80038a2:	4690      	mov	r8, r2
 80038a4:	4699      	mov	r9, r3
 80038a6:	4b82      	ldr	r3, [pc, #520]	@ (8003ab0 <Update_pid+0x288>)
 80038a8:	ed93 7a00 	vldr	s14, [r3]
 80038ac:	edd7 7a06 	vldr	s15, [r7, #24]
 80038b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038b4:	ee17 0a90 	vmov	r0, s15
 80038b8:	f7fc fe12 	bl	80004e0 <__aeabi_f2d>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4640      	mov	r0, r8
 80038c2:	4649      	mov	r1, r9
 80038c4:	f7fc fe64 	bl	8000590 <__aeabi_dmul>
 80038c8:	4602      	mov	r2, r0
 80038ca:	460b      	mov	r3, r1
 80038cc:	4690      	mov	r8, r2
 80038ce:	4699      	mov	r9, r3
 80038d0:	4b78      	ldr	r3, [pc, #480]	@ (8003ab4 <Update_pid+0x28c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fc fe03 	bl	80004e0 <__aeabi_f2d>
 80038da:	4602      	mov	r2, r0
 80038dc:	460b      	mov	r3, r1
 80038de:	4640      	mov	r0, r8
 80038e0:	4649      	mov	r1, r9
 80038e2:	f7fc fc9f 	bl	8000224 <__adddf3>
 80038e6:	4602      	mov	r2, r0
 80038e8:	460b      	mov	r3, r1
 80038ea:	4610      	mov	r0, r2
 80038ec:	4619      	mov	r1, r3
 80038ee:	f7fd f931 	bl	8000b54 <__aeabi_d2f>
 80038f2:	4603      	mov	r3, r0
 80038f4:	623b      	str	r3, [r7, #32]

	if(pid -> ki == 0){
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80038fc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003904:	d102      	bne.n	800390c <Update_pid+0xe4>
		i_term = 0;
 8003906:	f04f 0300 	mov.w	r3, #0
 800390a:	623b      	str	r3, [r7, #32]
	}
	if(pid -> kd == 0){
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003912:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003916:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800391a:	d102      	bne.n	8003922 <Update_pid+0xfa>
		d_term = 0;
 800391c:	f04f 0300 	mov.w	r3, #0
 8003920:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	pid -> y_n = p_term + d_term + i_term; // pid output
 8003922:	ed97 7a05 	vldr	s14, [r7, #20]
 8003926:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800392a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800392e:	edd7 7a08 	vldr	s15, [r7, #32]
 8003932:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003936:	ee17 0a90 	vmov	r0, s15
 800393a:	f7fc fdd1 	bl	80004e0 <__aeabi_f2d>
 800393e:	4602      	mov	r2, r0
 8003940:	460b      	mov	r3, r1
 8003942:	68f9      	ldr	r1, [r7, #12]
 8003944:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uint8_t is_sat = 0;
 8003948:	2300      	movs	r3, #0
 800394a:	77fb      	strb	r3, [r7, #31]
	// check is pid output is saturating
	if(pid -> y_n > pid_sat){
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7fc fdc4 	bl	80004e0 <__aeabi_f2d>
 8003958:	4602      	mov	r2, r0
 800395a:	460b      	mov	r3, r1
 800395c:	4640      	mov	r0, r8
 800395e:	4649      	mov	r1, r9
 8003960:	f7fd f8a6 	bl	8000ab0 <__aeabi_dcmpgt>
 8003964:	4603      	mov	r3, r0
 8003966:	2b00      	cmp	r3, #0
 8003968:	d002      	beq.n	8003970 <Update_pid+0x148>
		is_sat = 1;
 800396a:	2301      	movs	r3, #1
 800396c:	77fb      	strb	r3, [r7, #31]
 800396e:	e016      	b.n	800399e <Update_pid+0x176>
	}
	else if(pid -> y_n < -(pid_sat)){
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8003976:	edd7 7a01 	vldr	s15, [r7, #4]
 800397a:	eef1 7a67 	vneg.f32	s15, s15
 800397e:	ee17 3a90 	vmov	r3, s15
 8003982:	4618      	mov	r0, r3
 8003984:	f7fc fdac 	bl	80004e0 <__aeabi_f2d>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4640      	mov	r0, r8
 800398e:	4649      	mov	r1, r9
 8003990:	f7fd f870 	bl	8000a74 <__aeabi_dcmplt>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <Update_pid+0x176>
		is_sat = 1;
 800399a:	2301      	movs	r3, #1
 800399c:	77fb      	strb	r3, [r7, #31]
	}
	// check is error sign and output sign is equal
	if(e_n * pid -> y_n == fabs(e_n * pid -> y_n)){
 800399e:	69b8      	ldr	r0, [r7, #24]
 80039a0:	f7fc fd9e 	bl	80004e0 <__aeabi_f2d>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80039aa:	f7fc fdf1 	bl	8000590 <__aeabi_dmul>
 80039ae:	4602      	mov	r2, r0
 80039b0:	460b      	mov	r3, r1
 80039b2:	4690      	mov	r8, r2
 80039b4:	4699      	mov	r9, r3
 80039b6:	69b8      	ldr	r0, [r7, #24]
 80039b8:	f7fc fd92 	bl	80004e0 <__aeabi_f2d>
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80039c2:	f7fc fde5 	bl	8000590 <__aeabi_dmul>
 80039c6:	4602      	mov	r2, r0
 80039c8:	460b      	mov	r3, r1
 80039ca:	4614      	mov	r4, r2
 80039cc:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 80039d0:	4622      	mov	r2, r4
 80039d2:	462b      	mov	r3, r5
 80039d4:	4640      	mov	r0, r8
 80039d6:	4649      	mov	r1, r9
 80039d8:	f7fd f842 	bl	8000a60 <__aeabi_dcmpeq>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d011      	beq.n	8003a06 <Update_pid+0x1de>
		// if pid output is saturating and error sign and output sign is  i_term = 0;
		if(is_sat == 1){
 80039e2:	7ffb      	ldrb	r3, [r7, #31]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d10e      	bne.n	8003a06 <Update_pid+0x1de>
			pid -> y_n = p_term + d_term;
 80039e8:	ed97 7a05 	vldr	s14, [r7, #20]
 80039ec:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80039f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039f4:	ee17 0a90 	vmov	r0, s15
 80039f8:	f7fc fd72 	bl	80004e0 <__aeabi_f2d>
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	68f9      	ldr	r1, [r7, #12]
 8003a02:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}
	}
	// Plant saturation
	if(pid -> y_n > plant_sat){
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8003a0c:	6838      	ldr	r0, [r7, #0]
 8003a0e:	f7fc fd67 	bl	80004e0 <__aeabi_f2d>
 8003a12:	4602      	mov	r2, r0
 8003a14:	460b      	mov	r3, r1
 8003a16:	4620      	mov	r0, r4
 8003a18:	4629      	mov	r1, r5
 8003a1a:	f7fd f849 	bl	8000ab0 <__aeabi_dcmpgt>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d008      	beq.n	8003a36 <Update_pid+0x20e>
		pid -> y_n = plant_sat;
 8003a24:	6838      	ldr	r0, [r7, #0]
 8003a26:	f7fc fd5b 	bl	80004e0 <__aeabi_f2d>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	68f9      	ldr	r1, [r7, #12]
 8003a30:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8003a34:	e022      	b.n	8003a7c <Update_pid+0x254>
	}
	else if(pid -> y_n < -(plant_sat)){
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8003a3c:	edd7 7a00 	vldr	s15, [r7]
 8003a40:	eef1 7a67 	vneg.f32	s15, s15
 8003a44:	ee17 3a90 	vmov	r3, s15
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fc fd49 	bl	80004e0 <__aeabi_f2d>
 8003a4e:	4602      	mov	r2, r0
 8003a50:	460b      	mov	r3, r1
 8003a52:	4620      	mov	r0, r4
 8003a54:	4629      	mov	r1, r5
 8003a56:	f7fd f80d 	bl	8000a74 <__aeabi_dcmplt>
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00d      	beq.n	8003a7c <Update_pid+0x254>
		pid -> y_n = (-(plant_sat));
 8003a60:	edd7 7a00 	vldr	s15, [r7]
 8003a64:	eef1 7a67 	vneg.f32	s15, s15
 8003a68:	ee17 3a90 	vmov	r3, s15
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fc fd37 	bl	80004e0 <__aeabi_f2d>
 8003a72:	4602      	mov	r2, r0
 8003a74:	460b      	mov	r3, r1
 8003a76:	68f9      	ldr	r1, [r7, #12]
 8003a78:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}
	// Update value
	y_n_1 = pid -> y_n;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003a82:	4610      	mov	r0, r2
 8003a84:	4619      	mov	r1, r3
 8003a86:	f7fd f865 	bl	8000b54 <__aeabi_d2f>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	4a09      	ldr	r2, [pc, #36]	@ (8003ab4 <Update_pid+0x28c>)
 8003a8e:	6013      	str	r3, [r2, #0]
	e_n_1 = e_n;
 8003a90:	4a07      	ldr	r2, [pc, #28]	@ (8003ab0 <Update_pid+0x288>)
 8003a92:	69bb      	ldr	r3, [r7, #24]
 8003a94:	6013      	str	r3, [r2, #0]
	return pid -> y_n;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	4619      	mov	r1, r3
 8003aa0:	f7fd f810 	bl	8000ac4 <__aeabi_d2iz>
 8003aa4:	4603      	mov	r3, r0
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	3728      	adds	r7, #40	@ 0x28
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003ab0:	20001050 	.word	0x20001050
 8003ab4:	20001054 	.word	0x20001054

08003ab8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003abe:	4b0f      	ldr	r3, [pc, #60]	@ (8003afc <HAL_MspInit+0x44>)
 8003ac0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ac2:	4a0e      	ldr	r2, [pc, #56]	@ (8003afc <HAL_MspInit+0x44>)
 8003ac4:	f043 0301 	orr.w	r3, r3, #1
 8003ac8:	6613      	str	r3, [r2, #96]	@ 0x60
 8003aca:	4b0c      	ldr	r3, [pc, #48]	@ (8003afc <HAL_MspInit+0x44>)
 8003acc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	607b      	str	r3, [r7, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003ad6:	4b09      	ldr	r3, [pc, #36]	@ (8003afc <HAL_MspInit+0x44>)
 8003ad8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ada:	4a08      	ldr	r2, [pc, #32]	@ (8003afc <HAL_MspInit+0x44>)
 8003adc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ae0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ae2:	4b06      	ldr	r3, [pc, #24]	@ (8003afc <HAL_MspInit+0x44>)
 8003ae4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aea:	603b      	str	r3, [r7, #0]
 8003aec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8003aee:	f001 f9ef 	bl	8004ed0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003af2:	bf00      	nop
 8003af4:	3708      	adds	r7, #8
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bd80      	pop	{r7, pc}
 8003afa:	bf00      	nop
 8003afc:	40021000 	.word	0x40021000

08003b00 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8003b44 <HAL_TIM_PWM_MspInit+0x44>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d113      	bne.n	8003b3a <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b12:	4b0d      	ldr	r3, [pc, #52]	@ (8003b48 <HAL_TIM_PWM_MspInit+0x48>)
 8003b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b16:	4a0c      	ldr	r2, [pc, #48]	@ (8003b48 <HAL_TIM_PWM_MspInit+0x48>)
 8003b18:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003b1c:	6613      	str	r3, [r2, #96]	@ 0x60
 8003b1e:	4b0a      	ldr	r3, [pc, #40]	@ (8003b48 <HAL_TIM_PWM_MspInit+0x48>)
 8003b20:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b22:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b26:	60fb      	str	r3, [r7, #12]
 8003b28:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	2019      	movs	r0, #25
 8003b30:	f000 fbd3 	bl	80042da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003b34:	2019      	movs	r0, #25
 8003b36:	f000 fbea 	bl	800430e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003b3a:	bf00      	nop
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	40012c00 	.word	0x40012c00
 8003b48:	40021000 	.word	0x40021000

08003b4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b5c:	d10c      	bne.n	8003b78 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003b5e:	4b2b      	ldr	r3, [pc, #172]	@ (8003c0c <HAL_TIM_Base_MspInit+0xc0>)
 8003b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b62:	4a2a      	ldr	r2, [pc, #168]	@ (8003c0c <HAL_TIM_Base_MspInit+0xc0>)
 8003b64:	f043 0301 	orr.w	r3, r3, #1
 8003b68:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b6a:	4b28      	ldr	r3, [pc, #160]	@ (8003c0c <HAL_TIM_Base_MspInit+0xc0>)
 8003b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	617b      	str	r3, [r7, #20]
 8003b74:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8003b76:	e044      	b.n	8003c02 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a24      	ldr	r2, [pc, #144]	@ (8003c10 <HAL_TIM_Base_MspInit+0xc4>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d114      	bne.n	8003bac <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003b82:	4b22      	ldr	r3, [pc, #136]	@ (8003c0c <HAL_TIM_Base_MspInit+0xc0>)
 8003b84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b86:	4a21      	ldr	r2, [pc, #132]	@ (8003c0c <HAL_TIM_Base_MspInit+0xc0>)
 8003b88:	f043 0304 	orr.w	r3, r3, #4
 8003b8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8003c0c <HAL_TIM_Base_MspInit+0xc0>)
 8003b90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b92:	f003 0304 	and.w	r3, r3, #4
 8003b96:	613b      	str	r3, [r7, #16]
 8003b98:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	201e      	movs	r0, #30
 8003ba0:	f000 fb9b 	bl	80042da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8003ba4:	201e      	movs	r0, #30
 8003ba6:	f000 fbb2 	bl	800430e <HAL_NVIC_EnableIRQ>
}
 8003baa:	e02a      	b.n	8003c02 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	4a18      	ldr	r2, [pc, #96]	@ (8003c14 <HAL_TIM_Base_MspInit+0xc8>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d10c      	bne.n	8003bd0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003bb6:	4b15      	ldr	r3, [pc, #84]	@ (8003c0c <HAL_TIM_Base_MspInit+0xc0>)
 8003bb8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bba:	4a14      	ldr	r2, [pc, #80]	@ (8003c0c <HAL_TIM_Base_MspInit+0xc0>)
 8003bbc:	f043 0308 	orr.w	r3, r3, #8
 8003bc0:	6593      	str	r3, [r2, #88]	@ 0x58
 8003bc2:	4b12      	ldr	r3, [pc, #72]	@ (8003c0c <HAL_TIM_Base_MspInit+0xc0>)
 8003bc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
}
 8003bce:	e018      	b.n	8003c02 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM16)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a10      	ldr	r2, [pc, #64]	@ (8003c18 <HAL_TIM_Base_MspInit+0xcc>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d113      	bne.n	8003c02 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003bda:	4b0c      	ldr	r3, [pc, #48]	@ (8003c0c <HAL_TIM_Base_MspInit+0xc0>)
 8003bdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bde:	4a0b      	ldr	r2, [pc, #44]	@ (8003c0c <HAL_TIM_Base_MspInit+0xc0>)
 8003be0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003be4:	6613      	str	r3, [r2, #96]	@ 0x60
 8003be6:	4b09      	ldr	r3, [pc, #36]	@ (8003c0c <HAL_TIM_Base_MspInit+0xc0>)
 8003be8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bee:	60bb      	str	r3, [r7, #8]
 8003bf0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	2100      	movs	r1, #0
 8003bf6:	2019      	movs	r0, #25
 8003bf8:	f000 fb6f 	bl	80042da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003bfc:	2019      	movs	r0, #25
 8003bfe:	f000 fb86 	bl	800430e <HAL_NVIC_EnableIRQ>
}
 8003c02:	bf00      	nop
 8003c04:	3718      	adds	r7, #24
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40021000 	.word	0x40021000
 8003c10:	40000800 	.word	0x40000800
 8003c14:	40000c00 	.word	0x40000c00
 8003c18:	40014400 	.word	0x40014400

08003c1c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b08a      	sub	sp, #40	@ 0x28
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c24:	f107 0314 	add.w	r3, r7, #20
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]
 8003c2c:	605a      	str	r2, [r3, #4]
 8003c2e:	609a      	str	r2, [r3, #8]
 8003c30:	60da      	str	r2, [r3, #12]
 8003c32:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a1b      	ldr	r2, [pc, #108]	@ (8003ca8 <HAL_TIM_Encoder_MspInit+0x8c>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d130      	bne.n	8003ca0 <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c3e:	4b1b      	ldr	r3, [pc, #108]	@ (8003cac <HAL_TIM_Encoder_MspInit+0x90>)
 8003c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c42:	4a1a      	ldr	r2, [pc, #104]	@ (8003cac <HAL_TIM_Encoder_MspInit+0x90>)
 8003c44:	f043 0302 	orr.w	r3, r3, #2
 8003c48:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c4a:	4b18      	ldr	r3, [pc, #96]	@ (8003cac <HAL_TIM_Encoder_MspInit+0x90>)
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	613b      	str	r3, [r7, #16]
 8003c54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c56:	4b15      	ldr	r3, [pc, #84]	@ (8003cac <HAL_TIM_Encoder_MspInit+0x90>)
 8003c58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c5a:	4a14      	ldr	r2, [pc, #80]	@ (8003cac <HAL_TIM_Encoder_MspInit+0x90>)
 8003c5c:	f043 0301 	orr.w	r3, r3, #1
 8003c60:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003c62:	4b12      	ldr	r3, [pc, #72]	@ (8003cac <HAL_TIM_Encoder_MspInit+0x90>)
 8003c64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c6e:	23c0      	movs	r3, #192	@ 0xc0
 8003c70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c72:	2302      	movs	r3, #2
 8003c74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c76:	2300      	movs	r3, #0
 8003c78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c7e:	2302      	movs	r3, #2
 8003c80:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c82:	f107 0314 	add.w	r3, r7, #20
 8003c86:	4619      	mov	r1, r3
 8003c88:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003c8c:	f000 fe8c 	bl	80049a8 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003c90:	2200      	movs	r2, #0
 8003c92:	2100      	movs	r1, #0
 8003c94:	201d      	movs	r0, #29
 8003c96:	f000 fb20 	bl	80042da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003c9a:	201d      	movs	r0, #29
 8003c9c:	f000 fb37 	bl	800430e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003ca0:	bf00      	nop
 8003ca2:	3728      	adds	r7, #40	@ 0x28
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	40000400 	.word	0x40000400
 8003cac:	40021000 	.word	0x40021000

08003cb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b088      	sub	sp, #32
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cb8:	f107 030c 	add.w	r3, r7, #12
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	601a      	str	r2, [r3, #0]
 8003cc0:	605a      	str	r2, [r3, #4]
 8003cc2:	609a      	str	r2, [r3, #8]
 8003cc4:	60da      	str	r2, [r3, #12]
 8003cc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a11      	ldr	r2, [pc, #68]	@ (8003d14 <HAL_TIM_MspPostInit+0x64>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d11b      	bne.n	8003d0a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cd2:	4b11      	ldr	r3, [pc, #68]	@ (8003d18 <HAL_TIM_MspPostInit+0x68>)
 8003cd4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cd6:	4a10      	ldr	r2, [pc, #64]	@ (8003d18 <HAL_TIM_MspPostInit+0x68>)
 8003cd8:	f043 0304 	orr.w	r3, r3, #4
 8003cdc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003cde:	4b0e      	ldr	r3, [pc, #56]	@ (8003d18 <HAL_TIM_MspPostInit+0x68>)
 8003ce0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ce2:	f003 0304 	and.w	r3, r3, #4
 8003ce6:	60bb      	str	r3, [r7, #8]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003cea:	2301      	movs	r3, #1
 8003cec:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cee:	2302      	movs	r3, #2
 8003cf0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003cfa:	2302      	movs	r3, #2
 8003cfc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cfe:	f107 030c 	add.w	r3, r7, #12
 8003d02:	4619      	mov	r1, r3
 8003d04:	4805      	ldr	r0, [pc, #20]	@ (8003d1c <HAL_TIM_MspPostInit+0x6c>)
 8003d06:	f000 fe4f 	bl	80049a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003d0a:	bf00      	nop
 8003d0c:	3720      	adds	r7, #32
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	40012c00 	.word	0x40012c00
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	48000800 	.word	0x48000800

08003d20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b09e      	sub	sp, #120	@ 0x78
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d28:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	601a      	str	r2, [r3, #0]
 8003d30:	605a      	str	r2, [r3, #4]
 8003d32:	609a      	str	r2, [r3, #8]
 8003d34:	60da      	str	r2, [r3, #12]
 8003d36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d38:	f107 0310 	add.w	r3, r7, #16
 8003d3c:	2254      	movs	r2, #84	@ 0x54
 8003d3e:	2100      	movs	r1, #0
 8003d40:	4618      	mov	r0, r3
 8003d42:	f006 f82d 	bl	8009da0 <memset>
  if(huart->Instance==USART2)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a4d      	ldr	r2, [pc, #308]	@ (8003e80 <HAL_UART_MspInit+0x160>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	f040 8092 	bne.w	8003e76 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003d52:	2302      	movs	r3, #2
 8003d54:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003d56:	2300      	movs	r3, #0
 8003d58:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d5a:	f107 0310 	add.w	r3, r7, #16
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f001 fdf4 	bl	800594c <HAL_RCCEx_PeriphCLKConfig>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003d6a:	f7ff fd31 	bl	80037d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d6e:	4b45      	ldr	r3, [pc, #276]	@ (8003e84 <HAL_UART_MspInit+0x164>)
 8003d70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d72:	4a44      	ldr	r2, [pc, #272]	@ (8003e84 <HAL_UART_MspInit+0x164>)
 8003d74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d78:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d7a:	4b42      	ldr	r3, [pc, #264]	@ (8003e84 <HAL_UART_MspInit+0x164>)
 8003d7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003d7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d82:	60fb      	str	r3, [r7, #12]
 8003d84:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d86:	4b3f      	ldr	r3, [pc, #252]	@ (8003e84 <HAL_UART_MspInit+0x164>)
 8003d88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d8a:	4a3e      	ldr	r2, [pc, #248]	@ (8003e84 <HAL_UART_MspInit+0x164>)
 8003d8c:	f043 0301 	orr.w	r3, r3, #1
 8003d90:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d92:	4b3c      	ldr	r3, [pc, #240]	@ (8003e84 <HAL_UART_MspInit+0x164>)
 8003d94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	60bb      	str	r3, [r7, #8]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003d9e:	230c      	movs	r3, #12
 8003da0:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003da2:	2302      	movs	r3, #2
 8003da4:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003da6:	2300      	movs	r3, #0
 8003da8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003daa:	2300      	movs	r3, #0
 8003dac:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003dae:	2307      	movs	r3, #7
 8003db0:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003db2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003db6:	4619      	mov	r1, r3
 8003db8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003dbc:	f000 fdf4 	bl	80049a8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8003dc0:	4b31      	ldr	r3, [pc, #196]	@ (8003e88 <HAL_UART_MspInit+0x168>)
 8003dc2:	4a32      	ldr	r2, [pc, #200]	@ (8003e8c <HAL_UART_MspInit+0x16c>)
 8003dc4:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003dc6:	4b30      	ldr	r3, [pc, #192]	@ (8003e88 <HAL_UART_MspInit+0x168>)
 8003dc8:	221b      	movs	r2, #27
 8003dca:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003dcc:	4b2e      	ldr	r3, [pc, #184]	@ (8003e88 <HAL_UART_MspInit+0x168>)
 8003dce:	2210      	movs	r2, #16
 8003dd0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003dd2:	4b2d      	ldr	r3, [pc, #180]	@ (8003e88 <HAL_UART_MspInit+0x168>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003dd8:	4b2b      	ldr	r3, [pc, #172]	@ (8003e88 <HAL_UART_MspInit+0x168>)
 8003dda:	2280      	movs	r2, #128	@ 0x80
 8003ddc:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003dde:	4b2a      	ldr	r3, [pc, #168]	@ (8003e88 <HAL_UART_MspInit+0x168>)
 8003de0:	2200      	movs	r2, #0
 8003de2:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003de4:	4b28      	ldr	r3, [pc, #160]	@ (8003e88 <HAL_UART_MspInit+0x168>)
 8003de6:	2200      	movs	r2, #0
 8003de8:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003dea:	4b27      	ldr	r3, [pc, #156]	@ (8003e88 <HAL_UART_MspInit+0x168>)
 8003dec:	2200      	movs	r2, #0
 8003dee:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003df0:	4b25      	ldr	r3, [pc, #148]	@ (8003e88 <HAL_UART_MspInit+0x168>)
 8003df2:	2200      	movs	r2, #0
 8003df4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003df6:	4824      	ldr	r0, [pc, #144]	@ (8003e88 <HAL_UART_MspInit+0x168>)
 8003df8:	f000 faa4 	bl	8004344 <HAL_DMA_Init>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d001      	beq.n	8003e06 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8003e02:	f7ff fce5 	bl	80037d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a1f      	ldr	r2, [pc, #124]	@ (8003e88 <HAL_UART_MspInit+0x168>)
 8003e0a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003e0c:	4a1e      	ldr	r2, [pc, #120]	@ (8003e88 <HAL_UART_MspInit+0x168>)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8003e12:	4b1f      	ldr	r3, [pc, #124]	@ (8003e90 <HAL_UART_MspInit+0x170>)
 8003e14:	4a1f      	ldr	r2, [pc, #124]	@ (8003e94 <HAL_UART_MspInit+0x174>)
 8003e16:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003e18:	4b1d      	ldr	r3, [pc, #116]	@ (8003e90 <HAL_UART_MspInit+0x170>)
 8003e1a:	221a      	movs	r2, #26
 8003e1c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8003e90 <HAL_UART_MspInit+0x170>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e24:	4b1a      	ldr	r3, [pc, #104]	@ (8003e90 <HAL_UART_MspInit+0x170>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003e2a:	4b19      	ldr	r3, [pc, #100]	@ (8003e90 <HAL_UART_MspInit+0x170>)
 8003e2c:	2280      	movs	r2, #128	@ 0x80
 8003e2e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e30:	4b17      	ldr	r3, [pc, #92]	@ (8003e90 <HAL_UART_MspInit+0x170>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e36:	4b16      	ldr	r3, [pc, #88]	@ (8003e90 <HAL_UART_MspInit+0x170>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003e3c:	4b14      	ldr	r3, [pc, #80]	@ (8003e90 <HAL_UART_MspInit+0x170>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e42:	4b13      	ldr	r3, [pc, #76]	@ (8003e90 <HAL_UART_MspInit+0x170>)
 8003e44:	2200      	movs	r2, #0
 8003e46:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003e48:	4811      	ldr	r0, [pc, #68]	@ (8003e90 <HAL_UART_MspInit+0x170>)
 8003e4a:	f000 fa7b 	bl	8004344 <HAL_DMA_Init>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 8003e54:	f7ff fcbc 	bl	80037d0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a0d      	ldr	r2, [pc, #52]	@ (8003e90 <HAL_UART_MspInit+0x170>)
 8003e5c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8003e60:	4a0b      	ldr	r2, [pc, #44]	@ (8003e90 <HAL_UART_MspInit+0x170>)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003e66:	2200      	movs	r2, #0
 8003e68:	2100      	movs	r1, #0
 8003e6a:	2026      	movs	r0, #38	@ 0x26
 8003e6c:	f000 fa35 	bl	80042da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003e70:	2026      	movs	r0, #38	@ 0x26
 8003e72:	f000 fa4c 	bl	800430e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003e76:	bf00      	nop
 8003e78:	3778      	adds	r7, #120	@ 0x78
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	40004400 	.word	0x40004400
 8003e84:	40021000 	.word	0x40021000
 8003e88:	200007d4 	.word	0x200007d4
 8003e8c:	40020008 	.word	0x40020008
 8003e90:	20000834 	.word	0x20000834
 8003e94:	4002001c 	.word	0x4002001c

08003e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003e9c:	bf00      	nop
 8003e9e:	e7fd      	b.n	8003e9c <NMI_Handler+0x4>

08003ea0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003ea4:	bf00      	nop
 8003ea6:	e7fd      	b.n	8003ea4 <HardFault_Handler+0x4>

08003ea8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003eac:	bf00      	nop
 8003eae:	e7fd      	b.n	8003eac <MemManage_Handler+0x4>

08003eb0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003eb0:	b480      	push	{r7}
 8003eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003eb4:	bf00      	nop
 8003eb6:	e7fd      	b.n	8003eb4 <BusFault_Handler+0x4>

08003eb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ebc:	bf00      	nop
 8003ebe:	e7fd      	b.n	8003ebc <UsageFault_Handler+0x4>

08003ec0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003ec4:	bf00      	nop
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr

08003ece <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ed2:	bf00      	nop
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr

08003edc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003edc:	b480      	push	{r7}
 8003ede:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ee0:	bf00      	nop
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003eee:	f000 f8d9 	bl	80040a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ef2:	bf00      	nop
 8003ef4:	bd80      	pop	{r7, pc}
	...

08003ef8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003efc:	4802      	ldr	r0, [pc, #8]	@ (8003f08 <DMA1_Channel1_IRQHandler+0x10>)
 8003efe:	f000 fc04 	bl	800470a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003f02:	bf00      	nop
 8003f04:	bd80      	pop	{r7, pc}
 8003f06:	bf00      	nop
 8003f08:	200007d4 	.word	0x200007d4

08003f0c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003f10:	4802      	ldr	r0, [pc, #8]	@ (8003f1c <DMA1_Channel2_IRQHandler+0x10>)
 8003f12:	f000 fbfa 	bl	800470a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003f16:	bf00      	nop
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	20000834 	.word	0x20000834

08003f20 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003f24:	4803      	ldr	r0, [pc, #12]	@ (8003f34 <TIM1_UP_TIM16_IRQHandler+0x14>)
 8003f26:	f002 fc59 	bl	80067dc <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8003f2a:	4803      	ldr	r0, [pc, #12]	@ (8003f38 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8003f2c:	f002 fc56 	bl	80067dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003f30:	bf00      	nop
 8003f32:	bd80      	pop	{r7, pc}
 8003f34:	20000240 	.word	0x20000240
 8003f38:	2000063c 	.word	0x2000063c

08003f3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003f40:	4802      	ldr	r0, [pc, #8]	@ (8003f4c <TIM3_IRQHandler+0x10>)
 8003f42:	f002 fc4b 	bl	80067dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003f46:	bf00      	nop
 8003f48:	bd80      	pop	{r7, pc}
 8003f4a:	bf00      	nop
 8003f4c:	200003d8 	.word	0x200003d8

08003f50 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8003f54:	4802      	ldr	r0, [pc, #8]	@ (8003f60 <TIM4_IRQHandler+0x10>)
 8003f56:	f002 fc41 	bl	80067dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8003f5a:	bf00      	nop
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	200004a4 	.word	0x200004a4

08003f64 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003f68:	4802      	ldr	r0, [pc, #8]	@ (8003f74 <USART2_IRQHandler+0x10>)
 8003f6a:	f004 fa0b 	bl	8008384 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003f6e:	bf00      	nop
 8003f70:	bd80      	pop	{r7, pc}
 8003f72:	bf00      	nop
 8003f74:	20000708 	.word	0x20000708

08003f78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003f78:	b580      	push	{r7, lr}
 8003f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8003f7c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003f80:	f000 fede 	bl	8004d40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003f84:	bf00      	nop
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003f8c:	4b06      	ldr	r3, [pc, #24]	@ (8003fa8 <SystemInit+0x20>)
 8003f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f92:	4a05      	ldr	r2, [pc, #20]	@ (8003fa8 <SystemInit+0x20>)
 8003f94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f9c:	bf00      	nop
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	e000ed00 	.word	0xe000ed00

08003fac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8003fac:	480d      	ldr	r0, [pc, #52]	@ (8003fe4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8003fae:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003fb0:	f7ff ffea 	bl	8003f88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003fb4:	480c      	ldr	r0, [pc, #48]	@ (8003fe8 <LoopForever+0x6>)
  ldr r1, =_edata
 8003fb6:	490d      	ldr	r1, [pc, #52]	@ (8003fec <LoopForever+0xa>)
  ldr r2, =_sidata
 8003fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8003ff0 <LoopForever+0xe>)
  movs r3, #0
 8003fba:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8003fbc:	e002      	b.n	8003fc4 <LoopCopyDataInit>

08003fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fc2:	3304      	adds	r3, #4

08003fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fc8:	d3f9      	bcc.n	8003fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fca:	4a0a      	ldr	r2, [pc, #40]	@ (8003ff4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003fcc:	4c0a      	ldr	r4, [pc, #40]	@ (8003ff8 <LoopForever+0x16>)
  movs r3, #0
 8003fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fd0:	e001      	b.n	8003fd6 <LoopFillZerobss>

08003fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fd4:	3204      	adds	r2, #4

08003fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fd8:	d3fb      	bcc.n	8003fd2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003fda:	f005 fee9 	bl	8009db0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003fde:	f7fd fab5 	bl	800154c <main>

08003fe2 <LoopForever>:

LoopForever:
    b LoopForever
 8003fe2:	e7fe      	b.n	8003fe2 <LoopForever>
  ldr   r0, =_estack
 8003fe4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fec:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8003ff0:	08009e7c 	.word	0x08009e7c
  ldr r2, =_sbss
 8003ff4:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8003ff8:	2000105c 	.word	0x2000105c

08003ffc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ffc:	e7fe      	b.n	8003ffc <ADC1_2_IRQHandler>

08003ffe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b082      	sub	sp, #8
 8004002:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004004:	2300      	movs	r3, #0
 8004006:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004008:	2003      	movs	r0, #3
 800400a:	f000 f95b 	bl	80042c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800400e:	2000      	movs	r0, #0
 8004010:	f000 f80e 	bl	8004030 <HAL_InitTick>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d002      	beq.n	8004020 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	71fb      	strb	r3, [r7, #7]
 800401e:	e001      	b.n	8004024 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004020:	f7ff fd4a 	bl	8003ab8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004024:	79fb      	ldrb	r3, [r7, #7]

}
 8004026:	4618      	mov	r0, r3
 8004028:	3708      	adds	r7, #8
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004038:	2300      	movs	r3, #0
 800403a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800403c:	4b16      	ldr	r3, [pc, #88]	@ (8004098 <HAL_InitTick+0x68>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d022      	beq.n	800408a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8004044:	4b15      	ldr	r3, [pc, #84]	@ (800409c <HAL_InitTick+0x6c>)
 8004046:	681a      	ldr	r2, [r3, #0]
 8004048:	4b13      	ldr	r3, [pc, #76]	@ (8004098 <HAL_InitTick+0x68>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8004050:	fbb1 f3f3 	udiv	r3, r1, r3
 8004054:	fbb2 f3f3 	udiv	r3, r2, r3
 8004058:	4618      	mov	r0, r3
 800405a:	f000 f966 	bl	800432a <HAL_SYSTICK_Config>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d10f      	bne.n	8004084 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2b0f      	cmp	r3, #15
 8004068:	d809      	bhi.n	800407e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800406a:	2200      	movs	r2, #0
 800406c:	6879      	ldr	r1, [r7, #4]
 800406e:	f04f 30ff 	mov.w	r0, #4294967295
 8004072:	f000 f932 	bl	80042da <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004076:	4a0a      	ldr	r2, [pc, #40]	@ (80040a0 <HAL_InitTick+0x70>)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6013      	str	r3, [r2, #0]
 800407c:	e007      	b.n	800408e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	73fb      	strb	r3, [r7, #15]
 8004082:	e004      	b.n	800408e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004084:	2301      	movs	r3, #1
 8004086:	73fb      	strb	r3, [r7, #15]
 8004088:	e001      	b.n	800408e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800408e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	2000021c 	.word	0x2000021c
 800409c:	20000214 	.word	0x20000214
 80040a0:	20000218 	.word	0x20000218

080040a4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80040a4:	b480      	push	{r7}
 80040a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80040a8:	4b05      	ldr	r3, [pc, #20]	@ (80040c0 <HAL_IncTick+0x1c>)
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	4b05      	ldr	r3, [pc, #20]	@ (80040c4 <HAL_IncTick+0x20>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4413      	add	r3, r2
 80040b2:	4a03      	ldr	r2, [pc, #12]	@ (80040c0 <HAL_IncTick+0x1c>)
 80040b4:	6013      	str	r3, [r2, #0]
}
 80040b6:	bf00      	nop
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr
 80040c0:	20001058 	.word	0x20001058
 80040c4:	2000021c 	.word	0x2000021c

080040c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80040c8:	b480      	push	{r7}
 80040ca:	af00      	add	r7, sp, #0
  return uwTick;
 80040cc:	4b03      	ldr	r3, [pc, #12]	@ (80040dc <HAL_GetTick+0x14>)
 80040ce:	681b      	ldr	r3, [r3, #0]
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
 80040da:	bf00      	nop
 80040dc:	20001058 	.word	0x20001058

080040e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040e8:	f7ff ffee 	bl	80040c8 <HAL_GetTick>
 80040ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f8:	d004      	beq.n	8004104 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80040fa:	4b09      	ldr	r3, [pc, #36]	@ (8004120 <HAL_Delay+0x40>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	4413      	add	r3, r2
 8004102:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004104:	bf00      	nop
 8004106:	f7ff ffdf 	bl	80040c8 <HAL_GetTick>
 800410a:	4602      	mov	r2, r0
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	429a      	cmp	r2, r3
 8004114:	d8f7      	bhi.n	8004106 <HAL_Delay+0x26>
  {
  }
}
 8004116:	bf00      	nop
 8004118:	bf00      	nop
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	2000021c 	.word	0x2000021c

08004124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f003 0307 	and.w	r3, r3, #7
 8004132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004134:	4b0c      	ldr	r3, [pc, #48]	@ (8004168 <__NVIC_SetPriorityGrouping+0x44>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004140:	4013      	ands	r3, r2
 8004142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800414c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004156:	4a04      	ldr	r2, [pc, #16]	@ (8004168 <__NVIC_SetPriorityGrouping+0x44>)
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	60d3      	str	r3, [r2, #12]
}
 800415c:	bf00      	nop
 800415e:	3714      	adds	r7, #20
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr
 8004168:	e000ed00 	.word	0xe000ed00

0800416c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004170:	4b04      	ldr	r3, [pc, #16]	@ (8004184 <__NVIC_GetPriorityGrouping+0x18>)
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	0a1b      	lsrs	r3, r3, #8
 8004176:	f003 0307 	and.w	r3, r3, #7
}
 800417a:	4618      	mov	r0, r3
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr
 8004184:	e000ed00 	.word	0xe000ed00

08004188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	4603      	mov	r3, r0
 8004190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004196:	2b00      	cmp	r3, #0
 8004198:	db0b      	blt.n	80041b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800419a:	79fb      	ldrb	r3, [r7, #7]
 800419c:	f003 021f 	and.w	r2, r3, #31
 80041a0:	4907      	ldr	r1, [pc, #28]	@ (80041c0 <__NVIC_EnableIRQ+0x38>)
 80041a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a6:	095b      	lsrs	r3, r3, #5
 80041a8:	2001      	movs	r0, #1
 80041aa:	fa00 f202 	lsl.w	r2, r0, r2
 80041ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041b2:	bf00      	nop
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	e000e100 	.word	0xe000e100

080041c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	4603      	mov	r3, r0
 80041cc:	6039      	str	r1, [r7, #0]
 80041ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	db0a      	blt.n	80041ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	490c      	ldr	r1, [pc, #48]	@ (8004210 <__NVIC_SetPriority+0x4c>)
 80041de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e2:	0112      	lsls	r2, r2, #4
 80041e4:	b2d2      	uxtb	r2, r2
 80041e6:	440b      	add	r3, r1
 80041e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80041ec:	e00a      	b.n	8004204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	4908      	ldr	r1, [pc, #32]	@ (8004214 <__NVIC_SetPriority+0x50>)
 80041f4:	79fb      	ldrb	r3, [r7, #7]
 80041f6:	f003 030f 	and.w	r3, r3, #15
 80041fa:	3b04      	subs	r3, #4
 80041fc:	0112      	lsls	r2, r2, #4
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	440b      	add	r3, r1
 8004202:	761a      	strb	r2, [r3, #24]
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr
 8004210:	e000e100 	.word	0xe000e100
 8004214:	e000ed00 	.word	0xe000ed00

08004218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004218:	b480      	push	{r7}
 800421a:	b089      	sub	sp, #36	@ 0x24
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f003 0307 	and.w	r3, r3, #7
 800422a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	f1c3 0307 	rsb	r3, r3, #7
 8004232:	2b04      	cmp	r3, #4
 8004234:	bf28      	it	cs
 8004236:	2304      	movcs	r3, #4
 8004238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	3304      	adds	r3, #4
 800423e:	2b06      	cmp	r3, #6
 8004240:	d902      	bls.n	8004248 <NVIC_EncodePriority+0x30>
 8004242:	69fb      	ldr	r3, [r7, #28]
 8004244:	3b03      	subs	r3, #3
 8004246:	e000      	b.n	800424a <NVIC_EncodePriority+0x32>
 8004248:	2300      	movs	r3, #0
 800424a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800424c:	f04f 32ff 	mov.w	r2, #4294967295
 8004250:	69bb      	ldr	r3, [r7, #24]
 8004252:	fa02 f303 	lsl.w	r3, r2, r3
 8004256:	43da      	mvns	r2, r3
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	401a      	ands	r2, r3
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004260:	f04f 31ff 	mov.w	r1, #4294967295
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	fa01 f303 	lsl.w	r3, r1, r3
 800426a:	43d9      	mvns	r1, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004270:	4313      	orrs	r3, r2
         );
}
 8004272:	4618      	mov	r0, r3
 8004274:	3724      	adds	r7, #36	@ 0x24
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
	...

08004280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3b01      	subs	r3, #1
 800428c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004290:	d301      	bcc.n	8004296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004292:	2301      	movs	r3, #1
 8004294:	e00f      	b.n	80042b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004296:	4a0a      	ldr	r2, [pc, #40]	@ (80042c0 <SysTick_Config+0x40>)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3b01      	subs	r3, #1
 800429c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800429e:	210f      	movs	r1, #15
 80042a0:	f04f 30ff 	mov.w	r0, #4294967295
 80042a4:	f7ff ff8e 	bl	80041c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042a8:	4b05      	ldr	r3, [pc, #20]	@ (80042c0 <SysTick_Config+0x40>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042ae:	4b04      	ldr	r3, [pc, #16]	@ (80042c0 <SysTick_Config+0x40>)
 80042b0:	2207      	movs	r2, #7
 80042b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	e000e010 	.word	0xe000e010

080042c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b082      	sub	sp, #8
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7ff ff29 	bl	8004124 <__NVIC_SetPriorityGrouping>
}
 80042d2:	bf00      	nop
 80042d4:	3708      	adds	r7, #8
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}

080042da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042da:	b580      	push	{r7, lr}
 80042dc:	b086      	sub	sp, #24
 80042de:	af00      	add	r7, sp, #0
 80042e0:	4603      	mov	r3, r0
 80042e2:	60b9      	str	r1, [r7, #8]
 80042e4:	607a      	str	r2, [r7, #4]
 80042e6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042e8:	f7ff ff40 	bl	800416c <__NVIC_GetPriorityGrouping>
 80042ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	68b9      	ldr	r1, [r7, #8]
 80042f2:	6978      	ldr	r0, [r7, #20]
 80042f4:	f7ff ff90 	bl	8004218 <NVIC_EncodePriority>
 80042f8:	4602      	mov	r2, r0
 80042fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042fe:	4611      	mov	r1, r2
 8004300:	4618      	mov	r0, r3
 8004302:	f7ff ff5f 	bl	80041c4 <__NVIC_SetPriority>
}
 8004306:	bf00      	nop
 8004308:	3718      	adds	r7, #24
 800430a:	46bd      	mov	sp, r7
 800430c:	bd80      	pop	{r7, pc}

0800430e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800430e:	b580      	push	{r7, lr}
 8004310:	b082      	sub	sp, #8
 8004312:	af00      	add	r7, sp, #0
 8004314:	4603      	mov	r3, r0
 8004316:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800431c:	4618      	mov	r0, r3
 800431e:	f7ff ff33 	bl	8004188 <__NVIC_EnableIRQ>
}
 8004322:	bf00      	nop
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800432a:	b580      	push	{r7, lr}
 800432c:	b082      	sub	sp, #8
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7ff ffa4 	bl	8004280 <SysTick_Config>
 8004338:	4603      	mov	r3, r0
}
 800433a:	4618      	mov	r0, r3
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}
	...

08004344 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b084      	sub	sp, #16
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d101      	bne.n	8004356 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e08d      	b.n	8004472 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	461a      	mov	r2, r3
 800435c:	4b47      	ldr	r3, [pc, #284]	@ (800447c <HAL_DMA_Init+0x138>)
 800435e:	429a      	cmp	r2, r3
 8004360:	d80f      	bhi.n	8004382 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	461a      	mov	r2, r3
 8004368:	4b45      	ldr	r3, [pc, #276]	@ (8004480 <HAL_DMA_Init+0x13c>)
 800436a:	4413      	add	r3, r2
 800436c:	4a45      	ldr	r2, [pc, #276]	@ (8004484 <HAL_DMA_Init+0x140>)
 800436e:	fba2 2303 	umull	r2, r3, r2, r3
 8004372:	091b      	lsrs	r3, r3, #4
 8004374:	009a      	lsls	r2, r3, #2
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a42      	ldr	r2, [pc, #264]	@ (8004488 <HAL_DMA_Init+0x144>)
 800437e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004380:	e00e      	b.n	80043a0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	461a      	mov	r2, r3
 8004388:	4b40      	ldr	r3, [pc, #256]	@ (800448c <HAL_DMA_Init+0x148>)
 800438a:	4413      	add	r3, r2
 800438c:	4a3d      	ldr	r2, [pc, #244]	@ (8004484 <HAL_DMA_Init+0x140>)
 800438e:	fba2 2303 	umull	r2, r3, r2, r3
 8004392:	091b      	lsrs	r3, r3, #4
 8004394:	009a      	lsls	r2, r3, #2
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	4a3c      	ldr	r2, [pc, #240]	@ (8004490 <HAL_DMA_Init+0x14c>)
 800439e:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2202      	movs	r2, #2
 80043a4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80043b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043ba:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80043c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	691b      	ldr	r3, [r3, #16]
 80043ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043dc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80043f2:	6878      	ldr	r0, [r7, #4]
 80043f4:	f000 fa76 	bl	80048e4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004400:	d102      	bne.n	8004408 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800441c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d010      	beq.n	8004448 <HAL_DMA_Init+0x104>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	2b04      	cmp	r3, #4
 800442c:	d80c      	bhi.n	8004448 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800442e:	6878      	ldr	r0, [r7, #4]
 8004430:	f000 fa96 	bl	8004960 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004438:	2200      	movs	r2, #0
 800443a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004444:	605a      	str	r2, [r3, #4]
 8004446:	e008      	b.n	800445a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2200      	movs	r2, #0
 800444c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40020407 	.word	0x40020407
 8004480:	bffdfff8 	.word	0xbffdfff8
 8004484:	cccccccd 	.word	0xcccccccd
 8004488:	40020000 	.word	0x40020000
 800448c:	bffdfbf8 	.word	0xbffdfbf8
 8004490:	40020400 	.word	0x40020400

08004494 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044a2:	2300      	movs	r3, #0
 80044a4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d101      	bne.n	80044b4 <HAL_DMA_Start_IT+0x20>
 80044b0:	2302      	movs	r3, #2
 80044b2:	e066      	b.n	8004582 <HAL_DMA_Start_IT+0xee>
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d155      	bne.n	8004574 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f022 0201 	bic.w	r2, r2, #1
 80044e4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	68b9      	ldr	r1, [r7, #8]
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f000 f9bb 	bl	8004868 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d008      	beq.n	800450c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681a      	ldr	r2, [r3, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f042 020e 	orr.w	r2, r2, #14
 8004508:	601a      	str	r2, [r3, #0]
 800450a:	e00f      	b.n	800452c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f022 0204 	bic.w	r2, r2, #4
 800451a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f042 020a 	orr.w	r2, r2, #10
 800452a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d007      	beq.n	800454a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004544:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004548:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800454e:	2b00      	cmp	r3, #0
 8004550:	d007      	beq.n	8004562 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800455c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004560:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f042 0201 	orr.w	r2, r2, #1
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	e005      	b.n	8004580 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800457c:	2302      	movs	r3, #2
 800457e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004580:	7dfb      	ldrb	r3, [r7, #23]
}
 8004582:	4618      	mov	r0, r3
 8004584:	3718      	adds	r7, #24
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800458a:	b480      	push	{r7}
 800458c:	b085      	sub	sp, #20
 800458e:	af00      	add	r7, sp, #0
 8004590:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004592:	2300      	movs	r3, #0
 8004594:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d005      	beq.n	80045ae <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2204      	movs	r2, #4
 80045a6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	73fb      	strb	r3, [r7, #15]
 80045ac:	e037      	b.n	800461e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f022 020e 	bic.w	r2, r2, #14
 80045bc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045c2:	681a      	ldr	r2, [r3, #0]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80045c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80045cc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0201 	bic.w	r2, r2, #1
 80045dc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045e2:	f003 021f 	and.w	r2, r3, #31
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ea:	2101      	movs	r1, #1
 80045ec:	fa01 f202 	lsl.w	r2, r1, r2
 80045f0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80045f6:	687a      	ldr	r2, [r7, #4]
 80045f8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80045fa:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004600:	2b00      	cmp	r3, #0
 8004602:	d00c      	beq.n	800461e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800460e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004612:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004618:	687a      	ldr	r2, [r7, #4]
 800461a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800461c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800462e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800463c:	b580      	push	{r7, lr}
 800463e:	b084      	sub	sp, #16
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004644:	2300      	movs	r3, #0
 8004646:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800464e:	b2db      	uxtb	r3, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d00d      	beq.n	8004670 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2204      	movs	r2, #4
 8004658:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2201      	movs	r2, #1
 800465e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	73fb      	strb	r3, [r7, #15]
 800466e:	e047      	b.n	8004700 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	681a      	ldr	r2, [r3, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f022 020e 	bic.w	r2, r2, #14
 800467e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681a      	ldr	r2, [r3, #0]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f022 0201 	bic.w	r2, r2, #1
 800468e:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800469a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800469e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046a4:	f003 021f 	and.w	r2, r3, #31
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ac:	2101      	movs	r1, #1
 80046ae:	fa01 f202 	lsl.w	r2, r1, r2
 80046b2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80046bc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d00c      	beq.n	80046e0 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046ca:	681a      	ldr	r2, [r3, #0]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80046d4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80046da:	687a      	ldr	r2, [r7, #4]
 80046dc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80046de:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d003      	beq.n	8004700 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046fc:	6878      	ldr	r0, [r7, #4]
 80046fe:	4798      	blx	r3
    }
  }
  return status;
 8004700:	7bfb      	ldrb	r3, [r7, #15]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b084      	sub	sp, #16
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004726:	f003 031f 	and.w	r3, r3, #31
 800472a:	2204      	movs	r2, #4
 800472c:	409a      	lsls	r2, r3
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4013      	ands	r3, r2
 8004732:	2b00      	cmp	r3, #0
 8004734:	d026      	beq.n	8004784 <HAL_DMA_IRQHandler+0x7a>
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f003 0304 	and.w	r3, r3, #4
 800473c:	2b00      	cmp	r3, #0
 800473e:	d021      	beq.n	8004784 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0320 	and.w	r3, r3, #32
 800474a:	2b00      	cmp	r3, #0
 800474c:	d107      	bne.n	800475e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0204 	bic.w	r2, r2, #4
 800475c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004762:	f003 021f 	and.w	r2, r3, #31
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476a:	2104      	movs	r1, #4
 800476c:	fa01 f202 	lsl.w	r2, r1, r2
 8004770:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004776:	2b00      	cmp	r3, #0
 8004778:	d071      	beq.n	800485e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004782:	e06c      	b.n	800485e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004788:	f003 031f 	and.w	r3, r3, #31
 800478c:	2202      	movs	r2, #2
 800478e:	409a      	lsls	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4013      	ands	r3, r2
 8004794:	2b00      	cmp	r3, #0
 8004796:	d02e      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d029      	beq.n	80047f6 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0320 	and.w	r3, r3, #32
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10b      	bne.n	80047c8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 020a 	bic.w	r2, r2, #10
 80047be:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047cc:	f003 021f 	and.w	r2, r3, #31
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d4:	2102      	movs	r1, #2
 80047d6:	fa01 f202 	lsl.w	r2, r1, r2
 80047da:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d038      	beq.n	800485e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047f0:	6878      	ldr	r0, [r7, #4]
 80047f2:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80047f4:	e033      	b.n	800485e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047fa:	f003 031f 	and.w	r3, r3, #31
 80047fe:	2208      	movs	r2, #8
 8004800:	409a      	lsls	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	4013      	ands	r3, r2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d02a      	beq.n	8004860 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	f003 0308 	and.w	r3, r3, #8
 8004810:	2b00      	cmp	r3, #0
 8004812:	d025      	beq.n	8004860 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f022 020e 	bic.w	r2, r2, #14
 8004822:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004828:	f003 021f 	and.w	r2, r3, #31
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004830:	2101      	movs	r1, #1
 8004832:	fa01 f202 	lsl.w	r2, r1, r2
 8004836:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2201      	movs	r2, #1
 8004842:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2200      	movs	r2, #0
 800484a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004852:	2b00      	cmp	r3, #0
 8004854:	d004      	beq.n	8004860 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800485e:	bf00      	nop
 8004860:	bf00      	nop
}
 8004862:	3710      	adds	r7, #16
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004868:	b480      	push	{r7}
 800486a:	b085      	sub	sp, #20
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	607a      	str	r2, [r7, #4]
 8004874:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800487a:	68fa      	ldr	r2, [r7, #12]
 800487c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800487e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004884:	2b00      	cmp	r3, #0
 8004886:	d004      	beq.n	8004892 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800488c:	68fa      	ldr	r2, [r7, #12]
 800488e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004890:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004896:	f003 021f 	and.w	r2, r3, #31
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489e:	2101      	movs	r1, #1
 80048a0:	fa01 f202 	lsl.w	r2, r1, r2
 80048a4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	683a      	ldr	r2, [r7, #0]
 80048ac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	2b10      	cmp	r3, #16
 80048b4:	d108      	bne.n	80048c8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	687a      	ldr	r2, [r7, #4]
 80048bc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80048c6:	e007      	b.n	80048d8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68ba      	ldr	r2, [r7, #8]
 80048ce:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	687a      	ldr	r2, [r7, #4]
 80048d6:	60da      	str	r2, [r3, #12]
}
 80048d8:	bf00      	nop
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	461a      	mov	r2, r3
 80048f2:	4b16      	ldr	r3, [pc, #88]	@ (800494c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d802      	bhi.n	80048fe <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80048f8:	4b15      	ldr	r3, [pc, #84]	@ (8004950 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80048fa:	617b      	str	r3, [r7, #20]
 80048fc:	e001      	b.n	8004902 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 80048fe:	4b15      	ldr	r3, [pc, #84]	@ (8004954 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004900:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	b2db      	uxtb	r3, r3
 800490c:	3b08      	subs	r3, #8
 800490e:	4a12      	ldr	r2, [pc, #72]	@ (8004958 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004910:	fba2 2303 	umull	r2, r3, r2, r3
 8004914:	091b      	lsrs	r3, r3, #4
 8004916:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800491c:	089b      	lsrs	r3, r3, #2
 800491e:	009a      	lsls	r2, r3, #2
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	4413      	add	r3, r2
 8004924:	461a      	mov	r2, r3
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a0b      	ldr	r2, [pc, #44]	@ (800495c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800492e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	f003 031f 	and.w	r3, r3, #31
 8004936:	2201      	movs	r2, #1
 8004938:	409a      	lsls	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800493e:	bf00      	nop
 8004940:	371c      	adds	r7, #28
 8004942:	46bd      	mov	sp, r7
 8004944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004948:	4770      	bx	lr
 800494a:	bf00      	nop
 800494c:	40020407 	.word	0x40020407
 8004950:	40020800 	.word	0x40020800
 8004954:	40020820 	.word	0x40020820
 8004958:	cccccccd 	.word	0xcccccccd
 800495c:	40020880 	.word	0x40020880

08004960 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	b2db      	uxtb	r3, r3
 800496e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	4b0b      	ldr	r3, [pc, #44]	@ (80049a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004974:	4413      	add	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	461a      	mov	r2, r3
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a08      	ldr	r2, [pc, #32]	@ (80049a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004982:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	3b01      	subs	r3, #1
 8004988:	f003 031f 	and.w	r3, r3, #31
 800498c:	2201      	movs	r2, #1
 800498e:	409a      	lsls	r2, r3
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004994:	bf00      	nop
 8004996:	3714      	adds	r7, #20
 8004998:	46bd      	mov	sp, r7
 800499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499e:	4770      	bx	lr
 80049a0:	1000823f 	.word	0x1000823f
 80049a4:	40020940 	.word	0x40020940

080049a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b087      	sub	sp, #28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
 80049b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80049b2:	2300      	movs	r3, #0
 80049b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80049b6:	e15a      	b.n	8004c6e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	2101      	movs	r1, #1
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	fa01 f303 	lsl.w	r3, r1, r3
 80049c4:	4013      	ands	r3, r2
 80049c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	f000 814c 	beq.w	8004c68 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	f003 0303 	and.w	r3, r3, #3
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d005      	beq.n	80049e8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80049e4:	2b02      	cmp	r3, #2
 80049e6:	d130      	bne.n	8004a4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	689b      	ldr	r3, [r3, #8]
 80049ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	005b      	lsls	r3, r3, #1
 80049f2:	2203      	movs	r2, #3
 80049f4:	fa02 f303 	lsl.w	r3, r2, r3
 80049f8:	43db      	mvns	r3, r3
 80049fa:	693a      	ldr	r2, [r7, #16]
 80049fc:	4013      	ands	r3, r2
 80049fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	68da      	ldr	r2, [r3, #12]
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	005b      	lsls	r3, r3, #1
 8004a08:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0c:	693a      	ldr	r2, [r7, #16]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	693a      	ldr	r2, [r7, #16]
 8004a16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a1e:	2201      	movs	r2, #1
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	fa02 f303 	lsl.w	r3, r2, r3
 8004a26:	43db      	mvns	r3, r3
 8004a28:	693a      	ldr	r2, [r7, #16]
 8004a2a:	4013      	ands	r3, r2
 8004a2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	091b      	lsrs	r3, r3, #4
 8004a34:	f003 0201 	and.w	r2, r3, #1
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	693a      	ldr	r2, [r7, #16]
 8004a48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f003 0303 	and.w	r3, r3, #3
 8004a52:	2b03      	cmp	r3, #3
 8004a54:	d017      	beq.n	8004a86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a5c:	697b      	ldr	r3, [r7, #20]
 8004a5e:	005b      	lsls	r3, r3, #1
 8004a60:	2203      	movs	r2, #3
 8004a62:	fa02 f303 	lsl.w	r3, r2, r3
 8004a66:	43db      	mvns	r3, r3
 8004a68:	693a      	ldr	r2, [r7, #16]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a6e:	683b      	ldr	r3, [r7, #0]
 8004a70:	689a      	ldr	r2, [r3, #8]
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	005b      	lsls	r3, r3, #1
 8004a76:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7a:	693a      	ldr	r2, [r7, #16]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f003 0303 	and.w	r3, r3, #3
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d123      	bne.n	8004ada <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	08da      	lsrs	r2, r3, #3
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	3208      	adds	r2, #8
 8004a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	f003 0307 	and.w	r3, r3, #7
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	220f      	movs	r2, #15
 8004aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8004aae:	43db      	mvns	r3, r3
 8004ab0:	693a      	ldr	r2, [r7, #16]
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	691a      	ldr	r2, [r3, #16]
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f003 0307 	and.w	r3, r3, #7
 8004ac0:	009b      	lsls	r3, r3, #2
 8004ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004acc:	697b      	ldr	r3, [r7, #20]
 8004ace:	08da      	lsrs	r2, r3, #3
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3208      	adds	r2, #8
 8004ad4:	6939      	ldr	r1, [r7, #16]
 8004ad6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	2203      	movs	r2, #3
 8004ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8004aea:	43db      	mvns	r3, r3
 8004aec:	693a      	ldr	r2, [r7, #16]
 8004aee:	4013      	ands	r3, r2
 8004af0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	f003 0203 	and.w	r2, r3, #3
 8004afa:	697b      	ldr	r3, [r7, #20]
 8004afc:	005b      	lsls	r3, r3, #1
 8004afe:	fa02 f303 	lsl.w	r3, r2, r3
 8004b02:	693a      	ldr	r2, [r7, #16]
 8004b04:	4313      	orrs	r3, r2
 8004b06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	693a      	ldr	r2, [r7, #16]
 8004b0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	f000 80a6 	beq.w	8004c68 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b1c:	4b5b      	ldr	r3, [pc, #364]	@ (8004c8c <HAL_GPIO_Init+0x2e4>)
 8004b1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b20:	4a5a      	ldr	r2, [pc, #360]	@ (8004c8c <HAL_GPIO_Init+0x2e4>)
 8004b22:	f043 0301 	orr.w	r3, r3, #1
 8004b26:	6613      	str	r3, [r2, #96]	@ 0x60
 8004b28:	4b58      	ldr	r3, [pc, #352]	@ (8004c8c <HAL_GPIO_Init+0x2e4>)
 8004b2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b2c:	f003 0301 	and.w	r3, r3, #1
 8004b30:	60bb      	str	r3, [r7, #8]
 8004b32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b34:	4a56      	ldr	r2, [pc, #344]	@ (8004c90 <HAL_GPIO_Init+0x2e8>)
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	089b      	lsrs	r3, r3, #2
 8004b3a:	3302      	adds	r3, #2
 8004b3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004b42:	697b      	ldr	r3, [r7, #20]
 8004b44:	f003 0303 	and.w	r3, r3, #3
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	220f      	movs	r2, #15
 8004b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b50:	43db      	mvns	r3, r3
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	4013      	ands	r3, r2
 8004b56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004b5e:	d01f      	beq.n	8004ba0 <HAL_GPIO_Init+0x1f8>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	4a4c      	ldr	r2, [pc, #304]	@ (8004c94 <HAL_GPIO_Init+0x2ec>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d019      	beq.n	8004b9c <HAL_GPIO_Init+0x1f4>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	4a4b      	ldr	r2, [pc, #300]	@ (8004c98 <HAL_GPIO_Init+0x2f0>)
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d013      	beq.n	8004b98 <HAL_GPIO_Init+0x1f0>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	4a4a      	ldr	r2, [pc, #296]	@ (8004c9c <HAL_GPIO_Init+0x2f4>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d00d      	beq.n	8004b94 <HAL_GPIO_Init+0x1ec>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a49      	ldr	r2, [pc, #292]	@ (8004ca0 <HAL_GPIO_Init+0x2f8>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d007      	beq.n	8004b90 <HAL_GPIO_Init+0x1e8>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a48      	ldr	r2, [pc, #288]	@ (8004ca4 <HAL_GPIO_Init+0x2fc>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d101      	bne.n	8004b8c <HAL_GPIO_Init+0x1e4>
 8004b88:	2305      	movs	r3, #5
 8004b8a:	e00a      	b.n	8004ba2 <HAL_GPIO_Init+0x1fa>
 8004b8c:	2306      	movs	r3, #6
 8004b8e:	e008      	b.n	8004ba2 <HAL_GPIO_Init+0x1fa>
 8004b90:	2304      	movs	r3, #4
 8004b92:	e006      	b.n	8004ba2 <HAL_GPIO_Init+0x1fa>
 8004b94:	2303      	movs	r3, #3
 8004b96:	e004      	b.n	8004ba2 <HAL_GPIO_Init+0x1fa>
 8004b98:	2302      	movs	r3, #2
 8004b9a:	e002      	b.n	8004ba2 <HAL_GPIO_Init+0x1fa>
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	e000      	b.n	8004ba2 <HAL_GPIO_Init+0x1fa>
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	f002 0203 	and.w	r2, r2, #3
 8004ba8:	0092      	lsls	r2, r2, #2
 8004baa:	4093      	lsls	r3, r2
 8004bac:	693a      	ldr	r2, [r7, #16]
 8004bae:	4313      	orrs	r3, r2
 8004bb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bb2:	4937      	ldr	r1, [pc, #220]	@ (8004c90 <HAL_GPIO_Init+0x2e8>)
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	089b      	lsrs	r3, r3, #2
 8004bb8:	3302      	adds	r3, #2
 8004bba:	693a      	ldr	r2, [r7, #16]
 8004bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004bc0:	4b39      	ldr	r3, [pc, #228]	@ (8004ca8 <HAL_GPIO_Init+0x300>)
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	43db      	mvns	r3, r3
 8004bca:	693a      	ldr	r2, [r7, #16]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d003      	beq.n	8004be4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004bdc:	693a      	ldr	r2, [r7, #16]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004be4:	4a30      	ldr	r2, [pc, #192]	@ (8004ca8 <HAL_GPIO_Init+0x300>)
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004bea:	4b2f      	ldr	r3, [pc, #188]	@ (8004ca8 <HAL_GPIO_Init+0x300>)
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	43db      	mvns	r3, r3
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	4013      	ands	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d003      	beq.n	8004c0e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004c06:	693a      	ldr	r2, [r7, #16]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c0e:	4a26      	ldr	r2, [pc, #152]	@ (8004ca8 <HAL_GPIO_Init+0x300>)
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004c14:	4b24      	ldr	r3, [pc, #144]	@ (8004ca8 <HAL_GPIO_Init+0x300>)
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	43db      	mvns	r3, r3
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	4013      	ands	r3, r2
 8004c22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d003      	beq.n	8004c38 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004c30:	693a      	ldr	r2, [r7, #16]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004c38:	4a1b      	ldr	r2, [pc, #108]	@ (8004ca8 <HAL_GPIO_Init+0x300>)
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004c3e:	4b1a      	ldr	r3, [pc, #104]	@ (8004ca8 <HAL_GPIO_Init+0x300>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	43db      	mvns	r3, r3
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d003      	beq.n	8004c62 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004c5a:	693a      	ldr	r2, [r7, #16]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004c62:	4a11      	ldr	r2, [pc, #68]	@ (8004ca8 <HAL_GPIO_Init+0x300>)
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	681a      	ldr	r2, [r3, #0]
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	fa22 f303 	lsr.w	r3, r2, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f47f ae9d 	bne.w	80049b8 <HAL_GPIO_Init+0x10>
  }
}
 8004c7e:	bf00      	nop
 8004c80:	bf00      	nop
 8004c82:	371c      	adds	r7, #28
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	40010000 	.word	0x40010000
 8004c94:	48000400 	.word	0x48000400
 8004c98:	48000800 	.word	0x48000800
 8004c9c:	48000c00 	.word	0x48000c00
 8004ca0:	48001000 	.word	0x48001000
 8004ca4:	48001400 	.word	0x48001400
 8004ca8:	40010400 	.word	0x40010400

08004cac <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	691a      	ldr	r2, [r3, #16]
 8004cbc:	887b      	ldrh	r3, [r7, #2]
 8004cbe:	4013      	ands	r3, r2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004cc4:	2301      	movs	r3, #1
 8004cc6:	73fb      	strb	r3, [r7, #15]
 8004cc8:	e001      	b.n	8004cce <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004cce:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	b083      	sub	sp, #12
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	460b      	mov	r3, r1
 8004ce6:	807b      	strh	r3, [r7, #2]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004cec:	787b      	ldrb	r3, [r7, #1]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d003      	beq.n	8004cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004cf2:	887a      	ldrh	r2, [r7, #2]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004cf8:	e002      	b.n	8004d00 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004cfa:	887a      	ldrh	r2, [r7, #2]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8004d00:	bf00      	nop
 8004d02:	370c      	adds	r7, #12
 8004d04:	46bd      	mov	sp, r7
 8004d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0a:	4770      	bx	lr

08004d0c <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004d1e:	887a      	ldrh	r2, [r7, #2]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4013      	ands	r3, r2
 8004d24:	041a      	lsls	r2, r3, #16
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	43d9      	mvns	r1, r3
 8004d2a:	887b      	ldrh	r3, [r7, #2]
 8004d2c:	400b      	ands	r3, r1
 8004d2e:	431a      	orrs	r2, r3
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	619a      	str	r2, [r3, #24]
}
 8004d34:	bf00      	nop
 8004d36:	3714      	adds	r7, #20
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004d40:	b580      	push	{r7, lr}
 8004d42:	b082      	sub	sp, #8
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	4603      	mov	r3, r0
 8004d48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004d4a:	4b08      	ldr	r3, [pc, #32]	@ (8004d6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d4c:	695a      	ldr	r2, [r3, #20]
 8004d4e:	88fb      	ldrh	r3, [r7, #6]
 8004d50:	4013      	ands	r3, r2
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d006      	beq.n	8004d64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d56:	4a05      	ldr	r2, [pc, #20]	@ (8004d6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d58:	88fb      	ldrh	r3, [r7, #6]
 8004d5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d5c:	88fb      	ldrh	r3, [r7, #6]
 8004d5e:	4618      	mov	r0, r3
 8004d60:	f000 f806 	bl	8004d70 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d64:	bf00      	nop
 8004d66:	3708      	adds	r7, #8
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	40010400 	.word	0x40010400

08004d70 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	4603      	mov	r3, r0
 8004d78:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004d7a:	bf00      	nop
 8004d7c:	370c      	adds	r7, #12
 8004d7e:	46bd      	mov	sp, r7
 8004d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d84:	4770      	bx	lr
	...

08004d88 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b085      	sub	sp, #20
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d141      	bne.n	8004e1a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d96:	4b4b      	ldr	r3, [pc, #300]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004d9e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004da2:	d131      	bne.n	8004e08 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004da4:	4b47      	ldr	r3, [pc, #284]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004da6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004daa:	4a46      	ldr	r2, [pc, #280]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004db0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004db4:	4b43      	ldr	r3, [pc, #268]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004dbc:	4a41      	ldr	r2, [pc, #260]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dbe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004dc2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004dc4:	4b40      	ldr	r3, [pc, #256]	@ (8004ec8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2232      	movs	r2, #50	@ 0x32
 8004dca:	fb02 f303 	mul.w	r3, r2, r3
 8004dce:	4a3f      	ldr	r2, [pc, #252]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004dd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd4:	0c9b      	lsrs	r3, r3, #18
 8004dd6:	3301      	adds	r3, #1
 8004dd8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004dda:	e002      	b.n	8004de2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	3b01      	subs	r3, #1
 8004de0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004de2:	4b38      	ldr	r3, [pc, #224]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004de4:	695b      	ldr	r3, [r3, #20]
 8004de6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dea:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dee:	d102      	bne.n	8004df6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1f2      	bne.n	8004ddc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004df6:	4b33      	ldr	r3, [pc, #204]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dfe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e02:	d158      	bne.n	8004eb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e04:	2303      	movs	r3, #3
 8004e06:	e057      	b.n	8004eb8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e08:	4b2e      	ldr	r3, [pc, #184]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e0e:	4a2d      	ldr	r2, [pc, #180]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e14:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004e18:	e04d      	b.n	8004eb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004e20:	d141      	bne.n	8004ea6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004e22:	4b28      	ldr	r3, [pc, #160]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004e2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e2e:	d131      	bne.n	8004e94 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e30:	4b24      	ldr	r3, [pc, #144]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e36:	4a23      	ldr	r2, [pc, #140]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e3c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004e40:	4b20      	ldr	r3, [pc, #128]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004e48:	4a1e      	ldr	r2, [pc, #120]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e4a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004e4e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e50:	4b1d      	ldr	r3, [pc, #116]	@ (8004ec8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	2232      	movs	r2, #50	@ 0x32
 8004e56:	fb02 f303 	mul.w	r3, r2, r3
 8004e5a:	4a1c      	ldr	r2, [pc, #112]	@ (8004ecc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e5c:	fba2 2303 	umull	r2, r3, r2, r3
 8004e60:	0c9b      	lsrs	r3, r3, #18
 8004e62:	3301      	adds	r3, #1
 8004e64:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e66:	e002      	b.n	8004e6e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e6e:	4b15      	ldr	r3, [pc, #84]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e7a:	d102      	bne.n	8004e82 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1f2      	bne.n	8004e68 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e82:	4b10      	ldr	r3, [pc, #64]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e8a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e8e:	d112      	bne.n	8004eb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e011      	b.n	8004eb8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e94:	4b0b      	ldr	r3, [pc, #44]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ea0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004ea4:	e007      	b.n	8004eb6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004ea6:	4b07      	ldr	r3, [pc, #28]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004eae:	4a05      	ldr	r2, [pc, #20]	@ (8004ec4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004eb0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004eb4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3714      	adds	r7, #20
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr
 8004ec4:	40007000 	.word	0x40007000
 8004ec8:	20000214 	.word	0x20000214
 8004ecc:	431bde83 	.word	0x431bde83

08004ed0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004ed4:	4b05      	ldr	r3, [pc, #20]	@ (8004eec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	4a04      	ldr	r2, [pc, #16]	@ (8004eec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004eda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ede:	6093      	str	r3, [r2, #8]
}
 8004ee0:	bf00      	nop
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
 8004eea:	bf00      	nop
 8004eec:	40007000 	.word	0x40007000

08004ef0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b088      	sub	sp, #32
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e2fe      	b.n	8005500 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d075      	beq.n	8004ffa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004f0e:	4b97      	ldr	r3, [pc, #604]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8004f10:	689b      	ldr	r3, [r3, #8]
 8004f12:	f003 030c 	and.w	r3, r3, #12
 8004f16:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004f18:	4b94      	ldr	r3, [pc, #592]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	f003 0303 	and.w	r3, r3, #3
 8004f20:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	2b0c      	cmp	r3, #12
 8004f26:	d102      	bne.n	8004f2e <HAL_RCC_OscConfig+0x3e>
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	2b03      	cmp	r3, #3
 8004f2c:	d002      	beq.n	8004f34 <HAL_RCC_OscConfig+0x44>
 8004f2e:	69bb      	ldr	r3, [r7, #24]
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d10b      	bne.n	8004f4c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f34:	4b8d      	ldr	r3, [pc, #564]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d05b      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x108>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d157      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e2d9      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f54:	d106      	bne.n	8004f64 <HAL_RCC_OscConfig+0x74>
 8004f56:	4b85      	ldr	r3, [pc, #532]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	4a84      	ldr	r2, [pc, #528]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8004f5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f60:	6013      	str	r3, [r2, #0]
 8004f62:	e01d      	b.n	8004fa0 <HAL_RCC_OscConfig+0xb0>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	685b      	ldr	r3, [r3, #4]
 8004f68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f6c:	d10c      	bne.n	8004f88 <HAL_RCC_OscConfig+0x98>
 8004f6e:	4b7f      	ldr	r3, [pc, #508]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a7e      	ldr	r2, [pc, #504]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8004f74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f78:	6013      	str	r3, [r2, #0]
 8004f7a:	4b7c      	ldr	r3, [pc, #496]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a7b      	ldr	r2, [pc, #492]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8004f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f84:	6013      	str	r3, [r2, #0]
 8004f86:	e00b      	b.n	8004fa0 <HAL_RCC_OscConfig+0xb0>
 8004f88:	4b78      	ldr	r3, [pc, #480]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a77      	ldr	r2, [pc, #476]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8004f8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f92:	6013      	str	r3, [r2, #0]
 8004f94:	4b75      	ldr	r3, [pc, #468]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a74      	ldr	r2, [pc, #464]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8004f9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d013      	beq.n	8004fd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fa8:	f7ff f88e 	bl	80040c8 <HAL_GetTick>
 8004fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fae:	e008      	b.n	8004fc2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fb0:	f7ff f88a 	bl	80040c8 <HAL_GetTick>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	1ad3      	subs	r3, r2, r3
 8004fba:	2b64      	cmp	r3, #100	@ 0x64
 8004fbc:	d901      	bls.n	8004fc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004fbe:	2303      	movs	r3, #3
 8004fc0:	e29e      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004fc2:	4b6a      	ldr	r3, [pc, #424]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d0f0      	beq.n	8004fb0 <HAL_RCC_OscConfig+0xc0>
 8004fce:	e014      	b.n	8004ffa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fd0:	f7ff f87a 	bl	80040c8 <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fd8:	f7ff f876 	bl	80040c8 <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b64      	cmp	r3, #100	@ 0x64
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e28a      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004fea:	4b60      	ldr	r3, [pc, #384]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1f0      	bne.n	8004fd8 <HAL_RCC_OscConfig+0xe8>
 8004ff6:	e000      	b.n	8004ffa <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ff8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b00      	cmp	r3, #0
 8005004:	d075      	beq.n	80050f2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005006:	4b59      	ldr	r3, [pc, #356]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	f003 030c 	and.w	r3, r3, #12
 800500e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005010:	4b56      	ldr	r3, [pc, #344]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f003 0303 	and.w	r3, r3, #3
 8005018:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	2b0c      	cmp	r3, #12
 800501e:	d102      	bne.n	8005026 <HAL_RCC_OscConfig+0x136>
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	2b02      	cmp	r3, #2
 8005024:	d002      	beq.n	800502c <HAL_RCC_OscConfig+0x13c>
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	2b04      	cmp	r3, #4
 800502a:	d11f      	bne.n	800506c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800502c:	4b4f      	ldr	r3, [pc, #316]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005034:	2b00      	cmp	r3, #0
 8005036:	d005      	beq.n	8005044 <HAL_RCC_OscConfig+0x154>
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d101      	bne.n	8005044 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005040:	2301      	movs	r3, #1
 8005042:	e25d      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005044:	4b49      	ldr	r3, [pc, #292]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	061b      	lsls	r3, r3, #24
 8005052:	4946      	ldr	r1, [pc, #280]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8005054:	4313      	orrs	r3, r2
 8005056:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005058:	4b45      	ldr	r3, [pc, #276]	@ (8005170 <HAL_RCC_OscConfig+0x280>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4618      	mov	r0, r3
 800505e:	f7fe ffe7 	bl	8004030 <HAL_InitTick>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d043      	beq.n	80050f0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005068:	2301      	movs	r3, #1
 800506a:	e249      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	68db      	ldr	r3, [r3, #12]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d023      	beq.n	80050bc <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005074:	4b3d      	ldr	r3, [pc, #244]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a3c      	ldr	r2, [pc, #240]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 800507a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800507e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005080:	f7ff f822 	bl	80040c8 <HAL_GetTick>
 8005084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005086:	e008      	b.n	800509a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005088:	f7ff f81e 	bl	80040c8 <HAL_GetTick>
 800508c:	4602      	mov	r2, r0
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	1ad3      	subs	r3, r2, r3
 8005092:	2b02      	cmp	r3, #2
 8005094:	d901      	bls.n	800509a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005096:	2303      	movs	r3, #3
 8005098:	e232      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800509a:	4b34      	ldr	r3, [pc, #208]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d0f0      	beq.n	8005088 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050a6:	4b31      	ldr	r3, [pc, #196]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	061b      	lsls	r3, r3, #24
 80050b4:	492d      	ldr	r1, [pc, #180]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	604b      	str	r3, [r1, #4]
 80050ba:	e01a      	b.n	80050f2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050bc:	4b2b      	ldr	r3, [pc, #172]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a2a      	ldr	r2, [pc, #168]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 80050c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050c8:	f7fe fffe 	bl	80040c8 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80050d0:	f7fe fffa 	bl	80040c8 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e20e      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80050e2:	4b22      	ldr	r3, [pc, #136]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f0      	bne.n	80050d0 <HAL_RCC_OscConfig+0x1e0>
 80050ee:	e000      	b.n	80050f2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050f0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f003 0308 	and.w	r3, r3, #8
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d041      	beq.n	8005182 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	695b      	ldr	r3, [r3, #20]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d01c      	beq.n	8005140 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005106:	4b19      	ldr	r3, [pc, #100]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8005108:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800510c:	4a17      	ldr	r2, [pc, #92]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 800510e:	f043 0301 	orr.w	r3, r3, #1
 8005112:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005116:	f7fe ffd7 	bl	80040c8 <HAL_GetTick>
 800511a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800511c:	e008      	b.n	8005130 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800511e:	f7fe ffd3 	bl	80040c8 <HAL_GetTick>
 8005122:	4602      	mov	r2, r0
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	1ad3      	subs	r3, r2, r3
 8005128:	2b02      	cmp	r3, #2
 800512a:	d901      	bls.n	8005130 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e1e7      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005130:	4b0e      	ldr	r3, [pc, #56]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8005132:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005136:	f003 0302 	and.w	r3, r3, #2
 800513a:	2b00      	cmp	r3, #0
 800513c:	d0ef      	beq.n	800511e <HAL_RCC_OscConfig+0x22e>
 800513e:	e020      	b.n	8005182 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005140:	4b0a      	ldr	r3, [pc, #40]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8005142:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005146:	4a09      	ldr	r2, [pc, #36]	@ (800516c <HAL_RCC_OscConfig+0x27c>)
 8005148:	f023 0301 	bic.w	r3, r3, #1
 800514c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005150:	f7fe ffba 	bl	80040c8 <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005156:	e00d      	b.n	8005174 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005158:	f7fe ffb6 	bl	80040c8 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d906      	bls.n	8005174 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e1ca      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
 800516a:	bf00      	nop
 800516c:	40021000 	.word	0x40021000
 8005170:	20000218 	.word	0x20000218
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005174:	4b8c      	ldr	r3, [pc, #560]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 8005176:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800517a:	f003 0302 	and.w	r3, r3, #2
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1ea      	bne.n	8005158 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0304 	and.w	r3, r3, #4
 800518a:	2b00      	cmp	r3, #0
 800518c:	f000 80a6 	beq.w	80052dc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005190:	2300      	movs	r3, #0
 8005192:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005194:	4b84      	ldr	r3, [pc, #528]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 8005196:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005198:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800519c:	2b00      	cmp	r3, #0
 800519e:	d101      	bne.n	80051a4 <HAL_RCC_OscConfig+0x2b4>
 80051a0:	2301      	movs	r3, #1
 80051a2:	e000      	b.n	80051a6 <HAL_RCC_OscConfig+0x2b6>
 80051a4:	2300      	movs	r3, #0
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d00d      	beq.n	80051c6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051aa:	4b7f      	ldr	r3, [pc, #508]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 80051ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ae:	4a7e      	ldr	r2, [pc, #504]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 80051b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80051b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80051b6:	4b7c      	ldr	r3, [pc, #496]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 80051b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80051c2:	2301      	movs	r3, #1
 80051c4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051c6:	4b79      	ldr	r3, [pc, #484]	@ (80053ac <HAL_RCC_OscConfig+0x4bc>)
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d118      	bne.n	8005204 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80051d2:	4b76      	ldr	r3, [pc, #472]	@ (80053ac <HAL_RCC_OscConfig+0x4bc>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a75      	ldr	r2, [pc, #468]	@ (80053ac <HAL_RCC_OscConfig+0x4bc>)
 80051d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051de:	f7fe ff73 	bl	80040c8 <HAL_GetTick>
 80051e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051e4:	e008      	b.n	80051f8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051e6:	f7fe ff6f 	bl	80040c8 <HAL_GetTick>
 80051ea:	4602      	mov	r2, r0
 80051ec:	693b      	ldr	r3, [r7, #16]
 80051ee:	1ad3      	subs	r3, r2, r3
 80051f0:	2b02      	cmp	r3, #2
 80051f2:	d901      	bls.n	80051f8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80051f4:	2303      	movs	r3, #3
 80051f6:	e183      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051f8:	4b6c      	ldr	r3, [pc, #432]	@ (80053ac <HAL_RCC_OscConfig+0x4bc>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005200:	2b00      	cmp	r3, #0
 8005202:	d0f0      	beq.n	80051e6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	2b01      	cmp	r3, #1
 800520a:	d108      	bne.n	800521e <HAL_RCC_OscConfig+0x32e>
 800520c:	4b66      	ldr	r3, [pc, #408]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 800520e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005212:	4a65      	ldr	r2, [pc, #404]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 8005214:	f043 0301 	orr.w	r3, r3, #1
 8005218:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800521c:	e024      	b.n	8005268 <HAL_RCC_OscConfig+0x378>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	2b05      	cmp	r3, #5
 8005224:	d110      	bne.n	8005248 <HAL_RCC_OscConfig+0x358>
 8005226:	4b60      	ldr	r3, [pc, #384]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 8005228:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800522c:	4a5e      	ldr	r2, [pc, #376]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 800522e:	f043 0304 	orr.w	r3, r3, #4
 8005232:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005236:	4b5c      	ldr	r3, [pc, #368]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 8005238:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800523c:	4a5a      	ldr	r2, [pc, #360]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 800523e:	f043 0301 	orr.w	r3, r3, #1
 8005242:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005246:	e00f      	b.n	8005268 <HAL_RCC_OscConfig+0x378>
 8005248:	4b57      	ldr	r3, [pc, #348]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 800524a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800524e:	4a56      	ldr	r2, [pc, #344]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 8005250:	f023 0301 	bic.w	r3, r3, #1
 8005254:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005258:	4b53      	ldr	r3, [pc, #332]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 800525a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800525e:	4a52      	ldr	r2, [pc, #328]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 8005260:	f023 0304 	bic.w	r3, r3, #4
 8005264:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d016      	beq.n	800529e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005270:	f7fe ff2a 	bl	80040c8 <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005276:	e00a      	b.n	800528e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005278:	f7fe ff26 	bl	80040c8 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005286:	4293      	cmp	r3, r2
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e138      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800528e:	4b46      	ldr	r3, [pc, #280]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 8005290:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d0ed      	beq.n	8005278 <HAL_RCC_OscConfig+0x388>
 800529c:	e015      	b.n	80052ca <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800529e:	f7fe ff13 	bl	80040c8 <HAL_GetTick>
 80052a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052a4:	e00a      	b.n	80052bc <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80052a6:	f7fe ff0f 	bl	80040c8 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e121      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80052bc:	4b3a      	ldr	r3, [pc, #232]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 80052be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052c2:	f003 0302 	and.w	r3, r3, #2
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1ed      	bne.n	80052a6 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80052ca:	7ffb      	ldrb	r3, [r7, #31]
 80052cc:	2b01      	cmp	r3, #1
 80052ce:	d105      	bne.n	80052dc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052d0:	4b35      	ldr	r3, [pc, #212]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 80052d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80052d4:	4a34      	ldr	r2, [pc, #208]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 80052d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052da:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0320 	and.w	r3, r3, #32
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d03c      	beq.n	8005362 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	699b      	ldr	r3, [r3, #24]
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d01c      	beq.n	800532a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80052f0:	4b2d      	ldr	r3, [pc, #180]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 80052f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80052f6:	4a2c      	ldr	r2, [pc, #176]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 80052f8:	f043 0301 	orr.w	r3, r3, #1
 80052fc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005300:	f7fe fee2 	bl	80040c8 <HAL_GetTick>
 8005304:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005306:	e008      	b.n	800531a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005308:	f7fe fede 	bl	80040c8 <HAL_GetTick>
 800530c:	4602      	mov	r2, r0
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	1ad3      	subs	r3, r2, r3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d901      	bls.n	800531a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e0f2      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800531a:	4b23      	ldr	r3, [pc, #140]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 800531c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0ef      	beq.n	8005308 <HAL_RCC_OscConfig+0x418>
 8005328:	e01b      	b.n	8005362 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800532a:	4b1f      	ldr	r3, [pc, #124]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 800532c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005330:	4a1d      	ldr	r2, [pc, #116]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 8005332:	f023 0301 	bic.w	r3, r3, #1
 8005336:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800533a:	f7fe fec5 	bl	80040c8 <HAL_GetTick>
 800533e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005340:	e008      	b.n	8005354 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005342:	f7fe fec1 	bl	80040c8 <HAL_GetTick>
 8005346:	4602      	mov	r2, r0
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	1ad3      	subs	r3, r2, r3
 800534c:	2b02      	cmp	r3, #2
 800534e:	d901      	bls.n	8005354 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e0d5      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005354:	4b14      	ldr	r3, [pc, #80]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 8005356:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800535a:	f003 0302 	and.w	r3, r3, #2
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1ef      	bne.n	8005342 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	69db      	ldr	r3, [r3, #28]
 8005366:	2b00      	cmp	r3, #0
 8005368:	f000 80c9 	beq.w	80054fe <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800536c:	4b0e      	ldr	r3, [pc, #56]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	f003 030c 	and.w	r3, r3, #12
 8005374:	2b0c      	cmp	r3, #12
 8005376:	f000 8083 	beq.w	8005480 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	69db      	ldr	r3, [r3, #28]
 800537e:	2b02      	cmp	r3, #2
 8005380:	d15e      	bne.n	8005440 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005382:	4b09      	ldr	r3, [pc, #36]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a08      	ldr	r2, [pc, #32]	@ (80053a8 <HAL_RCC_OscConfig+0x4b8>)
 8005388:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800538c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800538e:	f7fe fe9b 	bl	80040c8 <HAL_GetTick>
 8005392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005394:	e00c      	b.n	80053b0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005396:	f7fe fe97 	bl	80040c8 <HAL_GetTick>
 800539a:	4602      	mov	r2, r0
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	1ad3      	subs	r3, r2, r3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d905      	bls.n	80053b0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80053a4:	2303      	movs	r3, #3
 80053a6:	e0ab      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
 80053a8:	40021000 	.word	0x40021000
 80053ac:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80053b0:	4b55      	ldr	r3, [pc, #340]	@ (8005508 <HAL_RCC_OscConfig+0x618>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d1ec      	bne.n	8005396 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80053bc:	4b52      	ldr	r3, [pc, #328]	@ (8005508 <HAL_RCC_OscConfig+0x618>)
 80053be:	68da      	ldr	r2, [r3, #12]
 80053c0:	4b52      	ldr	r3, [pc, #328]	@ (800550c <HAL_RCC_OscConfig+0x61c>)
 80053c2:	4013      	ands	r3, r2
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	6a11      	ldr	r1, [r2, #32]
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80053cc:	3a01      	subs	r2, #1
 80053ce:	0112      	lsls	r2, r2, #4
 80053d0:	4311      	orrs	r1, r2
 80053d2:	687a      	ldr	r2, [r7, #4]
 80053d4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80053d6:	0212      	lsls	r2, r2, #8
 80053d8:	4311      	orrs	r1, r2
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80053de:	0852      	lsrs	r2, r2, #1
 80053e0:	3a01      	subs	r2, #1
 80053e2:	0552      	lsls	r2, r2, #21
 80053e4:	4311      	orrs	r1, r2
 80053e6:	687a      	ldr	r2, [r7, #4]
 80053e8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80053ea:	0852      	lsrs	r2, r2, #1
 80053ec:	3a01      	subs	r2, #1
 80053ee:	0652      	lsls	r2, r2, #25
 80053f0:	4311      	orrs	r1, r2
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80053f6:	06d2      	lsls	r2, r2, #27
 80053f8:	430a      	orrs	r2, r1
 80053fa:	4943      	ldr	r1, [pc, #268]	@ (8005508 <HAL_RCC_OscConfig+0x618>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005400:	4b41      	ldr	r3, [pc, #260]	@ (8005508 <HAL_RCC_OscConfig+0x618>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4a40      	ldr	r2, [pc, #256]	@ (8005508 <HAL_RCC_OscConfig+0x618>)
 8005406:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800540a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800540c:	4b3e      	ldr	r3, [pc, #248]	@ (8005508 <HAL_RCC_OscConfig+0x618>)
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	4a3d      	ldr	r2, [pc, #244]	@ (8005508 <HAL_RCC_OscConfig+0x618>)
 8005412:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005416:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005418:	f7fe fe56 	bl	80040c8 <HAL_GetTick>
 800541c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800541e:	e008      	b.n	8005432 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005420:	f7fe fe52 	bl	80040c8 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	2b02      	cmp	r3, #2
 800542c:	d901      	bls.n	8005432 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800542e:	2303      	movs	r3, #3
 8005430:	e066      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005432:	4b35      	ldr	r3, [pc, #212]	@ (8005508 <HAL_RCC_OscConfig+0x618>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d0f0      	beq.n	8005420 <HAL_RCC_OscConfig+0x530>
 800543e:	e05e      	b.n	80054fe <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005440:	4b31      	ldr	r3, [pc, #196]	@ (8005508 <HAL_RCC_OscConfig+0x618>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a30      	ldr	r2, [pc, #192]	@ (8005508 <HAL_RCC_OscConfig+0x618>)
 8005446:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800544a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800544c:	f7fe fe3c 	bl	80040c8 <HAL_GetTick>
 8005450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005452:	e008      	b.n	8005466 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005454:	f7fe fe38 	bl	80040c8 <HAL_GetTick>
 8005458:	4602      	mov	r2, r0
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	1ad3      	subs	r3, r2, r3
 800545e:	2b02      	cmp	r3, #2
 8005460:	d901      	bls.n	8005466 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e04c      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005466:	4b28      	ldr	r3, [pc, #160]	@ (8005508 <HAL_RCC_OscConfig+0x618>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1f0      	bne.n	8005454 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005472:	4b25      	ldr	r3, [pc, #148]	@ (8005508 <HAL_RCC_OscConfig+0x618>)
 8005474:	68da      	ldr	r2, [r3, #12]
 8005476:	4924      	ldr	r1, [pc, #144]	@ (8005508 <HAL_RCC_OscConfig+0x618>)
 8005478:	4b25      	ldr	r3, [pc, #148]	@ (8005510 <HAL_RCC_OscConfig+0x620>)
 800547a:	4013      	ands	r3, r2
 800547c:	60cb      	str	r3, [r1, #12]
 800547e:	e03e      	b.n	80054fe <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	69db      	ldr	r3, [r3, #28]
 8005484:	2b01      	cmp	r3, #1
 8005486:	d101      	bne.n	800548c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8005488:	2301      	movs	r3, #1
 800548a:	e039      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800548c:	4b1e      	ldr	r3, [pc, #120]	@ (8005508 <HAL_RCC_OscConfig+0x618>)
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	f003 0203 	and.w	r2, r3, #3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a1b      	ldr	r3, [r3, #32]
 800549c:	429a      	cmp	r2, r3
 800549e:	d12c      	bne.n	80054fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054aa:	3b01      	subs	r3, #1
 80054ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ae:	429a      	cmp	r2, r3
 80054b0:	d123      	bne.n	80054fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80054be:	429a      	cmp	r2, r3
 80054c0:	d11b      	bne.n	80054fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d113      	bne.n	80054fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054dc:	085b      	lsrs	r3, r3, #1
 80054de:	3b01      	subs	r3, #1
 80054e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d109      	bne.n	80054fa <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80054e6:	697b      	ldr	r3, [r7, #20]
 80054e8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80054f0:	085b      	lsrs	r3, r3, #1
 80054f2:	3b01      	subs	r3, #1
 80054f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d001      	beq.n	80054fe <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e000      	b.n	8005500 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	4618      	mov	r0, r3
 8005502:	3720      	adds	r7, #32
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	40021000 	.word	0x40021000
 800550c:	019f800c 	.word	0x019f800c
 8005510:	feeefffc 	.word	0xfeeefffc

08005514 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b086      	sub	sp, #24
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]
 800551c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800551e:	2300      	movs	r3, #0
 8005520:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d101      	bne.n	800552c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e11e      	b.n	800576a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800552c:	4b91      	ldr	r3, [pc, #580]	@ (8005774 <HAL_RCC_ClockConfig+0x260>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 030f 	and.w	r3, r3, #15
 8005534:	683a      	ldr	r2, [r7, #0]
 8005536:	429a      	cmp	r2, r3
 8005538:	d910      	bls.n	800555c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800553a:	4b8e      	ldr	r3, [pc, #568]	@ (8005774 <HAL_RCC_ClockConfig+0x260>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f023 020f 	bic.w	r2, r3, #15
 8005542:	498c      	ldr	r1, [pc, #560]	@ (8005774 <HAL_RCC_ClockConfig+0x260>)
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	4313      	orrs	r3, r2
 8005548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800554a:	4b8a      	ldr	r3, [pc, #552]	@ (8005774 <HAL_RCC_ClockConfig+0x260>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	f003 030f 	and.w	r3, r3, #15
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	429a      	cmp	r2, r3
 8005556:	d001      	beq.n	800555c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e106      	b.n	800576a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b00      	cmp	r3, #0
 8005566:	d073      	beq.n	8005650 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	2b03      	cmp	r3, #3
 800556e:	d129      	bne.n	80055c4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005570:	4b81      	ldr	r3, [pc, #516]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e0f4      	b.n	800576a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005580:	f000 f99e 	bl	80058c0 <RCC_GetSysClockFreqFromPLLSource>
 8005584:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	4a7c      	ldr	r2, [pc, #496]	@ (800577c <HAL_RCC_ClockConfig+0x268>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d93f      	bls.n	800560e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800558e:	4b7a      	ldr	r3, [pc, #488]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d009      	beq.n	80055ae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d033      	beq.n	800560e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d12f      	bne.n	800560e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80055ae:	4b72      	ldr	r3, [pc, #456]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055b6:	4a70      	ldr	r2, [pc, #448]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 80055b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055bc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80055be:	2380      	movs	r3, #128	@ 0x80
 80055c0:	617b      	str	r3, [r7, #20]
 80055c2:	e024      	b.n	800560e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	2b02      	cmp	r3, #2
 80055ca:	d107      	bne.n	80055dc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055cc:	4b6a      	ldr	r3, [pc, #424]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d109      	bne.n	80055ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e0c6      	b.n	800576a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80055dc:	4b66      	ldr	r3, [pc, #408]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d101      	bne.n	80055ec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	e0be      	b.n	800576a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80055ec:	f000 f8ce 	bl	800578c <HAL_RCC_GetSysClockFreq>
 80055f0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	4a61      	ldr	r2, [pc, #388]	@ (800577c <HAL_RCC_ClockConfig+0x268>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d909      	bls.n	800560e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80055fa:	4b5f      	ldr	r3, [pc, #380]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005602:	4a5d      	ldr	r2, [pc, #372]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 8005604:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005608:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800560a:	2380      	movs	r3, #128	@ 0x80
 800560c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800560e:	4b5a      	ldr	r3, [pc, #360]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 8005610:	689b      	ldr	r3, [r3, #8]
 8005612:	f023 0203 	bic.w	r2, r3, #3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	4957      	ldr	r1, [pc, #348]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 800561c:	4313      	orrs	r3, r2
 800561e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005620:	f7fe fd52 	bl	80040c8 <HAL_GetTick>
 8005624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005626:	e00a      	b.n	800563e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005628:	f7fe fd4e 	bl	80040c8 <HAL_GetTick>
 800562c:	4602      	mov	r2, r0
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	1ad3      	subs	r3, r2, r3
 8005632:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005636:	4293      	cmp	r3, r2
 8005638:	d901      	bls.n	800563e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e095      	b.n	800576a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800563e:	4b4e      	ldr	r3, [pc, #312]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	f003 020c 	and.w	r2, r3, #12
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	429a      	cmp	r2, r3
 800564e:	d1eb      	bne.n	8005628 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 0302 	and.w	r3, r3, #2
 8005658:	2b00      	cmp	r3, #0
 800565a:	d023      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f003 0304 	and.w	r3, r3, #4
 8005664:	2b00      	cmp	r3, #0
 8005666:	d005      	beq.n	8005674 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005668:	4b43      	ldr	r3, [pc, #268]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	4a42      	ldr	r2, [pc, #264]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 800566e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005672:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f003 0308 	and.w	r3, r3, #8
 800567c:	2b00      	cmp	r3, #0
 800567e:	d007      	beq.n	8005690 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005680:	4b3d      	ldr	r3, [pc, #244]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 8005682:	689b      	ldr	r3, [r3, #8]
 8005684:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005688:	4a3b      	ldr	r2, [pc, #236]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 800568a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800568e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005690:	4b39      	ldr	r3, [pc, #228]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 8005692:	689b      	ldr	r3, [r3, #8]
 8005694:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	4936      	ldr	r1, [pc, #216]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 800569e:	4313      	orrs	r3, r2
 80056a0:	608b      	str	r3, [r1, #8]
 80056a2:	e008      	b.n	80056b6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	2b80      	cmp	r3, #128	@ 0x80
 80056a8:	d105      	bne.n	80056b6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80056aa:	4b33      	ldr	r3, [pc, #204]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	4a32      	ldr	r2, [pc, #200]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 80056b0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80056b4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80056b6:	4b2f      	ldr	r3, [pc, #188]	@ (8005774 <HAL_RCC_ClockConfig+0x260>)
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 030f 	and.w	r3, r3, #15
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d21d      	bcs.n	8005700 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056c4:	4b2b      	ldr	r3, [pc, #172]	@ (8005774 <HAL_RCC_ClockConfig+0x260>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f023 020f 	bic.w	r2, r3, #15
 80056cc:	4929      	ldr	r1, [pc, #164]	@ (8005774 <HAL_RCC_ClockConfig+0x260>)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80056d4:	f7fe fcf8 	bl	80040c8 <HAL_GetTick>
 80056d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056da:	e00a      	b.n	80056f2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80056dc:	f7fe fcf4 	bl	80040c8 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d901      	bls.n	80056f2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80056ee:	2303      	movs	r3, #3
 80056f0:	e03b      	b.n	800576a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056f2:	4b20      	ldr	r3, [pc, #128]	@ (8005774 <HAL_RCC_ClockConfig+0x260>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 030f 	and.w	r3, r3, #15
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d1ed      	bne.n	80056dc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0304 	and.w	r3, r3, #4
 8005708:	2b00      	cmp	r3, #0
 800570a:	d008      	beq.n	800571e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800570c:	4b1a      	ldr	r3, [pc, #104]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 800570e:	689b      	ldr	r3, [r3, #8]
 8005710:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	4917      	ldr	r1, [pc, #92]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 800571a:	4313      	orrs	r3, r2
 800571c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f003 0308 	and.w	r3, r3, #8
 8005726:	2b00      	cmp	r3, #0
 8005728:	d009      	beq.n	800573e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800572a:	4b13      	ldr	r3, [pc, #76]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 800572c:	689b      	ldr	r3, [r3, #8]
 800572e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	490f      	ldr	r1, [pc, #60]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 800573a:	4313      	orrs	r3, r2
 800573c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800573e:	f000 f825 	bl	800578c <HAL_RCC_GetSysClockFreq>
 8005742:	4602      	mov	r2, r0
 8005744:	4b0c      	ldr	r3, [pc, #48]	@ (8005778 <HAL_RCC_ClockConfig+0x264>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	091b      	lsrs	r3, r3, #4
 800574a:	f003 030f 	and.w	r3, r3, #15
 800574e:	490c      	ldr	r1, [pc, #48]	@ (8005780 <HAL_RCC_ClockConfig+0x26c>)
 8005750:	5ccb      	ldrb	r3, [r1, r3]
 8005752:	f003 031f 	and.w	r3, r3, #31
 8005756:	fa22 f303 	lsr.w	r3, r2, r3
 800575a:	4a0a      	ldr	r2, [pc, #40]	@ (8005784 <HAL_RCC_ClockConfig+0x270>)
 800575c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800575e:	4b0a      	ldr	r3, [pc, #40]	@ (8005788 <HAL_RCC_ClockConfig+0x274>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	4618      	mov	r0, r3
 8005764:	f7fe fc64 	bl	8004030 <HAL_InitTick>
 8005768:	4603      	mov	r3, r0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3718      	adds	r7, #24
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	40022000 	.word	0x40022000
 8005778:	40021000 	.word	0x40021000
 800577c:	04c4b400 	.word	0x04c4b400
 8005780:	08009e2c 	.word	0x08009e2c
 8005784:	20000214 	.word	0x20000214
 8005788:	20000218 	.word	0x20000218

0800578c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800578c:	b480      	push	{r7}
 800578e:	b087      	sub	sp, #28
 8005790:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005792:	4b2c      	ldr	r3, [pc, #176]	@ (8005844 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f003 030c 	and.w	r3, r3, #12
 800579a:	2b04      	cmp	r3, #4
 800579c:	d102      	bne.n	80057a4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800579e:	4b2a      	ldr	r3, [pc, #168]	@ (8005848 <HAL_RCC_GetSysClockFreq+0xbc>)
 80057a0:	613b      	str	r3, [r7, #16]
 80057a2:	e047      	b.n	8005834 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80057a4:	4b27      	ldr	r3, [pc, #156]	@ (8005844 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	f003 030c 	and.w	r3, r3, #12
 80057ac:	2b08      	cmp	r3, #8
 80057ae:	d102      	bne.n	80057b6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80057b0:	4b26      	ldr	r3, [pc, #152]	@ (800584c <HAL_RCC_GetSysClockFreq+0xc0>)
 80057b2:	613b      	str	r3, [r7, #16]
 80057b4:	e03e      	b.n	8005834 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80057b6:	4b23      	ldr	r3, [pc, #140]	@ (8005844 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f003 030c 	and.w	r3, r3, #12
 80057be:	2b0c      	cmp	r3, #12
 80057c0:	d136      	bne.n	8005830 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80057c2:	4b20      	ldr	r3, [pc, #128]	@ (8005844 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	f003 0303 	and.w	r3, r3, #3
 80057ca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057cc:	4b1d      	ldr	r3, [pc, #116]	@ (8005844 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057ce:	68db      	ldr	r3, [r3, #12]
 80057d0:	091b      	lsrs	r3, r3, #4
 80057d2:	f003 030f 	and.w	r3, r3, #15
 80057d6:	3301      	adds	r3, #1
 80057d8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2b03      	cmp	r3, #3
 80057de:	d10c      	bne.n	80057fa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057e0:	4a1a      	ldr	r2, [pc, #104]	@ (800584c <HAL_RCC_GetSysClockFreq+0xc0>)
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e8:	4a16      	ldr	r2, [pc, #88]	@ (8005844 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057ea:	68d2      	ldr	r2, [r2, #12]
 80057ec:	0a12      	lsrs	r2, r2, #8
 80057ee:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80057f2:	fb02 f303 	mul.w	r3, r2, r3
 80057f6:	617b      	str	r3, [r7, #20]
      break;
 80057f8:	e00c      	b.n	8005814 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057fa:	4a13      	ldr	r2, [pc, #76]	@ (8005848 <HAL_RCC_GetSysClockFreq+0xbc>)
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005802:	4a10      	ldr	r2, [pc, #64]	@ (8005844 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005804:	68d2      	ldr	r2, [r2, #12]
 8005806:	0a12      	lsrs	r2, r2, #8
 8005808:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800580c:	fb02 f303 	mul.w	r3, r2, r3
 8005810:	617b      	str	r3, [r7, #20]
      break;
 8005812:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005814:	4b0b      	ldr	r3, [pc, #44]	@ (8005844 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	0e5b      	lsrs	r3, r3, #25
 800581a:	f003 0303 	and.w	r3, r3, #3
 800581e:	3301      	adds	r3, #1
 8005820:	005b      	lsls	r3, r3, #1
 8005822:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	fbb2 f3f3 	udiv	r3, r2, r3
 800582c:	613b      	str	r3, [r7, #16]
 800582e:	e001      	b.n	8005834 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005830:	2300      	movs	r3, #0
 8005832:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005834:	693b      	ldr	r3, [r7, #16]
}
 8005836:	4618      	mov	r0, r3
 8005838:	371c      	adds	r7, #28
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr
 8005842:	bf00      	nop
 8005844:	40021000 	.word	0x40021000
 8005848:	00f42400 	.word	0x00f42400
 800584c:	016e3600 	.word	0x016e3600

08005850 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005854:	4b03      	ldr	r3, [pc, #12]	@ (8005864 <HAL_RCC_GetHCLKFreq+0x14>)
 8005856:	681b      	ldr	r3, [r3, #0]
}
 8005858:	4618      	mov	r0, r3
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
 8005862:	bf00      	nop
 8005864:	20000214 	.word	0x20000214

08005868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800586c:	f7ff fff0 	bl	8005850 <HAL_RCC_GetHCLKFreq>
 8005870:	4602      	mov	r2, r0
 8005872:	4b06      	ldr	r3, [pc, #24]	@ (800588c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005874:	689b      	ldr	r3, [r3, #8]
 8005876:	0a1b      	lsrs	r3, r3, #8
 8005878:	f003 0307 	and.w	r3, r3, #7
 800587c:	4904      	ldr	r1, [pc, #16]	@ (8005890 <HAL_RCC_GetPCLK1Freq+0x28>)
 800587e:	5ccb      	ldrb	r3, [r1, r3]
 8005880:	f003 031f 	and.w	r3, r3, #31
 8005884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005888:	4618      	mov	r0, r3
 800588a:	bd80      	pop	{r7, pc}
 800588c:	40021000 	.word	0x40021000
 8005890:	08009e3c 	.word	0x08009e3c

08005894 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005898:	f7ff ffda 	bl	8005850 <HAL_RCC_GetHCLKFreq>
 800589c:	4602      	mov	r2, r0
 800589e:	4b06      	ldr	r3, [pc, #24]	@ (80058b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	0adb      	lsrs	r3, r3, #11
 80058a4:	f003 0307 	and.w	r3, r3, #7
 80058a8:	4904      	ldr	r1, [pc, #16]	@ (80058bc <HAL_RCC_GetPCLK2Freq+0x28>)
 80058aa:	5ccb      	ldrb	r3, [r1, r3]
 80058ac:	f003 031f 	and.w	r3, r3, #31
 80058b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	bd80      	pop	{r7, pc}
 80058b8:	40021000 	.word	0x40021000
 80058bc:	08009e3c 	.word	0x08009e3c

080058c0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b087      	sub	sp, #28
 80058c4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058c6:	4b1e      	ldr	r3, [pc, #120]	@ (8005940 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	f003 0303 	and.w	r3, r3, #3
 80058ce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005940 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058d2:	68db      	ldr	r3, [r3, #12]
 80058d4:	091b      	lsrs	r3, r3, #4
 80058d6:	f003 030f 	and.w	r3, r3, #15
 80058da:	3301      	adds	r3, #1
 80058dc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80058de:	693b      	ldr	r3, [r7, #16]
 80058e0:	2b03      	cmp	r3, #3
 80058e2:	d10c      	bne.n	80058fe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058e4:	4a17      	ldr	r2, [pc, #92]	@ (8005944 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ec:	4a14      	ldr	r2, [pc, #80]	@ (8005940 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058ee:	68d2      	ldr	r2, [r2, #12]
 80058f0:	0a12      	lsrs	r2, r2, #8
 80058f2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80058f6:	fb02 f303 	mul.w	r3, r2, r3
 80058fa:	617b      	str	r3, [r7, #20]
    break;
 80058fc:	e00c      	b.n	8005918 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80058fe:	4a12      	ldr	r2, [pc, #72]	@ (8005948 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	fbb2 f3f3 	udiv	r3, r2, r3
 8005906:	4a0e      	ldr	r2, [pc, #56]	@ (8005940 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005908:	68d2      	ldr	r2, [r2, #12]
 800590a:	0a12      	lsrs	r2, r2, #8
 800590c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005910:	fb02 f303 	mul.w	r3, r2, r3
 8005914:	617b      	str	r3, [r7, #20]
    break;
 8005916:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005918:	4b09      	ldr	r3, [pc, #36]	@ (8005940 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	0e5b      	lsrs	r3, r3, #25
 800591e:	f003 0303 	and.w	r3, r3, #3
 8005922:	3301      	adds	r3, #1
 8005924:	005b      	lsls	r3, r3, #1
 8005926:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005930:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005932:	687b      	ldr	r3, [r7, #4]
}
 8005934:	4618      	mov	r0, r3
 8005936:	371c      	adds	r7, #28
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	40021000 	.word	0x40021000
 8005944:	016e3600 	.word	0x016e3600
 8005948:	00f42400 	.word	0x00f42400

0800594c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b086      	sub	sp, #24
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005954:	2300      	movs	r3, #0
 8005956:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005958:	2300      	movs	r3, #0
 800595a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 8098 	beq.w	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800596a:	2300      	movs	r3, #0
 800596c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800596e:	4b43      	ldr	r3, [pc, #268]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005970:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005972:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d10d      	bne.n	8005996 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800597a:	4b40      	ldr	r3, [pc, #256]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800597c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800597e:	4a3f      	ldr	r2, [pc, #252]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005980:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005984:	6593      	str	r3, [r2, #88]	@ 0x58
 8005986:	4b3d      	ldr	r3, [pc, #244]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800598a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800598e:	60bb      	str	r3, [r7, #8]
 8005990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005992:	2301      	movs	r3, #1
 8005994:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005996:	4b3a      	ldr	r3, [pc, #232]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a39      	ldr	r2, [pc, #228]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800599c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80059a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059a2:	f7fe fb91 	bl	80040c8 <HAL_GetTick>
 80059a6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059a8:	e009      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059aa:	f7fe fb8d 	bl	80040c8 <HAL_GetTick>
 80059ae:	4602      	mov	r2, r0
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d902      	bls.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	74fb      	strb	r3, [r7, #19]
        break;
 80059bc:	e005      	b.n	80059ca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059be:	4b30      	ldr	r3, [pc, #192]	@ (8005a80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d0ef      	beq.n	80059aa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80059ca:	7cfb      	ldrb	r3, [r7, #19]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d159      	bne.n	8005a84 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80059d0:	4b2a      	ldr	r3, [pc, #168]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80059da:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d01e      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059e6:	697a      	ldr	r2, [r7, #20]
 80059e8:	429a      	cmp	r2, r3
 80059ea:	d019      	beq.n	8005a20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80059ec:	4b23      	ldr	r3, [pc, #140]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059f6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80059f8:	4b20      	ldr	r3, [pc, #128]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80059fe:	4a1f      	ldr	r2, [pc, #124]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a04:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a08:	4b1c      	ldr	r3, [pc, #112]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a0e:	4a1b      	ldr	r2, [pc, #108]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005a14:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a18:	4a18      	ldr	r2, [pc, #96]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	f003 0301 	and.w	r3, r3, #1
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d016      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a2a:	f7fe fb4d 	bl	80040c8 <HAL_GetTick>
 8005a2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a30:	e00b      	b.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a32:	f7fe fb49 	bl	80040c8 <HAL_GetTick>
 8005a36:	4602      	mov	r2, r0
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	1ad3      	subs	r3, r2, r3
 8005a3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d902      	bls.n	8005a4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005a44:	2303      	movs	r3, #3
 8005a46:	74fb      	strb	r3, [r7, #19]
            break;
 8005a48:	e006      	b.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a4a:	4b0c      	ldr	r3, [pc, #48]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d0ec      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005a58:	7cfb      	ldrb	r3, [r7, #19]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d10b      	bne.n	8005a76 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a5e:	4b07      	ldr	r3, [pc, #28]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005a64:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a6c:	4903      	ldr	r1, [pc, #12]	@ (8005a7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005a74:	e008      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a76:	7cfb      	ldrb	r3, [r7, #19]
 8005a78:	74bb      	strb	r3, [r7, #18]
 8005a7a:	e005      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005a7c:	40021000 	.word	0x40021000
 8005a80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a84:	7cfb      	ldrb	r3, [r7, #19]
 8005a86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005a88:	7c7b      	ldrb	r3, [r7, #17]
 8005a8a:	2b01      	cmp	r3, #1
 8005a8c:	d105      	bne.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005a8e:	4ba7      	ldr	r3, [pc, #668]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a92:	4aa6      	ldr	r2, [pc, #664]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005a98:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f003 0301 	and.w	r3, r3, #1
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00a      	beq.n	8005abc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005aa6:	4ba1      	ldr	r3, [pc, #644]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005aac:	f023 0203 	bic.w	r2, r3, #3
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	499d      	ldr	r1, [pc, #628]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f003 0302 	and.w	r3, r3, #2
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00a      	beq.n	8005ade <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005ac8:	4b98      	ldr	r3, [pc, #608]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ace:	f023 020c 	bic.w	r2, r3, #12
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	4995      	ldr	r1, [pc, #596]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ad8:	4313      	orrs	r3, r2
 8005ada:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0304 	and.w	r3, r3, #4
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d00a      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005aea:	4b90      	ldr	r3, [pc, #576]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005af0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	498c      	ldr	r1, [pc, #560]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005afa:	4313      	orrs	r3, r2
 8005afc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f003 0308 	and.w	r3, r3, #8
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d00a      	beq.n	8005b22 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b0c:	4b87      	ldr	r3, [pc, #540]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b12:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	691b      	ldr	r3, [r3, #16]
 8005b1a:	4984      	ldr	r1, [pc, #528]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f003 0310 	and.w	r3, r3, #16
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00a      	beq.n	8005b44 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b2e:	4b7f      	ldr	r3, [pc, #508]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b34:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	497b      	ldr	r1, [pc, #492]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f003 0320 	and.w	r3, r3, #32
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d00a      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b50:	4b76      	ldr	r3, [pc, #472]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b56:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	4973      	ldr	r1, [pc, #460]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b60:	4313      	orrs	r3, r2
 8005b62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00a      	beq.n	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b72:	4b6e      	ldr	r3, [pc, #440]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b78:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	69db      	ldr	r3, [r3, #28]
 8005b80:	496a      	ldr	r1, [pc, #424]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b82:	4313      	orrs	r3, r2
 8005b84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d00a      	beq.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005b94:	4b65      	ldr	r3, [pc, #404]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b9a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	4962      	ldr	r1, [pc, #392]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ba4:	4313      	orrs	r3, r2
 8005ba6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00a      	beq.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005bb6:	4b5d      	ldr	r3, [pc, #372]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005bbc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc4:	4959      	ldr	r1, [pc, #356]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d00a      	beq.n	8005bee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005bd8:	4b54      	ldr	r3, [pc, #336]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005bde:	f023 0203 	bic.w	r2, r3, #3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005be6:	4951      	ldr	r1, [pc, #324]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005be8:	4313      	orrs	r3, r2
 8005bea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00a      	beq.n	8005c10 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005bfa:	4b4c      	ldr	r3, [pc, #304]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c00:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c08:	4948      	ldr	r1, [pc, #288]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c0a:	4313      	orrs	r3, r2
 8005c0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d015      	beq.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c1c:	4b43      	ldr	r3, [pc, #268]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c2a:	4940      	ldr	r1, [pc, #256]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c2c:	4313      	orrs	r3, r2
 8005c2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c3a:	d105      	bne.n	8005c48 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c3c:	4b3b      	ldr	r3, [pc, #236]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	4a3a      	ldr	r2, [pc, #232]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c42:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c46:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d015      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005c54:	4b35      	ldr	r3, [pc, #212]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c5a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c62:	4932      	ldr	r1, [pc, #200]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c64:	4313      	orrs	r3, r2
 8005c66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c6e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005c72:	d105      	bne.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c74:	4b2d      	ldr	r3, [pc, #180]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	4a2c      	ldr	r2, [pc, #176]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005c7e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d015      	beq.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c8c:	4b27      	ldr	r3, [pc, #156]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c92:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c9a:	4924      	ldr	r1, [pc, #144]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005caa:	d105      	bne.n	8005cb8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cac:	4b1f      	ldr	r3, [pc, #124]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	4a1e      	ldr	r2, [pc, #120]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cb2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cb6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d015      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005cc4:	4b19      	ldr	r3, [pc, #100]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cd2:	4916      	ldr	r1, [pc, #88]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cd4:	4313      	orrs	r3, r2
 8005cd6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005cde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ce2:	d105      	bne.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ce4:	4b11      	ldr	r3, [pc, #68]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	4a10      	ldr	r2, [pc, #64]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005cee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d019      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005cfc:	4b0b      	ldr	r3, [pc, #44]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d02:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d0a:	4908      	ldr	r1, [pc, #32]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005d1a:	d109      	bne.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d1c:	4b03      	ldr	r3, [pc, #12]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d1e:	68db      	ldr	r3, [r3, #12]
 8005d20:	4a02      	ldr	r2, [pc, #8]	@ (8005d2c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005d26:	60d3      	str	r3, [r2, #12]
 8005d28:	e002      	b.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005d2a:	bf00      	nop
 8005d2c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d015      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005d3c:	4b29      	ldr	r3, [pc, #164]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d42:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d4a:	4926      	ldr	r1, [pc, #152]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d56:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d5a:	d105      	bne.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005d5c:	4b21      	ldr	r3, [pc, #132]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d5e:	68db      	ldr	r3, [r3, #12]
 8005d60:	4a20      	ldr	r2, [pc, #128]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d62:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d66:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d015      	beq.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005d74:	4b1b      	ldr	r3, [pc, #108]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d7a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d82:	4918      	ldr	r1, [pc, #96]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d84:	4313      	orrs	r3, r2
 8005d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d92:	d105      	bne.n	8005da0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005d94:	4b13      	ldr	r3, [pc, #76]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d96:	68db      	ldr	r3, [r3, #12]
 8005d98:	4a12      	ldr	r2, [pc, #72]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d9e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d015      	beq.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005dac:	4b0d      	ldr	r3, [pc, #52]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005dae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005db2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dba:	490a      	ldr	r1, [pc, #40]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005dbc:	4313      	orrs	r3, r2
 8005dbe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005dc6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005dca:	d105      	bne.n	8005dd8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005dcc:	4b05      	ldr	r3, [pc, #20]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	4a04      	ldr	r2, [pc, #16]	@ (8005de4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005dd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005dd6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005dd8:	7cbb      	ldrb	r3, [r7, #18]
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3718      	adds	r7, #24
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	40021000 	.word	0x40021000

08005de8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005df6:	2301      	movs	r3, #1
 8005df8:	e054      	b.n	8005ea4 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d111      	bne.n	8005e2a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2200      	movs	r2, #0
 8005e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f001 fee2 	bl	8007bd8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d102      	bne.n	8005e22 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	4a23      	ldr	r2, [pc, #140]	@ (8005eac <HAL_TIM_Base_Init+0xc4>)
 8005e20:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e26:	6878      	ldr	r0, [r7, #4]
 8005e28:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2202      	movs	r2, #2
 8005e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	3304      	adds	r3, #4
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	4610      	mov	r0, r2
 8005e3e:	f001 fa2b 	bl	8007298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2201      	movs	r2, #1
 8005e9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3708      	adds	r7, #8
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	08003b4d 	.word	0x08003b4d

08005eb0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d001      	beq.n	8005ec8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	e04c      	b.n	8005f62 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a26      	ldr	r2, [pc, #152]	@ (8005f70 <HAL_TIM_Base_Start+0xc0>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d022      	beq.n	8005f20 <HAL_TIM_Base_Start+0x70>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ee2:	d01d      	beq.n	8005f20 <HAL_TIM_Base_Start+0x70>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a22      	ldr	r2, [pc, #136]	@ (8005f74 <HAL_TIM_Base_Start+0xc4>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d018      	beq.n	8005f20 <HAL_TIM_Base_Start+0x70>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	4a21      	ldr	r2, [pc, #132]	@ (8005f78 <HAL_TIM_Base_Start+0xc8>)
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d013      	beq.n	8005f20 <HAL_TIM_Base_Start+0x70>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	4a1f      	ldr	r2, [pc, #124]	@ (8005f7c <HAL_TIM_Base_Start+0xcc>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d00e      	beq.n	8005f20 <HAL_TIM_Base_Start+0x70>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4a1e      	ldr	r2, [pc, #120]	@ (8005f80 <HAL_TIM_Base_Start+0xd0>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d009      	beq.n	8005f20 <HAL_TIM_Base_Start+0x70>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	4a1c      	ldr	r2, [pc, #112]	@ (8005f84 <HAL_TIM_Base_Start+0xd4>)
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d004      	beq.n	8005f20 <HAL_TIM_Base_Start+0x70>
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	4a1b      	ldr	r2, [pc, #108]	@ (8005f88 <HAL_TIM_Base_Start+0xd8>)
 8005f1c:	4293      	cmp	r3, r2
 8005f1e:	d115      	bne.n	8005f4c <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	689a      	ldr	r2, [r3, #8]
 8005f26:	4b19      	ldr	r3, [pc, #100]	@ (8005f8c <HAL_TIM_Base_Start+0xdc>)
 8005f28:	4013      	ands	r3, r2
 8005f2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	2b06      	cmp	r3, #6
 8005f30:	d015      	beq.n	8005f5e <HAL_TIM_Base_Start+0xae>
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f38:	d011      	beq.n	8005f5e <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f042 0201 	orr.w	r2, r2, #1
 8005f48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f4a:	e008      	b.n	8005f5e <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f042 0201 	orr.w	r2, r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]
 8005f5c:	e000      	b.n	8005f60 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f5e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	40012c00 	.word	0x40012c00
 8005f74:	40000400 	.word	0x40000400
 8005f78:	40000800 	.word	0x40000800
 8005f7c:	40000c00 	.word	0x40000c00
 8005f80:	40013400 	.word	0x40013400
 8005f84:	40014000 	.word	0x40014000
 8005f88:	40015000 	.word	0x40015000
 8005f8c:	00010007 	.word	0x00010007

08005f90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b085      	sub	sp, #20
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d001      	beq.n	8005fa8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	e054      	b.n	8006052 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2202      	movs	r2, #2
 8005fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68da      	ldr	r2, [r3, #12]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f042 0201 	orr.w	r2, r2, #1
 8005fbe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a26      	ldr	r2, [pc, #152]	@ (8006060 <HAL_TIM_Base_Start_IT+0xd0>)
 8005fc6:	4293      	cmp	r3, r2
 8005fc8:	d022      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x80>
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fd2:	d01d      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x80>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4a22      	ldr	r2, [pc, #136]	@ (8006064 <HAL_TIM_Base_Start_IT+0xd4>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d018      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x80>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	4a21      	ldr	r2, [pc, #132]	@ (8006068 <HAL_TIM_Base_Start_IT+0xd8>)
 8005fe4:	4293      	cmp	r3, r2
 8005fe6:	d013      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x80>
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a1f      	ldr	r2, [pc, #124]	@ (800606c <HAL_TIM_Base_Start_IT+0xdc>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d00e      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x80>
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	4a1e      	ldr	r2, [pc, #120]	@ (8006070 <HAL_TIM_Base_Start_IT+0xe0>)
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d009      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x80>
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a1c      	ldr	r2, [pc, #112]	@ (8006074 <HAL_TIM_Base_Start_IT+0xe4>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d004      	beq.n	8006010 <HAL_TIM_Base_Start_IT+0x80>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	4a1b      	ldr	r2, [pc, #108]	@ (8006078 <HAL_TIM_Base_Start_IT+0xe8>)
 800600c:	4293      	cmp	r3, r2
 800600e:	d115      	bne.n	800603c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	4b19      	ldr	r3, [pc, #100]	@ (800607c <HAL_TIM_Base_Start_IT+0xec>)
 8006018:	4013      	ands	r3, r2
 800601a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2b06      	cmp	r3, #6
 8006020:	d015      	beq.n	800604e <HAL_TIM_Base_Start_IT+0xbe>
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006028:	d011      	beq.n	800604e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f042 0201 	orr.w	r2, r2, #1
 8006038:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800603a:	e008      	b.n	800604e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f042 0201 	orr.w	r2, r2, #1
 800604a:	601a      	str	r2, [r3, #0]
 800604c:	e000      	b.n	8006050 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800604e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3714      	adds	r7, #20
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	40012c00 	.word	0x40012c00
 8006064:	40000400 	.word	0x40000400
 8006068:	40000800 	.word	0x40000800
 800606c:	40000c00 	.word	0x40000c00
 8006070:	40013400 	.word	0x40013400
 8006074:	40014000 	.word	0x40014000
 8006078:	40015000 	.word	0x40015000
 800607c:	00010007 	.word	0x00010007

08006080 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d101      	bne.n	8006092 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800608e:	2301      	movs	r3, #1
 8006090:	e054      	b.n	800613c <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006098:	b2db      	uxtb	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d111      	bne.n	80060c2 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f001 fd96 	bl	8007bd8 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d102      	bne.n	80060ba <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	4a23      	ldr	r2, [pc, #140]	@ (8006144 <HAL_TIM_PWM_Init+0xc4>)
 80060b8:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	2202      	movs	r2, #2
 80060c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	3304      	adds	r3, #4
 80060d2:	4619      	mov	r1, r3
 80060d4:	4610      	mov	r0, r2
 80060d6:	f001 f8df 	bl	8007298 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2201      	movs	r2, #1
 80060de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2201      	movs	r2, #1
 80060e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2201      	movs	r2, #1
 80060ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2201      	movs	r2, #1
 80060f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	2201      	movs	r2, #1
 800610e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2201      	movs	r2, #1
 800611e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	2201      	movs	r2, #1
 8006126:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800613a:	2300      	movs	r3, #0
}
 800613c:	4618      	mov	r0, r3
 800613e:	3708      	adds	r7, #8
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	08003b01 	.word	0x08003b01

08006148 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006148:	b580      	push	{r7, lr}
 800614a:	b084      	sub	sp, #16
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d109      	bne.n	800616c <HAL_TIM_PWM_Start+0x24>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800615e:	b2db      	uxtb	r3, r3
 8006160:	2b01      	cmp	r3, #1
 8006162:	bf14      	ite	ne
 8006164:	2301      	movne	r3, #1
 8006166:	2300      	moveq	r3, #0
 8006168:	b2db      	uxtb	r3, r3
 800616a:	e03c      	b.n	80061e6 <HAL_TIM_PWM_Start+0x9e>
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	2b04      	cmp	r3, #4
 8006170:	d109      	bne.n	8006186 <HAL_TIM_PWM_Start+0x3e>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006178:	b2db      	uxtb	r3, r3
 800617a:	2b01      	cmp	r3, #1
 800617c:	bf14      	ite	ne
 800617e:	2301      	movne	r3, #1
 8006180:	2300      	moveq	r3, #0
 8006182:	b2db      	uxtb	r3, r3
 8006184:	e02f      	b.n	80061e6 <HAL_TIM_PWM_Start+0x9e>
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	2b08      	cmp	r3, #8
 800618a:	d109      	bne.n	80061a0 <HAL_TIM_PWM_Start+0x58>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006192:	b2db      	uxtb	r3, r3
 8006194:	2b01      	cmp	r3, #1
 8006196:	bf14      	ite	ne
 8006198:	2301      	movne	r3, #1
 800619a:	2300      	moveq	r3, #0
 800619c:	b2db      	uxtb	r3, r3
 800619e:	e022      	b.n	80061e6 <HAL_TIM_PWM_Start+0x9e>
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	2b0c      	cmp	r3, #12
 80061a4:	d109      	bne.n	80061ba <HAL_TIM_PWM_Start+0x72>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80061ac:	b2db      	uxtb	r3, r3
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	bf14      	ite	ne
 80061b2:	2301      	movne	r3, #1
 80061b4:	2300      	moveq	r3, #0
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	e015      	b.n	80061e6 <HAL_TIM_PWM_Start+0x9e>
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	2b10      	cmp	r3, #16
 80061be:	d109      	bne.n	80061d4 <HAL_TIM_PWM_Start+0x8c>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80061c6:	b2db      	uxtb	r3, r3
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	bf14      	ite	ne
 80061cc:	2301      	movne	r3, #1
 80061ce:	2300      	moveq	r3, #0
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	e008      	b.n	80061e6 <HAL_TIM_PWM_Start+0x9e>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	2b01      	cmp	r3, #1
 80061de:	bf14      	ite	ne
 80061e0:	2301      	movne	r3, #1
 80061e2:	2300      	moveq	r3, #0
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d001      	beq.n	80061ee <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	e0a6      	b.n	800633c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d104      	bne.n	80061fe <HAL_TIM_PWM_Start+0xb6>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2202      	movs	r2, #2
 80061f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061fc:	e023      	b.n	8006246 <HAL_TIM_PWM_Start+0xfe>
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	2b04      	cmp	r3, #4
 8006202:	d104      	bne.n	800620e <HAL_TIM_PWM_Start+0xc6>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2202      	movs	r2, #2
 8006208:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800620c:	e01b      	b.n	8006246 <HAL_TIM_PWM_Start+0xfe>
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	2b08      	cmp	r3, #8
 8006212:	d104      	bne.n	800621e <HAL_TIM_PWM_Start+0xd6>
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2202      	movs	r2, #2
 8006218:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800621c:	e013      	b.n	8006246 <HAL_TIM_PWM_Start+0xfe>
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	2b0c      	cmp	r3, #12
 8006222:	d104      	bne.n	800622e <HAL_TIM_PWM_Start+0xe6>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2202      	movs	r2, #2
 8006228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800622c:	e00b      	b.n	8006246 <HAL_TIM_PWM_Start+0xfe>
 800622e:	683b      	ldr	r3, [r7, #0]
 8006230:	2b10      	cmp	r3, #16
 8006232:	d104      	bne.n	800623e <HAL_TIM_PWM_Start+0xf6>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800623c:	e003      	b.n	8006246 <HAL_TIM_PWM_Start+0xfe>
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2202      	movs	r2, #2
 8006242:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2201      	movs	r2, #1
 800624c:	6839      	ldr	r1, [r7, #0]
 800624e:	4618      	mov	r0, r3
 8006250:	f001 fc9c 	bl	8007b8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a3a      	ldr	r2, [pc, #232]	@ (8006344 <HAL_TIM_PWM_Start+0x1fc>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d018      	beq.n	8006290 <HAL_TIM_PWM_Start+0x148>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a39      	ldr	r2, [pc, #228]	@ (8006348 <HAL_TIM_PWM_Start+0x200>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d013      	beq.n	8006290 <HAL_TIM_PWM_Start+0x148>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a37      	ldr	r2, [pc, #220]	@ (800634c <HAL_TIM_PWM_Start+0x204>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d00e      	beq.n	8006290 <HAL_TIM_PWM_Start+0x148>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a36      	ldr	r2, [pc, #216]	@ (8006350 <HAL_TIM_PWM_Start+0x208>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d009      	beq.n	8006290 <HAL_TIM_PWM_Start+0x148>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a34      	ldr	r2, [pc, #208]	@ (8006354 <HAL_TIM_PWM_Start+0x20c>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d004      	beq.n	8006290 <HAL_TIM_PWM_Start+0x148>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a33      	ldr	r2, [pc, #204]	@ (8006358 <HAL_TIM_PWM_Start+0x210>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d101      	bne.n	8006294 <HAL_TIM_PWM_Start+0x14c>
 8006290:	2301      	movs	r3, #1
 8006292:	e000      	b.n	8006296 <HAL_TIM_PWM_Start+0x14e>
 8006294:	2300      	movs	r3, #0
 8006296:	2b00      	cmp	r3, #0
 8006298:	d007      	beq.n	80062aa <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80062a8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a25      	ldr	r2, [pc, #148]	@ (8006344 <HAL_TIM_PWM_Start+0x1fc>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d022      	beq.n	80062fa <HAL_TIM_PWM_Start+0x1b2>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80062bc:	d01d      	beq.n	80062fa <HAL_TIM_PWM_Start+0x1b2>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a26      	ldr	r2, [pc, #152]	@ (800635c <HAL_TIM_PWM_Start+0x214>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d018      	beq.n	80062fa <HAL_TIM_PWM_Start+0x1b2>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a24      	ldr	r2, [pc, #144]	@ (8006360 <HAL_TIM_PWM_Start+0x218>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d013      	beq.n	80062fa <HAL_TIM_PWM_Start+0x1b2>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a23      	ldr	r2, [pc, #140]	@ (8006364 <HAL_TIM_PWM_Start+0x21c>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d00e      	beq.n	80062fa <HAL_TIM_PWM_Start+0x1b2>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a19      	ldr	r2, [pc, #100]	@ (8006348 <HAL_TIM_PWM_Start+0x200>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d009      	beq.n	80062fa <HAL_TIM_PWM_Start+0x1b2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a18      	ldr	r2, [pc, #96]	@ (800634c <HAL_TIM_PWM_Start+0x204>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d004      	beq.n	80062fa <HAL_TIM_PWM_Start+0x1b2>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a18      	ldr	r2, [pc, #96]	@ (8006358 <HAL_TIM_PWM_Start+0x210>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d115      	bne.n	8006326 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	689a      	ldr	r2, [r3, #8]
 8006300:	4b19      	ldr	r3, [pc, #100]	@ (8006368 <HAL_TIM_PWM_Start+0x220>)
 8006302:	4013      	ands	r3, r2
 8006304:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2b06      	cmp	r3, #6
 800630a:	d015      	beq.n	8006338 <HAL_TIM_PWM_Start+0x1f0>
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006312:	d011      	beq.n	8006338 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f042 0201 	orr.w	r2, r2, #1
 8006322:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006324:	e008      	b.n	8006338 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	681a      	ldr	r2, [r3, #0]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f042 0201 	orr.w	r2, r2, #1
 8006334:	601a      	str	r2, [r3, #0]
 8006336:	e000      	b.n	800633a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006338:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800633a:	2300      	movs	r3, #0
}
 800633c:	4618      	mov	r0, r3
 800633e:	3710      	adds	r7, #16
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	40012c00 	.word	0x40012c00
 8006348:	40013400 	.word	0x40013400
 800634c:	40014000 	.word	0x40014000
 8006350:	40014400 	.word	0x40014400
 8006354:	40014800 	.word	0x40014800
 8006358:	40015000 	.word	0x40015000
 800635c:	40000400 	.word	0x40000400
 8006360:	40000800 	.word	0x40000800
 8006364:	40000c00 	.word	0x40000c00
 8006368:	00010007 	.word	0x00010007

0800636c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e04c      	b.n	800641a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006386:	b2db      	uxtb	r3, r3
 8006388:	2b00      	cmp	r3, #0
 800638a:	d111      	bne.n	80063b0 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	2200      	movs	r2, #0
 8006390:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	f001 fc1f 	bl	8007bd8 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d102      	bne.n	80063a8 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	4a1f      	ldr	r2, [pc, #124]	@ (8006424 <HAL_TIM_OnePulse_Init+0xb8>)
 80063a6:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2202      	movs	r2, #2
 80063b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681a      	ldr	r2, [r3, #0]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	3304      	adds	r3, #4
 80063c0:	4619      	mov	r1, r3
 80063c2:	4610      	mov	r0, r2
 80063c4:	f000 ff68 	bl	8007298 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	681a      	ldr	r2, [r3, #0]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f022 0208 	bic.w	r2, r2, #8
 80063d6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6819      	ldr	r1, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	683a      	ldr	r2, [r7, #0]
 80063e4:	430a      	orrs	r2, r1
 80063e6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3708      	adds	r7, #8
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	08006429 	.word	0x08006429

08006428 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8006428:	b480      	push	{r7}
 800642a:	b083      	sub	sp, #12
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8006430:	bf00      	nop
 8006432:	370c      	adds	r7, #12
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
 8006444:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800644c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006454:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800645c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006464:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006466:	7bfb      	ldrb	r3, [r7, #15]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d108      	bne.n	800647e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800646c:	7bbb      	ldrb	r3, [r7, #14]
 800646e:	2b01      	cmp	r3, #1
 8006470:	d105      	bne.n	800647e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006472:	7b7b      	ldrb	r3, [r7, #13]
 8006474:	2b01      	cmp	r3, #1
 8006476:	d102      	bne.n	800647e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006478:	7b3b      	ldrb	r3, [r7, #12]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d001      	beq.n	8006482 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e059      	b.n	8006536 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2202      	movs	r2, #2
 8006486:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2202      	movs	r2, #2
 800648e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2202      	movs	r2, #2
 8006496:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	2202      	movs	r2, #2
 800649e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	68da      	ldr	r2, [r3, #12]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f042 0202 	orr.w	r2, r2, #2
 80064b0:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68da      	ldr	r2, [r3, #12]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f042 0204 	orr.w	r2, r2, #4
 80064c0:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	2201      	movs	r2, #1
 80064c8:	2100      	movs	r1, #0
 80064ca:	4618      	mov	r0, r3
 80064cc:	f001 fb5e 	bl	8007b8c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	2201      	movs	r2, #1
 80064d6:	2104      	movs	r1, #4
 80064d8:	4618      	mov	r0, r3
 80064da:	f001 fb57 	bl	8007b8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	4a17      	ldr	r2, [pc, #92]	@ (8006540 <HAL_TIM_OnePulse_Start_IT+0x104>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d018      	beq.n	800651a <HAL_TIM_OnePulse_Start_IT+0xde>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	4a15      	ldr	r2, [pc, #84]	@ (8006544 <HAL_TIM_OnePulse_Start_IT+0x108>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d013      	beq.n	800651a <HAL_TIM_OnePulse_Start_IT+0xde>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	4a14      	ldr	r2, [pc, #80]	@ (8006548 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d00e      	beq.n	800651a <HAL_TIM_OnePulse_Start_IT+0xde>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	4a12      	ldr	r2, [pc, #72]	@ (800654c <HAL_TIM_OnePulse_Start_IT+0x110>)
 8006502:	4293      	cmp	r3, r2
 8006504:	d009      	beq.n	800651a <HAL_TIM_OnePulse_Start_IT+0xde>
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	4a11      	ldr	r2, [pc, #68]	@ (8006550 <HAL_TIM_OnePulse_Start_IT+0x114>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d004      	beq.n	800651a <HAL_TIM_OnePulse_Start_IT+0xde>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	4a0f      	ldr	r2, [pc, #60]	@ (8006554 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d101      	bne.n	800651e <HAL_TIM_OnePulse_Start_IT+0xe2>
 800651a:	2301      	movs	r3, #1
 800651c:	e000      	b.n	8006520 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800651e:	2300      	movs	r3, #0
 8006520:	2b00      	cmp	r3, #0
 8006522:	d007      	beq.n	8006534 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006532:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8006534:	2300      	movs	r3, #0
}
 8006536:	4618      	mov	r0, r3
 8006538:	3710      	adds	r7, #16
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	40012c00 	.word	0x40012c00
 8006544:	40013400 	.word	0x40013400
 8006548:	40014000 	.word	0x40014000
 800654c:	40014400 	.word	0x40014400
 8006550:	40014800 	.word	0x40014800
 8006554:	40015000 	.word	0x40015000

08006558 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d101      	bne.n	800656c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e0a2      	b.n	80066b2 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b00      	cmp	r3, #0
 8006576:	d111      	bne.n	800659c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8006580:	6878      	ldr	r0, [r7, #4]
 8006582:	f001 fb29 	bl	8007bd8 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800658a:	2b00      	cmp	r3, #0
 800658c:	d102      	bne.n	8006594 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	4a4a      	ldr	r2, [pc, #296]	@ (80066bc <HAL_TIM_Encoder_Init+0x164>)
 8006592:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2202      	movs	r2, #2
 80065a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	687a      	ldr	r2, [r7, #4]
 80065ac:	6812      	ldr	r2, [r2, #0]
 80065ae:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80065b2:	f023 0307 	bic.w	r3, r3, #7
 80065b6:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681a      	ldr	r2, [r3, #0]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	3304      	adds	r3, #4
 80065c0:	4619      	mov	r1, r3
 80065c2:	4610      	mov	r0, r2
 80065c4:	f000 fe68 	bl	8007298 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	6a1b      	ldr	r3, [r3, #32]
 80065de:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	697a      	ldr	r2, [r7, #20]
 80065e6:	4313      	orrs	r3, r2
 80065e8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065f0:	f023 0303 	bic.w	r3, r3, #3
 80065f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80065f6:	683b      	ldr	r3, [r7, #0]
 80065f8:	689a      	ldr	r2, [r3, #8]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	699b      	ldr	r3, [r3, #24]
 80065fe:	021b      	lsls	r3, r3, #8
 8006600:	4313      	orrs	r3, r2
 8006602:	693a      	ldr	r2, [r7, #16]
 8006604:	4313      	orrs	r3, r2
 8006606:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800660e:	f023 030c 	bic.w	r3, r3, #12
 8006612:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800661a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800661e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	68da      	ldr	r2, [r3, #12]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	69db      	ldr	r3, [r3, #28]
 8006628:	021b      	lsls	r3, r3, #8
 800662a:	4313      	orrs	r3, r2
 800662c:	693a      	ldr	r2, [r7, #16]
 800662e:	4313      	orrs	r3, r2
 8006630:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	011a      	lsls	r2, r3, #4
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	6a1b      	ldr	r3, [r3, #32]
 800663c:	031b      	lsls	r3, r3, #12
 800663e:	4313      	orrs	r3, r2
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	4313      	orrs	r3, r2
 8006644:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800664c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8006654:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	685a      	ldr	r2, [r3, #4]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	011b      	lsls	r3, r3, #4
 8006660:	4313      	orrs	r3, r2
 8006662:	68fa      	ldr	r2, [r7, #12]
 8006664:	4313      	orrs	r3, r2
 8006666:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	697a      	ldr	r2, [r7, #20]
 800666e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	68fa      	ldr	r2, [r7, #12]
 800667e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2201      	movs	r2, #1
 8006694:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2201      	movs	r2, #1
 800669c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2201      	movs	r2, #1
 80066ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80066b0:	2300      	movs	r3, #0
}
 80066b2:	4618      	mov	r0, r3
 80066b4:	3718      	adds	r7, #24
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	08003c1d 	.word	0x08003c1d

080066c0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
 80066c8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80066d0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80066d8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80066e0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80066e8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d110      	bne.n	8006712 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80066f0:	7bfb      	ldrb	r3, [r7, #15]
 80066f2:	2b01      	cmp	r3, #1
 80066f4:	d102      	bne.n	80066fc <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80066f6:	7b7b      	ldrb	r3, [r7, #13]
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d001      	beq.n	8006700 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80066fc:	2301      	movs	r3, #1
 80066fe:	e069      	b.n	80067d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2202      	movs	r2, #2
 800670c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006710:	e031      	b.n	8006776 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	2b04      	cmp	r3, #4
 8006716:	d110      	bne.n	800673a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006718:	7bbb      	ldrb	r3, [r7, #14]
 800671a:	2b01      	cmp	r3, #1
 800671c:	d102      	bne.n	8006724 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800671e:	7b3b      	ldrb	r3, [r7, #12]
 8006720:	2b01      	cmp	r3, #1
 8006722:	d001      	beq.n	8006728 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	e055      	b.n	80067d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2202      	movs	r2, #2
 800672c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006738:	e01d      	b.n	8006776 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800673a:	7bfb      	ldrb	r3, [r7, #15]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d108      	bne.n	8006752 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006740:	7bbb      	ldrb	r3, [r7, #14]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d105      	bne.n	8006752 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006746:	7b7b      	ldrb	r3, [r7, #13]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d102      	bne.n	8006752 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800674c:	7b3b      	ldrb	r3, [r7, #12]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d001      	beq.n	8006756 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e03e      	b.n	80067d4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2202      	movs	r2, #2
 800675a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2202      	movs	r2, #2
 8006762:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2202      	movs	r2, #2
 800676a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2202      	movs	r2, #2
 8006772:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d003      	beq.n	8006784 <HAL_TIM_Encoder_Start+0xc4>
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	2b04      	cmp	r3, #4
 8006780:	d008      	beq.n	8006794 <HAL_TIM_Encoder_Start+0xd4>
 8006782:	e00f      	b.n	80067a4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	2201      	movs	r2, #1
 800678a:	2100      	movs	r1, #0
 800678c:	4618      	mov	r0, r3
 800678e:	f001 f9fd 	bl	8007b8c <TIM_CCxChannelCmd>
      break;
 8006792:	e016      	b.n	80067c2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2201      	movs	r2, #1
 800679a:	2104      	movs	r1, #4
 800679c:	4618      	mov	r0, r3
 800679e:	f001 f9f5 	bl	8007b8c <TIM_CCxChannelCmd>
      break;
 80067a2:	e00e      	b.n	80067c2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	2201      	movs	r2, #1
 80067aa:	2100      	movs	r1, #0
 80067ac:	4618      	mov	r0, r3
 80067ae:	f001 f9ed 	bl	8007b8c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	2201      	movs	r2, #1
 80067b8:	2104      	movs	r1, #4
 80067ba:	4618      	mov	r0, r3
 80067bc:	f001 f9e6 	bl	8007b8c <TIM_CCxChannelCmd>
      break;
 80067c0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f042 0201 	orr.w	r2, r2, #1
 80067d0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	691b      	ldr	r3, [r3, #16]
 80067f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	f003 0302 	and.w	r3, r3, #2
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d026      	beq.n	800684c <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f003 0302 	and.w	r3, r3, #2
 8006804:	2b00      	cmp	r3, #0
 8006806:	d021      	beq.n	800684c <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f06f 0202 	mvn.w	r2, #2
 8006810:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	2201      	movs	r2, #1
 8006816:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	f003 0303 	and.w	r3, r3, #3
 8006822:	2b00      	cmp	r3, #0
 8006824:	d005      	beq.n	8006832 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	4798      	blx	r3
 8006830:	e009      	b.n	8006846 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2200      	movs	r2, #0
 800684a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	f003 0304 	and.w	r3, r3, #4
 8006852:	2b00      	cmp	r3, #0
 8006854:	d026      	beq.n	80068a4 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	f003 0304 	and.w	r3, r3, #4
 800685c:	2b00      	cmp	r3, #0
 800685e:	d021      	beq.n	80068a4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f06f 0204 	mvn.w	r2, #4
 8006868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2202      	movs	r2, #2
 800686e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800687a:	2b00      	cmp	r3, #0
 800687c:	d005      	beq.n	800688a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006884:	6878      	ldr	r0, [r7, #4]
 8006886:	4798      	blx	r3
 8006888:	e009      	b.n	800689e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	f003 0308 	and.w	r3, r3, #8
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d026      	beq.n	80068fc <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f003 0308 	and.w	r3, r3, #8
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d021      	beq.n	80068fc <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f06f 0208 	mvn.w	r2, #8
 80068c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2204      	movs	r2, #4
 80068c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	f003 0303 	and.w	r3, r3, #3
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d005      	beq.n	80068e2 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	4798      	blx	r3
 80068e0:	e009      	b.n	80068f6 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80068f2:	6878      	ldr	r0, [r7, #4]
 80068f4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	f003 0310 	and.w	r3, r3, #16
 8006902:	2b00      	cmp	r3, #0
 8006904:	d026      	beq.n	8006954 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f003 0310 	and.w	r3, r3, #16
 800690c:	2b00      	cmp	r3, #0
 800690e:	d021      	beq.n	8006954 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f06f 0210 	mvn.w	r2, #16
 8006918:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2208      	movs	r2, #8
 800691e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	69db      	ldr	r3, [r3, #28]
 8006926:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800692a:	2b00      	cmp	r3, #0
 800692c:	d005      	beq.n	800693a <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	4798      	blx	r3
 8006938:	e009      	b.n	800694e <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006940:	6878      	ldr	r0, [r7, #4]
 8006942:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	2200      	movs	r2, #0
 8006952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	f003 0301 	and.w	r3, r3, #1
 800695a:	2b00      	cmp	r3, #0
 800695c:	d00e      	beq.n	800697c <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	2b00      	cmp	r3, #0
 8006966:	d009      	beq.n	800697c <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f06f 0201 	mvn.w	r2, #1
 8006970:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006978:	6878      	ldr	r0, [r7, #4]
 800697a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006982:	2b00      	cmp	r3, #0
 8006984:	d104      	bne.n	8006990 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800698c:	2b00      	cmp	r3, #0
 800698e:	d00e      	beq.n	80069ae <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006996:	2b00      	cmp	r3, #0
 8006998:	d009      	beq.n	80069ae <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80069a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80069aa:	6878      	ldr	r0, [r7, #4]
 80069ac:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d00e      	beq.n	80069d6 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d009      	beq.n	80069d6 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80069ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00e      	beq.n	80069fe <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d009      	beq.n	80069fe <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80069f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80069fa:	6878      	ldr	r0, [r7, #4]
 80069fc:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	f003 0320 	and.w	r3, r3, #32
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d00e      	beq.n	8006a26 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f003 0320 	and.w	r3, r3, #32
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d009      	beq.n	8006a26 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f06f 0220 	mvn.w	r2, #32
 8006a1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006a26:	68bb      	ldr	r3, [r7, #8]
 8006a28:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d00e      	beq.n	8006a4e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d009      	beq.n	8006a4e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006a42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00e      	beq.n	8006a76 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d009      	beq.n	8006a76 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00e      	beq.n	8006a9e <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d009      	beq.n	8006a9e <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8006a9a:	6878      	ldr	r0, [r7, #4]
 8006a9c:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d00e      	beq.n	8006ac6 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d009      	beq.n	8006ac6 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006aba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006ac6:	bf00      	nop
 8006ac8:	3710      	adds	r7, #16
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
	...

08006ad0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b086      	sub	sp, #24
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006adc:	2300      	movs	r3, #0
 8006ade:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d101      	bne.n	8006aee <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006aea:	2302      	movs	r3, #2
 8006aec:	e0ff      	b.n	8006cee <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2b14      	cmp	r3, #20
 8006afa:	f200 80f0 	bhi.w	8006cde <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006afe:	a201      	add	r2, pc, #4	@ (adr r2, 8006b04 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b04:	08006b59 	.word	0x08006b59
 8006b08:	08006cdf 	.word	0x08006cdf
 8006b0c:	08006cdf 	.word	0x08006cdf
 8006b10:	08006cdf 	.word	0x08006cdf
 8006b14:	08006b99 	.word	0x08006b99
 8006b18:	08006cdf 	.word	0x08006cdf
 8006b1c:	08006cdf 	.word	0x08006cdf
 8006b20:	08006cdf 	.word	0x08006cdf
 8006b24:	08006bdb 	.word	0x08006bdb
 8006b28:	08006cdf 	.word	0x08006cdf
 8006b2c:	08006cdf 	.word	0x08006cdf
 8006b30:	08006cdf 	.word	0x08006cdf
 8006b34:	08006c1b 	.word	0x08006c1b
 8006b38:	08006cdf 	.word	0x08006cdf
 8006b3c:	08006cdf 	.word	0x08006cdf
 8006b40:	08006cdf 	.word	0x08006cdf
 8006b44:	08006c5d 	.word	0x08006c5d
 8006b48:	08006cdf 	.word	0x08006cdf
 8006b4c:	08006cdf 	.word	0x08006cdf
 8006b50:	08006cdf 	.word	0x08006cdf
 8006b54:	08006c9d 	.word	0x08006c9d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	68b9      	ldr	r1, [r7, #8]
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f000 fc4e 	bl	8007400 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	699a      	ldr	r2, [r3, #24]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f042 0208 	orr.w	r2, r2, #8
 8006b72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	699a      	ldr	r2, [r3, #24]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f022 0204 	bic.w	r2, r2, #4
 8006b82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	6999      	ldr	r1, [r3, #24]
 8006b8a:	68bb      	ldr	r3, [r7, #8]
 8006b8c:	691a      	ldr	r2, [r3, #16]
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	430a      	orrs	r2, r1
 8006b94:	619a      	str	r2, [r3, #24]
      break;
 8006b96:	e0a5      	b.n	8006ce4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68b9      	ldr	r1, [r7, #8]
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f000 fcc8 	bl	8007534 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	699a      	ldr	r2, [r3, #24]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006bb2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	699a      	ldr	r2, [r3, #24]
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	6999      	ldr	r1, [r3, #24]
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	691b      	ldr	r3, [r3, #16]
 8006bce:	021a      	lsls	r2, r3, #8
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	430a      	orrs	r2, r1
 8006bd6:	619a      	str	r2, [r3, #24]
      break;
 8006bd8:	e084      	b.n	8006ce4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68b9      	ldr	r1, [r7, #8]
 8006be0:	4618      	mov	r0, r3
 8006be2:	f000 fd3b 	bl	800765c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	69da      	ldr	r2, [r3, #28]
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f042 0208 	orr.w	r2, r2, #8
 8006bf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	69da      	ldr	r2, [r3, #28]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f022 0204 	bic.w	r2, r2, #4
 8006c04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	69d9      	ldr	r1, [r3, #28]
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	691a      	ldr	r2, [r3, #16]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	430a      	orrs	r2, r1
 8006c16:	61da      	str	r2, [r3, #28]
      break;
 8006c18:	e064      	b.n	8006ce4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68b9      	ldr	r1, [r7, #8]
 8006c20:	4618      	mov	r0, r3
 8006c22:	f000 fdad 	bl	8007780 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	69da      	ldr	r2, [r3, #28]
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006c34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	69da      	ldr	r2, [r3, #28]
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	69d9      	ldr	r1, [r3, #28]
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	691b      	ldr	r3, [r3, #16]
 8006c50:	021a      	lsls	r2, r3, #8
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	61da      	str	r2, [r3, #28]
      break;
 8006c5a:	e043      	b.n	8006ce4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	68b9      	ldr	r1, [r7, #8]
 8006c62:	4618      	mov	r0, r3
 8006c64:	f000 fe20 	bl	80078a8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f042 0208 	orr.w	r2, r2, #8
 8006c76:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 0204 	bic.w	r2, r2, #4
 8006c86:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	691a      	ldr	r2, [r3, #16]
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006c9a:	e023      	b.n	8006ce4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	68b9      	ldr	r1, [r7, #8]
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	f000 fe6a 	bl	800797c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006cb6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006cc6:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006cce:	68bb      	ldr	r3, [r7, #8]
 8006cd0:	691b      	ldr	r3, [r3, #16]
 8006cd2:	021a      	lsls	r2, r3, #8
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	430a      	orrs	r2, r1
 8006cda:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006cdc:	e002      	b.n	8006ce4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006cde:	2301      	movs	r3, #1
 8006ce0:	75fb      	strb	r3, [r7, #23]
      break;
 8006ce2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cee:	4618      	mov	r0, r3
 8006cf0:	3718      	adds	r7, #24
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop

08006cf8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d02:	2300      	movs	r3, #0
 8006d04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d101      	bne.n	8006d14 <HAL_TIM_ConfigClockSource+0x1c>
 8006d10:	2302      	movs	r3, #2
 8006d12:	e0f6      	b.n	8006f02 <HAL_TIM_ConfigClockSource+0x20a>
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2201      	movs	r2, #1
 8006d18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2202      	movs	r2, #2
 8006d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006d2c:	68bb      	ldr	r3, [r7, #8]
 8006d2e:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006d32:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006d36:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d3e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	4a6f      	ldr	r2, [pc, #444]	@ (8006f0c <HAL_TIM_ConfigClockSource+0x214>)
 8006d4e:	4293      	cmp	r3, r2
 8006d50:	f000 80c1 	beq.w	8006ed6 <HAL_TIM_ConfigClockSource+0x1de>
 8006d54:	4a6d      	ldr	r2, [pc, #436]	@ (8006f0c <HAL_TIM_ConfigClockSource+0x214>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	f200 80c6 	bhi.w	8006ee8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d5c:	4a6c      	ldr	r2, [pc, #432]	@ (8006f10 <HAL_TIM_ConfigClockSource+0x218>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	f000 80b9 	beq.w	8006ed6 <HAL_TIM_ConfigClockSource+0x1de>
 8006d64:	4a6a      	ldr	r2, [pc, #424]	@ (8006f10 <HAL_TIM_ConfigClockSource+0x218>)
 8006d66:	4293      	cmp	r3, r2
 8006d68:	f200 80be 	bhi.w	8006ee8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d6c:	4a69      	ldr	r2, [pc, #420]	@ (8006f14 <HAL_TIM_ConfigClockSource+0x21c>)
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	f000 80b1 	beq.w	8006ed6 <HAL_TIM_ConfigClockSource+0x1de>
 8006d74:	4a67      	ldr	r2, [pc, #412]	@ (8006f14 <HAL_TIM_ConfigClockSource+0x21c>)
 8006d76:	4293      	cmp	r3, r2
 8006d78:	f200 80b6 	bhi.w	8006ee8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d7c:	4a66      	ldr	r2, [pc, #408]	@ (8006f18 <HAL_TIM_ConfigClockSource+0x220>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	f000 80a9 	beq.w	8006ed6 <HAL_TIM_ConfigClockSource+0x1de>
 8006d84:	4a64      	ldr	r2, [pc, #400]	@ (8006f18 <HAL_TIM_ConfigClockSource+0x220>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	f200 80ae 	bhi.w	8006ee8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d8c:	4a63      	ldr	r2, [pc, #396]	@ (8006f1c <HAL_TIM_ConfigClockSource+0x224>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	f000 80a1 	beq.w	8006ed6 <HAL_TIM_ConfigClockSource+0x1de>
 8006d94:	4a61      	ldr	r2, [pc, #388]	@ (8006f1c <HAL_TIM_ConfigClockSource+0x224>)
 8006d96:	4293      	cmp	r3, r2
 8006d98:	f200 80a6 	bhi.w	8006ee8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006d9c:	4a60      	ldr	r2, [pc, #384]	@ (8006f20 <HAL_TIM_ConfigClockSource+0x228>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	f000 8099 	beq.w	8006ed6 <HAL_TIM_ConfigClockSource+0x1de>
 8006da4:	4a5e      	ldr	r2, [pc, #376]	@ (8006f20 <HAL_TIM_ConfigClockSource+0x228>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	f200 809e 	bhi.w	8006ee8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006dac:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006db0:	f000 8091 	beq.w	8006ed6 <HAL_TIM_ConfigClockSource+0x1de>
 8006db4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006db8:	f200 8096 	bhi.w	8006ee8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006dbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dc0:	f000 8089 	beq.w	8006ed6 <HAL_TIM_ConfigClockSource+0x1de>
 8006dc4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006dc8:	f200 808e 	bhi.w	8006ee8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006dcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dd0:	d03e      	beq.n	8006e50 <HAL_TIM_ConfigClockSource+0x158>
 8006dd2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006dd6:	f200 8087 	bhi.w	8006ee8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006dda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006dde:	f000 8086 	beq.w	8006eee <HAL_TIM_ConfigClockSource+0x1f6>
 8006de2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006de6:	d87f      	bhi.n	8006ee8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006de8:	2b70      	cmp	r3, #112	@ 0x70
 8006dea:	d01a      	beq.n	8006e22 <HAL_TIM_ConfigClockSource+0x12a>
 8006dec:	2b70      	cmp	r3, #112	@ 0x70
 8006dee:	d87b      	bhi.n	8006ee8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006df0:	2b60      	cmp	r3, #96	@ 0x60
 8006df2:	d050      	beq.n	8006e96 <HAL_TIM_ConfigClockSource+0x19e>
 8006df4:	2b60      	cmp	r3, #96	@ 0x60
 8006df6:	d877      	bhi.n	8006ee8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006df8:	2b50      	cmp	r3, #80	@ 0x50
 8006dfa:	d03c      	beq.n	8006e76 <HAL_TIM_ConfigClockSource+0x17e>
 8006dfc:	2b50      	cmp	r3, #80	@ 0x50
 8006dfe:	d873      	bhi.n	8006ee8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e00:	2b40      	cmp	r3, #64	@ 0x40
 8006e02:	d058      	beq.n	8006eb6 <HAL_TIM_ConfigClockSource+0x1be>
 8006e04:	2b40      	cmp	r3, #64	@ 0x40
 8006e06:	d86f      	bhi.n	8006ee8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e08:	2b30      	cmp	r3, #48	@ 0x30
 8006e0a:	d064      	beq.n	8006ed6 <HAL_TIM_ConfigClockSource+0x1de>
 8006e0c:	2b30      	cmp	r3, #48	@ 0x30
 8006e0e:	d86b      	bhi.n	8006ee8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e10:	2b20      	cmp	r3, #32
 8006e12:	d060      	beq.n	8006ed6 <HAL_TIM_ConfigClockSource+0x1de>
 8006e14:	2b20      	cmp	r3, #32
 8006e16:	d867      	bhi.n	8006ee8 <HAL_TIM_ConfigClockSource+0x1f0>
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d05c      	beq.n	8006ed6 <HAL_TIM_ConfigClockSource+0x1de>
 8006e1c:	2b10      	cmp	r3, #16
 8006e1e:	d05a      	beq.n	8006ed6 <HAL_TIM_ConfigClockSource+0x1de>
 8006e20:	e062      	b.n	8006ee8 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e2a:	683b      	ldr	r3, [r7, #0]
 8006e2c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e32:	f000 fe8b 	bl	8007b4c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	689b      	ldr	r3, [r3, #8]
 8006e3c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006e44:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	609a      	str	r2, [r3, #8]
      break;
 8006e4e:	e04f      	b.n	8006ef0 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006e58:	683b      	ldr	r3, [r7, #0]
 8006e5a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006e60:	f000 fe74 	bl	8007b4c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689a      	ldr	r2, [r3, #8]
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006e72:	609a      	str	r2, [r3, #8]
      break;
 8006e74:	e03c      	b.n	8006ef0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e82:	461a      	mov	r2, r3
 8006e84:	f000 fde6 	bl	8007a54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2150      	movs	r1, #80	@ 0x50
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f000 fe3f 	bl	8007b12 <TIM_ITRx_SetConfig>
      break;
 8006e94:	e02c      	b.n	8006ef0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	f000 fe05 	bl	8007ab2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2160      	movs	r1, #96	@ 0x60
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f000 fe2f 	bl	8007b12 <TIM_ITRx_SetConfig>
      break;
 8006eb4:	e01c      	b.n	8006ef0 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006eba:	683b      	ldr	r3, [r7, #0]
 8006ebc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006ec2:	461a      	mov	r2, r3
 8006ec4:	f000 fdc6 	bl	8007a54 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2140      	movs	r1, #64	@ 0x40
 8006ece:	4618      	mov	r0, r3
 8006ed0:	f000 fe1f 	bl	8007b12 <TIM_ITRx_SetConfig>
      break;
 8006ed4:	e00c      	b.n	8006ef0 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	4619      	mov	r1, r3
 8006ee0:	4610      	mov	r0, r2
 8006ee2:	f000 fe16 	bl	8007b12 <TIM_ITRx_SetConfig>
      break;
 8006ee6:	e003      	b.n	8006ef0 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	73fb      	strb	r3, [r7, #15]
      break;
 8006eec:	e000      	b.n	8006ef0 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006eee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3710      	adds	r7, #16
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bd80      	pop	{r7, pc}
 8006f0a:	bf00      	nop
 8006f0c:	00100070 	.word	0x00100070
 8006f10:	00100060 	.word	0x00100060
 8006f14:	00100050 	.word	0x00100050
 8006f18:	00100040 	.word	0x00100040
 8006f1c:	00100030 	.word	0x00100030
 8006f20:	00100020 	.word	0x00100020

08006f24 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b083      	sub	sp, #12
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr

08006f38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006f38:	b480      	push	{r7}
 8006f3a:	b083      	sub	sp, #12
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006f40:	bf00      	nop
 8006f42:	370c      	adds	r7, #12
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr

08006f4c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006f4c:	b480      	push	{r7}
 8006f4e:	b083      	sub	sp, #12
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006f54:	bf00      	nop
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr

08006f60 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006f60:	b480      	push	{r7}
 8006f62:	b083      	sub	sp, #12
 8006f64:	af00      	add	r7, sp, #0
 8006f66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8006f68:	bf00      	nop
 8006f6a:	370c      	adds	r7, #12
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006f7c:	bf00      	nop
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b083      	sub	sp, #12
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8006f90:	bf00      	nop
 8006f92:	370c      	adds	r7, #12
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b083      	sub	sp, #12
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr

08006fb0 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8006fb8:	bf00      	nop
 8006fba:	370c      	adds	r7, #12
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr

08006fc4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b083      	sub	sp, #12
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b087      	sub	sp, #28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	607a      	str	r2, [r7, #4]
 8006fe4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d101      	bne.n	8006ff4 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	e14a      	b.n	800728a <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	f040 80dd 	bne.w	80071bc <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8007002:	7afb      	ldrb	r3, [r7, #11]
 8007004:	2b1f      	cmp	r3, #31
 8007006:	f200 80d6 	bhi.w	80071b6 <HAL_TIM_RegisterCallback+0x1de>
 800700a:	a201      	add	r2, pc, #4	@ (adr r2, 8007010 <HAL_TIM_RegisterCallback+0x38>)
 800700c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007010:	08007091 	.word	0x08007091
 8007014:	08007099 	.word	0x08007099
 8007018:	080070a1 	.word	0x080070a1
 800701c:	080070a9 	.word	0x080070a9
 8007020:	080070b1 	.word	0x080070b1
 8007024:	080070b9 	.word	0x080070b9
 8007028:	080070c1 	.word	0x080070c1
 800702c:	080070c9 	.word	0x080070c9
 8007030:	080070d1 	.word	0x080070d1
 8007034:	080070d9 	.word	0x080070d9
 8007038:	080070e1 	.word	0x080070e1
 800703c:	080070e9 	.word	0x080070e9
 8007040:	080070f1 	.word	0x080070f1
 8007044:	080070f9 	.word	0x080070f9
 8007048:	08007103 	.word	0x08007103
 800704c:	0800710d 	.word	0x0800710d
 8007050:	08007117 	.word	0x08007117
 8007054:	08007121 	.word	0x08007121
 8007058:	0800712b 	.word	0x0800712b
 800705c:	08007135 	.word	0x08007135
 8007060:	0800713f 	.word	0x0800713f
 8007064:	08007149 	.word	0x08007149
 8007068:	08007153 	.word	0x08007153
 800706c:	0800715d 	.word	0x0800715d
 8007070:	08007167 	.word	0x08007167
 8007074:	08007171 	.word	0x08007171
 8007078:	0800717b 	.word	0x0800717b
 800707c:	08007185 	.word	0x08007185
 8007080:	0800718f 	.word	0x0800718f
 8007084:	08007199 	.word	0x08007199
 8007088:	080071a3 	.word	0x080071a3
 800708c:	080071ad 	.word	0x080071ad
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	687a      	ldr	r2, [r7, #4]
 8007094:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007096:	e0f7      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	687a      	ldr	r2, [r7, #4]
 800709c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800709e:	e0f3      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	687a      	ldr	r2, [r7, #4]
 80070a4:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80070a6:	e0ef      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	687a      	ldr	r2, [r7, #4]
 80070ac:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80070ae:	e0eb      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	687a      	ldr	r2, [r7, #4]
 80070b4:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80070b6:	e0e7      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	687a      	ldr	r2, [r7, #4]
 80070bc:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80070be:	e0e3      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80070c6:	e0df      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	687a      	ldr	r2, [r7, #4]
 80070cc:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 80070ce:	e0db      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	687a      	ldr	r2, [r7, #4]
 80070d4:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 80070d6:	e0d7      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	687a      	ldr	r2, [r7, #4]
 80070dc:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 80070de:	e0d3      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 80070e6:	e0cf      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	687a      	ldr	r2, [r7, #4]
 80070ec:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 80070ee:	e0cb      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80070f6:	e0c7      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	687a      	ldr	r2, [r7, #4]
 80070fc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8007100:	e0c2      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	687a      	ldr	r2, [r7, #4]
 8007106:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800710a:	e0bd      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	687a      	ldr	r2, [r7, #4]
 8007110:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8007114:	e0b8      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 800711e:	e0b3      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	687a      	ldr	r2, [r7, #4]
 8007124:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8007128:	e0ae      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	687a      	ldr	r2, [r7, #4]
 800712e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8007132:	e0a9      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	687a      	ldr	r2, [r7, #4]
 8007138:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 800713c:	e0a4      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8007146:	e09f      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8007148:	68fb      	ldr	r3, [r7, #12]
 800714a:	687a      	ldr	r2, [r7, #4]
 800714c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8007150:	e09a      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800715a:	e095      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	687a      	ldr	r2, [r7, #4]
 8007160:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8007164:	e090      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 800716e:	e08b      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	687a      	ldr	r2, [r7, #4]
 8007174:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8007178:	e086      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8007182:	e081      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	687a      	ldr	r2, [r7, #4]
 8007188:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800718c:	e07c      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	687a      	ldr	r2, [r7, #4]
 8007192:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8007196:	e077      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	687a      	ldr	r2, [r7, #4]
 800719c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 80071a0:	e072      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	687a      	ldr	r2, [r7, #4]
 80071a6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80071aa:	e06d      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	687a      	ldr	r2, [r7, #4]
 80071b0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80071b4:	e068      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	75fb      	strb	r3, [r7, #23]
        break;
 80071ba:	e065      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071c2:	b2db      	uxtb	r3, r3
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d15d      	bne.n	8007284 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 80071c8:	7afb      	ldrb	r3, [r7, #11]
 80071ca:	2b0d      	cmp	r3, #13
 80071cc:	d857      	bhi.n	800727e <HAL_TIM_RegisterCallback+0x2a6>
 80071ce:	a201      	add	r2, pc, #4	@ (adr r2, 80071d4 <HAL_TIM_RegisterCallback+0x1fc>)
 80071d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d4:	0800720d 	.word	0x0800720d
 80071d8:	08007215 	.word	0x08007215
 80071dc:	0800721d 	.word	0x0800721d
 80071e0:	08007225 	.word	0x08007225
 80071e4:	0800722d 	.word	0x0800722d
 80071e8:	08007235 	.word	0x08007235
 80071ec:	0800723d 	.word	0x0800723d
 80071f0:	08007245 	.word	0x08007245
 80071f4:	0800724d 	.word	0x0800724d
 80071f8:	08007255 	.word	0x08007255
 80071fc:	0800725d 	.word	0x0800725d
 8007200:	08007265 	.word	0x08007265
 8007204:	0800726d 	.word	0x0800726d
 8007208:	08007275 	.word	0x08007275
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	687a      	ldr	r2, [r7, #4]
 8007210:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8007212:	e039      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	687a      	ldr	r2, [r7, #4]
 8007218:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800721a:	e035      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	687a      	ldr	r2, [r7, #4]
 8007220:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8007222:	e031      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	687a      	ldr	r2, [r7, #4]
 8007228:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800722a:	e02d      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8007232:	e029      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800723a:	e025      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	687a      	ldr	r2, [r7, #4]
 8007240:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8007242:	e021      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800724a:	e01d      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8007252:	e019      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	687a      	ldr	r2, [r7, #4]
 8007258:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800725a:	e015      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8007262:	e011      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800726a:	e00d      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	687a      	ldr	r2, [r7, #4]
 8007270:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8007272:	e009      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 800727c:	e004      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	75fb      	strb	r3, [r7, #23]
        break;
 8007282:	e001      	b.n	8007288 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007288:	7dfb      	ldrb	r3, [r7, #23]
}
 800728a:	4618      	mov	r0, r3
 800728c:	371c      	adds	r7, #28
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop

08007298 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007298:	b480      	push	{r7}
 800729a:	b085      	sub	sp, #20
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a4c      	ldr	r2, [pc, #304]	@ (80073dc <TIM_Base_SetConfig+0x144>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d017      	beq.n	80072e0 <TIM_Base_SetConfig+0x48>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80072b6:	d013      	beq.n	80072e0 <TIM_Base_SetConfig+0x48>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a49      	ldr	r2, [pc, #292]	@ (80073e0 <TIM_Base_SetConfig+0x148>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d00f      	beq.n	80072e0 <TIM_Base_SetConfig+0x48>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4a48      	ldr	r2, [pc, #288]	@ (80073e4 <TIM_Base_SetConfig+0x14c>)
 80072c4:	4293      	cmp	r3, r2
 80072c6:	d00b      	beq.n	80072e0 <TIM_Base_SetConfig+0x48>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	4a47      	ldr	r2, [pc, #284]	@ (80073e8 <TIM_Base_SetConfig+0x150>)
 80072cc:	4293      	cmp	r3, r2
 80072ce:	d007      	beq.n	80072e0 <TIM_Base_SetConfig+0x48>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	4a46      	ldr	r2, [pc, #280]	@ (80073ec <TIM_Base_SetConfig+0x154>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d003      	beq.n	80072e0 <TIM_Base_SetConfig+0x48>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	4a45      	ldr	r2, [pc, #276]	@ (80073f0 <TIM_Base_SetConfig+0x158>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d108      	bne.n	80072f2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	68fa      	ldr	r2, [r7, #12]
 80072ee:	4313      	orrs	r3, r2
 80072f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a39      	ldr	r2, [pc, #228]	@ (80073dc <TIM_Base_SetConfig+0x144>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d023      	beq.n	8007342 <TIM_Base_SetConfig+0xaa>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007300:	d01f      	beq.n	8007342 <TIM_Base_SetConfig+0xaa>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a36      	ldr	r2, [pc, #216]	@ (80073e0 <TIM_Base_SetConfig+0x148>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d01b      	beq.n	8007342 <TIM_Base_SetConfig+0xaa>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	4a35      	ldr	r2, [pc, #212]	@ (80073e4 <TIM_Base_SetConfig+0x14c>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d017      	beq.n	8007342 <TIM_Base_SetConfig+0xaa>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	4a34      	ldr	r2, [pc, #208]	@ (80073e8 <TIM_Base_SetConfig+0x150>)
 8007316:	4293      	cmp	r3, r2
 8007318:	d013      	beq.n	8007342 <TIM_Base_SetConfig+0xaa>
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4a33      	ldr	r2, [pc, #204]	@ (80073ec <TIM_Base_SetConfig+0x154>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d00f      	beq.n	8007342 <TIM_Base_SetConfig+0xaa>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	4a33      	ldr	r2, [pc, #204]	@ (80073f4 <TIM_Base_SetConfig+0x15c>)
 8007326:	4293      	cmp	r3, r2
 8007328:	d00b      	beq.n	8007342 <TIM_Base_SetConfig+0xaa>
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	4a32      	ldr	r2, [pc, #200]	@ (80073f8 <TIM_Base_SetConfig+0x160>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d007      	beq.n	8007342 <TIM_Base_SetConfig+0xaa>
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	4a31      	ldr	r2, [pc, #196]	@ (80073fc <TIM_Base_SetConfig+0x164>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d003      	beq.n	8007342 <TIM_Base_SetConfig+0xaa>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	4a2c      	ldr	r2, [pc, #176]	@ (80073f0 <TIM_Base_SetConfig+0x158>)
 800733e:	4293      	cmp	r3, r2
 8007340:	d108      	bne.n	8007354 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007348:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	68db      	ldr	r3, [r3, #12]
 800734e:	68fa      	ldr	r2, [r7, #12]
 8007350:	4313      	orrs	r3, r2
 8007352:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800735a:	683b      	ldr	r3, [r7, #0]
 800735c:	695b      	ldr	r3, [r3, #20]
 800735e:	4313      	orrs	r3, r2
 8007360:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	68fa      	ldr	r2, [r7, #12]
 8007366:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	689a      	ldr	r2, [r3, #8]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	681a      	ldr	r2, [r3, #0]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4a18      	ldr	r2, [pc, #96]	@ (80073dc <TIM_Base_SetConfig+0x144>)
 800737c:	4293      	cmp	r3, r2
 800737e:	d013      	beq.n	80073a8 <TIM_Base_SetConfig+0x110>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	4a1a      	ldr	r2, [pc, #104]	@ (80073ec <TIM_Base_SetConfig+0x154>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d00f      	beq.n	80073a8 <TIM_Base_SetConfig+0x110>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	4a1a      	ldr	r2, [pc, #104]	@ (80073f4 <TIM_Base_SetConfig+0x15c>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d00b      	beq.n	80073a8 <TIM_Base_SetConfig+0x110>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	4a19      	ldr	r2, [pc, #100]	@ (80073f8 <TIM_Base_SetConfig+0x160>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d007      	beq.n	80073a8 <TIM_Base_SetConfig+0x110>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	4a18      	ldr	r2, [pc, #96]	@ (80073fc <TIM_Base_SetConfig+0x164>)
 800739c:	4293      	cmp	r3, r2
 800739e:	d003      	beq.n	80073a8 <TIM_Base_SetConfig+0x110>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	4a13      	ldr	r2, [pc, #76]	@ (80073f0 <TIM_Base_SetConfig+0x158>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d103      	bne.n	80073b0 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	691a      	ldr	r2, [r3, #16]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	f003 0301 	and.w	r3, r3, #1
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d105      	bne.n	80073ce <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	691b      	ldr	r3, [r3, #16]
 80073c6:	f023 0201 	bic.w	r2, r3, #1
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	611a      	str	r2, [r3, #16]
  }
}
 80073ce:	bf00      	nop
 80073d0:	3714      	adds	r7, #20
 80073d2:	46bd      	mov	sp, r7
 80073d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d8:	4770      	bx	lr
 80073da:	bf00      	nop
 80073dc:	40012c00 	.word	0x40012c00
 80073e0:	40000400 	.word	0x40000400
 80073e4:	40000800 	.word	0x40000800
 80073e8:	40000c00 	.word	0x40000c00
 80073ec:	40013400 	.word	0x40013400
 80073f0:	40015000 	.word	0x40015000
 80073f4:	40014000 	.word	0x40014000
 80073f8:	40014400 	.word	0x40014400
 80073fc:	40014800 	.word	0x40014800

08007400 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007400:	b480      	push	{r7}
 8007402:	b087      	sub	sp, #28
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a1b      	ldr	r3, [r3, #32]
 8007414:	f023 0201 	bic.w	r2, r3, #1
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	699b      	ldr	r3, [r3, #24]
 8007426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800742e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	f023 0303 	bic.w	r3, r3, #3
 800743a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	4313      	orrs	r3, r2
 8007444:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	f023 0302 	bic.w	r3, r3, #2
 800744c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800744e:	683b      	ldr	r3, [r7, #0]
 8007450:	689b      	ldr	r3, [r3, #8]
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	4313      	orrs	r3, r2
 8007456:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a30      	ldr	r2, [pc, #192]	@ (800751c <TIM_OC1_SetConfig+0x11c>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d013      	beq.n	8007488 <TIM_OC1_SetConfig+0x88>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a2f      	ldr	r2, [pc, #188]	@ (8007520 <TIM_OC1_SetConfig+0x120>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d00f      	beq.n	8007488 <TIM_OC1_SetConfig+0x88>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a2e      	ldr	r2, [pc, #184]	@ (8007524 <TIM_OC1_SetConfig+0x124>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d00b      	beq.n	8007488 <TIM_OC1_SetConfig+0x88>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	4a2d      	ldr	r2, [pc, #180]	@ (8007528 <TIM_OC1_SetConfig+0x128>)
 8007474:	4293      	cmp	r3, r2
 8007476:	d007      	beq.n	8007488 <TIM_OC1_SetConfig+0x88>
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	4a2c      	ldr	r2, [pc, #176]	@ (800752c <TIM_OC1_SetConfig+0x12c>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d003      	beq.n	8007488 <TIM_OC1_SetConfig+0x88>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	4a2b      	ldr	r2, [pc, #172]	@ (8007530 <TIM_OC1_SetConfig+0x130>)
 8007484:	4293      	cmp	r3, r2
 8007486:	d10c      	bne.n	80074a2 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	f023 0308 	bic.w	r3, r3, #8
 800748e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	4313      	orrs	r3, r2
 8007498:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	f023 0304 	bic.w	r3, r3, #4
 80074a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	4a1d      	ldr	r2, [pc, #116]	@ (800751c <TIM_OC1_SetConfig+0x11c>)
 80074a6:	4293      	cmp	r3, r2
 80074a8:	d013      	beq.n	80074d2 <TIM_OC1_SetConfig+0xd2>
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4a1c      	ldr	r2, [pc, #112]	@ (8007520 <TIM_OC1_SetConfig+0x120>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d00f      	beq.n	80074d2 <TIM_OC1_SetConfig+0xd2>
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	4a1b      	ldr	r2, [pc, #108]	@ (8007524 <TIM_OC1_SetConfig+0x124>)
 80074b6:	4293      	cmp	r3, r2
 80074b8:	d00b      	beq.n	80074d2 <TIM_OC1_SetConfig+0xd2>
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	4a1a      	ldr	r2, [pc, #104]	@ (8007528 <TIM_OC1_SetConfig+0x128>)
 80074be:	4293      	cmp	r3, r2
 80074c0:	d007      	beq.n	80074d2 <TIM_OC1_SetConfig+0xd2>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	4a19      	ldr	r2, [pc, #100]	@ (800752c <TIM_OC1_SetConfig+0x12c>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d003      	beq.n	80074d2 <TIM_OC1_SetConfig+0xd2>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4a18      	ldr	r2, [pc, #96]	@ (8007530 <TIM_OC1_SetConfig+0x130>)
 80074ce:	4293      	cmp	r3, r2
 80074d0:	d111      	bne.n	80074f6 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80074d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80074da:	693b      	ldr	r3, [r7, #16]
 80074dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80074e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	695b      	ldr	r3, [r3, #20]
 80074e6:	693a      	ldr	r2, [r7, #16]
 80074e8:	4313      	orrs	r3, r2
 80074ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80074ec:	683b      	ldr	r3, [r7, #0]
 80074ee:	699b      	ldr	r3, [r3, #24]
 80074f0:	693a      	ldr	r2, [r7, #16]
 80074f2:	4313      	orrs	r3, r2
 80074f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	693a      	ldr	r2, [r7, #16]
 80074fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	685a      	ldr	r2, [r3, #4]
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	697a      	ldr	r2, [r7, #20]
 800750e:	621a      	str	r2, [r3, #32]
}
 8007510:	bf00      	nop
 8007512:	371c      	adds	r7, #28
 8007514:	46bd      	mov	sp, r7
 8007516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751a:	4770      	bx	lr
 800751c:	40012c00 	.word	0x40012c00
 8007520:	40013400 	.word	0x40013400
 8007524:	40014000 	.word	0x40014000
 8007528:	40014400 	.word	0x40014400
 800752c:	40014800 	.word	0x40014800
 8007530:	40015000 	.word	0x40015000

08007534 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007534:	b480      	push	{r7}
 8007536:	b087      	sub	sp, #28
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
 800753c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6a1b      	ldr	r3, [r3, #32]
 8007542:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6a1b      	ldr	r3, [r3, #32]
 8007548:	f023 0210 	bic.w	r2, r3, #16
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	685b      	ldr	r3, [r3, #4]
 8007554:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007562:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800756e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	021b      	lsls	r3, r3, #8
 8007576:	68fa      	ldr	r2, [r7, #12]
 8007578:	4313      	orrs	r3, r2
 800757a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	f023 0320 	bic.w	r3, r3, #32
 8007582:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	011b      	lsls	r3, r3, #4
 800758a:	697a      	ldr	r2, [r7, #20]
 800758c:	4313      	orrs	r3, r2
 800758e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	4a2c      	ldr	r2, [pc, #176]	@ (8007644 <TIM_OC2_SetConfig+0x110>)
 8007594:	4293      	cmp	r3, r2
 8007596:	d007      	beq.n	80075a8 <TIM_OC2_SetConfig+0x74>
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	4a2b      	ldr	r2, [pc, #172]	@ (8007648 <TIM_OC2_SetConfig+0x114>)
 800759c:	4293      	cmp	r3, r2
 800759e:	d003      	beq.n	80075a8 <TIM_OC2_SetConfig+0x74>
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	4a2a      	ldr	r2, [pc, #168]	@ (800764c <TIM_OC2_SetConfig+0x118>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d10d      	bne.n	80075c4 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80075ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80075b0:	683b      	ldr	r3, [r7, #0]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	011b      	lsls	r3, r3, #4
 80075b6:	697a      	ldr	r2, [r7, #20]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80075bc:	697b      	ldr	r3, [r7, #20]
 80075be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075c2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a1f      	ldr	r2, [pc, #124]	@ (8007644 <TIM_OC2_SetConfig+0x110>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d013      	beq.n	80075f4 <TIM_OC2_SetConfig+0xc0>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a1e      	ldr	r2, [pc, #120]	@ (8007648 <TIM_OC2_SetConfig+0x114>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d00f      	beq.n	80075f4 <TIM_OC2_SetConfig+0xc0>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a1e      	ldr	r2, [pc, #120]	@ (8007650 <TIM_OC2_SetConfig+0x11c>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d00b      	beq.n	80075f4 <TIM_OC2_SetConfig+0xc0>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a1d      	ldr	r2, [pc, #116]	@ (8007654 <TIM_OC2_SetConfig+0x120>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d007      	beq.n	80075f4 <TIM_OC2_SetConfig+0xc0>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a1c      	ldr	r2, [pc, #112]	@ (8007658 <TIM_OC2_SetConfig+0x124>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d003      	beq.n	80075f4 <TIM_OC2_SetConfig+0xc0>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a17      	ldr	r2, [pc, #92]	@ (800764c <TIM_OC2_SetConfig+0x118>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d113      	bne.n	800761c <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80075fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007602:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	695b      	ldr	r3, [r3, #20]
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	693a      	ldr	r2, [r7, #16]
 800760c:	4313      	orrs	r3, r2
 800760e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	699b      	ldr	r3, [r3, #24]
 8007614:	009b      	lsls	r3, r3, #2
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	4313      	orrs	r3, r2
 800761a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	693a      	ldr	r2, [r7, #16]
 8007620:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	68fa      	ldr	r2, [r7, #12]
 8007626:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	697a      	ldr	r2, [r7, #20]
 8007634:	621a      	str	r2, [r3, #32]
}
 8007636:	bf00      	nop
 8007638:	371c      	adds	r7, #28
 800763a:	46bd      	mov	sp, r7
 800763c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007640:	4770      	bx	lr
 8007642:	bf00      	nop
 8007644:	40012c00 	.word	0x40012c00
 8007648:	40013400 	.word	0x40013400
 800764c:	40015000 	.word	0x40015000
 8007650:	40014000 	.word	0x40014000
 8007654:	40014400 	.word	0x40014400
 8007658:	40014800 	.word	0x40014800

0800765c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800765c:	b480      	push	{r7}
 800765e:	b087      	sub	sp, #28
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a1b      	ldr	r3, [r3, #32]
 800766a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a1b      	ldr	r3, [r3, #32]
 8007670:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	685b      	ldr	r3, [r3, #4]
 800767c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	69db      	ldr	r3, [r3, #28]
 8007682:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800768a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800768e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f023 0303 	bic.w	r3, r3, #3
 8007696:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	68fa      	ldr	r2, [r7, #12]
 800769e:	4313      	orrs	r3, r2
 80076a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80076a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	021b      	lsls	r3, r3, #8
 80076b0:	697a      	ldr	r2, [r7, #20]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4a2b      	ldr	r2, [pc, #172]	@ (8007768 <TIM_OC3_SetConfig+0x10c>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d007      	beq.n	80076ce <TIM_OC3_SetConfig+0x72>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	4a2a      	ldr	r2, [pc, #168]	@ (800776c <TIM_OC3_SetConfig+0x110>)
 80076c2:	4293      	cmp	r3, r2
 80076c4:	d003      	beq.n	80076ce <TIM_OC3_SetConfig+0x72>
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	4a29      	ldr	r2, [pc, #164]	@ (8007770 <TIM_OC3_SetConfig+0x114>)
 80076ca:	4293      	cmp	r3, r2
 80076cc:	d10d      	bne.n	80076ea <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80076d4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	68db      	ldr	r3, [r3, #12]
 80076da:	021b      	lsls	r3, r3, #8
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	4313      	orrs	r3, r2
 80076e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80076e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a1e      	ldr	r2, [pc, #120]	@ (8007768 <TIM_OC3_SetConfig+0x10c>)
 80076ee:	4293      	cmp	r3, r2
 80076f0:	d013      	beq.n	800771a <TIM_OC3_SetConfig+0xbe>
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	4a1d      	ldr	r2, [pc, #116]	@ (800776c <TIM_OC3_SetConfig+0x110>)
 80076f6:	4293      	cmp	r3, r2
 80076f8:	d00f      	beq.n	800771a <TIM_OC3_SetConfig+0xbe>
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a1d      	ldr	r2, [pc, #116]	@ (8007774 <TIM_OC3_SetConfig+0x118>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d00b      	beq.n	800771a <TIM_OC3_SetConfig+0xbe>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	4a1c      	ldr	r2, [pc, #112]	@ (8007778 <TIM_OC3_SetConfig+0x11c>)
 8007706:	4293      	cmp	r3, r2
 8007708:	d007      	beq.n	800771a <TIM_OC3_SetConfig+0xbe>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a1b      	ldr	r2, [pc, #108]	@ (800777c <TIM_OC3_SetConfig+0x120>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d003      	beq.n	800771a <TIM_OC3_SetConfig+0xbe>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a16      	ldr	r2, [pc, #88]	@ (8007770 <TIM_OC3_SetConfig+0x114>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d113      	bne.n	8007742 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007720:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007722:	693b      	ldr	r3, [r7, #16]
 8007724:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007728:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	695b      	ldr	r3, [r3, #20]
 800772e:	011b      	lsls	r3, r3, #4
 8007730:	693a      	ldr	r2, [r7, #16]
 8007732:	4313      	orrs	r3, r2
 8007734:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007736:	683b      	ldr	r3, [r7, #0]
 8007738:	699b      	ldr	r3, [r3, #24]
 800773a:	011b      	lsls	r3, r3, #4
 800773c:	693a      	ldr	r2, [r7, #16]
 800773e:	4313      	orrs	r3, r2
 8007740:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	693a      	ldr	r2, [r7, #16]
 8007746:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	68fa      	ldr	r2, [r7, #12]
 800774c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	685a      	ldr	r2, [r3, #4]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	697a      	ldr	r2, [r7, #20]
 800775a:	621a      	str	r2, [r3, #32]
}
 800775c:	bf00      	nop
 800775e:	371c      	adds	r7, #28
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr
 8007768:	40012c00 	.word	0x40012c00
 800776c:	40013400 	.word	0x40013400
 8007770:	40015000 	.word	0x40015000
 8007774:	40014000 	.word	0x40014000
 8007778:	40014400 	.word	0x40014400
 800777c:	40014800 	.word	0x40014800

08007780 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007780:	b480      	push	{r7}
 8007782:	b087      	sub	sp, #28
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a1b      	ldr	r3, [r3, #32]
 800778e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a1b      	ldr	r3, [r3, #32]
 8007794:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	69db      	ldr	r3, [r3, #28]
 80077a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80077ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80077ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	021b      	lsls	r3, r3, #8
 80077c2:	68fa      	ldr	r2, [r7, #12]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80077ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	689b      	ldr	r3, [r3, #8]
 80077d4:	031b      	lsls	r3, r3, #12
 80077d6:	697a      	ldr	r2, [r7, #20]
 80077d8:	4313      	orrs	r3, r2
 80077da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	4a2c      	ldr	r2, [pc, #176]	@ (8007890 <TIM_OC4_SetConfig+0x110>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d007      	beq.n	80077f4 <TIM_OC4_SetConfig+0x74>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a2b      	ldr	r2, [pc, #172]	@ (8007894 <TIM_OC4_SetConfig+0x114>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d003      	beq.n	80077f4 <TIM_OC4_SetConfig+0x74>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	4a2a      	ldr	r2, [pc, #168]	@ (8007898 <TIM_OC4_SetConfig+0x118>)
 80077f0:	4293      	cmp	r3, r2
 80077f2:	d10d      	bne.n	8007810 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80077fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	68db      	ldr	r3, [r3, #12]
 8007800:	031b      	lsls	r3, r3, #12
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	4313      	orrs	r3, r2
 8007806:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800780e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a1f      	ldr	r2, [pc, #124]	@ (8007890 <TIM_OC4_SetConfig+0x110>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d013      	beq.n	8007840 <TIM_OC4_SetConfig+0xc0>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a1e      	ldr	r2, [pc, #120]	@ (8007894 <TIM_OC4_SetConfig+0x114>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d00f      	beq.n	8007840 <TIM_OC4_SetConfig+0xc0>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a1e      	ldr	r2, [pc, #120]	@ (800789c <TIM_OC4_SetConfig+0x11c>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d00b      	beq.n	8007840 <TIM_OC4_SetConfig+0xc0>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a1d      	ldr	r2, [pc, #116]	@ (80078a0 <TIM_OC4_SetConfig+0x120>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d007      	beq.n	8007840 <TIM_OC4_SetConfig+0xc0>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4a1c      	ldr	r2, [pc, #112]	@ (80078a4 <TIM_OC4_SetConfig+0x124>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d003      	beq.n	8007840 <TIM_OC4_SetConfig+0xc0>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a17      	ldr	r2, [pc, #92]	@ (8007898 <TIM_OC4_SetConfig+0x118>)
 800783c:	4293      	cmp	r3, r2
 800783e:	d113      	bne.n	8007868 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007846:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800784e:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	695b      	ldr	r3, [r3, #20]
 8007854:	019b      	lsls	r3, r3, #6
 8007856:	693a      	ldr	r2, [r7, #16]
 8007858:	4313      	orrs	r3, r2
 800785a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	019b      	lsls	r3, r3, #6
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	4313      	orrs	r3, r2
 8007866:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	693a      	ldr	r2, [r7, #16]
 800786c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	68fa      	ldr	r2, [r7, #12]
 8007872:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007874:	683b      	ldr	r3, [r7, #0]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	697a      	ldr	r2, [r7, #20]
 8007880:	621a      	str	r2, [r3, #32]
}
 8007882:	bf00      	nop
 8007884:	371c      	adds	r7, #28
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr
 800788e:	bf00      	nop
 8007890:	40012c00 	.word	0x40012c00
 8007894:	40013400 	.word	0x40013400
 8007898:	40015000 	.word	0x40015000
 800789c:	40014000 	.word	0x40014000
 80078a0:	40014400 	.word	0x40014400
 80078a4:	40014800 	.word	0x40014800

080078a8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b087      	sub	sp, #28
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6a1b      	ldr	r3, [r3, #32]
 80078b6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a1b      	ldr	r3, [r3, #32]
 80078bc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80078da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68fa      	ldr	r2, [r7, #12]
 80078e2:	4313      	orrs	r3, r2
 80078e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80078ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80078ee:	683b      	ldr	r3, [r7, #0]
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	041b      	lsls	r3, r3, #16
 80078f4:	693a      	ldr	r2, [r7, #16]
 80078f6:	4313      	orrs	r3, r2
 80078f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	4a19      	ldr	r2, [pc, #100]	@ (8007964 <TIM_OC5_SetConfig+0xbc>)
 80078fe:	4293      	cmp	r3, r2
 8007900:	d013      	beq.n	800792a <TIM_OC5_SetConfig+0x82>
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	4a18      	ldr	r2, [pc, #96]	@ (8007968 <TIM_OC5_SetConfig+0xc0>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d00f      	beq.n	800792a <TIM_OC5_SetConfig+0x82>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4a17      	ldr	r2, [pc, #92]	@ (800796c <TIM_OC5_SetConfig+0xc4>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d00b      	beq.n	800792a <TIM_OC5_SetConfig+0x82>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	4a16      	ldr	r2, [pc, #88]	@ (8007970 <TIM_OC5_SetConfig+0xc8>)
 8007916:	4293      	cmp	r3, r2
 8007918:	d007      	beq.n	800792a <TIM_OC5_SetConfig+0x82>
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4a15      	ldr	r2, [pc, #84]	@ (8007974 <TIM_OC5_SetConfig+0xcc>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d003      	beq.n	800792a <TIM_OC5_SetConfig+0x82>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	4a14      	ldr	r2, [pc, #80]	@ (8007978 <TIM_OC5_SetConfig+0xd0>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d109      	bne.n	800793e <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007930:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	021b      	lsls	r3, r3, #8
 8007938:	697a      	ldr	r2, [r7, #20]
 800793a:	4313      	orrs	r3, r2
 800793c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	697a      	ldr	r2, [r7, #20]
 8007942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	685a      	ldr	r2, [r3, #4]
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	693a      	ldr	r2, [r7, #16]
 8007956:	621a      	str	r2, [r3, #32]
}
 8007958:	bf00      	nop
 800795a:	371c      	adds	r7, #28
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr
 8007964:	40012c00 	.word	0x40012c00
 8007968:	40013400 	.word	0x40013400
 800796c:	40014000 	.word	0x40014000
 8007970:	40014400 	.word	0x40014400
 8007974:	40014800 	.word	0x40014800
 8007978:	40015000 	.word	0x40015000

0800797c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800797c:	b480      	push	{r7}
 800797e:	b087      	sub	sp, #28
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
 8007984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6a1b      	ldr	r3, [r3, #32]
 800798a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6a1b      	ldr	r3, [r3, #32]
 8007990:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80079a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80079aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80079ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	021b      	lsls	r3, r3, #8
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	4313      	orrs	r3, r2
 80079ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80079c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80079c4:	683b      	ldr	r3, [r7, #0]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	051b      	lsls	r3, r3, #20
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	4313      	orrs	r3, r2
 80079ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	4a1a      	ldr	r2, [pc, #104]	@ (8007a3c <TIM_OC6_SetConfig+0xc0>)
 80079d4:	4293      	cmp	r3, r2
 80079d6:	d013      	beq.n	8007a00 <TIM_OC6_SetConfig+0x84>
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a19      	ldr	r2, [pc, #100]	@ (8007a40 <TIM_OC6_SetConfig+0xc4>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d00f      	beq.n	8007a00 <TIM_OC6_SetConfig+0x84>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	4a18      	ldr	r2, [pc, #96]	@ (8007a44 <TIM_OC6_SetConfig+0xc8>)
 80079e4:	4293      	cmp	r3, r2
 80079e6:	d00b      	beq.n	8007a00 <TIM_OC6_SetConfig+0x84>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4a17      	ldr	r2, [pc, #92]	@ (8007a48 <TIM_OC6_SetConfig+0xcc>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d007      	beq.n	8007a00 <TIM_OC6_SetConfig+0x84>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	4a16      	ldr	r2, [pc, #88]	@ (8007a4c <TIM_OC6_SetConfig+0xd0>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d003      	beq.n	8007a00 <TIM_OC6_SetConfig+0x84>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a15      	ldr	r2, [pc, #84]	@ (8007a50 <TIM_OC6_SetConfig+0xd4>)
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d109      	bne.n	8007a14 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a06:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	695b      	ldr	r3, [r3, #20]
 8007a0c:	029b      	lsls	r3, r3, #10
 8007a0e:	697a      	ldr	r2, [r7, #20]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	68fa      	ldr	r2, [r7, #12]
 8007a1e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	685a      	ldr	r2, [r3, #4]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	693a      	ldr	r2, [r7, #16]
 8007a2c:	621a      	str	r2, [r3, #32]
}
 8007a2e:	bf00      	nop
 8007a30:	371c      	adds	r7, #28
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	40012c00 	.word	0x40012c00
 8007a40:	40013400 	.word	0x40013400
 8007a44:	40014000 	.word	0x40014000
 8007a48:	40014400 	.word	0x40014400
 8007a4c:	40014800 	.word	0x40014800
 8007a50:	40015000 	.word	0x40015000

08007a54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b087      	sub	sp, #28
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6a1b      	ldr	r3, [r3, #32]
 8007a64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	6a1b      	ldr	r3, [r3, #32]
 8007a6a:	f023 0201 	bic.w	r2, r3, #1
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	699b      	ldr	r3, [r3, #24]
 8007a76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007a7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	011b      	lsls	r3, r3, #4
 8007a84:	693a      	ldr	r2, [r7, #16]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	f023 030a 	bic.w	r3, r3, #10
 8007a90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a92:	697a      	ldr	r2, [r7, #20]
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	4313      	orrs	r3, r2
 8007a98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	693a      	ldr	r2, [r7, #16]
 8007a9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	697a      	ldr	r2, [r7, #20]
 8007aa4:	621a      	str	r2, [r3, #32]
}
 8007aa6:	bf00      	nop
 8007aa8:	371c      	adds	r7, #28
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr

08007ab2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ab2:	b480      	push	{r7}
 8007ab4:	b087      	sub	sp, #28
 8007ab6:	af00      	add	r7, sp, #0
 8007ab8:	60f8      	str	r0, [r7, #12]
 8007aba:	60b9      	str	r1, [r7, #8]
 8007abc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	6a1b      	ldr	r3, [r3, #32]
 8007ac2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6a1b      	ldr	r3, [r3, #32]
 8007ac8:	f023 0210 	bic.w	r2, r3, #16
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	699b      	ldr	r3, [r3, #24]
 8007ad4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007adc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	031b      	lsls	r3, r3, #12
 8007ae2:	693a      	ldr	r2, [r7, #16]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007ae8:	697b      	ldr	r3, [r7, #20]
 8007aea:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007aee:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	011b      	lsls	r3, r3, #4
 8007af4:	697a      	ldr	r2, [r7, #20]
 8007af6:	4313      	orrs	r3, r2
 8007af8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	693a      	ldr	r2, [r7, #16]
 8007afe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	697a      	ldr	r2, [r7, #20]
 8007b04:	621a      	str	r2, [r3, #32]
}
 8007b06:	bf00      	nop
 8007b08:	371c      	adds	r7, #28
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b10:	4770      	bx	lr

08007b12 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b085      	sub	sp, #20
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
 8007b1a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	689b      	ldr	r3, [r3, #8]
 8007b20:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007b28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007b2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007b2e:	683a      	ldr	r2, [r7, #0]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	4313      	orrs	r3, r2
 8007b34:	f043 0307 	orr.w	r3, r3, #7
 8007b38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	609a      	str	r2, [r3, #8]
}
 8007b40:	bf00      	nop
 8007b42:	3714      	adds	r7, #20
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b087      	sub	sp, #28
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	60f8      	str	r0, [r7, #12]
 8007b54:	60b9      	str	r1, [r7, #8]
 8007b56:	607a      	str	r2, [r7, #4]
 8007b58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b60:	697b      	ldr	r3, [r7, #20]
 8007b62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007b66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	021a      	lsls	r2, r3, #8
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	431a      	orrs	r2, r3
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	4313      	orrs	r3, r2
 8007b74:	697a      	ldr	r2, [r7, #20]
 8007b76:	4313      	orrs	r3, r2
 8007b78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	609a      	str	r2, [r3, #8]
}
 8007b80:	bf00      	nop
 8007b82:	371c      	adds	r7, #28
 8007b84:	46bd      	mov	sp, r7
 8007b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8a:	4770      	bx	lr

08007b8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b087      	sub	sp, #28
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007b98:	68bb      	ldr	r3, [r7, #8]
 8007b9a:	f003 031f 	and.w	r3, r3, #31
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8007ba4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	6a1a      	ldr	r2, [r3, #32]
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	43db      	mvns	r3, r3
 8007bae:	401a      	ands	r2, r3
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6a1a      	ldr	r2, [r3, #32]
 8007bb8:	68bb      	ldr	r3, [r7, #8]
 8007bba:	f003 031f 	and.w	r3, r3, #31
 8007bbe:	6879      	ldr	r1, [r7, #4]
 8007bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8007bc4:	431a      	orrs	r2, r3
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	621a      	str	r2, [r3, #32]
}
 8007bca:	bf00      	nop
 8007bcc:	371c      	adds	r7, #28
 8007bce:	46bd      	mov	sp, r7
 8007bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd4:	4770      	bx	lr
	...

08007bd8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8007bd8:	b480      	push	{r7}
 8007bda:	b083      	sub	sp, #12
 8007bdc:	af00      	add	r7, sp, #0
 8007bde:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	4a26      	ldr	r2, [pc, #152]	@ (8007c7c <TIM_ResetCallback+0xa4>)
 8007be4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	4a25      	ldr	r2, [pc, #148]	@ (8007c80 <TIM_ResetCallback+0xa8>)
 8007bec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	4a24      	ldr	r2, [pc, #144]	@ (8007c84 <TIM_ResetCallback+0xac>)
 8007bf4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	4a23      	ldr	r2, [pc, #140]	@ (8007c88 <TIM_ResetCallback+0xb0>)
 8007bfc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4a22      	ldr	r2, [pc, #136]	@ (8007c8c <TIM_ResetCallback+0xb4>)
 8007c04:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	4a21      	ldr	r2, [pc, #132]	@ (8007c90 <TIM_ResetCallback+0xb8>)
 8007c0c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	4a20      	ldr	r2, [pc, #128]	@ (8007c94 <TIM_ResetCallback+0xbc>)
 8007c14:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4a1f      	ldr	r2, [pc, #124]	@ (8007c98 <TIM_ResetCallback+0xc0>)
 8007c1c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	4a1e      	ldr	r2, [pc, #120]	@ (8007c9c <TIM_ResetCallback+0xc4>)
 8007c24:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	4a1d      	ldr	r2, [pc, #116]	@ (8007ca0 <TIM_ResetCallback+0xc8>)
 8007c2c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	4a1c      	ldr	r2, [pc, #112]	@ (8007ca4 <TIM_ResetCallback+0xcc>)
 8007c34:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	4a1b      	ldr	r2, [pc, #108]	@ (8007ca8 <TIM_ResetCallback+0xd0>)
 8007c3c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4a1a      	ldr	r2, [pc, #104]	@ (8007cac <TIM_ResetCallback+0xd4>)
 8007c44:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4a19      	ldr	r2, [pc, #100]	@ (8007cb0 <TIM_ResetCallback+0xd8>)
 8007c4c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	4a18      	ldr	r2, [pc, #96]	@ (8007cb4 <TIM_ResetCallback+0xdc>)
 8007c54:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4a17      	ldr	r2, [pc, #92]	@ (8007cb8 <TIM_ResetCallback+0xe0>)
 8007c5c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	4a16      	ldr	r2, [pc, #88]	@ (8007cbc <TIM_ResetCallback+0xe4>)
 8007c64:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	4a15      	ldr	r2, [pc, #84]	@ (8007cc0 <TIM_ResetCallback+0xe8>)
 8007c6c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8007c70:	bf00      	nop
 8007c72:	370c      	adds	r7, #12
 8007c74:	46bd      	mov	sp, r7
 8007c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7a:	4770      	bx	lr
 8007c7c:	080024c9 	.word	0x080024c9
 8007c80:	08006f25 	.word	0x08006f25
 8007c84:	08006f9d 	.word	0x08006f9d
 8007c88:	08006fb1 	.word	0x08006fb1
 8007c8c:	08006f4d 	.word	0x08006f4d
 8007c90:	08006f61 	.word	0x08006f61
 8007c94:	08006f39 	.word	0x08006f39
 8007c98:	08006f75 	.word	0x08006f75
 8007c9c:	08006f89 	.word	0x08006f89
 8007ca0:	08006fc5 	.word	0x08006fc5
 8007ca4:	08007f19 	.word	0x08007f19
 8007ca8:	08007f2d 	.word	0x08007f2d
 8007cac:	08007f41 	.word	0x08007f41
 8007cb0:	08007f55 	.word	0x08007f55
 8007cb4:	08007f69 	.word	0x08007f69
 8007cb8:	08007f7d 	.word	0x08007f7d
 8007cbc:	08007f91 	.word	0x08007f91
 8007cc0:	08007fa5 	.word	0x08007fa5

08007cc4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007cc4:	b480      	push	{r7}
 8007cc6:	b085      	sub	sp, #20
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007cd4:	2b01      	cmp	r3, #1
 8007cd6:	d101      	bne.n	8007cdc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007cd8:	2302      	movs	r3, #2
 8007cda:	e074      	b.n	8007dc6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2201      	movs	r2, #1
 8007ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2202      	movs	r2, #2
 8007ce8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	685b      	ldr	r3, [r3, #4]
 8007cf2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	689b      	ldr	r3, [r3, #8]
 8007cfa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	4a34      	ldr	r2, [pc, #208]	@ (8007dd4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007d02:	4293      	cmp	r3, r2
 8007d04:	d009      	beq.n	8007d1a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a33      	ldr	r2, [pc, #204]	@ (8007dd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007d0c:	4293      	cmp	r3, r2
 8007d0e:	d004      	beq.n	8007d1a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	4a31      	ldr	r2, [pc, #196]	@ (8007ddc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d108      	bne.n	8007d2c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007d20:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	68fa      	ldr	r2, [r7, #12]
 8007d28:	4313      	orrs	r3, r2
 8007d2a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007d36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	68fa      	ldr	r2, [r7, #12]
 8007d3e:	4313      	orrs	r3, r2
 8007d40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a21      	ldr	r2, [pc, #132]	@ (8007dd4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d022      	beq.n	8007d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007d5c:	d01d      	beq.n	8007d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a1f      	ldr	r2, [pc, #124]	@ (8007de0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d018      	beq.n	8007d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a1d      	ldr	r2, [pc, #116]	@ (8007de4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d013      	beq.n	8007d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a1c      	ldr	r2, [pc, #112]	@ (8007de8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d00e      	beq.n	8007d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a15      	ldr	r2, [pc, #84]	@ (8007dd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d009      	beq.n	8007d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a18      	ldr	r2, [pc, #96]	@ (8007dec <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d004      	beq.n	8007d9a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a11      	ldr	r2, [pc, #68]	@ (8007ddc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d10c      	bne.n	8007db4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007da0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	68ba      	ldr	r2, [r7, #8]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	68ba      	ldr	r2, [r7, #8]
 8007db2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	2201      	movs	r2, #1
 8007db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007dc4:	2300      	movs	r3, #0
}
 8007dc6:	4618      	mov	r0, r3
 8007dc8:	3714      	adds	r7, #20
 8007dca:	46bd      	mov	sp, r7
 8007dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd0:	4770      	bx	lr
 8007dd2:	bf00      	nop
 8007dd4:	40012c00 	.word	0x40012c00
 8007dd8:	40013400 	.word	0x40013400
 8007ddc:	40015000 	.word	0x40015000
 8007de0:	40000400 	.word	0x40000400
 8007de4:	40000800 	.word	0x40000800
 8007de8:	40000c00 	.word	0x40000c00
 8007dec:	40014000 	.word	0x40014000

08007df0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007df0:	b480      	push	{r7}
 8007df2:	b085      	sub	sp, #20
 8007df4:	af00      	add	r7, sp, #0
 8007df6:	6078      	str	r0, [r7, #4]
 8007df8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d101      	bne.n	8007e0c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007e08:	2302      	movs	r3, #2
 8007e0a:	e078      	b.n	8007efe <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	689b      	ldr	r3, [r3, #8]
 8007e2c:	4313      	orrs	r3, r2
 8007e2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4313      	orrs	r3, r2
 8007e4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	691b      	ldr	r3, [r3, #16]
 8007e56:	4313      	orrs	r3, r2
 8007e58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	695b      	ldr	r3, [r3, #20]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e72:	4313      	orrs	r3, r2
 8007e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	699b      	ldr	r3, [r3, #24]
 8007e80:	041b      	lsls	r3, r3, #16
 8007e82:	4313      	orrs	r3, r2
 8007e84:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	69db      	ldr	r3, [r3, #28]
 8007e90:	4313      	orrs	r3, r2
 8007e92:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a1c      	ldr	r2, [pc, #112]	@ (8007f0c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d009      	beq.n	8007eb2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	4a1b      	ldr	r2, [pc, #108]	@ (8007f10 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d004      	beq.n	8007eb2 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	4a19      	ldr	r2, [pc, #100]	@ (8007f14 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007eae:	4293      	cmp	r3, r2
 8007eb0:	d11c      	bne.n	8007eec <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ebc:	051b      	lsls	r3, r3, #20
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	6a1b      	ldr	r3, [r3, #32]
 8007ecc:	4313      	orrs	r3, r2
 8007ece:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007ed6:	683b      	ldr	r3, [r7, #0]
 8007ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007eda:	4313      	orrs	r3, r2
 8007edc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007ee4:	683b      	ldr	r3, [r7, #0]
 8007ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	68fa      	ldr	r2, [r7, #12]
 8007ef2:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2200      	movs	r2, #0
 8007ef8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007efc:	2300      	movs	r3, #0
}
 8007efe:	4618      	mov	r0, r3
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	40012c00 	.word	0x40012c00
 8007f10:	40013400 	.word	0x40013400
 8007f14:	40015000 	.word	0x40015000

08007f18 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	b083      	sub	sp, #12
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007f20:	bf00      	nop
 8007f22:	370c      	adds	r7, #12
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr

08007f2c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8007f34:	bf00      	nop
 8007f36:	370c      	adds	r7, #12
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr

08007f40 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007f40:	b480      	push	{r7}
 8007f42:	b083      	sub	sp, #12
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007f48:	bf00      	nop
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007f54:	b480      	push	{r7}
 8007f56:	b083      	sub	sp, #12
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007f5c:	bf00      	nop
 8007f5e:	370c      	adds	r7, #12
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr

08007f68 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007f68:	b480      	push	{r7}
 8007f6a:	b083      	sub	sp, #12
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007f70:	bf00      	nop
 8007f72:	370c      	adds	r7, #12
 8007f74:	46bd      	mov	sp, r7
 8007f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7a:	4770      	bx	lr

08007f7c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007f7c:	b480      	push	{r7}
 8007f7e:	b083      	sub	sp, #12
 8007f80:	af00      	add	r7, sp, #0
 8007f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007f84:	bf00      	nop
 8007f86:	370c      	adds	r7, #12
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007f90:	b480      	push	{r7}
 8007f92:	b083      	sub	sp, #12
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007f98:	bf00      	nop
 8007f9a:	370c      	adds	r7, #12
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr

08007fa4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007fa4:	b480      	push	{r7}
 8007fa6:	b083      	sub	sp, #12
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007fac:	bf00      	nop
 8007fae:	370c      	adds	r7, #12
 8007fb0:	46bd      	mov	sp, r7
 8007fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fb6:	4770      	bx	lr

08007fb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b082      	sub	sp, #8
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d101      	bne.n	8007fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e050      	b.n	800806c <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d114      	bne.n	8007ffe <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f000 fdc5 	bl	8008b6c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d103      	bne.n	8007ff4 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	4a21      	ldr	r2, [pc, #132]	@ (8008074 <HAL_UART_Init+0xbc>)
 8007ff0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2224      	movs	r2, #36	@ 0x24
 8008002:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f022 0201 	bic.w	r2, r2, #1
 8008014:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800801a:	2b00      	cmp	r3, #0
 800801c:	d002      	beq.n	8008024 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f001 f8f2 	bl	8009208 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008024:	6878      	ldr	r0, [r7, #4]
 8008026:	f000 fdf3 	bl	8008c10 <UART_SetConfig>
 800802a:	4603      	mov	r3, r0
 800802c:	2b01      	cmp	r3, #1
 800802e:	d101      	bne.n	8008034 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8008030:	2301      	movs	r3, #1
 8008032:	e01b      	b.n	800806c <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	685a      	ldr	r2, [r3, #4]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008042:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	689a      	ldr	r2, [r3, #8]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008052:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	f042 0201 	orr.w	r2, r2, #1
 8008062:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f001 f971 	bl	800934c <UART_CheckIdleState>
 800806a:	4603      	mov	r3, r0
}
 800806c:	4618      	mov	r0, r3
 800806e:	3708      	adds	r7, #8
 8008070:	46bd      	mov	sp, r7
 8008072:	bd80      	pop	{r7, pc}
 8008074:	08003d21 	.word	0x08003d21

08008078 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8008078:	b480      	push	{r7}
 800807a:	b087      	sub	sp, #28
 800807c:	af00      	add	r7, sp, #0
 800807e:	60f8      	str	r0, [r7, #12]
 8008080:	460b      	mov	r3, r1
 8008082:	607a      	str	r2, [r7, #4]
 8008084:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8008086:	2300      	movs	r3, #0
 8008088:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2b00      	cmp	r3, #0
 800808e:	d109      	bne.n	80080a4 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008096:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800809a:	68fb      	ldr	r3, [r7, #12]
 800809c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 80080a0:	2301      	movs	r3, #1
 80080a2:	e09c      	b.n	80081de <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080aa:	2b20      	cmp	r3, #32
 80080ac:	d16c      	bne.n	8008188 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 80080ae:	7afb      	ldrb	r3, [r7, #11]
 80080b0:	2b0c      	cmp	r3, #12
 80080b2:	d85e      	bhi.n	8008172 <HAL_UART_RegisterCallback+0xfa>
 80080b4:	a201      	add	r2, pc, #4	@ (adr r2, 80080bc <HAL_UART_RegisterCallback+0x44>)
 80080b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ba:	bf00      	nop
 80080bc:	080080f1 	.word	0x080080f1
 80080c0:	080080fb 	.word	0x080080fb
 80080c4:	08008105 	.word	0x08008105
 80080c8:	0800810f 	.word	0x0800810f
 80080cc:	08008119 	.word	0x08008119
 80080d0:	08008123 	.word	0x08008123
 80080d4:	0800812d 	.word	0x0800812d
 80080d8:	08008137 	.word	0x08008137
 80080dc:	08008141 	.word	0x08008141
 80080e0:	0800814b 	.word	0x0800814b
 80080e4:	08008155 	.word	0x08008155
 80080e8:	0800815f 	.word	0x0800815f
 80080ec:	08008169 	.word	0x08008169
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	687a      	ldr	r2, [r7, #4]
 80080f4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80080f8:	e070      	b.n	80081dc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	687a      	ldr	r2, [r7, #4]
 80080fe:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8008102:	e06b      	b.n	80081dc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800810c:	e066      	b.n	80081dc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	687a      	ldr	r2, [r7, #4]
 8008112:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8008116:	e061      	b.n	80081dc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	687a      	ldr	r2, [r7, #4]
 800811c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8008120:	e05c      	b.n	80081dc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	687a      	ldr	r2, [r7, #4]
 8008126:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800812a:	e057      	b.n	80081dc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8008134:	e052      	b.n	80081dc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800813e:	e04d      	b.n	80081dc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8008148:	e048      	b.n	80081dc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	687a      	ldr	r2, [r7, #4]
 800814e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8008152:	e043      	b.n	80081dc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	687a      	ldr	r2, [r7, #4]
 8008158:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800815c:	e03e      	b.n	80081dc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8008166:	e039      	b.n	80081dc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	687a      	ldr	r2, [r7, #4]
 800816c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8008170:	e034      	b.n	80081dc <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008178:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	75fb      	strb	r3, [r7, #23]
        break;
 8008186:	e029      	b.n	80081dc <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800818e:	2b00      	cmp	r3, #0
 8008190:	d11a      	bne.n	80081c8 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8008192:	7afb      	ldrb	r3, [r7, #11]
 8008194:	2b0b      	cmp	r3, #11
 8008196:	d002      	beq.n	800819e <HAL_UART_RegisterCallback+0x126>
 8008198:	2b0c      	cmp	r3, #12
 800819a:	d005      	beq.n	80081a8 <HAL_UART_RegisterCallback+0x130>
 800819c:	e009      	b.n	80081b2 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	687a      	ldr	r2, [r7, #4]
 80081a2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80081a6:	e019      	b.n	80081dc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80081b0:	e014      	b.n	80081dc <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081b8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80081c2:	2301      	movs	r3, #1
 80081c4:	75fb      	strb	r3, [r7, #23]
        break;
 80081c6:	e009      	b.n	80081dc <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081ce:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 80081d8:	2301      	movs	r3, #1
 80081da:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80081dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80081de:	4618      	mov	r0, r3
 80081e0:	371c      	adds	r7, #28
 80081e2:	46bd      	mov	sp, r7
 80081e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop

080081ec <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b08a      	sub	sp, #40	@ 0x28
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	60f8      	str	r0, [r7, #12]
 80081f4:	60b9      	str	r1, [r7, #8]
 80081f6:	4613      	mov	r3, r2
 80081f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008200:	2b20      	cmp	r3, #32
 8008202:	d167      	bne.n	80082d4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d002      	beq.n	8008210 <HAL_UART_Transmit_DMA+0x24>
 800820a:	88fb      	ldrh	r3, [r7, #6]
 800820c:	2b00      	cmp	r3, #0
 800820e:	d101      	bne.n	8008214 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	e060      	b.n	80082d6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	68ba      	ldr	r2, [r7, #8]
 8008218:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	88fa      	ldrh	r2, [r7, #6]
 800821e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	88fa      	ldrh	r2, [r7, #6]
 8008226:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2200      	movs	r2, #0
 800822e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	2221      	movs	r2, #33	@ 0x21
 8008236:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800823e:	2b00      	cmp	r3, #0
 8008240:	d028      	beq.n	8008294 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008246:	4a26      	ldr	r2, [pc, #152]	@ (80082e0 <HAL_UART_Transmit_DMA+0xf4>)
 8008248:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800824e:	4a25      	ldr	r2, [pc, #148]	@ (80082e4 <HAL_UART_Transmit_DMA+0xf8>)
 8008250:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008256:	4a24      	ldr	r2, [pc, #144]	@ (80082e8 <HAL_UART_Transmit_DMA+0xfc>)
 8008258:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800825e:	2200      	movs	r2, #0
 8008260:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800826a:	4619      	mov	r1, r3
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	3328      	adds	r3, #40	@ 0x28
 8008272:	461a      	mov	r2, r3
 8008274:	88fb      	ldrh	r3, [r7, #6]
 8008276:	f7fc f90d 	bl	8004494 <HAL_DMA_Start_IT>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d009      	beq.n	8008294 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2210      	movs	r2, #16
 8008284:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	2220      	movs	r2, #32
 800828c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8008290:	2301      	movs	r3, #1
 8008292:	e020      	b.n	80082d6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2240      	movs	r2, #64	@ 0x40
 800829a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	3308      	adds	r3, #8
 80082a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	e853 3f00 	ldrex	r3, [r3]
 80082aa:	613b      	str	r3, [r7, #16]
   return(result);
 80082ac:	693b      	ldr	r3, [r7, #16]
 80082ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80082b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	3308      	adds	r3, #8
 80082ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80082bc:	623a      	str	r2, [r7, #32]
 80082be:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c0:	69f9      	ldr	r1, [r7, #28]
 80082c2:	6a3a      	ldr	r2, [r7, #32]
 80082c4:	e841 2300 	strex	r3, r2, [r1]
 80082c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80082ca:	69bb      	ldr	r3, [r7, #24]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1e5      	bne.n	800829c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80082d0:	2300      	movs	r3, #0
 80082d2:	e000      	b.n	80082d6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80082d4:	2302      	movs	r3, #2
  }
}
 80082d6:	4618      	mov	r0, r3
 80082d8:	3728      	adds	r7, #40	@ 0x28
 80082da:	46bd      	mov	sp, r7
 80082dc:	bd80      	pop	{r7, pc}
 80082de:	bf00      	nop
 80082e0:	08009817 	.word	0x08009817
 80082e4:	080098b5 	.word	0x080098b5
 80082e8:	08009a4f 	.word	0x08009a4f

080082ec <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b08a      	sub	sp, #40	@ 0x28
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	4613      	mov	r3, r2
 80082f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008300:	2b20      	cmp	r3, #32
 8008302:	d137      	bne.n	8008374 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d002      	beq.n	8008310 <HAL_UART_Receive_DMA+0x24>
 800830a:	88fb      	ldrh	r3, [r7, #6]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d101      	bne.n	8008314 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e030      	b.n	8008376 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	2200      	movs	r2, #0
 8008318:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	4a18      	ldr	r2, [pc, #96]	@ (8008380 <HAL_UART_Receive_DMA+0x94>)
 8008320:	4293      	cmp	r3, r2
 8008322:	d01f      	beq.n	8008364 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800832e:	2b00      	cmp	r3, #0
 8008330:	d018      	beq.n	8008364 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008338:	697b      	ldr	r3, [r7, #20]
 800833a:	e853 3f00 	ldrex	r3, [r3]
 800833e:	613b      	str	r3, [r7, #16]
   return(result);
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8008346:	627b      	str	r3, [r7, #36]	@ 0x24
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	461a      	mov	r2, r3
 800834e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008350:	623b      	str	r3, [r7, #32]
 8008352:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008354:	69f9      	ldr	r1, [r7, #28]
 8008356:	6a3a      	ldr	r2, [r7, #32]
 8008358:	e841 2300 	strex	r3, r2, [r1]
 800835c:	61bb      	str	r3, [r7, #24]
   return(result);
 800835e:	69bb      	ldr	r3, [r7, #24]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d1e6      	bne.n	8008332 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8008364:	88fb      	ldrh	r3, [r7, #6]
 8008366:	461a      	mov	r2, r3
 8008368:	68b9      	ldr	r1, [r7, #8]
 800836a:	68f8      	ldr	r0, [r7, #12]
 800836c:	f001 f906 	bl	800957c <UART_Start_Receive_DMA>
 8008370:	4603      	mov	r3, r0
 8008372:	e000      	b.n	8008376 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008374:	2302      	movs	r3, #2
  }
}
 8008376:	4618      	mov	r0, r3
 8008378:	3728      	adds	r7, #40	@ 0x28
 800837a:	46bd      	mov	sp, r7
 800837c:	bd80      	pop	{r7, pc}
 800837e:	bf00      	nop
 8008380:	40008000 	.word	0x40008000

08008384 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b0ba      	sub	sp, #232	@ 0xe8
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	69db      	ldr	r3, [r3, #28]
 8008392:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80083aa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80083ae:	f640 030f 	movw	r3, #2063	@ 0x80f
 80083b2:	4013      	ands	r3, r2
 80083b4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80083b8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d11b      	bne.n	80083f8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80083c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80083c4:	f003 0320 	and.w	r3, r3, #32
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d015      	beq.n	80083f8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80083cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80083d0:	f003 0320 	and.w	r3, r3, #32
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d105      	bne.n	80083e4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80083d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80083dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d009      	beq.n	80083f8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	f000 82f3 	beq.w	80089d4 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80083f2:	6878      	ldr	r0, [r7, #4]
 80083f4:	4798      	blx	r3
      }
      return;
 80083f6:	e2ed      	b.n	80089d4 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80083f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f000 8129 	beq.w	8008654 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8008402:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8008406:	4b90      	ldr	r3, [pc, #576]	@ (8008648 <HAL_UART_IRQHandler+0x2c4>)
 8008408:	4013      	ands	r3, r2
 800840a:	2b00      	cmp	r3, #0
 800840c:	d106      	bne.n	800841c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800840e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8008412:	4b8e      	ldr	r3, [pc, #568]	@ (800864c <HAL_UART_IRQHandler+0x2c8>)
 8008414:	4013      	ands	r3, r2
 8008416:	2b00      	cmp	r3, #0
 8008418:	f000 811c 	beq.w	8008654 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800841c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008420:	f003 0301 	and.w	r3, r3, #1
 8008424:	2b00      	cmp	r3, #0
 8008426:	d011      	beq.n	800844c <HAL_UART_IRQHandler+0xc8>
 8008428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800842c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00b      	beq.n	800844c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	2201      	movs	r2, #1
 800843a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008442:	f043 0201 	orr.w	r2, r3, #1
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800844c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008450:	f003 0302 	and.w	r3, r3, #2
 8008454:	2b00      	cmp	r3, #0
 8008456:	d011      	beq.n	800847c <HAL_UART_IRQHandler+0xf8>
 8008458:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800845c:	f003 0301 	and.w	r3, r3, #1
 8008460:	2b00      	cmp	r3, #0
 8008462:	d00b      	beq.n	800847c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	2202      	movs	r2, #2
 800846a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008472:	f043 0204 	orr.w	r2, r3, #4
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800847c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008480:	f003 0304 	and.w	r3, r3, #4
 8008484:	2b00      	cmp	r3, #0
 8008486:	d011      	beq.n	80084ac <HAL_UART_IRQHandler+0x128>
 8008488:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800848c:	f003 0301 	and.w	r3, r3, #1
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00b      	beq.n	80084ac <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2204      	movs	r2, #4
 800849a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084a2:	f043 0202 	orr.w	r2, r3, #2
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80084ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084b0:	f003 0308 	and.w	r3, r3, #8
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d017      	beq.n	80084e8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80084b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084bc:	f003 0320 	and.w	r3, r3, #32
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d105      	bne.n	80084d0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80084c4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80084c8:	4b5f      	ldr	r3, [pc, #380]	@ (8008648 <HAL_UART_IRQHandler+0x2c4>)
 80084ca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d00b      	beq.n	80084e8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2208      	movs	r2, #8
 80084d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80084de:	f043 0208 	orr.w	r2, r3, #8
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80084e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80084ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d012      	beq.n	800851a <HAL_UART_IRQHandler+0x196>
 80084f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80084f8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d00c      	beq.n	800851a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008508:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008510:	f043 0220 	orr.w	r2, r3, #32
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008520:	2b00      	cmp	r3, #0
 8008522:	f000 8259 	beq.w	80089d8 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008526:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800852a:	f003 0320 	and.w	r3, r3, #32
 800852e:	2b00      	cmp	r3, #0
 8008530:	d013      	beq.n	800855a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008532:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008536:	f003 0320 	and.w	r3, r3, #32
 800853a:	2b00      	cmp	r3, #0
 800853c:	d105      	bne.n	800854a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800853e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008546:	2b00      	cmp	r3, #0
 8008548:	d007      	beq.n	800855a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800854e:	2b00      	cmp	r3, #0
 8008550:	d003      	beq.n	800855a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008560:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800856e:	2b40      	cmp	r3, #64	@ 0x40
 8008570:	d005      	beq.n	800857e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8008572:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008576:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800857a:	2b00      	cmp	r3, #0
 800857c:	d058      	beq.n	8008630 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f001 f8e3 	bl	800974a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800858e:	2b40      	cmp	r3, #64	@ 0x40
 8008590:	d148      	bne.n	8008624 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	3308      	adds	r3, #8
 8008598:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800859c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80085a0:	e853 3f00 	ldrex	r3, [r3]
 80085a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80085a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80085ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	3308      	adds	r3, #8
 80085ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80085be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80085c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80085ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80085ce:	e841 2300 	strex	r3, r2, [r1]
 80085d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80085d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d1d9      	bne.n	8008592 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d017      	beq.n	8008618 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085ee:	4a18      	ldr	r2, [pc, #96]	@ (8008650 <HAL_UART_IRQHandler+0x2cc>)
 80085f0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7fc f81f 	bl	800463c <HAL_DMA_Abort_IT>
 80085fe:	4603      	mov	r3, r0
 8008600:	2b00      	cmp	r3, #0
 8008602:	d01f      	beq.n	8008644 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800860a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8008612:	4610      	mov	r0, r2
 8008614:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008616:	e015      	b.n	8008644 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008622:	e00f      	b.n	8008644 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800862a:	6878      	ldr	r0, [r7, #4]
 800862c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800862e:	e009      	b.n	8008644 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008636:	6878      	ldr	r0, [r7, #4]
 8008638:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2200      	movs	r2, #0
 800863e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8008642:	e1c9      	b.n	80089d8 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008644:	bf00      	nop
    return;
 8008646:	e1c7      	b.n	80089d8 <HAL_UART_IRQHandler+0x654>
 8008648:	10000001 	.word	0x10000001
 800864c:	04000120 	.word	0x04000120
 8008650:	08009ad3 	.word	0x08009ad3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008658:	2b01      	cmp	r3, #1
 800865a:	f040 8157 	bne.w	800890c <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800865e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008662:	f003 0310 	and.w	r3, r3, #16
 8008666:	2b00      	cmp	r3, #0
 8008668:	f000 8150 	beq.w	800890c <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800866c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008670:	f003 0310 	and.w	r3, r3, #16
 8008674:	2b00      	cmp	r3, #0
 8008676:	f000 8149 	beq.w	800890c <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2210      	movs	r2, #16
 8008680:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	689b      	ldr	r3, [r3, #8]
 8008688:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800868c:	2b40      	cmp	r3, #64	@ 0x40
 800868e:	f040 80bd 	bne.w	800880c <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	685b      	ldr	r3, [r3, #4]
 800869c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80086a0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	f000 8199 	beq.w	80089dc <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80086b0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80086b4:	429a      	cmp	r2, r3
 80086b6:	f080 8191 	bcs.w	80089dc <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80086c0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f003 0320 	and.w	r3, r3, #32
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	f040 8087 	bne.w	80087e6 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80086e4:	e853 3f00 	ldrex	r3, [r3]
 80086e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80086ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80086f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80086f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	461a      	mov	r2, r3
 80086fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8008702:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8008706:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800870a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800870e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008712:	e841 2300 	strex	r3, r2, [r1]
 8008716:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800871a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800871e:	2b00      	cmp	r3, #0
 8008720:	d1da      	bne.n	80086d8 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	3308      	adds	r3, #8
 8008728:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800872a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800872c:	e853 3f00 	ldrex	r3, [r3]
 8008730:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008732:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008734:	f023 0301 	bic.w	r3, r3, #1
 8008738:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	3308      	adds	r3, #8
 8008742:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008746:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800874a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800874c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800874e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008752:	e841 2300 	strex	r3, r2, [r1]
 8008756:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008758:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800875a:	2b00      	cmp	r3, #0
 800875c:	d1e1      	bne.n	8008722 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	3308      	adds	r3, #8
 8008764:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008766:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008768:	e853 3f00 	ldrex	r3, [r3]
 800876c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800876e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008770:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008774:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	3308      	adds	r3, #8
 800877e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8008782:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8008784:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008786:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8008788:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800878a:	e841 2300 	strex	r3, r2, [r1]
 800878e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8008790:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008792:	2b00      	cmp	r3, #0
 8008794:	d1e3      	bne.n	800875e <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	2220      	movs	r2, #32
 800879a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2200      	movs	r2, #0
 80087a2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80087ac:	e853 3f00 	ldrex	r3, [r3]
 80087b0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80087b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80087b4:	f023 0310 	bic.w	r3, r3, #16
 80087b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	461a      	mov	r2, r3
 80087c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80087c6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80087c8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80087cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80087ce:	e841 2300 	strex	r3, r2, [r1]
 80087d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80087d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d1e4      	bne.n	80087a4 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087e0:	4618      	mov	r0, r3
 80087e2:	f7fb fed2 	bl	800458a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2202      	movs	r2, #2
 80087ea:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 80087fe:	b292      	uxth	r2, r2
 8008800:	1a8a      	subs	r2, r1, r2
 8008802:	b292      	uxth	r2, r2
 8008804:	4611      	mov	r1, r2
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800880a:	e0e7      	b.n	80089dc <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008818:	b29b      	uxth	r3, r3
 800881a:	1ad3      	subs	r3, r2, r3
 800881c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008826:	b29b      	uxth	r3, r3
 8008828:	2b00      	cmp	r3, #0
 800882a:	f000 80d9 	beq.w	80089e0 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 800882e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8008832:	2b00      	cmp	r3, #0
 8008834:	f000 80d4 	beq.w	80089e0 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800883e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008840:	e853 3f00 	ldrex	r3, [r3]
 8008844:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008848:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800884c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	461a      	mov	r2, r3
 8008856:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800885a:	647b      	str	r3, [r7, #68]	@ 0x44
 800885c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800885e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008860:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008862:	e841 2300 	strex	r3, r2, [r1]
 8008866:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008868:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800886a:	2b00      	cmp	r3, #0
 800886c:	d1e4      	bne.n	8008838 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	3308      	adds	r3, #8
 8008874:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008878:	e853 3f00 	ldrex	r3, [r3]
 800887c:	623b      	str	r3, [r7, #32]
   return(result);
 800887e:	6a3b      	ldr	r3, [r7, #32]
 8008880:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008884:	f023 0301 	bic.w	r3, r3, #1
 8008888:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	3308      	adds	r3, #8
 8008892:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8008896:	633a      	str	r2, [r7, #48]	@ 0x30
 8008898:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800889a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800889c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800889e:	e841 2300 	strex	r3, r2, [r1]
 80088a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80088a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d1e1      	bne.n	800886e <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2220      	movs	r2, #32
 80088ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	2200      	movs	r2, #0
 80088b6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	e853 3f00 	ldrex	r3, [r3]
 80088ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	f023 0310 	bic.w	r3, r3, #16
 80088d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	461a      	mov	r2, r3
 80088dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80088e0:	61fb      	str	r3, [r7, #28]
 80088e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088e4:	69b9      	ldr	r1, [r7, #24]
 80088e6:	69fa      	ldr	r2, [r7, #28]
 80088e8:	e841 2300 	strex	r3, r2, [r1]
 80088ec:	617b      	str	r3, [r7, #20]
   return(result);
 80088ee:	697b      	ldr	r3, [r7, #20]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d1e4      	bne.n	80088be <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2202      	movs	r2, #2
 80088f8:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008900:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8008904:	4611      	mov	r1, r2
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800890a:	e069      	b.n	80089e0 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800890c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008910:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8008914:	2b00      	cmp	r3, #0
 8008916:	d010      	beq.n	800893a <HAL_UART_IRQHandler+0x5b6>
 8008918:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800891c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00a      	beq.n	800893a <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800892c:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008938:	e055      	b.n	80089e6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800893a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800893e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008942:	2b00      	cmp	r3, #0
 8008944:	d014      	beq.n	8008970 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800894a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800894e:	2b00      	cmp	r3, #0
 8008950:	d105      	bne.n	800895e <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008952:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008956:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800895a:	2b00      	cmp	r3, #0
 800895c:	d008      	beq.n	8008970 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008962:	2b00      	cmp	r3, #0
 8008964:	d03e      	beq.n	80089e4 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	4798      	blx	r3
    }
    return;
 800896e:	e039      	b.n	80089e4 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008978:	2b00      	cmp	r3, #0
 800897a:	d009      	beq.n	8008990 <HAL_UART_IRQHandler+0x60c>
 800897c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008984:	2b00      	cmp	r3, #0
 8008986:	d003      	beq.n	8008990 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8008988:	6878      	ldr	r0, [r7, #4]
 800898a:	f001 f8ba 	bl	8009b02 <UART_EndTransmit_IT>
    return;
 800898e:	e02a      	b.n	80089e6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008994:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008998:	2b00      	cmp	r3, #0
 800899a:	d00b      	beq.n	80089b4 <HAL_UART_IRQHandler+0x630>
 800899c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089a0:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d005      	beq.n	80089b4 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089b2:	e018      	b.n	80089e6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80089b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80089b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d012      	beq.n	80089e6 <HAL_UART_IRQHandler+0x662>
 80089c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	da0e      	bge.n	80089e6 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80089ce:	6878      	ldr	r0, [r7, #4]
 80089d0:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80089d2:	e008      	b.n	80089e6 <HAL_UART_IRQHandler+0x662>
      return;
 80089d4:	bf00      	nop
 80089d6:	e006      	b.n	80089e6 <HAL_UART_IRQHandler+0x662>
    return;
 80089d8:	bf00      	nop
 80089da:	e004      	b.n	80089e6 <HAL_UART_IRQHandler+0x662>
      return;
 80089dc:	bf00      	nop
 80089de:	e002      	b.n	80089e6 <HAL_UART_IRQHandler+0x662>
      return;
 80089e0:	bf00      	nop
 80089e2:	e000      	b.n	80089e6 <HAL_UART_IRQHandler+0x662>
    return;
 80089e4:	bf00      	nop
  }
}
 80089e6:	37e8      	adds	r7, #232	@ 0xe8
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80089f4:	bf00      	nop
 80089f6:	370c      	adds	r7, #12
 80089f8:	46bd      	mov	sp, r7
 80089fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089fe:	4770      	bx	lr

08008a00 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a00:	b480      	push	{r7}
 8008a02:	b083      	sub	sp, #12
 8008a04:	af00      	add	r7, sp, #0
 8008a06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8008a08:	bf00      	nop
 8008a0a:	370c      	adds	r7, #12
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008a1c:	bf00      	nop
 8008a1e:	370c      	adds	r7, #12
 8008a20:	46bd      	mov	sp, r7
 8008a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a26:	4770      	bx	lr

08008a28 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8008a30:	bf00      	nop
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr

08008a3c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008a3c:	b480      	push	{r7}
 8008a3e:	b083      	sub	sp, #12
 8008a40:	af00      	add	r7, sp, #0
 8008a42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008a44:	bf00      	nop
 8008a46:	370c      	adds	r7, #12
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4e:	4770      	bx	lr

08008a50 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8008a50:	b480      	push	{r7}
 8008a52:	b083      	sub	sp, #12
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8008a58:	bf00      	nop
 8008a5a:	370c      	adds	r7, #12
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a62:	4770      	bx	lr

08008a64 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8008a6c:	bf00      	nop
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8008a80:	bf00      	nop
 8008a82:	370c      	adds	r7, #12
 8008a84:	46bd      	mov	sp, r7
 8008a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a8a:	4770      	bx	lr

08008a8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b083      	sub	sp, #12
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
 8008a94:	460b      	mov	r3, r1
 8008a96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008a98:	bf00      	nop
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a09      	ldr	r2, [pc, #36]	@ (8008ad8 <HAL_UART_ReceiverTimeout_Config+0x34>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d009      	beq.n	8008acc <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	695b      	ldr	r3, [r3, #20]
 8008abe:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	683a      	ldr	r2, [r7, #0]
 8008ac8:	430a      	orrs	r2, r1
 8008aca:	615a      	str	r2, [r3, #20]
  }
}
 8008acc:	bf00      	nop
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr
 8008ad8:	40008000 	.word	0x40008000

08008adc <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8008adc:	b480      	push	{r7}
 8008ade:	b083      	sub	sp, #12
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a18      	ldr	r2, [pc, #96]	@ (8008b4c <HAL_UART_EnableReceiverTimeout+0x70>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d027      	beq.n	8008b3e <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008af4:	2b20      	cmp	r3, #32
 8008af6:	d120      	bne.n	8008b3a <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008afe:	2b01      	cmp	r3, #1
 8008b00:	d101      	bne.n	8008b06 <HAL_UART_EnableReceiverTimeout+0x2a>
 8008b02:	2302      	movs	r3, #2
 8008b04:	e01c      	b.n	8008b40 <HAL_UART_EnableReceiverTimeout+0x64>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	2201      	movs	r2, #1
 8008b0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2224      	movs	r2, #36	@ 0x24
 8008b12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	685a      	ldr	r2, [r3, #4]
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8008b24:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	2220      	movs	r2, #32
 8008b2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2200      	movs	r2, #0
 8008b32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8008b36:	2300      	movs	r3, #0
 8008b38:	e002      	b.n	8008b40 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8008b3a:	2302      	movs	r3, #2
 8008b3c:	e000      	b.n	8008b40 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
  }
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	370c      	adds	r7, #12
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr
 8008b4c:	40008000 	.word	0x40008000

08008b50 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8008b50:	b480      	push	{r7}
 8008b52:	b083      	sub	sp, #12
 8008b54:	af00      	add	r7, sp, #0
 8008b56:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8008b5e:	4618      	mov	r0, r3
 8008b60:	370c      	adds	r7, #12
 8008b62:	46bd      	mov	sp, r7
 8008b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b68:	4770      	bx	lr
	...

08008b6c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	4a1a      	ldr	r2, [pc, #104]	@ (8008be0 <UART_InitCallbacksToDefault+0x74>)
 8008b78:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	4a19      	ldr	r2, [pc, #100]	@ (8008be4 <UART_InitCallbacksToDefault+0x78>)
 8008b80:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	4a18      	ldr	r2, [pc, #96]	@ (8008be8 <UART_InitCallbacksToDefault+0x7c>)
 8008b88:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	4a17      	ldr	r2, [pc, #92]	@ (8008bec <UART_InitCallbacksToDefault+0x80>)
 8008b90:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	4a16      	ldr	r2, [pc, #88]	@ (8008bf0 <UART_InitCallbacksToDefault+0x84>)
 8008b98:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	4a15      	ldr	r2, [pc, #84]	@ (8008bf4 <UART_InitCallbacksToDefault+0x88>)
 8008ba0:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	4a14      	ldr	r2, [pc, #80]	@ (8008bf8 <UART_InitCallbacksToDefault+0x8c>)
 8008ba8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	4a13      	ldr	r2, [pc, #76]	@ (8008bfc <UART_InitCallbacksToDefault+0x90>)
 8008bb0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	4a12      	ldr	r2, [pc, #72]	@ (8008c00 <UART_InitCallbacksToDefault+0x94>)
 8008bb8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	4a11      	ldr	r2, [pc, #68]	@ (8008c04 <UART_InitCallbacksToDefault+0x98>)
 8008bc0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	4a10      	ldr	r2, [pc, #64]	@ (8008c08 <UART_InitCallbacksToDefault+0x9c>)
 8008bc8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	4a0f      	ldr	r2, [pc, #60]	@ (8008c0c <UART_InitCallbacksToDefault+0xa0>)
 8008bd0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8008bd4:	bf00      	nop
 8008bd6:	370c      	adds	r7, #12
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr
 8008be0:	08008a01 	.word	0x08008a01
 8008be4:	080089ed 	.word	0x080089ed
 8008be8:	08008a29 	.word	0x08008a29
 8008bec:	08008a15 	.word	0x08008a15
 8008bf0:	08008a3d 	.word	0x08008a3d
 8008bf4:	08008a51 	.word	0x08008a51
 8008bf8:	08008a65 	.word	0x08008a65
 8008bfc:	08008a79 	.word	0x08008a79
 8008c00:	08009b5d 	.word	0x08009b5d
 8008c04:	08009b71 	.word	0x08009b71
 8008c08:	08009b85 	.word	0x08009b85
 8008c0c:	08008a8d 	.word	0x08008a8d

08008c10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008c10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c14:	b08c      	sub	sp, #48	@ 0x30
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	689a      	ldr	r2, [r3, #8]
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	691b      	ldr	r3, [r3, #16]
 8008c28:	431a      	orrs	r2, r3
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	695b      	ldr	r3, [r3, #20]
 8008c2e:	431a      	orrs	r2, r3
 8008c30:	697b      	ldr	r3, [r7, #20]
 8008c32:	69db      	ldr	r3, [r3, #28]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c38:	697b      	ldr	r3, [r7, #20]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	681a      	ldr	r2, [r3, #0]
 8008c3e:	4baa      	ldr	r3, [pc, #680]	@ (8008ee8 <UART_SetConfig+0x2d8>)
 8008c40:	4013      	ands	r3, r2
 8008c42:	697a      	ldr	r2, [r7, #20]
 8008c44:	6812      	ldr	r2, [r2, #0]
 8008c46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c48:	430b      	orrs	r3, r1
 8008c4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	68da      	ldr	r2, [r3, #12]
 8008c5a:	697b      	ldr	r3, [r7, #20]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	430a      	orrs	r2, r1
 8008c60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c62:	697b      	ldr	r3, [r7, #20]
 8008c64:	699b      	ldr	r3, [r3, #24]
 8008c66:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c68:	697b      	ldr	r3, [r7, #20]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	4a9f      	ldr	r2, [pc, #636]	@ (8008eec <UART_SetConfig+0x2dc>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d004      	beq.n	8008c7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	6a1b      	ldr	r3, [r3, #32]
 8008c76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c78:	4313      	orrs	r3, r2
 8008c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8008c86:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8008c8a:	697a      	ldr	r2, [r7, #20]
 8008c8c:	6812      	ldr	r2, [r2, #0]
 8008c8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c90:	430b      	orrs	r3, r1
 8008c92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c9a:	f023 010f 	bic.w	r1, r3, #15
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	430a      	orrs	r2, r1
 8008ca8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a90      	ldr	r2, [pc, #576]	@ (8008ef0 <UART_SetConfig+0x2e0>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d125      	bne.n	8008d00 <UART_SetConfig+0xf0>
 8008cb4:	4b8f      	ldr	r3, [pc, #572]	@ (8008ef4 <UART_SetConfig+0x2e4>)
 8008cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008cba:	f003 0303 	and.w	r3, r3, #3
 8008cbe:	2b03      	cmp	r3, #3
 8008cc0:	d81a      	bhi.n	8008cf8 <UART_SetConfig+0xe8>
 8008cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8008cc8 <UART_SetConfig+0xb8>)
 8008cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cc8:	08008cd9 	.word	0x08008cd9
 8008ccc:	08008ce9 	.word	0x08008ce9
 8008cd0:	08008ce1 	.word	0x08008ce1
 8008cd4:	08008cf1 	.word	0x08008cf1
 8008cd8:	2301      	movs	r3, #1
 8008cda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cde:	e116      	b.n	8008f0e <UART_SetConfig+0x2fe>
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ce6:	e112      	b.n	8008f0e <UART_SetConfig+0x2fe>
 8008ce8:	2304      	movs	r3, #4
 8008cea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cee:	e10e      	b.n	8008f0e <UART_SetConfig+0x2fe>
 8008cf0:	2308      	movs	r3, #8
 8008cf2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cf6:	e10a      	b.n	8008f0e <UART_SetConfig+0x2fe>
 8008cf8:	2310      	movs	r3, #16
 8008cfa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008cfe:	e106      	b.n	8008f0e <UART_SetConfig+0x2fe>
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a7c      	ldr	r2, [pc, #496]	@ (8008ef8 <UART_SetConfig+0x2e8>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d138      	bne.n	8008d7c <UART_SetConfig+0x16c>
 8008d0a:	4b7a      	ldr	r3, [pc, #488]	@ (8008ef4 <UART_SetConfig+0x2e4>)
 8008d0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d10:	f003 030c 	and.w	r3, r3, #12
 8008d14:	2b0c      	cmp	r3, #12
 8008d16:	d82d      	bhi.n	8008d74 <UART_SetConfig+0x164>
 8008d18:	a201      	add	r2, pc, #4	@ (adr r2, 8008d20 <UART_SetConfig+0x110>)
 8008d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d1e:	bf00      	nop
 8008d20:	08008d55 	.word	0x08008d55
 8008d24:	08008d75 	.word	0x08008d75
 8008d28:	08008d75 	.word	0x08008d75
 8008d2c:	08008d75 	.word	0x08008d75
 8008d30:	08008d65 	.word	0x08008d65
 8008d34:	08008d75 	.word	0x08008d75
 8008d38:	08008d75 	.word	0x08008d75
 8008d3c:	08008d75 	.word	0x08008d75
 8008d40:	08008d5d 	.word	0x08008d5d
 8008d44:	08008d75 	.word	0x08008d75
 8008d48:	08008d75 	.word	0x08008d75
 8008d4c:	08008d75 	.word	0x08008d75
 8008d50:	08008d6d 	.word	0x08008d6d
 8008d54:	2300      	movs	r3, #0
 8008d56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d5a:	e0d8      	b.n	8008f0e <UART_SetConfig+0x2fe>
 8008d5c:	2302      	movs	r3, #2
 8008d5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d62:	e0d4      	b.n	8008f0e <UART_SetConfig+0x2fe>
 8008d64:	2304      	movs	r3, #4
 8008d66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d6a:	e0d0      	b.n	8008f0e <UART_SetConfig+0x2fe>
 8008d6c:	2308      	movs	r3, #8
 8008d6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d72:	e0cc      	b.n	8008f0e <UART_SetConfig+0x2fe>
 8008d74:	2310      	movs	r3, #16
 8008d76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008d7a:	e0c8      	b.n	8008f0e <UART_SetConfig+0x2fe>
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a5e      	ldr	r2, [pc, #376]	@ (8008efc <UART_SetConfig+0x2ec>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d125      	bne.n	8008dd2 <UART_SetConfig+0x1c2>
 8008d86:	4b5b      	ldr	r3, [pc, #364]	@ (8008ef4 <UART_SetConfig+0x2e4>)
 8008d88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008d8c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008d90:	2b30      	cmp	r3, #48	@ 0x30
 8008d92:	d016      	beq.n	8008dc2 <UART_SetConfig+0x1b2>
 8008d94:	2b30      	cmp	r3, #48	@ 0x30
 8008d96:	d818      	bhi.n	8008dca <UART_SetConfig+0x1ba>
 8008d98:	2b20      	cmp	r3, #32
 8008d9a:	d00a      	beq.n	8008db2 <UART_SetConfig+0x1a2>
 8008d9c:	2b20      	cmp	r3, #32
 8008d9e:	d814      	bhi.n	8008dca <UART_SetConfig+0x1ba>
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d002      	beq.n	8008daa <UART_SetConfig+0x19a>
 8008da4:	2b10      	cmp	r3, #16
 8008da6:	d008      	beq.n	8008dba <UART_SetConfig+0x1aa>
 8008da8:	e00f      	b.n	8008dca <UART_SetConfig+0x1ba>
 8008daa:	2300      	movs	r3, #0
 8008dac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008db0:	e0ad      	b.n	8008f0e <UART_SetConfig+0x2fe>
 8008db2:	2302      	movs	r3, #2
 8008db4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008db8:	e0a9      	b.n	8008f0e <UART_SetConfig+0x2fe>
 8008dba:	2304      	movs	r3, #4
 8008dbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dc0:	e0a5      	b.n	8008f0e <UART_SetConfig+0x2fe>
 8008dc2:	2308      	movs	r3, #8
 8008dc4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dc8:	e0a1      	b.n	8008f0e <UART_SetConfig+0x2fe>
 8008dca:	2310      	movs	r3, #16
 8008dcc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008dd0:	e09d      	b.n	8008f0e <UART_SetConfig+0x2fe>
 8008dd2:	697b      	ldr	r3, [r7, #20]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a4a      	ldr	r2, [pc, #296]	@ (8008f00 <UART_SetConfig+0x2f0>)
 8008dd8:	4293      	cmp	r3, r2
 8008dda:	d125      	bne.n	8008e28 <UART_SetConfig+0x218>
 8008ddc:	4b45      	ldr	r3, [pc, #276]	@ (8008ef4 <UART_SetConfig+0x2e4>)
 8008dde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008de2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008de6:	2bc0      	cmp	r3, #192	@ 0xc0
 8008de8:	d016      	beq.n	8008e18 <UART_SetConfig+0x208>
 8008dea:	2bc0      	cmp	r3, #192	@ 0xc0
 8008dec:	d818      	bhi.n	8008e20 <UART_SetConfig+0x210>
 8008dee:	2b80      	cmp	r3, #128	@ 0x80
 8008df0:	d00a      	beq.n	8008e08 <UART_SetConfig+0x1f8>
 8008df2:	2b80      	cmp	r3, #128	@ 0x80
 8008df4:	d814      	bhi.n	8008e20 <UART_SetConfig+0x210>
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d002      	beq.n	8008e00 <UART_SetConfig+0x1f0>
 8008dfa:	2b40      	cmp	r3, #64	@ 0x40
 8008dfc:	d008      	beq.n	8008e10 <UART_SetConfig+0x200>
 8008dfe:	e00f      	b.n	8008e20 <UART_SetConfig+0x210>
 8008e00:	2300      	movs	r3, #0
 8008e02:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e06:	e082      	b.n	8008f0e <UART_SetConfig+0x2fe>
 8008e08:	2302      	movs	r3, #2
 8008e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e0e:	e07e      	b.n	8008f0e <UART_SetConfig+0x2fe>
 8008e10:	2304      	movs	r3, #4
 8008e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e16:	e07a      	b.n	8008f0e <UART_SetConfig+0x2fe>
 8008e18:	2308      	movs	r3, #8
 8008e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e1e:	e076      	b.n	8008f0e <UART_SetConfig+0x2fe>
 8008e20:	2310      	movs	r3, #16
 8008e22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e26:	e072      	b.n	8008f0e <UART_SetConfig+0x2fe>
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a35      	ldr	r2, [pc, #212]	@ (8008f04 <UART_SetConfig+0x2f4>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d12a      	bne.n	8008e88 <UART_SetConfig+0x278>
 8008e32:	4b30      	ldr	r3, [pc, #192]	@ (8008ef4 <UART_SetConfig+0x2e4>)
 8008e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e38:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e3c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e40:	d01a      	beq.n	8008e78 <UART_SetConfig+0x268>
 8008e42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008e46:	d81b      	bhi.n	8008e80 <UART_SetConfig+0x270>
 8008e48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e4c:	d00c      	beq.n	8008e68 <UART_SetConfig+0x258>
 8008e4e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e52:	d815      	bhi.n	8008e80 <UART_SetConfig+0x270>
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d003      	beq.n	8008e60 <UART_SetConfig+0x250>
 8008e58:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008e5c:	d008      	beq.n	8008e70 <UART_SetConfig+0x260>
 8008e5e:	e00f      	b.n	8008e80 <UART_SetConfig+0x270>
 8008e60:	2300      	movs	r3, #0
 8008e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e66:	e052      	b.n	8008f0e <UART_SetConfig+0x2fe>
 8008e68:	2302      	movs	r3, #2
 8008e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e6e:	e04e      	b.n	8008f0e <UART_SetConfig+0x2fe>
 8008e70:	2304      	movs	r3, #4
 8008e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e76:	e04a      	b.n	8008f0e <UART_SetConfig+0x2fe>
 8008e78:	2308      	movs	r3, #8
 8008e7a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e7e:	e046      	b.n	8008f0e <UART_SetConfig+0x2fe>
 8008e80:	2310      	movs	r3, #16
 8008e82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008e86:	e042      	b.n	8008f0e <UART_SetConfig+0x2fe>
 8008e88:	697b      	ldr	r3, [r7, #20]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a17      	ldr	r2, [pc, #92]	@ (8008eec <UART_SetConfig+0x2dc>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d13a      	bne.n	8008f08 <UART_SetConfig+0x2f8>
 8008e92:	4b18      	ldr	r3, [pc, #96]	@ (8008ef4 <UART_SetConfig+0x2e4>)
 8008e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008e98:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008e9c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008ea0:	d01a      	beq.n	8008ed8 <UART_SetConfig+0x2c8>
 8008ea2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008ea6:	d81b      	bhi.n	8008ee0 <UART_SetConfig+0x2d0>
 8008ea8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008eac:	d00c      	beq.n	8008ec8 <UART_SetConfig+0x2b8>
 8008eae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008eb2:	d815      	bhi.n	8008ee0 <UART_SetConfig+0x2d0>
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d003      	beq.n	8008ec0 <UART_SetConfig+0x2b0>
 8008eb8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008ebc:	d008      	beq.n	8008ed0 <UART_SetConfig+0x2c0>
 8008ebe:	e00f      	b.n	8008ee0 <UART_SetConfig+0x2d0>
 8008ec0:	2300      	movs	r3, #0
 8008ec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ec6:	e022      	b.n	8008f0e <UART_SetConfig+0x2fe>
 8008ec8:	2302      	movs	r3, #2
 8008eca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ece:	e01e      	b.n	8008f0e <UART_SetConfig+0x2fe>
 8008ed0:	2304      	movs	r3, #4
 8008ed2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ed6:	e01a      	b.n	8008f0e <UART_SetConfig+0x2fe>
 8008ed8:	2308      	movs	r3, #8
 8008eda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ede:	e016      	b.n	8008f0e <UART_SetConfig+0x2fe>
 8008ee0:	2310      	movs	r3, #16
 8008ee2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008ee6:	e012      	b.n	8008f0e <UART_SetConfig+0x2fe>
 8008ee8:	cfff69f3 	.word	0xcfff69f3
 8008eec:	40008000 	.word	0x40008000
 8008ef0:	40013800 	.word	0x40013800
 8008ef4:	40021000 	.word	0x40021000
 8008ef8:	40004400 	.word	0x40004400
 8008efc:	40004800 	.word	0x40004800
 8008f00:	40004c00 	.word	0x40004c00
 8008f04:	40005000 	.word	0x40005000
 8008f08:	2310      	movs	r3, #16
 8008f0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008f0e:	697b      	ldr	r3, [r7, #20]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	4aae      	ldr	r2, [pc, #696]	@ (80091cc <UART_SetConfig+0x5bc>)
 8008f14:	4293      	cmp	r3, r2
 8008f16:	f040 8097 	bne.w	8009048 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008f1a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008f1e:	2b08      	cmp	r3, #8
 8008f20:	d823      	bhi.n	8008f6a <UART_SetConfig+0x35a>
 8008f22:	a201      	add	r2, pc, #4	@ (adr r2, 8008f28 <UART_SetConfig+0x318>)
 8008f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f28:	08008f4d 	.word	0x08008f4d
 8008f2c:	08008f6b 	.word	0x08008f6b
 8008f30:	08008f55 	.word	0x08008f55
 8008f34:	08008f6b 	.word	0x08008f6b
 8008f38:	08008f5b 	.word	0x08008f5b
 8008f3c:	08008f6b 	.word	0x08008f6b
 8008f40:	08008f6b 	.word	0x08008f6b
 8008f44:	08008f6b 	.word	0x08008f6b
 8008f48:	08008f63 	.word	0x08008f63
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008f4c:	f7fc fc8c 	bl	8005868 <HAL_RCC_GetPCLK1Freq>
 8008f50:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f52:	e010      	b.n	8008f76 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008f54:	4b9e      	ldr	r3, [pc, #632]	@ (80091d0 <UART_SetConfig+0x5c0>)
 8008f56:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008f58:	e00d      	b.n	8008f76 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008f5a:	f7fc fc17 	bl	800578c <HAL_RCC_GetSysClockFreq>
 8008f5e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008f60:	e009      	b.n	8008f76 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008f62:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008f66:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008f68:	e005      	b.n	8008f76 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008f6e:	2301      	movs	r3, #1
 8008f70:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008f74:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	f000 8130 	beq.w	80091de <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f82:	4a94      	ldr	r2, [pc, #592]	@ (80091d4 <UART_SetConfig+0x5c4>)
 8008f84:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008f88:	461a      	mov	r2, r3
 8008f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008f90:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008f92:	697b      	ldr	r3, [r7, #20]
 8008f94:	685a      	ldr	r2, [r3, #4]
 8008f96:	4613      	mov	r3, r2
 8008f98:	005b      	lsls	r3, r3, #1
 8008f9a:	4413      	add	r3, r2
 8008f9c:	69ba      	ldr	r2, [r7, #24]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d305      	bcc.n	8008fae <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008fa2:	697b      	ldr	r3, [r7, #20]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008fa8:	69ba      	ldr	r2, [r7, #24]
 8008faa:	429a      	cmp	r2, r3
 8008fac:	d903      	bls.n	8008fb6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008fb4:	e113      	b.n	80091de <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fb8:	2200      	movs	r2, #0
 8008fba:	60bb      	str	r3, [r7, #8]
 8008fbc:	60fa      	str	r2, [r7, #12]
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fc2:	4a84      	ldr	r2, [pc, #528]	@ (80091d4 <UART_SetConfig+0x5c4>)
 8008fc4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008fc8:	b29b      	uxth	r3, r3
 8008fca:	2200      	movs	r2, #0
 8008fcc:	603b      	str	r3, [r7, #0]
 8008fce:	607a      	str	r2, [r7, #4]
 8008fd0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008fd4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008fd8:	f7f7 fe0c 	bl	8000bf4 <__aeabi_uldivmod>
 8008fdc:	4602      	mov	r2, r0
 8008fde:	460b      	mov	r3, r1
 8008fe0:	4610      	mov	r0, r2
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	f04f 0200 	mov.w	r2, #0
 8008fe8:	f04f 0300 	mov.w	r3, #0
 8008fec:	020b      	lsls	r3, r1, #8
 8008fee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008ff2:	0202      	lsls	r2, r0, #8
 8008ff4:	6979      	ldr	r1, [r7, #20]
 8008ff6:	6849      	ldr	r1, [r1, #4]
 8008ff8:	0849      	lsrs	r1, r1, #1
 8008ffa:	2000      	movs	r0, #0
 8008ffc:	460c      	mov	r4, r1
 8008ffe:	4605      	mov	r5, r0
 8009000:	eb12 0804 	adds.w	r8, r2, r4
 8009004:	eb43 0905 	adc.w	r9, r3, r5
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	2200      	movs	r2, #0
 800900e:	469a      	mov	sl, r3
 8009010:	4693      	mov	fp, r2
 8009012:	4652      	mov	r2, sl
 8009014:	465b      	mov	r3, fp
 8009016:	4640      	mov	r0, r8
 8009018:	4649      	mov	r1, r9
 800901a:	f7f7 fdeb 	bl	8000bf4 <__aeabi_uldivmod>
 800901e:	4602      	mov	r2, r0
 8009020:	460b      	mov	r3, r1
 8009022:	4613      	mov	r3, r2
 8009024:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009026:	6a3b      	ldr	r3, [r7, #32]
 8009028:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800902c:	d308      	bcc.n	8009040 <UART_SetConfig+0x430>
 800902e:	6a3b      	ldr	r3, [r7, #32]
 8009030:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009034:	d204      	bcs.n	8009040 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8009036:	697b      	ldr	r3, [r7, #20]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	6a3a      	ldr	r2, [r7, #32]
 800903c:	60da      	str	r2, [r3, #12]
 800903e:	e0ce      	b.n	80091de <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8009040:	2301      	movs	r3, #1
 8009042:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8009046:	e0ca      	b.n	80091de <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009048:	697b      	ldr	r3, [r7, #20]
 800904a:	69db      	ldr	r3, [r3, #28]
 800904c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009050:	d166      	bne.n	8009120 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8009052:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009056:	2b08      	cmp	r3, #8
 8009058:	d827      	bhi.n	80090aa <UART_SetConfig+0x49a>
 800905a:	a201      	add	r2, pc, #4	@ (adr r2, 8009060 <UART_SetConfig+0x450>)
 800905c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009060:	08009085 	.word	0x08009085
 8009064:	0800908d 	.word	0x0800908d
 8009068:	08009095 	.word	0x08009095
 800906c:	080090ab 	.word	0x080090ab
 8009070:	0800909b 	.word	0x0800909b
 8009074:	080090ab 	.word	0x080090ab
 8009078:	080090ab 	.word	0x080090ab
 800907c:	080090ab 	.word	0x080090ab
 8009080:	080090a3 	.word	0x080090a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009084:	f7fc fbf0 	bl	8005868 <HAL_RCC_GetPCLK1Freq>
 8009088:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800908a:	e014      	b.n	80090b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800908c:	f7fc fc02 	bl	8005894 <HAL_RCC_GetPCLK2Freq>
 8009090:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009092:	e010      	b.n	80090b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009094:	4b4e      	ldr	r3, [pc, #312]	@ (80091d0 <UART_SetConfig+0x5c0>)
 8009096:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009098:	e00d      	b.n	80090b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800909a:	f7fc fb77 	bl	800578c <HAL_RCC_GetSysClockFreq>
 800909e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80090a0:	e009      	b.n	80090b6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80090a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80090a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80090a8:	e005      	b.n	80090b6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80090aa:	2300      	movs	r3, #0
 80090ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80090ae:	2301      	movs	r3, #1
 80090b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80090b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80090b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	f000 8090 	beq.w	80091de <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80090c2:	4a44      	ldr	r2, [pc, #272]	@ (80091d4 <UART_SetConfig+0x5c4>)
 80090c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80090c8:	461a      	mov	r2, r3
 80090ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80090d0:	005a      	lsls	r2, r3, #1
 80090d2:	697b      	ldr	r3, [r7, #20]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	085b      	lsrs	r3, r3, #1
 80090d8:	441a      	add	r2, r3
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	685b      	ldr	r3, [r3, #4]
 80090de:	fbb2 f3f3 	udiv	r3, r2, r3
 80090e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80090e4:	6a3b      	ldr	r3, [r7, #32]
 80090e6:	2b0f      	cmp	r3, #15
 80090e8:	d916      	bls.n	8009118 <UART_SetConfig+0x508>
 80090ea:	6a3b      	ldr	r3, [r7, #32]
 80090ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80090f0:	d212      	bcs.n	8009118 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80090f2:	6a3b      	ldr	r3, [r7, #32]
 80090f4:	b29b      	uxth	r3, r3
 80090f6:	f023 030f 	bic.w	r3, r3, #15
 80090fa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80090fc:	6a3b      	ldr	r3, [r7, #32]
 80090fe:	085b      	lsrs	r3, r3, #1
 8009100:	b29b      	uxth	r3, r3
 8009102:	f003 0307 	and.w	r3, r3, #7
 8009106:	b29a      	uxth	r2, r3
 8009108:	8bfb      	ldrh	r3, [r7, #30]
 800910a:	4313      	orrs	r3, r2
 800910c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	8bfa      	ldrh	r2, [r7, #30]
 8009114:	60da      	str	r2, [r3, #12]
 8009116:	e062      	b.n	80091de <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8009118:	2301      	movs	r3, #1
 800911a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800911e:	e05e      	b.n	80091de <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009120:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009124:	2b08      	cmp	r3, #8
 8009126:	d828      	bhi.n	800917a <UART_SetConfig+0x56a>
 8009128:	a201      	add	r2, pc, #4	@ (adr r2, 8009130 <UART_SetConfig+0x520>)
 800912a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800912e:	bf00      	nop
 8009130:	08009155 	.word	0x08009155
 8009134:	0800915d 	.word	0x0800915d
 8009138:	08009165 	.word	0x08009165
 800913c:	0800917b 	.word	0x0800917b
 8009140:	0800916b 	.word	0x0800916b
 8009144:	0800917b 	.word	0x0800917b
 8009148:	0800917b 	.word	0x0800917b
 800914c:	0800917b 	.word	0x0800917b
 8009150:	08009173 	.word	0x08009173
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009154:	f7fc fb88 	bl	8005868 <HAL_RCC_GetPCLK1Freq>
 8009158:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800915a:	e014      	b.n	8009186 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800915c:	f7fc fb9a 	bl	8005894 <HAL_RCC_GetPCLK2Freq>
 8009160:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009162:	e010      	b.n	8009186 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009164:	4b1a      	ldr	r3, [pc, #104]	@ (80091d0 <UART_SetConfig+0x5c0>)
 8009166:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009168:	e00d      	b.n	8009186 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800916a:	f7fc fb0f 	bl	800578c <HAL_RCC_GetSysClockFreq>
 800916e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8009170:	e009      	b.n	8009186 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009172:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009176:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8009178:	e005      	b.n	8009186 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800917a:	2300      	movs	r3, #0
 800917c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8009184:	bf00      	nop
    }

    if (pclk != 0U)
 8009186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009188:	2b00      	cmp	r3, #0
 800918a:	d028      	beq.n	80091de <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800918c:	697b      	ldr	r3, [r7, #20]
 800918e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009190:	4a10      	ldr	r2, [pc, #64]	@ (80091d4 <UART_SetConfig+0x5c4>)
 8009192:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009196:	461a      	mov	r2, r3
 8009198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800919a:	fbb3 f2f2 	udiv	r2, r3, r2
 800919e:	697b      	ldr	r3, [r7, #20]
 80091a0:	685b      	ldr	r3, [r3, #4]
 80091a2:	085b      	lsrs	r3, r3, #1
 80091a4:	441a      	add	r2, r3
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	685b      	ldr	r3, [r3, #4]
 80091aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80091ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80091b0:	6a3b      	ldr	r3, [r7, #32]
 80091b2:	2b0f      	cmp	r3, #15
 80091b4:	d910      	bls.n	80091d8 <UART_SetConfig+0x5c8>
 80091b6:	6a3b      	ldr	r3, [r7, #32]
 80091b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80091bc:	d20c      	bcs.n	80091d8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80091be:	6a3b      	ldr	r3, [r7, #32]
 80091c0:	b29a      	uxth	r2, r3
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	60da      	str	r2, [r3, #12]
 80091c8:	e009      	b.n	80091de <UART_SetConfig+0x5ce>
 80091ca:	bf00      	nop
 80091cc:	40008000 	.word	0x40008000
 80091d0:	00f42400 	.word	0x00f42400
 80091d4:	08009e44 	.word	0x08009e44
      }
      else
      {
        ret = HAL_ERROR;
 80091d8:	2301      	movs	r3, #1
 80091da:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80091de:	697b      	ldr	r3, [r7, #20]
 80091e0:	2201      	movs	r2, #1
 80091e2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	2201      	movs	r2, #1
 80091ea:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	2200      	movs	r2, #0
 80091f2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	2200      	movs	r2, #0
 80091f8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80091fa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3730      	adds	r7, #48	@ 0x30
 8009202:	46bd      	mov	sp, r7
 8009204:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08009208 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009214:	f003 0308 	and.w	r3, r3, #8
 8009218:	2b00      	cmp	r3, #0
 800921a:	d00a      	beq.n	8009232 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	685b      	ldr	r3, [r3, #4]
 8009222:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	430a      	orrs	r2, r1
 8009230:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009236:	f003 0301 	and.w	r3, r3, #1
 800923a:	2b00      	cmp	r3, #0
 800923c:	d00a      	beq.n	8009254 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	685b      	ldr	r3, [r3, #4]
 8009244:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	430a      	orrs	r2, r1
 8009252:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009258:	f003 0302 	and.w	r3, r3, #2
 800925c:	2b00      	cmp	r3, #0
 800925e:	d00a      	beq.n	8009276 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	685b      	ldr	r3, [r3, #4]
 8009266:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	430a      	orrs	r2, r1
 8009274:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800927a:	f003 0304 	and.w	r3, r3, #4
 800927e:	2b00      	cmp	r3, #0
 8009280:	d00a      	beq.n	8009298 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	430a      	orrs	r2, r1
 8009296:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800929c:	f003 0310 	and.w	r3, r3, #16
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d00a      	beq.n	80092ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	689b      	ldr	r3, [r3, #8]
 80092aa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	681b      	ldr	r3, [r3, #0]
 80092b6:	430a      	orrs	r2, r1
 80092b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092be:	f003 0320 	and.w	r3, r3, #32
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d00a      	beq.n	80092dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	430a      	orrs	r2, r1
 80092da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80092e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d01a      	beq.n	800931e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	685b      	ldr	r3, [r3, #4]
 80092ee:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	430a      	orrs	r2, r1
 80092fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009302:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009306:	d10a      	bne.n	800931e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	685b      	ldr	r3, [r3, #4]
 800930e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	430a      	orrs	r2, r1
 800931c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009322:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009326:	2b00      	cmp	r3, #0
 8009328:	d00a      	beq.n	8009340 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	685b      	ldr	r3, [r3, #4]
 8009330:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	430a      	orrs	r2, r1
 800933e:	605a      	str	r2, [r3, #4]
  }
}
 8009340:	bf00      	nop
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800934c:	b580      	push	{r7, lr}
 800934e:	b098      	sub	sp, #96	@ 0x60
 8009350:	af02      	add	r7, sp, #8
 8009352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800935c:	f7fa feb4 	bl	80040c8 <HAL_GetTick>
 8009360:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f003 0308 	and.w	r3, r3, #8
 800936c:	2b08      	cmp	r3, #8
 800936e:	d12f      	bne.n	80093d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009370:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009378:	2200      	movs	r2, #0
 800937a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 f88e 	bl	80094a0 <UART_WaitOnFlagUntilTimeout>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d022      	beq.n	80093d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009392:	e853 3f00 	ldrex	r3, [r3]
 8009396:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800939a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800939e:	653b      	str	r3, [r7, #80]	@ 0x50
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	461a      	mov	r2, r3
 80093a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80093a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80093aa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80093ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80093b0:	e841 2300 	strex	r3, r2, [r1]
 80093b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80093b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d1e6      	bne.n	800938a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2220      	movs	r2, #32
 80093c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80093cc:	2303      	movs	r3, #3
 80093ce:	e063      	b.n	8009498 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f003 0304 	and.w	r3, r3, #4
 80093da:	2b04      	cmp	r3, #4
 80093dc:	d149      	bne.n	8009472 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80093de:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80093e2:	9300      	str	r3, [sp, #0]
 80093e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80093e6:	2200      	movs	r2, #0
 80093e8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f000 f857 	bl	80094a0 <UART_WaitOnFlagUntilTimeout>
 80093f2:	4603      	mov	r3, r0
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d03c      	beq.n	8009472 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009400:	e853 3f00 	ldrex	r3, [r3]
 8009404:	623b      	str	r3, [r7, #32]
   return(result);
 8009406:	6a3b      	ldr	r3, [r7, #32]
 8009408:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800940c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	461a      	mov	r2, r3
 8009414:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009416:	633b      	str	r3, [r7, #48]	@ 0x30
 8009418:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800941c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800941e:	e841 2300 	strex	r3, r2, [r1]
 8009422:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009426:	2b00      	cmp	r3, #0
 8009428:	d1e6      	bne.n	80093f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	3308      	adds	r3, #8
 8009430:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	e853 3f00 	ldrex	r3, [r3]
 8009438:	60fb      	str	r3, [r7, #12]
   return(result);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f023 0301 	bic.w	r3, r3, #1
 8009440:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	3308      	adds	r3, #8
 8009448:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800944a:	61fa      	str	r2, [r7, #28]
 800944c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800944e:	69b9      	ldr	r1, [r7, #24]
 8009450:	69fa      	ldr	r2, [r7, #28]
 8009452:	e841 2300 	strex	r3, r2, [r1]
 8009456:	617b      	str	r3, [r7, #20]
   return(result);
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d1e5      	bne.n	800942a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2220      	movs	r2, #32
 8009462:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2200      	movs	r2, #0
 800946a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800946e:	2303      	movs	r3, #3
 8009470:	e012      	b.n	8009498 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2220      	movs	r2, #32
 8009476:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2220      	movs	r2, #32
 800947e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2200      	movs	r2, #0
 8009486:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2200      	movs	r2, #0
 800948c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2200      	movs	r2, #0
 8009492:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	3758      	adds	r7, #88	@ 0x58
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b084      	sub	sp, #16
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	603b      	str	r3, [r7, #0]
 80094ac:	4613      	mov	r3, r2
 80094ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80094b0:	e04f      	b.n	8009552 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80094b2:	69bb      	ldr	r3, [r7, #24]
 80094b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b8:	d04b      	beq.n	8009552 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80094ba:	f7fa fe05 	bl	80040c8 <HAL_GetTick>
 80094be:	4602      	mov	r2, r0
 80094c0:	683b      	ldr	r3, [r7, #0]
 80094c2:	1ad3      	subs	r3, r2, r3
 80094c4:	69ba      	ldr	r2, [r7, #24]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d302      	bcc.n	80094d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80094ca:	69bb      	ldr	r3, [r7, #24]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d101      	bne.n	80094d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80094d0:	2303      	movs	r3, #3
 80094d2:	e04e      	b.n	8009572 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	f003 0304 	and.w	r3, r3, #4
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d037      	beq.n	8009552 <UART_WaitOnFlagUntilTimeout+0xb2>
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	2b80      	cmp	r3, #128	@ 0x80
 80094e6:	d034      	beq.n	8009552 <UART_WaitOnFlagUntilTimeout+0xb2>
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	2b40      	cmp	r3, #64	@ 0x40
 80094ec:	d031      	beq.n	8009552 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	69db      	ldr	r3, [r3, #28]
 80094f4:	f003 0308 	and.w	r3, r3, #8
 80094f8:	2b08      	cmp	r3, #8
 80094fa:	d110      	bne.n	800951e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	2208      	movs	r2, #8
 8009502:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009504:	68f8      	ldr	r0, [r7, #12]
 8009506:	f000 f920 	bl	800974a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	2208      	movs	r2, #8
 800950e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	2200      	movs	r2, #0
 8009516:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800951a:	2301      	movs	r3, #1
 800951c:	e029      	b.n	8009572 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	69db      	ldr	r3, [r3, #28]
 8009524:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009528:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800952c:	d111      	bne.n	8009552 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8009536:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f000 f906 	bl	800974a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	2220      	movs	r2, #32
 8009542:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	2200      	movs	r2, #0
 800954a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800954e:	2303      	movs	r3, #3
 8009550:	e00f      	b.n	8009572 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	69da      	ldr	r2, [r3, #28]
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	4013      	ands	r3, r2
 800955c:	68ba      	ldr	r2, [r7, #8]
 800955e:	429a      	cmp	r2, r3
 8009560:	bf0c      	ite	eq
 8009562:	2301      	moveq	r3, #1
 8009564:	2300      	movne	r3, #0
 8009566:	b2db      	uxtb	r3, r3
 8009568:	461a      	mov	r2, r3
 800956a:	79fb      	ldrb	r3, [r7, #7]
 800956c:	429a      	cmp	r2, r3
 800956e:	d0a0      	beq.n	80094b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009570:	2300      	movs	r3, #0
}
 8009572:	4618      	mov	r0, r3
 8009574:	3710      	adds	r7, #16
 8009576:	46bd      	mov	sp, r7
 8009578:	bd80      	pop	{r7, pc}
	...

0800957c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b096      	sub	sp, #88	@ 0x58
 8009580:	af00      	add	r7, sp, #0
 8009582:	60f8      	str	r0, [r7, #12]
 8009584:	60b9      	str	r1, [r7, #8]
 8009586:	4613      	mov	r3, r2
 8009588:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	68ba      	ldr	r2, [r7, #8]
 800958e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	88fa      	ldrh	r2, [r7, #6]
 8009594:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	2200      	movs	r2, #0
 800959c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	2222      	movs	r2, #34	@ 0x22
 80095a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d02d      	beq.n	800960e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095b8:	4a40      	ldr	r2, [pc, #256]	@ (80096bc <UART_Start_Receive_DMA+0x140>)
 80095ba:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095c2:	4a3f      	ldr	r2, [pc, #252]	@ (80096c0 <UART_Start_Receive_DMA+0x144>)
 80095c4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095cc:	4a3d      	ldr	r2, [pc, #244]	@ (80096c4 <UART_Start_Receive_DMA+0x148>)
 80095ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80095d6:	2200      	movs	r2, #0
 80095d8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	3324      	adds	r3, #36	@ 0x24
 80095e6:	4619      	mov	r1, r3
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095ec:	461a      	mov	r2, r3
 80095ee:	88fb      	ldrh	r3, [r7, #6]
 80095f0:	f7fa ff50 	bl	8004494 <HAL_DMA_Start_IT>
 80095f4:	4603      	mov	r3, r0
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d009      	beq.n	800960e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	2210      	movs	r2, #16
 80095fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2220      	movs	r2, #32
 8009606:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800960a:	2301      	movs	r3, #1
 800960c:	e051      	b.n	80096b2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	691b      	ldr	r3, [r3, #16]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d018      	beq.n	8009648 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800961c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800961e:	e853 3f00 	ldrex	r3, [r3]
 8009622:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009626:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800962a:	657b      	str	r3, [r7, #84]	@ 0x54
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	461a      	mov	r2, r3
 8009632:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009634:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009636:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009638:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800963a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800963c:	e841 2300 	strex	r3, r2, [r1]
 8009640:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8009642:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009644:	2b00      	cmp	r3, #0
 8009646:	d1e6      	bne.n	8009616 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	3308      	adds	r3, #8
 800964e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009652:	e853 3f00 	ldrex	r3, [r3]
 8009656:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800965a:	f043 0301 	orr.w	r3, r3, #1
 800965e:	653b      	str	r3, [r7, #80]	@ 0x50
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	3308      	adds	r3, #8
 8009666:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009668:	637a      	str	r2, [r7, #52]	@ 0x34
 800966a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800966c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800966e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8009670:	e841 2300 	strex	r3, r2, [r1]
 8009674:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8009676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009678:	2b00      	cmp	r3, #0
 800967a:	d1e5      	bne.n	8009648 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	3308      	adds	r3, #8
 8009682:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009684:	697b      	ldr	r3, [r7, #20]
 8009686:	e853 3f00 	ldrex	r3, [r3]
 800968a:	613b      	str	r3, [r7, #16]
   return(result);
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009692:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	3308      	adds	r3, #8
 800969a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800969c:	623a      	str	r2, [r7, #32]
 800969e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096a0:	69f9      	ldr	r1, [r7, #28]
 80096a2:	6a3a      	ldr	r2, [r7, #32]
 80096a4:	e841 2300 	strex	r3, r2, [r1]
 80096a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80096aa:	69bb      	ldr	r3, [r7, #24]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d1e5      	bne.n	800967c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80096b0:	2300      	movs	r3, #0
}
 80096b2:	4618      	mov	r0, r3
 80096b4:	3758      	adds	r7, #88	@ 0x58
 80096b6:	46bd      	mov	sp, r7
 80096b8:	bd80      	pop	{r7, pc}
 80096ba:	bf00      	nop
 80096bc:	080098d5 	.word	0x080098d5
 80096c0:	08009a09 	.word	0x08009a09
 80096c4:	08009a4f 	.word	0x08009a4f

080096c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b08f      	sub	sp, #60	@ 0x3c
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d6:	6a3b      	ldr	r3, [r7, #32]
 80096d8:	e853 3f00 	ldrex	r3, [r3]
 80096dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80096de:	69fb      	ldr	r3, [r7, #28]
 80096e0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80096e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	461a      	mov	r2, r3
 80096ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80096ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80096f0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80096f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80096f6:	e841 2300 	strex	r3, r2, [r1]
 80096fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80096fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d1e6      	bne.n	80096d0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	3308      	adds	r3, #8
 8009708:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	e853 3f00 	ldrex	r3, [r3]
 8009710:	60bb      	str	r3, [r7, #8]
   return(result);
 8009712:	68bb      	ldr	r3, [r7, #8]
 8009714:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8009718:	633b      	str	r3, [r7, #48]	@ 0x30
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	3308      	adds	r3, #8
 8009720:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009722:	61ba      	str	r2, [r7, #24]
 8009724:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009726:	6979      	ldr	r1, [r7, #20]
 8009728:	69ba      	ldr	r2, [r7, #24]
 800972a:	e841 2300 	strex	r3, r2, [r1]
 800972e:	613b      	str	r3, [r7, #16]
   return(result);
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d1e5      	bne.n	8009702 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2220      	movs	r2, #32
 800973a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800973e:	bf00      	nop
 8009740:	373c      	adds	r7, #60	@ 0x3c
 8009742:	46bd      	mov	sp, r7
 8009744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009748:	4770      	bx	lr

0800974a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800974a:	b480      	push	{r7}
 800974c:	b095      	sub	sp, #84	@ 0x54
 800974e:	af00      	add	r7, sp, #0
 8009750:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009758:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800975a:	e853 3f00 	ldrex	r3, [r3]
 800975e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009762:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009766:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	461a      	mov	r2, r3
 800976e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009770:	643b      	str	r3, [r7, #64]	@ 0x40
 8009772:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009774:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009776:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009778:	e841 2300 	strex	r3, r2, [r1]
 800977c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800977e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009780:	2b00      	cmp	r3, #0
 8009782:	d1e6      	bne.n	8009752 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	3308      	adds	r3, #8
 800978a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800978c:	6a3b      	ldr	r3, [r7, #32]
 800978e:	e853 3f00 	ldrex	r3, [r3]
 8009792:	61fb      	str	r3, [r7, #28]
   return(result);
 8009794:	69fb      	ldr	r3, [r7, #28]
 8009796:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800979a:	f023 0301 	bic.w	r3, r3, #1
 800979e:	64bb      	str	r3, [r7, #72]	@ 0x48
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	3308      	adds	r3, #8
 80097a6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80097a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80097aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80097ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80097b0:	e841 2300 	strex	r3, r2, [r1]
 80097b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80097b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d1e3      	bne.n	8009784 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80097c0:	2b01      	cmp	r3, #1
 80097c2:	d118      	bne.n	80097f6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	e853 3f00 	ldrex	r3, [r3]
 80097d0:	60bb      	str	r3, [r7, #8]
   return(result);
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	f023 0310 	bic.w	r3, r3, #16
 80097d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	461a      	mov	r2, r3
 80097e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80097e2:	61bb      	str	r3, [r7, #24]
 80097e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097e6:	6979      	ldr	r1, [r7, #20]
 80097e8:	69ba      	ldr	r2, [r7, #24]
 80097ea:	e841 2300 	strex	r3, r2, [r1]
 80097ee:	613b      	str	r3, [r7, #16]
   return(result);
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d1e6      	bne.n	80097c4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2220      	movs	r2, #32
 80097fa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800980a:	bf00      	nop
 800980c:	3754      	adds	r7, #84	@ 0x54
 800980e:	46bd      	mov	sp, r7
 8009810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009814:	4770      	bx	lr

08009816 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8009816:	b580      	push	{r7, lr}
 8009818:	b090      	sub	sp, #64	@ 0x40
 800981a:	af00      	add	r7, sp, #0
 800981c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009822:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f003 0320 	and.w	r3, r3, #32
 800982e:	2b00      	cmp	r3, #0
 8009830:	d137      	bne.n	80098a2 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8009832:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009834:	2200      	movs	r2, #0
 8009836:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800983a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	3308      	adds	r3, #8
 8009840:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009844:	e853 3f00 	ldrex	r3, [r3]
 8009848:	623b      	str	r3, [r7, #32]
   return(result);
 800984a:	6a3b      	ldr	r3, [r7, #32]
 800984c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009850:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009852:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	3308      	adds	r3, #8
 8009858:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800985a:	633a      	str	r2, [r7, #48]	@ 0x30
 800985c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800985e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009860:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009862:	e841 2300 	strex	r3, r2, [r1]
 8009866:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800986a:	2b00      	cmp	r3, #0
 800986c:	d1e5      	bne.n	800983a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800986e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009874:	693b      	ldr	r3, [r7, #16]
 8009876:	e853 3f00 	ldrex	r3, [r3]
 800987a:	60fb      	str	r3, [r7, #12]
   return(result);
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009882:	637b      	str	r3, [r7, #52]	@ 0x34
 8009884:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	461a      	mov	r2, r3
 800988a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800988c:	61fb      	str	r3, [r7, #28]
 800988e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009890:	69b9      	ldr	r1, [r7, #24]
 8009892:	69fa      	ldr	r2, [r7, #28]
 8009894:	e841 2300 	strex	r3, r2, [r1]
 8009898:	617b      	str	r3, [r7, #20]
   return(result);
 800989a:	697b      	ldr	r3, [r7, #20]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d1e6      	bne.n	800986e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80098a0:	e004      	b.n	80098ac <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 80098a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80098a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80098a8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80098aa:	4798      	blx	r3
}
 80098ac:	bf00      	nop
 80098ae:	3740      	adds	r7, #64	@ 0x40
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098c0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80098c8:	68f8      	ldr	r0, [r7, #12]
 80098ca:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80098cc:	bf00      	nop
 80098ce:	3710      	adds	r7, #16
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b09c      	sub	sp, #112	@ 0x70
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098e0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f003 0320 	and.w	r3, r3, #32
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d171      	bne.n	80099d4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80098f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098f2:	2200      	movs	r2, #0
 80098f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80098f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009900:	e853 3f00 	ldrex	r3, [r3]
 8009904:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009906:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009908:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800990c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800990e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	461a      	mov	r2, r3
 8009914:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009916:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009918:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800991a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800991c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800991e:	e841 2300 	strex	r3, r2, [r1]
 8009922:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009924:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1e6      	bne.n	80098f8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800992a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	3308      	adds	r3, #8
 8009930:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009934:	e853 3f00 	ldrex	r3, [r3]
 8009938:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800993a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800993c:	f023 0301 	bic.w	r3, r3, #1
 8009940:	667b      	str	r3, [r7, #100]	@ 0x64
 8009942:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	3308      	adds	r3, #8
 8009948:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800994a:	647a      	str	r2, [r7, #68]	@ 0x44
 800994c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800994e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009950:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009952:	e841 2300 	strex	r3, r2, [r1]
 8009956:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009958:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800995a:	2b00      	cmp	r3, #0
 800995c:	d1e5      	bne.n	800992a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800995e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	3308      	adds	r3, #8
 8009964:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009968:	e853 3f00 	ldrex	r3, [r3]
 800996c:	623b      	str	r3, [r7, #32]
   return(result);
 800996e:	6a3b      	ldr	r3, [r7, #32]
 8009970:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009974:	663b      	str	r3, [r7, #96]	@ 0x60
 8009976:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	3308      	adds	r3, #8
 800997c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800997e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009980:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009982:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009984:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009986:	e841 2300 	strex	r3, r2, [r1]
 800998a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800998c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800998e:	2b00      	cmp	r3, #0
 8009990:	d1e5      	bne.n	800995e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009992:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009994:	2220      	movs	r2, #32
 8009996:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800999a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800999c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800999e:	2b01      	cmp	r3, #1
 80099a0:	d118      	bne.n	80099d4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a8:	693b      	ldr	r3, [r7, #16]
 80099aa:	e853 3f00 	ldrex	r3, [r3]
 80099ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	f023 0310 	bic.w	r3, r3, #16
 80099b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80099b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	461a      	mov	r2, r3
 80099be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80099c0:	61fb      	str	r3, [r7, #28]
 80099c2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c4:	69b9      	ldr	r1, [r7, #24]
 80099c6:	69fa      	ldr	r2, [r7, #28]
 80099c8:	e841 2300 	strex	r3, r2, [r1]
 80099cc:	617b      	str	r3, [r7, #20]
   return(result);
 80099ce:	697b      	ldr	r3, [r7, #20]
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d1e6      	bne.n	80099a2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80099d4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099d6:	2200      	movs	r2, #0
 80099d8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80099da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099dc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099de:	2b01      	cmp	r3, #1
 80099e0:	d109      	bne.n	80099f6 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 80099e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099e4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80099e8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80099ea:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 80099ee:	4611      	mov	r1, r2
 80099f0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80099f2:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80099f4:	e004      	b.n	8009a00 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 80099f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80099f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80099fc:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80099fe:	4798      	blx	r3
}
 8009a00:	bf00      	nop
 8009a02:	3770      	adds	r7, #112	@ 0x70
 8009a04:	46bd      	mov	sp, r7
 8009a06:	bd80      	pop	{r7, pc}

08009a08 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b084      	sub	sp, #16
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a14:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	2201      	movs	r2, #1
 8009a1a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009a20:	2b01      	cmp	r3, #1
 8009a22:	d10b      	bne.n	8009a3c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8009a2a:	68fa      	ldr	r2, [r7, #12]
 8009a2c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8009a30:	0852      	lsrs	r2, r2, #1
 8009a32:	b292      	uxth	r2, r2
 8009a34:	4611      	mov	r1, r2
 8009a36:	68f8      	ldr	r0, [r7, #12]
 8009a38:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009a3a:	e004      	b.n	8009a46 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009a42:	68f8      	ldr	r0, [r7, #12]
 8009a44:	4798      	blx	r3
}
 8009a46:	bf00      	nop
 8009a48:	3710      	adds	r7, #16
 8009a4a:	46bd      	mov	sp, r7
 8009a4c:	bd80      	pop	{r7, pc}

08009a4e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009a4e:	b580      	push	{r7, lr}
 8009a50:	b086      	sub	sp, #24
 8009a52:	af00      	add	r7, sp, #0
 8009a54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009a5a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009a5c:	697b      	ldr	r3, [r7, #20]
 8009a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009a62:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a6a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a76:	2b80      	cmp	r3, #128	@ 0x80
 8009a78:	d109      	bne.n	8009a8e <UART_DMAError+0x40>
 8009a7a:	693b      	ldr	r3, [r7, #16]
 8009a7c:	2b21      	cmp	r3, #33	@ 0x21
 8009a7e:	d106      	bne.n	8009a8e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	2200      	movs	r2, #0
 8009a84:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009a88:	6978      	ldr	r0, [r7, #20]
 8009a8a:	f7ff fe1d 	bl	80096c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009a8e:	697b      	ldr	r3, [r7, #20]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	689b      	ldr	r3, [r3, #8]
 8009a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a98:	2b40      	cmp	r3, #64	@ 0x40
 8009a9a:	d109      	bne.n	8009ab0 <UART_DMAError+0x62>
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	2b22      	cmp	r3, #34	@ 0x22
 8009aa0:	d106      	bne.n	8009ab0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009aaa:	6978      	ldr	r0, [r7, #20]
 8009aac:	f7ff fe4d 	bl	800974a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009ab6:	f043 0210 	orr.w	r2, r3, #16
 8009aba:	697b      	ldr	r3, [r7, #20]
 8009abc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009ac6:	6978      	ldr	r0, [r7, #20]
 8009ac8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009aca:	bf00      	nop
 8009acc:	3718      	adds	r7, #24
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	bd80      	pop	{r7, pc}

08009ad2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ad2:	b580      	push	{r7, lr}
 8009ad4:	b084      	sub	sp, #16
 8009ad6:	af00      	add	r7, sp, #0
 8009ad8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ade:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2200      	movs	r2, #0
 8009aec:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009af6:	68f8      	ldr	r0, [r7, #12]
 8009af8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009afa:	bf00      	nop
 8009afc:	3710      	adds	r7, #16
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}

08009b02 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b02:	b580      	push	{r7, lr}
 8009b04:	b088      	sub	sp, #32
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	e853 3f00 	ldrex	r3, [r3]
 8009b16:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009b1e:	61fb      	str	r3, [r7, #28]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	461a      	mov	r2, r3
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	61bb      	str	r3, [r7, #24]
 8009b2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b2c:	6979      	ldr	r1, [r7, #20]
 8009b2e:	69ba      	ldr	r2, [r7, #24]
 8009b30:	e841 2300 	strex	r3, r2, [r1]
 8009b34:	613b      	str	r3, [r7, #16]
   return(result);
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d1e6      	bne.n	8009b0a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2220      	movs	r2, #32
 8009b40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2200      	movs	r2, #0
 8009b48:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b54:	bf00      	nop
 8009b56:	3720      	adds	r7, #32
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	bd80      	pop	{r7, pc}

08009b5c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b083      	sub	sp, #12
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009b64:	bf00      	nop
 8009b66:	370c      	adds	r7, #12
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6e:	4770      	bx	lr

08009b70 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009b70:	b480      	push	{r7}
 8009b72:	b083      	sub	sp, #12
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009b78:	bf00      	nop
 8009b7a:	370c      	adds	r7, #12
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b82:	4770      	bx	lr

08009b84 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b083      	sub	sp, #12
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009b8c:	bf00      	nop
 8009b8e:	370c      	adds	r7, #12
 8009b90:	46bd      	mov	sp, r7
 8009b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b96:	4770      	bx	lr

08009b98 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b98:	b480      	push	{r7}
 8009b9a:	b085      	sub	sp, #20
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009ba6:	2b01      	cmp	r3, #1
 8009ba8:	d101      	bne.n	8009bae <HAL_UARTEx_DisableFifoMode+0x16>
 8009baa:	2302      	movs	r3, #2
 8009bac:	e027      	b.n	8009bfe <HAL_UARTEx_DisableFifoMode+0x66>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2201      	movs	r2, #1
 8009bb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	2224      	movs	r2, #36	@ 0x24
 8009bba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f022 0201 	bic.w	r2, r2, #1
 8009bd4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009bdc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	2200      	movs	r2, #0
 8009be2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2220      	movs	r2, #32
 8009bf0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009bfc:	2300      	movs	r3, #0
}
 8009bfe:	4618      	mov	r0, r3
 8009c00:	3714      	adds	r7, #20
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr

08009c0a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b084      	sub	sp, #16
 8009c0e:	af00      	add	r7, sp, #0
 8009c10:	6078      	str	r0, [r7, #4]
 8009c12:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d101      	bne.n	8009c22 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009c1e:	2302      	movs	r3, #2
 8009c20:	e02d      	b.n	8009c7e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2201      	movs	r2, #1
 8009c26:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2224      	movs	r2, #36	@ 0x24
 8009c2e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	681a      	ldr	r2, [r3, #0]
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	f022 0201 	bic.w	r2, r2, #1
 8009c48:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	689b      	ldr	r3, [r3, #8]
 8009c50:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	683a      	ldr	r2, [r7, #0]
 8009c5a:	430a      	orrs	r2, r1
 8009c5c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c5e:	6878      	ldr	r0, [r7, #4]
 8009c60:	f000 f850 	bl	8009d04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	68fa      	ldr	r2, [r7, #12]
 8009c6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	2220      	movs	r2, #32
 8009c70:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009c7c:	2300      	movs	r3, #0
}
 8009c7e:	4618      	mov	r0, r3
 8009c80:	3710      	adds	r7, #16
 8009c82:	46bd      	mov	sp, r7
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b084      	sub	sp, #16
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
 8009c8e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009c96:	2b01      	cmp	r3, #1
 8009c98:	d101      	bne.n	8009c9e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c9a:	2302      	movs	r3, #2
 8009c9c:	e02d      	b.n	8009cfa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	2224      	movs	r2, #36	@ 0x24
 8009caa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	681a      	ldr	r2, [r3, #0]
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f022 0201 	bic.w	r2, r2, #1
 8009cc4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	689b      	ldr	r3, [r3, #8]
 8009ccc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	683a      	ldr	r2, [r7, #0]
 8009cd6:	430a      	orrs	r2, r1
 8009cd8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 f812 	bl	8009d04 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	68fa      	ldr	r2, [r7, #12]
 8009ce6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2220      	movs	r2, #32
 8009cec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009cf8:	2300      	movs	r3, #0
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	3710      	adds	r7, #16
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	bd80      	pop	{r7, pc}
	...

08009d04 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009d04:	b480      	push	{r7}
 8009d06:	b085      	sub	sp, #20
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d108      	bne.n	8009d26 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	2201      	movs	r2, #1
 8009d18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009d24:	e031      	b.n	8009d8a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009d26:	2308      	movs	r3, #8
 8009d28:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009d2a:	2308      	movs	r3, #8
 8009d2c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	689b      	ldr	r3, [r3, #8]
 8009d34:	0e5b      	lsrs	r3, r3, #25
 8009d36:	b2db      	uxtb	r3, r3
 8009d38:	f003 0307 	and.w	r3, r3, #7
 8009d3c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	689b      	ldr	r3, [r3, #8]
 8009d44:	0f5b      	lsrs	r3, r3, #29
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	f003 0307 	and.w	r3, r3, #7
 8009d4c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d4e:	7bbb      	ldrb	r3, [r7, #14]
 8009d50:	7b3a      	ldrb	r2, [r7, #12]
 8009d52:	4911      	ldr	r1, [pc, #68]	@ (8009d98 <UARTEx_SetNbDataToProcess+0x94>)
 8009d54:	5c8a      	ldrb	r2, [r1, r2]
 8009d56:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009d5a:	7b3a      	ldrb	r2, [r7, #12]
 8009d5c:	490f      	ldr	r1, [pc, #60]	@ (8009d9c <UARTEx_SetNbDataToProcess+0x98>)
 8009d5e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d60:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d64:	b29a      	uxth	r2, r3
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d6c:	7bfb      	ldrb	r3, [r7, #15]
 8009d6e:	7b7a      	ldrb	r2, [r7, #13]
 8009d70:	4909      	ldr	r1, [pc, #36]	@ (8009d98 <UARTEx_SetNbDataToProcess+0x94>)
 8009d72:	5c8a      	ldrb	r2, [r1, r2]
 8009d74:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009d78:	7b7a      	ldrb	r2, [r7, #13]
 8009d7a:	4908      	ldr	r1, [pc, #32]	@ (8009d9c <UARTEx_SetNbDataToProcess+0x98>)
 8009d7c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d7e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d82:	b29a      	uxth	r2, r3
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009d8a:	bf00      	nop
 8009d8c:	3714      	adds	r7, #20
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	08009e5c 	.word	0x08009e5c
 8009d9c:	08009e64 	.word	0x08009e64

08009da0 <memset>:
 8009da0:	4402      	add	r2, r0
 8009da2:	4603      	mov	r3, r0
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d100      	bne.n	8009daa <memset+0xa>
 8009da8:	4770      	bx	lr
 8009daa:	f803 1b01 	strb.w	r1, [r3], #1
 8009dae:	e7f9      	b.n	8009da4 <memset+0x4>

08009db0 <__libc_init_array>:
 8009db0:	b570      	push	{r4, r5, r6, lr}
 8009db2:	4d0d      	ldr	r5, [pc, #52]	@ (8009de8 <__libc_init_array+0x38>)
 8009db4:	4c0d      	ldr	r4, [pc, #52]	@ (8009dec <__libc_init_array+0x3c>)
 8009db6:	1b64      	subs	r4, r4, r5
 8009db8:	10a4      	asrs	r4, r4, #2
 8009dba:	2600      	movs	r6, #0
 8009dbc:	42a6      	cmp	r6, r4
 8009dbe:	d109      	bne.n	8009dd4 <__libc_init_array+0x24>
 8009dc0:	4d0b      	ldr	r5, [pc, #44]	@ (8009df0 <__libc_init_array+0x40>)
 8009dc2:	4c0c      	ldr	r4, [pc, #48]	@ (8009df4 <__libc_init_array+0x44>)
 8009dc4:	f000 f826 	bl	8009e14 <_init>
 8009dc8:	1b64      	subs	r4, r4, r5
 8009dca:	10a4      	asrs	r4, r4, #2
 8009dcc:	2600      	movs	r6, #0
 8009dce:	42a6      	cmp	r6, r4
 8009dd0:	d105      	bne.n	8009dde <__libc_init_array+0x2e>
 8009dd2:	bd70      	pop	{r4, r5, r6, pc}
 8009dd4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dd8:	4798      	blx	r3
 8009dda:	3601      	adds	r6, #1
 8009ddc:	e7ee      	b.n	8009dbc <__libc_init_array+0xc>
 8009dde:	f855 3b04 	ldr.w	r3, [r5], #4
 8009de2:	4798      	blx	r3
 8009de4:	3601      	adds	r6, #1
 8009de6:	e7f2      	b.n	8009dce <__libc_init_array+0x1e>
 8009de8:	08009e74 	.word	0x08009e74
 8009dec:	08009e74 	.word	0x08009e74
 8009df0:	08009e74 	.word	0x08009e74
 8009df4:	08009e78 	.word	0x08009e78

08009df8 <memcpy>:
 8009df8:	440a      	add	r2, r1
 8009dfa:	4291      	cmp	r1, r2
 8009dfc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e00:	d100      	bne.n	8009e04 <memcpy+0xc>
 8009e02:	4770      	bx	lr
 8009e04:	b510      	push	{r4, lr}
 8009e06:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e0e:	4291      	cmp	r1, r2
 8009e10:	d1f9      	bne.n	8009e06 <memcpy+0xe>
 8009e12:	bd10      	pop	{r4, pc}

08009e14 <_init>:
 8009e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e16:	bf00      	nop
 8009e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e1a:	bc08      	pop	{r3}
 8009e1c:	469e      	mov	lr, r3
 8009e1e:	4770      	bx	lr

08009e20 <_fini>:
 8009e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e22:	bf00      	nop
 8009e24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e26:	bc08      	pop	{r3}
 8009e28:	469e      	mov	lr, r3
 8009e2a:	4770      	bx	lr
