
MODBUS2024ALT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e88  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009060  08009060  0000a060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090a0  080090a0  0000b220  2**0
                  CONTENTS
  4 .ARM          00000008  080090a0  080090a0  0000a0a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090a8  080090a8  0000b220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080090a8  080090a8  0000a0a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080090ac  080090ac  0000a0ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  080090b0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000dd4  20000220  080092d0  0000b220  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000ff4  080092d0  0000bff4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b220  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001642e  00000000  00000000  0000b250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a81  00000000  00000000  0002167e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  00024100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e0f  00000000  00000000  000252f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000270aa  00000000  00000000  000260ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015e8c  00000000  00000000  0004d1a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fe1ec  00000000  00000000  00063035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00161221  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e48  00000000  00000000  00161264  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  001660ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000220 	.word	0x20000220
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08009048 	.word	0x08009048

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000224 	.word	0x20000224
 8000214:	08009048 	.word	0x08009048

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__gedf2>:
 80009b4:	f04f 3cff 	mov.w	ip, #4294967295
 80009b8:	e006      	b.n	80009c8 <__cmpdf2+0x4>
 80009ba:	bf00      	nop

080009bc <__ledf2>:
 80009bc:	f04f 0c01 	mov.w	ip, #1
 80009c0:	e002      	b.n	80009c8 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__cmpdf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009cc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d8:	bf18      	it	ne
 80009da:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009de:	d01b      	beq.n	8000a18 <__cmpdf2+0x54>
 80009e0:	b001      	add	sp, #4
 80009e2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009e6:	bf0c      	ite	eq
 80009e8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ec:	ea91 0f03 	teqne	r1, r3
 80009f0:	bf02      	ittt	eq
 80009f2:	ea90 0f02 	teqeq	r0, r2
 80009f6:	2000      	moveq	r0, #0
 80009f8:	4770      	bxeq	lr
 80009fa:	f110 0f00 	cmn.w	r0, #0
 80009fe:	ea91 0f03 	teq	r1, r3
 8000a02:	bf58      	it	pl
 8000a04:	4299      	cmppl	r1, r3
 8000a06:	bf08      	it	eq
 8000a08:	4290      	cmpeq	r0, r2
 8000a0a:	bf2c      	ite	cs
 8000a0c:	17d8      	asrcs	r0, r3, #31
 8000a0e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a12:	f040 0001 	orr.w	r0, r0, #1
 8000a16:	4770      	bx	lr
 8000a18:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d102      	bne.n	8000a28 <__cmpdf2+0x64>
 8000a22:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a26:	d107      	bne.n	8000a38 <__cmpdf2+0x74>
 8000a28:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a2c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a30:	d1d6      	bne.n	80009e0 <__cmpdf2+0x1c>
 8000a32:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a36:	d0d3      	beq.n	80009e0 <__cmpdf2+0x1c>
 8000a38:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a3c:	4770      	bx	lr
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdrcmple>:
 8000a40:	4684      	mov	ip, r0
 8000a42:	4610      	mov	r0, r2
 8000a44:	4662      	mov	r2, ip
 8000a46:	468c      	mov	ip, r1
 8000a48:	4619      	mov	r1, r3
 8000a4a:	4663      	mov	r3, ip
 8000a4c:	e000      	b.n	8000a50 <__aeabi_cdcmpeq>
 8000a4e:	bf00      	nop

08000a50 <__aeabi_cdcmpeq>:
 8000a50:	b501      	push	{r0, lr}
 8000a52:	f7ff ffb7 	bl	80009c4 <__cmpdf2>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	bf48      	it	mi
 8000a5a:	f110 0f00 	cmnmi.w	r0, #0
 8000a5e:	bd01      	pop	{r0, pc}

08000a60 <__aeabi_dcmpeq>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff fff4 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a68:	bf0c      	ite	eq
 8000a6a:	2001      	moveq	r0, #1
 8000a6c:	2000      	movne	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmplt>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffea 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a7c:	bf34      	ite	cc
 8000a7e:	2001      	movcc	r0, #1
 8000a80:	2000      	movcs	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmple>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffe0 	bl	8000a50 <__aeabi_cdcmpeq>
 8000a90:	bf94      	ite	ls
 8000a92:	2001      	movls	r0, #1
 8000a94:	2000      	movhi	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmpge>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffce 	bl	8000a40 <__aeabi_cdrcmple>
 8000aa4:	bf94      	ite	ls
 8000aa6:	2001      	movls	r0, #1
 8000aa8:	2000      	movhi	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmpgt>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffc4 	bl	8000a40 <__aeabi_cdrcmple>
 8000ab8:	bf34      	ite	cc
 8000aba:	2001      	movcc	r0, #1
 8000abc:	2000      	movcs	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2iz>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000acc:	d215      	bcs.n	8000afa <__aeabi_d2iz+0x36>
 8000ace:	d511      	bpl.n	8000af4 <__aeabi_d2iz+0x30>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d912      	bls.n	8000b00 <__aeabi_d2iz+0x3c>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aea:	fa23 f002 	lsr.w	r0, r3, r2
 8000aee:	bf18      	it	ne
 8000af0:	4240      	negne	r0, r0
 8000af2:	4770      	bx	lr
 8000af4:	f04f 0000 	mov.w	r0, #0
 8000af8:	4770      	bx	lr
 8000afa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000afe:	d105      	bne.n	8000b0c <__aeabi_d2iz+0x48>
 8000b00:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b04:	bf08      	it	eq
 8000b06:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b0a:	4770      	bx	lr
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop

08000b14 <__aeabi_d2f>:
 8000b14:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b18:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000b1c:	bf24      	itt	cs
 8000b1e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b22:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b26:	d90d      	bls.n	8000b44 <__aeabi_d2f+0x30>
 8000b28:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b2c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b30:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b34:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b38:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b3c:	bf08      	it	eq
 8000b3e:	f020 0001 	biceq.w	r0, r0, #1
 8000b42:	4770      	bx	lr
 8000b44:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b48:	d121      	bne.n	8000b8e <__aeabi_d2f+0x7a>
 8000b4a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b4e:	bfbc      	itt	lt
 8000b50:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b54:	4770      	bxlt	lr
 8000b56:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b5a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b5e:	f1c2 0218 	rsb	r2, r2, #24
 8000b62:	f1c2 0c20 	rsb	ip, r2, #32
 8000b66:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b6a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b6e:	bf18      	it	ne
 8000b70:	f040 0001 	orrne.w	r0, r0, #1
 8000b74:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b78:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b7c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b80:	ea40 000c 	orr.w	r0, r0, ip
 8000b84:	fa23 f302 	lsr.w	r3, r3, r2
 8000b88:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b8c:	e7cc      	b.n	8000b28 <__aeabi_d2f+0x14>
 8000b8e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b92:	d107      	bne.n	8000ba4 <__aeabi_d2f+0x90>
 8000b94:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b98:	bf1e      	ittt	ne
 8000b9a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b9e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ba2:	4770      	bxne	lr
 8000ba4:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000bac:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_uldivmod>:
 8000bb4:	b953      	cbnz	r3, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb6:	b94a      	cbnz	r2, 8000bcc <__aeabi_uldivmod+0x18>
 8000bb8:	2900      	cmp	r1, #0
 8000bba:	bf08      	it	eq
 8000bbc:	2800      	cmpeq	r0, #0
 8000bbe:	bf1c      	itt	ne
 8000bc0:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc4:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc8:	f000 b96a 	b.w	8000ea0 <__aeabi_idiv0>
 8000bcc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd4:	f000 f806 	bl	8000be4 <__udivmoddi4>
 8000bd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be0:	b004      	add	sp, #16
 8000be2:	4770      	bx	lr

08000be4 <__udivmoddi4>:
 8000be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be8:	9d08      	ldr	r5, [sp, #32]
 8000bea:	460c      	mov	r4, r1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d14e      	bne.n	8000c8e <__udivmoddi4+0xaa>
 8000bf0:	4694      	mov	ip, r2
 8000bf2:	458c      	cmp	ip, r1
 8000bf4:	4686      	mov	lr, r0
 8000bf6:	fab2 f282 	clz	r2, r2
 8000bfa:	d962      	bls.n	8000cc2 <__udivmoddi4+0xde>
 8000bfc:	b14a      	cbz	r2, 8000c12 <__udivmoddi4+0x2e>
 8000bfe:	f1c2 0320 	rsb	r3, r2, #32
 8000c02:	4091      	lsls	r1, r2
 8000c04:	fa20 f303 	lsr.w	r3, r0, r3
 8000c08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c0c:	4319      	orrs	r1, r3
 8000c0e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c16:	fa1f f68c 	uxth.w	r6, ip
 8000c1a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000c1e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c22:	fb07 1114 	mls	r1, r7, r4, r1
 8000c26:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2a:	fb04 f106 	mul.w	r1, r4, r6
 8000c2e:	4299      	cmp	r1, r3
 8000c30:	d90a      	bls.n	8000c48 <__udivmoddi4+0x64>
 8000c32:	eb1c 0303 	adds.w	r3, ip, r3
 8000c36:	f104 30ff 	add.w	r0, r4, #4294967295
 8000c3a:	f080 8112 	bcs.w	8000e62 <__udivmoddi4+0x27e>
 8000c3e:	4299      	cmp	r1, r3
 8000c40:	f240 810f 	bls.w	8000e62 <__udivmoddi4+0x27e>
 8000c44:	3c02      	subs	r4, #2
 8000c46:	4463      	add	r3, ip
 8000c48:	1a59      	subs	r1, r3, r1
 8000c4a:	fa1f f38e 	uxth.w	r3, lr
 8000c4e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c52:	fb07 1110 	mls	r1, r7, r0, r1
 8000c56:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c5a:	fb00 f606 	mul.w	r6, r0, r6
 8000c5e:	429e      	cmp	r6, r3
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x94>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c6a:	f080 80fc 	bcs.w	8000e66 <__udivmoddi4+0x282>
 8000c6e:	429e      	cmp	r6, r3
 8000c70:	f240 80f9 	bls.w	8000e66 <__udivmoddi4+0x282>
 8000c74:	4463      	add	r3, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	1b9b      	subs	r3, r3, r6
 8000c7a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11d      	cbz	r5, 8000c8a <__udivmoddi4+0xa6>
 8000c82:	40d3      	lsrs	r3, r2
 8000c84:	2200      	movs	r2, #0
 8000c86:	e9c5 3200 	strd	r3, r2, [r5]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d905      	bls.n	8000c9e <__udivmoddi4+0xba>
 8000c92:	b10d      	cbz	r5, 8000c98 <__udivmoddi4+0xb4>
 8000c94:	e9c5 0100 	strd	r0, r1, [r5]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4608      	mov	r0, r1
 8000c9c:	e7f5      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d146      	bne.n	8000d34 <__udivmoddi4+0x150>
 8000ca6:	42a3      	cmp	r3, r4
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xcc>
 8000caa:	4290      	cmp	r0, r2
 8000cac:	f0c0 80f0 	bcc.w	8000e90 <__udivmoddi4+0x2ac>
 8000cb0:	1a86      	subs	r6, r0, r2
 8000cb2:	eb64 0303 	sbc.w	r3, r4, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	2d00      	cmp	r5, #0
 8000cba:	d0e6      	beq.n	8000c8a <__udivmoddi4+0xa6>
 8000cbc:	e9c5 6300 	strd	r6, r3, [r5]
 8000cc0:	e7e3      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000cc2:	2a00      	cmp	r2, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x204>
 8000cc8:	eba1 040c 	sub.w	r4, r1, ip
 8000ccc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cd0:	fa1f f78c 	uxth.w	r7, ip
 8000cd4:	2101      	movs	r1, #1
 8000cd6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000cda:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cde:	fb08 4416 	mls	r4, r8, r6, r4
 8000ce2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ce6:	fb07 f006 	mul.w	r0, r7, r6
 8000cea:	4298      	cmp	r0, r3
 8000cec:	d908      	bls.n	8000d00 <__udivmoddi4+0x11c>
 8000cee:	eb1c 0303 	adds.w	r3, ip, r3
 8000cf2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x11a>
 8000cf8:	4298      	cmp	r0, r3
 8000cfa:	f200 80cd 	bhi.w	8000e98 <__udivmoddi4+0x2b4>
 8000cfe:	4626      	mov	r6, r4
 8000d00:	1a1c      	subs	r4, r3, r0
 8000d02:	fa1f f38e 	uxth.w	r3, lr
 8000d06:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d0a:	fb08 4410 	mls	r4, r8, r0, r4
 8000d0e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d12:	fb00 f707 	mul.w	r7, r0, r7
 8000d16:	429f      	cmp	r7, r3
 8000d18:	d908      	bls.n	8000d2c <__udivmoddi4+0x148>
 8000d1a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d22:	d202      	bcs.n	8000d2a <__udivmoddi4+0x146>
 8000d24:	429f      	cmp	r7, r3
 8000d26:	f200 80b0 	bhi.w	8000e8a <__udivmoddi4+0x2a6>
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	1bdb      	subs	r3, r3, r7
 8000d2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d32:	e7a5      	b.n	8000c80 <__udivmoddi4+0x9c>
 8000d34:	f1c1 0620 	rsb	r6, r1, #32
 8000d38:	408b      	lsls	r3, r1
 8000d3a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d3e:	431f      	orrs	r7, r3
 8000d40:	fa20 fc06 	lsr.w	ip, r0, r6
 8000d44:	fa04 f301 	lsl.w	r3, r4, r1
 8000d48:	ea43 030c 	orr.w	r3, r3, ip
 8000d4c:	40f4      	lsrs	r4, r6
 8000d4e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d52:	0c38      	lsrs	r0, r7, #16
 8000d54:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000d58:	fbb4 fef0 	udiv	lr, r4, r0
 8000d5c:	fa1f fc87 	uxth.w	ip, r7
 8000d60:	fb00 441e 	mls	r4, r0, lr, r4
 8000d64:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d68:	fb0e f90c 	mul.w	r9, lr, ip
 8000d6c:	45a1      	cmp	r9, r4
 8000d6e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d72:	d90a      	bls.n	8000d8a <__udivmoddi4+0x1a6>
 8000d74:	193c      	adds	r4, r7, r4
 8000d76:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000d7a:	f080 8084 	bcs.w	8000e86 <__udivmoddi4+0x2a2>
 8000d7e:	45a1      	cmp	r9, r4
 8000d80:	f240 8081 	bls.w	8000e86 <__udivmoddi4+0x2a2>
 8000d84:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d88:	443c      	add	r4, r7
 8000d8a:	eba4 0409 	sub.w	r4, r4, r9
 8000d8e:	fa1f f983 	uxth.w	r9, r3
 8000d92:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d96:	fb00 4413 	mls	r4, r0, r3, r4
 8000d9a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d9e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000da2:	45a4      	cmp	ip, r4
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x1d2>
 8000da6:	193c      	adds	r4, r7, r4
 8000da8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000dac:	d267      	bcs.n	8000e7e <__udivmoddi4+0x29a>
 8000dae:	45a4      	cmp	ip, r4
 8000db0:	d965      	bls.n	8000e7e <__udivmoddi4+0x29a>
 8000db2:	3b02      	subs	r3, #2
 8000db4:	443c      	add	r4, r7
 8000db6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000dba:	fba0 9302 	umull	r9, r3, r0, r2
 8000dbe:	eba4 040c 	sub.w	r4, r4, ip
 8000dc2:	429c      	cmp	r4, r3
 8000dc4:	46ce      	mov	lr, r9
 8000dc6:	469c      	mov	ip, r3
 8000dc8:	d351      	bcc.n	8000e6e <__udivmoddi4+0x28a>
 8000dca:	d04e      	beq.n	8000e6a <__udivmoddi4+0x286>
 8000dcc:	b155      	cbz	r5, 8000de4 <__udivmoddi4+0x200>
 8000dce:	ebb8 030e 	subs.w	r3, r8, lr
 8000dd2:	eb64 040c 	sbc.w	r4, r4, ip
 8000dd6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dda:	40cb      	lsrs	r3, r1
 8000ddc:	431e      	orrs	r6, r3
 8000dde:	40cc      	lsrs	r4, r1
 8000de0:	e9c5 6400 	strd	r6, r4, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	e750      	b.n	8000c8a <__udivmoddi4+0xa6>
 8000de8:	f1c2 0320 	rsb	r3, r2, #32
 8000dec:	fa20 f103 	lsr.w	r1, r0, r3
 8000df0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df4:	fa24 f303 	lsr.w	r3, r4, r3
 8000df8:	4094      	lsls	r4, r2
 8000dfa:	430c      	orrs	r4, r1
 8000dfc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e00:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e04:	fa1f f78c 	uxth.w	r7, ip
 8000e08:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e0c:	fb08 3110 	mls	r1, r8, r0, r3
 8000e10:	0c23      	lsrs	r3, r4, #16
 8000e12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e16:	fb00 f107 	mul.w	r1, r0, r7
 8000e1a:	4299      	cmp	r1, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x24c>
 8000e1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e22:	f100 36ff 	add.w	r6, r0, #4294967295
 8000e26:	d22c      	bcs.n	8000e82 <__udivmoddi4+0x29e>
 8000e28:	4299      	cmp	r1, r3
 8000e2a:	d92a      	bls.n	8000e82 <__udivmoddi4+0x29e>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4463      	add	r3, ip
 8000e30:	1a5b      	subs	r3, r3, r1
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb3 f1f8 	udiv	r1, r3, r8
 8000e38:	fb08 3311 	mls	r3, r8, r1, r3
 8000e3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e40:	fb01 f307 	mul.w	r3, r1, r7
 8000e44:	42a3      	cmp	r3, r4
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x276>
 8000e48:	eb1c 0404 	adds.w	r4, ip, r4
 8000e4c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000e50:	d213      	bcs.n	8000e7a <__udivmoddi4+0x296>
 8000e52:	42a3      	cmp	r3, r4
 8000e54:	d911      	bls.n	8000e7a <__udivmoddi4+0x296>
 8000e56:	3902      	subs	r1, #2
 8000e58:	4464      	add	r4, ip
 8000e5a:	1ae4      	subs	r4, r4, r3
 8000e5c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000e60:	e739      	b.n	8000cd6 <__udivmoddi4+0xf2>
 8000e62:	4604      	mov	r4, r0
 8000e64:	e6f0      	b.n	8000c48 <__udivmoddi4+0x64>
 8000e66:	4608      	mov	r0, r1
 8000e68:	e706      	b.n	8000c78 <__udivmoddi4+0x94>
 8000e6a:	45c8      	cmp	r8, r9
 8000e6c:	d2ae      	bcs.n	8000dcc <__udivmoddi4+0x1e8>
 8000e6e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000e72:	eb63 0c07 	sbc.w	ip, r3, r7
 8000e76:	3801      	subs	r0, #1
 8000e78:	e7a8      	b.n	8000dcc <__udivmoddi4+0x1e8>
 8000e7a:	4631      	mov	r1, r6
 8000e7c:	e7ed      	b.n	8000e5a <__udivmoddi4+0x276>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	e799      	b.n	8000db6 <__udivmoddi4+0x1d2>
 8000e82:	4630      	mov	r0, r6
 8000e84:	e7d4      	b.n	8000e30 <__udivmoddi4+0x24c>
 8000e86:	46d6      	mov	lr, sl
 8000e88:	e77f      	b.n	8000d8a <__udivmoddi4+0x1a6>
 8000e8a:	4463      	add	r3, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e74d      	b.n	8000d2c <__udivmoddi4+0x148>
 8000e90:	4606      	mov	r6, r0
 8000e92:	4623      	mov	r3, r4
 8000e94:	4608      	mov	r0, r1
 8000e96:	e70f      	b.n	8000cb8 <__udivmoddi4+0xd4>
 8000e98:	3e02      	subs	r6, #2
 8000e9a:	4463      	add	r3, ip
 8000e9c:	e730      	b.n	8000d00 <__udivmoddi4+0x11c>
 8000e9e:	bf00      	nop

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8000ee0 <modbus_1t5_Timeout+0x3c>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2201      	movs	r2, #1
 8000eae:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ee0 <modbus_1t5_Timeout+0x3c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	691b      	ldr	r3, [r3, #16]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2200      	movs	r2, #0
 8000eba:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000ebc:	4b08      	ldr	r3, [pc, #32]	@ (8000ee0 <modbus_1t5_Timeout+0x3c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	691b      	ldr	r3, [r3, #16]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <modbus_1t5_Timeout+0x3c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	691b      	ldr	r3, [r3, #16]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	f042 0201 	orr.w	r2, r2, #1
 8000ed2:	601a      	str	r2, [r3, #0]
}
 8000ed4:	bf00      	nop
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	2000023c 	.word	0x2000023c

08000ee4 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b083      	sub	sp, #12
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000eec:	4b04      	ldr	r3, [pc, #16]	@ (8000f00 <modbus_3t5_Timeout+0x1c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	755a      	strb	r2, [r3, #21]

}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	2000023c 	.word	0x2000023c

08000f04 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b082      	sub	sp, #8
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f006 ff39 	bl	8007d84 <HAL_UART_GetError>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b20      	cmp	r3, #32
 8000f16:	d101      	bne.n	8000f1c <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 8000f18:	f7ff ffc4 	bl	8000ea4 <modbus_1t5_Timeout>

	}
}
 8000f1c:	bf00      	nop
 8000f1e:	3708      	adds	r7, #8
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
 8000f2c:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000f2e:	4a25      	ldr	r2, [pc, #148]	@ (8000fc4 <Modbus_init+0xa0>)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000f34:	4b23      	ldr	r3, [pc, #140]	@ (8000fc4 <Modbus_init+0xa0>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	683a      	ldr	r2, [r7, #0]
 8000f3a:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	691b      	ldr	r3, [r3, #16]
 8000f40:	4a21      	ldr	r2, [pc, #132]	@ (8000fc8 <Modbus_init+0xa4>)
 8000f42:	210e      	movs	r1, #14
 8000f44:	4618      	mov	r0, r3
 8000f46:	f005 f961 	bl	800620c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	68db      	ldr	r3, [r3, #12]
 8000f4e:	2110      	movs	r1, #16
 8000f50:	4618      	mov	r0, r3
 8000f52:	f006 fec1 	bl	8007cd8 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f006 fed8 	bl	8007d10 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	4a19      	ldr	r2, [pc, #100]	@ (8000fcc <Modbus_init+0xa8>)
 8000f66:	2104      	movs	r1, #4
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f006 f99f 	bl	80072ac <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 8000f6e:	4b15      	ldr	r3, [pc, #84]	@ (8000fc4 <Modbus_init+0xa0>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 8000f74:	4b13      	ldr	r3, [pc, #76]	@ (8000fc4 <Modbus_init+0xa0>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b12      	ldr	r3, [pc, #72]	@ (8000fc4 <Modbus_init+0xa0>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 8000f80:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 8000f84:	4413      	add	r3, r2
 8000f86:	3302      	adds	r3, #2
 8000f88:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	f006 fac7 	bl	8007520 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000f92:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc4 <Modbus_init+0xa0>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	691b      	ldr	r3, [r3, #16]
 8000f98:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000f9c:	b2db      	uxtb	r3, r3
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d10c      	bne.n	8000fbc <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000fa2:	4b08      	ldr	r3, [pc, #32]	@ (8000fc4 <Modbus_init+0xa0>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	691b      	ldr	r3, [r3, #16]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f004 f90b 	bl	80051c4 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000fae:	4b05      	ldr	r3, [pc, #20]	@ (8000fc4 <Modbus_init+0xa0>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	691b      	ldr	r3, [r3, #16]
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f004 fb5a 	bl	8005670 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	2000023c 	.word	0x2000023c
 8000fc8:	08000ee5 	.word	0x08000ee5
 8000fcc:	08000f05 	.word	0x08000f05

08000fd0 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000fdc:	23ff      	movs	r3, #255	@ 0xff
 8000fde:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000fe0:	23ff      	movs	r3, #255	@ 0xff
 8000fe2:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000fe4:	e013      	b.n	800100e <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	1c5a      	adds	r2, r3, #1
 8000fea:	607a      	str	r2, [r7, #4]
 8000fec:	781a      	ldrb	r2, [r3, #0]
 8000fee:	7bbb      	ldrb	r3, [r7, #14]
 8000ff0:	4053      	eors	r3, r2
 8000ff2:	b2db      	uxtb	r3, r3
 8000ff4:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 8000ff6:	4a0f      	ldr	r2, [pc, #60]	@ (8001034 <CRC16+0x64>)
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	781a      	ldrb	r2, [r3, #0]
 8000ffe:	7bfb      	ldrb	r3, [r7, #15]
 8001000:	4053      	eors	r3, r2
 8001002:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001004:	4a0c      	ldr	r2, [pc, #48]	@ (8001038 <CRC16+0x68>)
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	4413      	add	r3, r2
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 800100e:	883b      	ldrh	r3, [r7, #0]
 8001010:	1e5a      	subs	r2, r3, #1
 8001012:	803a      	strh	r2, [r7, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d1e6      	bne.n	8000fe6 <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 8001018:	7bfb      	ldrb	r3, [r7, #15]
 800101a:	021b      	lsls	r3, r3, #8
 800101c:	b21a      	sxth	r2, r3
 800101e:	7bbb      	ldrb	r3, [r7, #14]
 8001020:	b21b      	sxth	r3, r3
 8001022:	4313      	orrs	r3, r2
 8001024:	b21b      	sxth	r3, r3
 8001026:	b29b      	uxth	r3, r3
}
 8001028:	4618      	mov	r0, r3
 800102a:	3714      	adds	r7, #20
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	20000100 	.word	0x20000100
 8001038:	20000000 	.word	0x20000000

0800103c <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8001042:	4b7e      	ldr	r3, [pc, #504]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	7ddb      	ldrb	r3, [r3, #23]
 8001048:	3b01      	subs	r3, #1
 800104a:	2b03      	cmp	r3, #3
 800104c:	d80a      	bhi.n	8001064 <Modbus_Protocal_Worker+0x28>
 800104e:	a201      	add	r2, pc, #4	@ (adr r2, 8001054 <Modbus_Protocal_Worker+0x18>)
 8001050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001054:	0800106f 	.word	0x0800106f
 8001058:	08001203 	.word	0x08001203
 800105c:	080010fb 	.word	0x080010fb
 8001060:	0800113f 	.word	0x0800113f
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001064:	4b75      	ldr	r3, [pc, #468]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2201      	movs	r2, #1
 800106a:	75da      	strb	r2, [r3, #23]
		break;
 800106c:	e0e1      	b.n	8001232 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 800106e:	4b73      	ldr	r3, [pc, #460]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8001076:	2b00      	cmp	r3, #0
 8001078:	d006      	beq.n	8001088 <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 800107a:	4b70      	ldr	r3, [pc, #448]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	2202      	movs	r2, #2
 8001080:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 8001082:	f000 f9cd 	bl	8001420 <Modbus_Emission>
 8001086:	e018      	b.n	80010ba <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 8001088:	4b6c      	ldr	r3, [pc, #432]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	68db      	ldr	r3, [r3, #12]
 800108e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8001092:	4b6a      	ldr	r3, [pc, #424]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800109c:	b29b      	uxth	r3, r3
 800109e:	429a      	cmp	r2, r3
 80010a0:	d00b      	beq.n	80010ba <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 80010a2:	4b66      	ldr	r3, [pc, #408]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2200      	movs	r2, #0
 80010a8:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80010aa:	4b64      	ldr	r3, [pc, #400]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2200      	movs	r2, #0
 80010b0:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80010b2:	4b62      	ldr	r3, [pc, #392]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	2203      	movs	r2, #3
 80010b8:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80010ba:	4b60      	ldr	r3, [pc, #384]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80010c4:	2b20      	cmp	r3, #32
 80010c6:	f040 80ad 	bne.w	8001224 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80010ca:	4b5c      	ldr	r3, [pc, #368]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80010d4:	4b59      	ldr	r3, [pc, #356]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80010da:	4b58      	ldr	r3, [pc, #352]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	4b57      	ldr	r3, [pc, #348]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 80010e6:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80010ea:	4413      	add	r3, r2
 80010ec:	3302      	adds	r3, #2
 80010ee:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80010f2:	4619      	mov	r1, r3
 80010f4:	f006 fa14 	bl	8007520 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 80010f8:	e094      	b.n	8001224 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 80010fa:	4b50      	ldr	r3, [pc, #320]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	7d1b      	ldrb	r3, [r3, #20]
 8001100:	2b00      	cmp	r3, #0
 8001102:	f000 8091 	beq.w	8001228 <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001106:	4b4d      	ldr	r3, [pc, #308]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	22fe      	movs	r2, #254	@ 0xfe
 800110c:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800110e:	4b4b      	ldr	r3, [pc, #300]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 8001118:	4b48      	ldr	r3, [pc, #288]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 8001128:	4b44      	ldr	r3, [pc, #272]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 800112a:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 800112c:	1a8a      	subs	r2, r1, r2
 800112e:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8001130:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8001134:	4b41      	ldr	r3, [pc, #260]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2204      	movs	r2, #4
 800113a:	75da      	strb	r2, [r3, #23]
		}
		break;
 800113c:	e074      	b.n	8001228 <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 800113e:	4b3f      	ldr	r3, [pc, #252]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f993 3016 	ldrsb.w	r3, [r3, #22]
 8001146:	f113 0f02 	cmn.w	r3, #2
 800114a:	d150      	bne.n	80011ee <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 800114c:	4b3b      	ldr	r3, [pc, #236]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2200      	movs	r2, #0
 8001152:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001154:	4b39      	ldr	r3, [pc, #228]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f203 2272 	addw	r2, r3, #626	@ 0x272
 800115c:	4b37      	ldr	r3, [pc, #220]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001164:	3b02      	subs	r3, #2
 8001166:	4619      	mov	r1, r3
 8001168:	4610      	mov	r0, r2
 800116a:	f7ff ff31 	bl	8000fd0 <CRC16>
 800116e:	4603      	mov	r3, r0
 8001170:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001172:	793a      	ldrb	r2, [r7, #4]
 8001174:	4b31      	ldr	r3, [pc, #196]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 8001176:	6819      	ldr	r1, [r3, #0]
 8001178:	4b30      	ldr	r3, [pc, #192]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8001180:	3b02      	subs	r3, #2
 8001182:	440b      	add	r3, r1
 8001184:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 8001188:	429a      	cmp	r2, r3
 800118a:	d10c      	bne.n	80011a6 <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 800118c:	797a      	ldrb	r2, [r7, #5]
 800118e:	4b2b      	ldr	r3, [pc, #172]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 8001190:	6819      	ldr	r1, [r3, #0]
 8001192:	4b2a      	ldr	r3, [pc, #168]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 800119a:	3b01      	subs	r3, #1
 800119c:	440b      	add	r3, r1
 800119e:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80011a2:	429a      	cmp	r2, r3
 80011a4:	d004      	beq.n	80011b0 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80011a6:	4b25      	ldr	r3, [pc, #148]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	22ff      	movs	r2, #255	@ 0xff
 80011ac:	759a      	strb	r2, [r3, #22]
				break;
 80011ae:	e040      	b.n	8001232 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80011b0:	4b22      	ldr	r3, [pc, #136]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 80011b8:	4b20      	ldr	r3, [pc, #128]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	781b      	ldrb	r3, [r3, #0]
 80011be:	429a      	cmp	r2, r3
 80011c0:	d113      	bne.n	80011ea <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80011c2:	4b1e      	ldr	r3, [pc, #120]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80011ca:	4b1c      	ldr	r3, [pc, #112]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 80011d2:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80011d4:	4b19      	ldr	r3, [pc, #100]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80011dc:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80011de:	461a      	mov	r2, r3
 80011e0:	f007 ff24 	bl	800902c <memcpy>

			//execute command
			Modbus_frame_response();
 80011e4:	f000 f904 	bl	80013f0 <Modbus_frame_response>
 80011e8:	e001      	b.n	80011ee <Modbus_Protocal_Worker+0x1b2>
				break;
 80011ea:	bf00      	nop
					}
		break;


	}
}
 80011ec:	e021      	b.n	8001232 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 80011ee:	4b13      	ldr	r3, [pc, #76]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	7d5b      	ldrb	r3, [r3, #21]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d019      	beq.n	800122c <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 80011f8:	4b10      	ldr	r3, [pc, #64]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	2201      	movs	r2, #1
 80011fe:	75da      	strb	r2, [r3, #23]
		break;
 8001200:	e014      	b.n	800122c <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001202:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	68db      	ldr	r3, [r3, #12]
 8001208:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800120c:	2b20      	cmp	r3, #32
 800120e:	d10f      	bne.n	8001230 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8001210:	4b0a      	ldr	r3, [pc, #40]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800121a:	4b08      	ldr	r3, [pc, #32]	@ (800123c <Modbus_Protocal_Worker+0x200>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2201      	movs	r2, #1
 8001220:	75da      	strb	r2, [r3, #23]
		break;
 8001222:	e005      	b.n	8001230 <Modbus_Protocal_Worker+0x1f4>
		break;
 8001224:	bf00      	nop
 8001226:	e004      	b.n	8001232 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001228:	bf00      	nop
 800122a:	e002      	b.n	8001232 <Modbus_Protocal_Worker+0x1f6>
		break;
 800122c:	bf00      	nop
 800122e:	e000      	b.n	8001232 <Modbus_Protocal_Worker+0x1f6>
		break;
 8001230:	bf00      	nop
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2000023c 	.word	0x2000023c

08001240 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001246:	4b1d      	ldr	r3, [pc, #116]	@ (80012bc <modbusWrite1Register+0x7c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	7e5b      	ldrb	r3, [r3, #25]
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	b29b      	uxth	r3, r3
 8001250:	4a1a      	ldr	r2, [pc, #104]	@ (80012bc <modbusWrite1Register+0x7c>)
 8001252:	6812      	ldr	r2, [r2, #0]
 8001254:	7e92      	ldrb	r2, [r2, #26]
 8001256:	4413      	add	r3, r2
 8001258:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800125a:	88fa      	ldrh	r2, [r7, #6]
 800125c:	4b17      	ldr	r3, [pc, #92]	@ (80012bc <modbusWrite1Register+0x7c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	429a      	cmp	r2, r3
 8001264:	d903      	bls.n	800126e <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001266:	2002      	movs	r0, #2
 8001268:	f000 f8a0 	bl	80013ac <ModbusErrorReply>
			 return;
 800126c:	e023      	b.n	80012b6 <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 800126e:	4b13      	ldr	r3, [pc, #76]	@ (80012bc <modbusWrite1Register+0x7c>)
 8001270:	681a      	ldr	r2, [r3, #0]
 8001272:	4b12      	ldr	r3, [pc, #72]	@ (80012bc <modbusWrite1Register+0x7c>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	6859      	ldr	r1, [r3, #4]
 8001278:	88fb      	ldrh	r3, [r7, #6]
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	440b      	add	r3, r1
 800127e:	7ed2      	ldrb	r2, [r2, #27]
 8001280:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 8001282:	4b0e      	ldr	r3, [pc, #56]	@ (80012bc <modbusWrite1Register+0x7c>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	4b0d      	ldr	r3, [pc, #52]	@ (80012bc <modbusWrite1Register+0x7c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6859      	ldr	r1, [r3, #4]
 800128c:	88fb      	ldrh	r3, [r7, #6]
 800128e:	005b      	lsls	r3, r3, #1
 8001290:	440b      	add	r3, r1
 8001292:	7f12      	ldrb	r2, [r2, #28]
 8001294:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 8001296:	4b09      	ldr	r3, [pc, #36]	@ (80012bc <modbusWrite1Register+0x7c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 800129e:	4b07      	ldr	r3, [pc, #28]	@ (80012bc <modbusWrite1Register+0x7c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 80012a4:	2208      	movs	r2, #8
 80012a6:	4619      	mov	r1, r3
 80012a8:	f007 fec0 	bl	800902c <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80012ac:	4b03      	ldr	r3, [pc, #12]	@ (80012bc <modbusWrite1Register+0x7c>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2205      	movs	r2, #5
 80012b2:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 80012b6:	3708      	adds	r7, #8
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	2000023c 	.word	0x2000023c

080012c0 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80012c0:	b590      	push	{r4, r7, lr}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80012c6:	4b38      	ldr	r3, [pc, #224]	@ (80013a8 <modbusRead1Register+0xe8>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	7edb      	ldrb	r3, [r3, #27]
 80012cc:	021b      	lsls	r3, r3, #8
 80012ce:	b29b      	uxth	r3, r3
 80012d0:	4a35      	ldr	r2, [pc, #212]	@ (80013a8 <modbusRead1Register+0xe8>)
 80012d2:	6812      	ldr	r2, [r2, #0]
 80012d4:	7f12      	ldrb	r2, [r2, #28]
 80012d6:	4413      	add	r3, r2
 80012d8:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 80012da:	4b33      	ldr	r3, [pc, #204]	@ (80013a8 <modbusRead1Register+0xe8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	7e5b      	ldrb	r3, [r3, #25]
 80012e0:	021b      	lsls	r3, r3, #8
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	4a30      	ldr	r2, [pc, #192]	@ (80013a8 <modbusRead1Register+0xe8>)
 80012e6:	6812      	ldr	r2, [r2, #0]
 80012e8:	7e92      	ldrb	r2, [r2, #26]
 80012ea:	4413      	add	r3, r2
 80012ec:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 80012ee:	88fb      	ldrh	r3, [r7, #6]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d002      	beq.n	80012fa <modbusRead1Register+0x3a>
 80012f4:	88fb      	ldrh	r3, [r7, #6]
 80012f6:	2b7d      	cmp	r3, #125	@ 0x7d
 80012f8:	d903      	bls.n	8001302 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 80012fa:	2003      	movs	r0, #3
 80012fc:	f000 f856 	bl	80013ac <ModbusErrorReply>
		 return;
 8001300:	e04e      	b.n	80013a0 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8001302:	88ba      	ldrh	r2, [r7, #4]
 8001304:	4b28      	ldr	r3, [pc, #160]	@ (80013a8 <modbusRead1Register+0xe8>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	429a      	cmp	r2, r3
 800130c:	d808      	bhi.n	8001320 <modbusRead1Register+0x60>
 800130e:	88ba      	ldrh	r2, [r7, #4]
 8001310:	88fb      	ldrh	r3, [r7, #6]
 8001312:	4413      	add	r3, r2
 8001314:	461a      	mov	r2, r3
 8001316:	4b24      	ldr	r3, [pc, #144]	@ (80013a8 <modbusRead1Register+0xe8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	429a      	cmp	r2, r3
 800131e:	d903      	bls.n	8001328 <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8001320:	2002      	movs	r0, #2
 8001322:	f000 f843 	bl	80013ac <ModbusErrorReply>
		 return;
 8001326:	e03b      	b.n	80013a0 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001328:	4b1f      	ldr	r3, [pc, #124]	@ (80013a8 <modbusRead1Register+0xe8>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	2203      	movs	r2, #3
 800132e:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8001332:	88fb      	ldrh	r3, [r7, #6]
 8001334:	b2da      	uxtb	r2, r3
 8001336:	4b1c      	ldr	r3, [pc, #112]	@ (80013a8 <modbusRead1Register+0xe8>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	0052      	lsls	r2, r2, #1
 800133c:	b2d2      	uxtb	r2, r2
 800133e:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 8001342:	2400      	movs	r4, #0
 8001344:	e020      	b.n	8001388 <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001346:	4b18      	ldr	r3, [pc, #96]	@ (80013a8 <modbusRead1Register+0xe8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	685a      	ldr	r2, [r3, #4]
 800134c:	88bb      	ldrh	r3, [r7, #4]
 800134e:	4423      	add	r3, r4
 8001350:	005b      	lsls	r3, r3, #1
 8001352:	18d1      	adds	r1, r2, r3
 8001354:	4b14      	ldr	r3, [pc, #80]	@ (80013a8 <modbusRead1Register+0xe8>)
 8001356:	681a      	ldr	r2, [r3, #0]
 8001358:	1c63      	adds	r3, r4, #1
 800135a:	005b      	lsls	r3, r3, #1
 800135c:	7849      	ldrb	r1, [r1, #1]
 800135e:	4413      	add	r3, r2
 8001360:	460a      	mov	r2, r1
 8001362:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001366:	4b10      	ldr	r3, [pc, #64]	@ (80013a8 <modbusRead1Register+0xe8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	685a      	ldr	r2, [r3, #4]
 800136c:	88bb      	ldrh	r3, [r7, #4]
 800136e:	4423      	add	r3, r4
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	18d1      	adds	r1, r2, r3
 8001374:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <modbusRead1Register+0xe8>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	0063      	lsls	r3, r4, #1
 800137a:	3303      	adds	r3, #3
 800137c:	7809      	ldrb	r1, [r1, #0]
 800137e:	4413      	add	r3, r2
 8001380:	460a      	mov	r2, r1
 8001382:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 8001386:	3401      	adds	r4, #1
 8001388:	88fb      	ldrh	r3, [r7, #6]
 800138a:	429c      	cmp	r4, r3
 800138c:	dbdb      	blt.n	8001346 <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800138e:	88fb      	ldrh	r3, [r7, #6]
 8001390:	3301      	adds	r3, #1
 8001392:	b2da      	uxtb	r2, r3
 8001394:	4b04      	ldr	r3, [pc, #16]	@ (80013a8 <modbusRead1Register+0xe8>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	0052      	lsls	r2, r2, #1
 800139a:	b2d2      	uxtb	r2, r2
 800139c:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd90      	pop	{r4, r7, pc}
 80013a6:	bf00      	nop
 80013a8:	2000023c 	.word	0x2000023c

080013ac <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 80013b6:	4b0d      	ldr	r3, [pc, #52]	@ (80013ec <ModbusErrorReply+0x40>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	7e1a      	ldrb	r2, [r3, #24]
 80013bc:	4b0b      	ldr	r3, [pc, #44]	@ (80013ec <ModbusErrorReply+0x40>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80013c4:	b2d2      	uxtb	r2, r2
 80013c6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 80013ca:	4b08      	ldr	r3, [pc, #32]	@ (80013ec <ModbusErrorReply+0x40>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	79fa      	ldrb	r2, [r7, #7]
 80013d0:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 80013d4:	4b05      	ldr	r3, [pc, #20]	@ (80013ec <ModbusErrorReply+0x40>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	2202      	movs	r2, #2
 80013da:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 80013de:	bf00      	nop
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	2000023c 	.word	0x2000023c

080013f0 <Modbus_frame_response>:

void Modbus_frame_response()
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 80013f4:	4b09      	ldr	r3, [pc, #36]	@ (800141c <Modbus_frame_response+0x2c>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	7e1b      	ldrb	r3, [r3, #24]
 80013fa:	2b03      	cmp	r3, #3
 80013fc:	d004      	beq.n	8001408 <Modbus_frame_response+0x18>
 80013fe:	2b06      	cmp	r3, #6
 8001400:	d105      	bne.n	800140e <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001402:	f7ff ff1d 	bl	8001240 <modbusWrite1Register>
		break;
 8001406:	e006      	b.n	8001416 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001408:	f7ff ff5a 	bl	80012c0 <modbusRead1Register>
		break;
 800140c:	e003      	b.n	8001416 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800140e:	2001      	movs	r0, #1
 8001410:	f7ff ffcc 	bl	80013ac <ModbusErrorReply>
		break;
 8001414:	bf00      	nop

	}
}
 8001416:	bf00      	nop
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	2000023c 	.word	0x2000023c

08001420 <Modbus_Emission>:

void Modbus_Emission()
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001426:	4b38      	ldr	r3, [pc, #224]	@ (8001508 <Modbus_Emission+0xe8>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	68db      	ldr	r3, [r3, #12]
 800142c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001430:	2b20      	cmp	r3, #32
 8001432:	d15d      	bne.n	80014f0 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001434:	4b34      	ldr	r3, [pc, #208]	@ (8001508 <Modbus_Emission+0xe8>)
 8001436:	681a      	ldr	r2, [r3, #0]
 8001438:	4b33      	ldr	r3, [pc, #204]	@ (8001508 <Modbus_Emission+0xe8>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	7812      	ldrb	r2, [r2, #0]
 800143e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001442:	4b31      	ldr	r3, [pc, #196]	@ (8001508 <Modbus_Emission+0xe8>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 800144a:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800144c:	4b2e      	ldr	r3, [pc, #184]	@ (8001508 <Modbus_Emission+0xe8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8001454:	4b2c      	ldr	r3, [pc, #176]	@ (8001508 <Modbus_Emission+0xe8>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 800145c:	461a      	mov	r2, r3
 800145e:	f007 fde5 	bl	800902c <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001462:	4b29      	ldr	r3, [pc, #164]	@ (8001508 <Modbus_Emission+0xe8>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 800146a:	461a      	mov	r2, r3
 800146c:	4b26      	ldr	r3, [pc, #152]	@ (8001508 <Modbus_Emission+0xe8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	3203      	adds	r2, #3
 8001472:	b292      	uxth	r2, r2
 8001474:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001478:	4b23      	ldr	r3, [pc, #140]	@ (8001508 <Modbus_Emission+0xe8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001480:	4b21      	ldr	r3, [pc, #132]	@ (8001508 <Modbus_Emission+0xe8>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8001488:	3b02      	subs	r3, #2
 800148a:	4619      	mov	r1, r3
 800148c:	4610      	mov	r0, r2
 800148e:	f7ff fd9f 	bl	8000fd0 <CRC16>
 8001492:	4603      	mov	r3, r0
 8001494:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8001496:	4b1c      	ldr	r3, [pc, #112]	@ (8001508 <Modbus_Emission+0xe8>)
 8001498:	681a      	ldr	r2, [r3, #0]
 800149a:	4b1b      	ldr	r3, [pc, #108]	@ (8001508 <Modbus_Emission+0xe8>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80014a2:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80014a4:	7939      	ldrb	r1, [r7, #4]
 80014a6:	4413      	add	r3, r2
 80014a8:	460a      	mov	r2, r1
 80014aa:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80014ae:	4b16      	ldr	r3, [pc, #88]	@ (8001508 <Modbus_Emission+0xe8>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	4b15      	ldr	r3, [pc, #84]	@ (8001508 <Modbus_Emission+0xe8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80014ba:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80014bc:	7979      	ldrb	r1, [r7, #5]
 80014be:	4413      	add	r3, r2
 80014c0:	460a      	mov	r2, r1
 80014c2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80014c6:	4b10      	ldr	r3, [pc, #64]	@ (8001508 <Modbus_Emission+0xe8>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80014d0:	2b20      	cmp	r3, #32
 80014d2:	d10d      	bne.n	80014f0 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 80014d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001508 <Modbus_Emission+0xe8>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 80014da:	4b0b      	ldr	r3, [pc, #44]	@ (8001508 <Modbus_Emission+0xe8>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 80014e2:	4b09      	ldr	r3, [pc, #36]	@ (8001508 <Modbus_Emission+0xe8>)
 80014e4:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 80014e6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 80014ea:	461a      	mov	r2, r3
 80014ec:	f005 ff98 	bl	8007420 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 80014f0:	4b05      	ldr	r3, [pc, #20]	@ (8001508 <Modbus_Emission+0xe8>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2200      	movs	r2, #0
 80014f6:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 80014f8:	4b03      	ldr	r3, [pc, #12]	@ (8001508 <Modbus_Emission+0xe8>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2200      	movs	r2, #0
 80014fe:	755a      	strb	r2, [r3, #21]

}
 8001500:	bf00      	nop
 8001502:	3708      	adds	r7, #8
 8001504:	46bd      	mov	sp, r7
 8001506:	bd80      	pop	{r7, pc}
 8001508:	2000023c 	.word	0x2000023c

0800150c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800150c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001510:	b084      	sub	sp, #16
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001514:	f001 febb 	bl	800328e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001518:	f000 faba 	bl	8001a90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151c:	f000 fd88 	bl	8002030 <MX_GPIO_Init>
  MX_DMA_Init();
 8001520:	f000 fd54 	bl	8001fcc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001524:	f000 fd04 	bl	8001f30 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8001528:	f000 fcd2 	bl	8001ed0 <MX_TIM16_Init>
  MX_TIM5_Init();
 800152c:	f000 fc82 	bl	8001e34 <MX_TIM5_Init>
  MX_TIM1_Init();
 8001530:	f000 fafa 	bl	8001b28 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001534:	f000 fb8c 	bl	8001c50 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001538:	f000 fbd8 	bl	8001cec <MX_TIM3_Init>
  MX_TIM4_Init();
 800153c:	f000 fc2c 	bl	8001d98 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  //pwm setup
	HAL_TIM_Base_Start(&htim1);
 8001540:	4891      	ldr	r0, [pc, #580]	@ (8001788 <main+0x27c>)
 8001542:	f003 fdcf 	bl	80050e4 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001546:	2100      	movs	r1, #0
 8001548:	488f      	ldr	r0, [pc, #572]	@ (8001788 <main+0x27c>)
 800154a:	f003 ff17 	bl	800537c <HAL_TIM_PWM_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800154e:	4b8e      	ldr	r3, [pc, #568]	@ (8001788 <main+0x27c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2200      	movs	r2, #0
 8001554:	635a      	str	r2, [r3, #52]	@ 0x34

	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001556:	213c      	movs	r1, #60	@ 0x3c
 8001558:	488c      	ldr	r0, [pc, #560]	@ (800178c <main+0x280>)
 800155a:	f004 f9cb 	bl	80058f4 <HAL_TIM_Encoder_Start>
	HAL_TIM_Base_Start_IT(&htim4);
 800155e:	488c      	ldr	r0, [pc, #560]	@ (8001790 <main+0x284>)
 8001560:	f003 fe30 	bl	80051c4 <HAL_TIM_Base_Start_IT>
	upper = 0;
 8001564:	498b      	ldr	r1, [pc, #556]	@ (8001794 <main+0x288>)
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	f04f 0300 	mov.w	r3, #0
 800156e:	e9c1 2300 	strd	r2, r3, [r1]

	PID_init(&pid_control, pid_p, pid_i, pid_d ,timerange);
 8001572:	4b89      	ldr	r3, [pc, #548]	@ (8001798 <main+0x28c>)
 8001574:	edd3 7a00 	vldr	s15, [r3]
 8001578:	4b88      	ldr	r3, [pc, #544]	@ (800179c <main+0x290>)
 800157a:	ed93 7a00 	vldr	s14, [r3]
 800157e:	4b88      	ldr	r3, [pc, #544]	@ (80017a0 <main+0x294>)
 8001580:	edd3 6a00 	vldr	s13, [r3]
 8001584:	4b87      	ldr	r3, [pc, #540]	@ (80017a4 <main+0x298>)
 8001586:	881b      	ldrh	r3, [r3, #0]
 8001588:	ee06 3a10 	vmov	s12, r3
 800158c:	eeb8 6a46 	vcvt.f32.u32	s12, s12
 8001590:	eef0 1a46 	vmov.f32	s3, s12
 8001594:	eeb0 1a66 	vmov.f32	s2, s13
 8001598:	eef0 0a47 	vmov.f32	s1, s14
 800159c:	eeb0 0a67 	vmov.f32	s0, s15
 80015a0:	4881      	ldr	r0, [pc, #516]	@ (80017a8 <main+0x29c>)
 80015a2:	f001 fa59 	bl	8002a58 <PID_init>

	hmodbus.huart = &huart2;
 80015a6:	4b81      	ldr	r3, [pc, #516]	@ (80017ac <main+0x2a0>)
 80015a8:	4a81      	ldr	r2, [pc, #516]	@ (80017b0 <main+0x2a4>)
 80015aa:	60da      	str	r2, [r3, #12]
	hmodbus.htim = &htim16;
 80015ac:	4b7f      	ldr	r3, [pc, #508]	@ (80017ac <main+0x2a0>)
 80015ae:	4a81      	ldr	r2, [pc, #516]	@ (80017b4 <main+0x2a8>)
 80015b0:	611a      	str	r2, [r3, #16]
	hmodbus.slaveAddress = 0x15;
 80015b2:	4b7e      	ldr	r3, [pc, #504]	@ (80017ac <main+0x2a0>)
 80015b4:	2215      	movs	r2, #21
 80015b6:	701a      	strb	r2, [r3, #0]
	hmodbus.RegisterSize =200;
 80015b8:	4b7c      	ldr	r3, [pc, #496]	@ (80017ac <main+0x2a0>)
 80015ba:	22c8      	movs	r2, #200	@ 0xc8
 80015bc:	609a      	str	r2, [r3, #8]
	Modbus_init(&hmodbus, registerFrame);
 80015be:	497e      	ldr	r1, [pc, #504]	@ (80017b8 <main+0x2ac>)
 80015c0:	487a      	ldr	r0, [pc, #488]	@ (80017ac <main+0x2a0>)
 80015c2:	f7ff fcaf 	bl	8000f24 <Modbus_init>

	HAL_TIM_Base_Start_IT(&htim5);
 80015c6:	487d      	ldr	r0, [pc, #500]	@ (80017bc <main+0x2b0>)
 80015c8:	f003 fdfc 	bl	80051c4 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	Modbus_Protocal_Worker();
 80015cc:	f7ff fd36 	bl	800103c <Modbus_Protocal_Worker>
	registerFrame[0x11].U16 = CurrentPos*10; //ZPos
 80015d0:	4b7b      	ldr	r3, [pc, #492]	@ (80017c0 <main+0x2b4>)
 80015d2:	edd3 7a00 	vldr	s15, [r3]
 80015d6:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80015da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80015e2:	ee17 3a90 	vmov	r3, s15
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	4b73      	ldr	r3, [pc, #460]	@ (80017b8 <main+0x2ac>)
 80015ea:	845a      	strh	r2, [r3, #34]	@ 0x22
	registerFrame[0x12].U16 =Z[1]; //ZSpeed
 80015ec:	4b75      	ldr	r3, [pc, #468]	@ (80017c4 <main+0x2b8>)
 80015ee:	885a      	ldrh	r2, [r3, #2]
 80015f0:	4b71      	ldr	r3, [pc, #452]	@ (80017b8 <main+0x2ac>)
 80015f2:	849a      	strh	r2, [r3, #36]	@ 0x24
	registerFrame[0x13].U16 =Z[2]; //ZAccel
 80015f4:	4b73      	ldr	r3, [pc, #460]	@ (80017c4 <main+0x2b8>)
 80015f6:	889a      	ldrh	r2, [r3, #4]
 80015f8:	4b6f      	ldr	r3, [pc, #444]	@ (80017b8 <main+0x2ac>)
 80015fa:	84da      	strh	r2, [r3, #38]	@ 0x26
	registerFrame[0x40].U16 =Z[3]; //XPos
 80015fc:	4b71      	ldr	r3, [pc, #452]	@ (80017c4 <main+0x2b8>)
 80015fe:	88da      	ldrh	r2, [r3, #6]
 8001600:	4b6d      	ldr	r3, [pc, #436]	@ (80017b8 <main+0x2ac>)
 8001602:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
	BaseVacuum = registerFrame[2].U16; // 0 = off , 1 = on
 8001606:	4b6c      	ldr	r3, [pc, #432]	@ (80017b8 <main+0x2ac>)
 8001608:	889b      	ldrh	r3, [r3, #4]
 800160a:	b2da      	uxtb	r2, r3
 800160c:	4b6e      	ldr	r3, [pc, #440]	@ (80017c8 <main+0x2bc>)
 800160e:	701a      	strb	r2, [r3, #0]
	BaseGripper = registerFrame[3].U16; // 0 = Backward , 1 = Forward
 8001610:	4b69      	ldr	r3, [pc, #420]	@ (80017b8 <main+0x2ac>)
 8001612:	88db      	ldrh	r3, [r3, #6]
 8001614:	b2da      	uxtb	r2, r3
 8001616:	4b6d      	ldr	r3, [pc, #436]	@ (80017cc <main+0x2c0>)
 8001618:	701a      	strb	r2, [r3, #0]

	static uint64_t timestamp = 0;
	int64_t currentTime = Micros();
 800161a:	f000 feb9 	bl	8002390 <Micros>
 800161e:	4602      	mov	r2, r0
 8001620:	460b      	mov	r3, r1
 8001622:	e9c7 2300 	strd	r2, r3, [r7]
	if (currentTime > timestamp) {
 8001626:	e9d7 2300 	ldrd	r2, r3, [r7]
 800162a:	4969      	ldr	r1, [pc, #420]	@ (80017d0 <main+0x2c4>)
 800162c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001630:	4290      	cmp	r0, r2
 8001632:	eb71 0303 	sbcs.w	r3, r1, r3
 8001636:	d232      	bcs.n	800169e <main+0x192>
		timestamp = currentTime + timerange;	 //us
 8001638:	4b5a      	ldr	r3, [pc, #360]	@ (80017a4 <main+0x298>)
 800163a:	881b      	ldrh	r3, [r3, #0]
 800163c:	b29b      	uxth	r3, r3
 800163e:	2200      	movs	r2, #0
 8001640:	461c      	mov	r4, r3
 8001642:	4615      	mov	r5, r2
 8001644:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001648:	eb14 0802 	adds.w	r8, r4, r2
 800164c:	eb45 0903 	adc.w	r9, r5, r3
 8001650:	4642      	mov	r2, r8
 8001652:	464b      	mov	r3, r9
 8001654:	495e      	ldr	r1, [pc, #376]	@ (80017d0 <main+0x2c4>)
 8001656:	e9c1 2300 	strd	r2, r3, [r1]
		QEIEncoderPosVel_Update();
 800165a:	f000 fecd 	bl	80023f8 <QEIEncoderPosVel_Update>
		velodegree = QEIdata.QEIAngularVelocity;
 800165e:	4b5d      	ldr	r3, [pc, #372]	@ (80017d4 <main+0x2c8>)
 8001660:	6a1b      	ldr	r3, [r3, #32]
 8001662:	4a5d      	ldr	r2, [pc, #372]	@ (80017d8 <main+0x2cc>)
 8001664:	6013      	str	r3, [r2, #0]
		velodegree = (velodegree * 60) / 800;
 8001666:	4b5c      	ldr	r3, [pc, #368]	@ (80017d8 <main+0x2cc>)
 8001668:	edd3 7a00 	vldr	s15, [r3]
 800166c:	ed9f 7a5b 	vldr	s14, [pc, #364]	@ 80017dc <main+0x2d0>
 8001670:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001674:	eddf 6a5a 	vldr	s13, [pc, #360]	@ 80017e0 <main+0x2d4>
 8001678:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800167c:	4b56      	ldr	r3, [pc, #344]	@ (80017d8 <main+0x2cc>)
 800167e:	edc3 7a00 	vstr	s15, [r3]
		linearspeed = velodegree * 14 / 60.0;
 8001682:	4b55      	ldr	r3, [pc, #340]	@ (80017d8 <main+0x2cc>)
 8001684:	edd3 7a00 	vldr	s15, [r3]
 8001688:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 800168c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001690:	eddf 6a52 	vldr	s13, [pc, #328]	@ 80017dc <main+0x2d0>
 8001694:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001698:	4b52      	ldr	r3, [pc, #328]	@ (80017e4 <main+0x2d8>)
 800169a:	edc3 7a00 	vstr	s15, [r3]
	}

	RelayDrive();
 800169e:	f001 f9ad 	bl	80029fc <RelayDrive>
	ReadButton();
 80016a2:	f000 ffbb 	bl	800261c <ReadButton>
	ReadLogicConv();
 80016a6:	f000 ff87 	bl	80025b8 <ReadLogicConv>
	ReadLimit();
 80016aa:	f000 fff7 	bl	800269c <ReadLimit>
	if (mode == 0){
 80016ae:	4b4e      	ldr	r3, [pc, #312]	@ (80017e8 <main+0x2dc>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <main+0x1ae>
		MotorDrive();
 80016b6:	f001 f80f 	bl	80026d8 <MotorDrive>
	}

	if (mode == 1) { //joy
 80016ba:	4b4b      	ldr	r3, [pc, #300]	@ (80017e8 <main+0x2dc>)
 80016bc:	781b      	ldrb	r3, [r3, #0]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d122      	bne.n	8001708 <main+0x1fc>
			if (bt1 == 0) {
 80016c2:	4b4a      	ldr	r3, [pc, #296]	@ (80017ec <main+0x2e0>)
 80016c4:	781b      	ldrb	r3, [r3, #0]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d10a      	bne.n	80016e0 <main+0x1d4>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 80016ca:	2201      	movs	r2, #1
 80016cc:	2108      	movs	r1, #8
 80016ce:	4848      	ldr	r0, [pc, #288]	@ (80017f0 <main+0x2e4>)
 80016d0:	f002 fc2a 	bl	8003f28 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);
 80016d4:	4b47      	ldr	r3, [pc, #284]	@ (80017f4 <main+0x2e8>)
 80016d6:	881a      	ldrh	r2, [r3, #0]
 80016d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001788 <main+0x27c>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	635a      	str	r2, [r3, #52]	@ 0x34
 80016de:	e775      	b.n	80015cc <main+0xc0>
			} else if (bt2 == 0) {
 80016e0:	4b45      	ldr	r3, [pc, #276]	@ (80017f8 <main+0x2ec>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d10a      	bne.n	80016fe <main+0x1f2>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2108      	movs	r1, #8
 80016ec:	4840      	ldr	r0, [pc, #256]	@ (80017f0 <main+0x2e4>)
 80016ee:	f002 fc1b 	bl	8003f28 <HAL_GPIO_WritePin>
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);
 80016f2:	4b40      	ldr	r3, [pc, #256]	@ (80017f4 <main+0x2e8>)
 80016f4:	881a      	ldrh	r2, [r3, #0]
 80016f6:	4b24      	ldr	r3, [pc, #144]	@ (8001788 <main+0x27c>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	635a      	str	r2, [r3, #52]	@ 0x34
 80016fc:	e766      	b.n	80015cc <main+0xc0>
			} else {
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 80016fe:	4b22      	ldr	r3, [pc, #136]	@ (8001788 <main+0x27c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	2200      	movs	r2, #0
 8001704:	635a      	str	r2, [r3, #52]	@ 0x34
 8001706:	e761      	b.n	80015cc <main+0xc0>
			}
		} else if (mode == 2) {
 8001708:	4b37      	ldr	r3, [pc, #220]	@ (80017e8 <main+0x2dc>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b02      	cmp	r3, #2
 800170e:	f47f af5d 	bne.w	80015cc <main+0xc0>

			//Set Home
			if(registerFrame[0x01].U16 == 2){
 8001712:	4b29      	ldr	r3, [pc, #164]	@ (80017b8 <main+0x2ac>)
 8001714:	885b      	ldrh	r3, [r3, #2]
 8001716:	2b02      	cmp	r3, #2
 8001718:	d105      	bne.n	8001726 <main+0x21a>
				registerFrame[0x01].U16 = 0;
 800171a:	4b27      	ldr	r3, [pc, #156]	@ (80017b8 <main+0x2ac>)
 800171c:	2200      	movs	r2, #0
 800171e:	805a      	strh	r2, [r3, #2]
				registerFrame[0x10].U16 = 2;
 8001720:	4b25      	ldr	r3, [pc, #148]	@ (80017b8 <main+0x2ac>)
 8001722:	2202      	movs	r2, #2
 8001724:	841a      	strh	r2, [r3, #32]
			}
			//Set Shelves
			if (registerFrame[0x01].U16 == 1){
 8001726:	4b24      	ldr	r3, [pc, #144]	@ (80017b8 <main+0x2ac>)
 8001728:	885b      	ldrh	r3, [r3, #2]
 800172a:	2b01      	cmp	r3, #1
 800172c:	d105      	bne.n	800173a <main+0x22e>
				registerFrame[0x01].U16 = 0;
 800172e:	4b22      	ldr	r3, [pc, #136]	@ (80017b8 <main+0x2ac>)
 8001730:	2200      	movs	r2, #0
 8001732:	805a      	strh	r2, [r3, #2]
				registerFrame[0x10].U16 = 1;
 8001734:	4b20      	ldr	r3, [pc, #128]	@ (80017b8 <main+0x2ac>)
 8001736:	2201      	movs	r2, #1
 8001738:	841a      	strh	r2, [r3, #32]
			}

			b_check[0] = 1;
 800173a:	4b30      	ldr	r3, [pc, #192]	@ (80017fc <main+0x2f0>)
 800173c:	2201      	movs	r2, #1
 800173e:	701a      	strb	r2, [r3, #0]
			//if(bt3 == 0){
				//Goal = 600;
			//}

			//Set Shelves
			if(registerFrame[0x10].U16 == 1){
 8001740:	4b1d      	ldr	r3, [pc, #116]	@ (80017b8 <main+0x2ac>)
 8001742:	8c1b      	ldrh	r3, [r3, #32]
 8001744:	2b01      	cmp	r3, #1
 8001746:	f040 80aa 	bne.w	800189e <main+0x392>
				if (bt1 == 0) {
 800174a:	4b28      	ldr	r3, [pc, #160]	@ (80017ec <main+0x2e0>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d10a      	bne.n	8001768 <main+0x25c>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1); //Go Down
 8001752:	2201      	movs	r2, #1
 8001754:	2108      	movs	r1, #8
 8001756:	4826      	ldr	r0, [pc, #152]	@ (80017f0 <main+0x2e4>)
 8001758:	f002 fbe6 	bl	8003f28 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);
 800175c:	4b25      	ldr	r3, [pc, #148]	@ (80017f4 <main+0x2e8>)
 800175e:	881a      	ldrh	r2, [r3, #0]
 8001760:	4b09      	ldr	r3, [pc, #36]	@ (8001788 <main+0x27c>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	635a      	str	r2, [r3, #52]	@ 0x34
 8001766:	e057      	b.n	8001818 <main+0x30c>
				} else if (bt2 == 0) {
 8001768:	4b23      	ldr	r3, [pc, #140]	@ (80017f8 <main+0x2ec>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d147      	bne.n	8001800 <main+0x2f4>
					HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0); //Go Up
 8001770:	2200      	movs	r2, #0
 8001772:	2108      	movs	r1, #8
 8001774:	481e      	ldr	r0, [pc, #120]	@ (80017f0 <main+0x2e4>)
 8001776:	f002 fbd7 	bl	8003f28 <HAL_GPIO_WritePin>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle);
 800177a:	4b1e      	ldr	r3, [pc, #120]	@ (80017f4 <main+0x2e8>)
 800177c:	881a      	ldrh	r2, [r3, #0]
 800177e:	4b02      	ldr	r3, [pc, #8]	@ (8001788 <main+0x27c>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	635a      	str	r2, [r3, #52]	@ 0x34
 8001784:	e048      	b.n	8001818 <main+0x30c>
 8001786:	bf00      	nop
 8001788:	20000240 	.word	0x20000240
 800178c:	200003d8 	.word	0x200003d8
 8001790:	200004a4 	.word	0x200004a4
 8001794:	20000898 	.word	0x20000898
 8001798:	20000208 	.word	0x20000208
 800179c:	2000020c 	.word	0x2000020c
 80017a0:	20000210 	.word	0x20000210
 80017a4:	20000200 	.word	0x20000200
 80017a8:	20000900 	.word	0x20000900
 80017ac:	20000918 	.word	0x20000918
 80017b0:	20000708 	.word	0x20000708
 80017b4:	2000063c 	.word	0x2000063c
 80017b8:	20000df0 	.word	0x20000df0
 80017bc:	20000570 	.word	0x20000570
 80017c0:	200008ac 	.word	0x200008ac
 80017c4:	20000f90 	.word	0x20000f90
 80017c8:	20000f98 	.word	0x20000f98
 80017cc:	20000f99 	.word	0x20000f99
 80017d0:	20000fe0 	.word	0x20000fe0
 80017d4:	200008b0 	.word	0x200008b0
 80017d8:	200008a8 	.word	0x200008a8
 80017dc:	42700000 	.word	0x42700000
 80017e0:	44480000 	.word	0x44480000
 80017e4:	200008a0 	.word	0x200008a0
 80017e8:	20000204 	.word	0x20000204
 80017ec:	200008e4 	.word	0x200008e4
 80017f0:	48000800 	.word	0x48000800
 80017f4:	20000202 	.word	0x20000202
 80017f8:	200008e5 	.word	0x200008e5
 80017fc:	20000fcc 	.word	0x20000fcc
				} else if(bt1 ==1 && bt2==1){
 8001800:	4b8d      	ldr	r3, [pc, #564]	@ (8001a38 <main+0x52c>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b01      	cmp	r3, #1
 8001806:	d107      	bne.n	8001818 <main+0x30c>
 8001808:	4b8c      	ldr	r3, [pc, #560]	@ (8001a3c <main+0x530>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	2b01      	cmp	r3, #1
 800180e:	d103      	bne.n	8001818 <main+0x30c>
					__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001810:	4b8b      	ldr	r3, [pc, #556]	@ (8001a40 <main+0x534>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2200      	movs	r2, #0
 8001816:	635a      	str	r2, [r3, #52]	@ 0x34
				}

				if(bt5prev == 1 && bt5 == 0){
 8001818:	4b8a      	ldr	r3, [pc, #552]	@ (8001a44 <main+0x538>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b01      	cmp	r3, #1
 800181e:	d117      	bne.n	8001850 <main+0x344>
 8001820:	4b89      	ldr	r3, [pc, #548]	@ (8001a48 <main+0x53c>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d113      	bne.n	8001850 <main+0x344>
					ShelvePos[i] = CurrentPos;
 8001828:	4b88      	ldr	r3, [pc, #544]	@ (8001a4c <main+0x540>)
 800182a:	edd3 7a00 	vldr	s15, [r3]
 800182e:	4b88      	ldr	r3, [pc, #544]	@ (8001a50 <main+0x544>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	461a      	mov	r2, r3
 8001834:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001838:	ee17 3a90 	vmov	r3, s15
 800183c:	b299      	uxth	r1, r3
 800183e:	4b85      	ldr	r3, [pc, #532]	@ (8001a54 <main+0x548>)
 8001840:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
					i+=1;
 8001844:	4b82      	ldr	r3, [pc, #520]	@ (8001a50 <main+0x544>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	3301      	adds	r3, #1
 800184a:	b2da      	uxtb	r2, r3
 800184c:	4b80      	ldr	r3, [pc, #512]	@ (8001a50 <main+0x544>)
 800184e:	701a      	strb	r2, [r3, #0]
				}
				if(i > 4){
 8001850:	4b7f      	ldr	r3, [pc, #508]	@ (8001a50 <main+0x544>)
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	2b04      	cmp	r3, #4
 8001856:	d905      	bls.n	8001864 <main+0x358>
					i = 0;
 8001858:	4b7d      	ldr	r3, [pc, #500]	@ (8001a50 <main+0x544>)
 800185a:	2200      	movs	r2, #0
 800185c:	701a      	strb	r2, [r3, #0]
					registerFrame[0x10].U16 = 0;
 800185e:	4b7e      	ldr	r3, [pc, #504]	@ (8001a58 <main+0x54c>)
 8001860:	2200      	movs	r2, #0
 8001862:	841a      	strh	r2, [r3, #32]
				}


				bt5prev = bt5;
 8001864:	4b78      	ldr	r3, [pc, #480]	@ (8001a48 <main+0x53c>)
 8001866:	781a      	ldrb	r2, [r3, #0]
 8001868:	4b76      	ldr	r3, [pc, #472]	@ (8001a44 <main+0x538>)
 800186a:	701a      	strb	r2, [r3, #0]
				registerFrame[0x23].U16 = ShelvePos[0];
 800186c:	4b79      	ldr	r3, [pc, #484]	@ (8001a54 <main+0x548>)
 800186e:	881a      	ldrh	r2, [r3, #0]
 8001870:	4b79      	ldr	r3, [pc, #484]	@ (8001a58 <main+0x54c>)
 8001872:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
				registerFrame[0x24].U16 = ShelvePos[1];
 8001876:	4b77      	ldr	r3, [pc, #476]	@ (8001a54 <main+0x548>)
 8001878:	885a      	ldrh	r2, [r3, #2]
 800187a:	4b77      	ldr	r3, [pc, #476]	@ (8001a58 <main+0x54c>)
 800187c:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
				registerFrame[0x25].U16 = ShelvePos[2];
 8001880:	4b74      	ldr	r3, [pc, #464]	@ (8001a54 <main+0x548>)
 8001882:	889a      	ldrh	r2, [r3, #4]
 8001884:	4b74      	ldr	r3, [pc, #464]	@ (8001a58 <main+0x54c>)
 8001886:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
				registerFrame[0x26].U16 = ShelvePos[3];
 800188a:	4b72      	ldr	r3, [pc, #456]	@ (8001a54 <main+0x548>)
 800188c:	88da      	ldrh	r2, [r3, #6]
 800188e:	4b72      	ldr	r3, [pc, #456]	@ (8001a58 <main+0x54c>)
 8001890:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
				registerFrame[0x27].U16 = ShelvePos[4];
 8001894:	4b6f      	ldr	r3, [pc, #444]	@ (8001a54 <main+0x548>)
 8001896:	891a      	ldrh	r2, [r3, #8]
 8001898:	4b6f      	ldr	r3, [pc, #444]	@ (8001a58 <main+0x54c>)
 800189a:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
				//timestamp = HAL_GetTick()+2000;
			}


			//Set Home Run To limit switch
			if(registerFrame[0x10].U16 == 2){
 800189e:	4b6e      	ldr	r3, [pc, #440]	@ (8001a58 <main+0x54c>)
 80018a0:	8c1b      	ldrh	r3, [r3, #32]
 80018a2:	2b02      	cmp	r3, #2
 80018a4:	d10c      	bne.n	80018c0 <main+0x3b4>
				b_check[0] = 2;
 80018a6:	4b6d      	ldr	r3, [pc, #436]	@ (8001a5c <main+0x550>)
 80018a8:	2202      	movs	r2, #2
 80018aa:	701a      	strb	r2, [r3, #0]
				//if(     )

				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 500);
 80018ac:	4b64      	ldr	r3, [pc, #400]	@ (8001a40 <main+0x534>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80018b4:	635a      	str	r2, [r3, #52]	@ 0x34
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1); //End effector Go Down
 80018b6:	2201      	movs	r2, #1
 80018b8:	2108      	movs	r1, #8
 80018ba:	4869      	ldr	r0, [pc, #420]	@ (8001a60 <main+0x554>)
 80018bc:	f002 fb34 	bl	8003f28 <HAL_GPIO_WritePin>
//				}
				//}
			}

			//Run Point Mode
				if(registerFrame[0x01].U16 == 8) {
 80018c0:	4b65      	ldr	r3, [pc, #404]	@ (8001a58 <main+0x54c>)
 80018c2:	885b      	ldrh	r3, [r3, #2]
 80018c4:	2b08      	cmp	r3, #8
 80018c6:	d114      	bne.n	80018f2 <main+0x3e6>
					registerFrame[0x01].U16 = 0;
 80018c8:	4b63      	ldr	r3, [pc, #396]	@ (8001a58 <main+0x54c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	805a      	strh	r2, [r3, #2]
					registerFrame[0x10].U16 = 16;
 80018ce:	4b62      	ldr	r3, [pc, #392]	@ (8001a58 <main+0x54c>)
 80018d0:	2210      	movs	r2, #16
 80018d2:	841a      	strh	r2, [r3, #32]
					Goal = registerFrame[48].U16/10;
 80018d4:	4b60      	ldr	r3, [pc, #384]	@ (8001a58 <main+0x54c>)
 80018d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80018da:	4a62      	ldr	r2, [pc, #392]	@ (8001a64 <main+0x558>)
 80018dc:	fba2 2303 	umull	r2, r3, r2, r3
 80018e0:	08db      	lsrs	r3, r3, #3
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	ee07 3a90 	vmov	s15, r3
 80018e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018ec:	4b5e      	ldr	r3, [pc, #376]	@ (8001a68 <main+0x55c>)
 80018ee:	edc3 7a00 	vstr	s15, [r3]
				}

				if(registerFrame[0x10].U16 == 16){
 80018f2:	4b59      	ldr	r3, [pc, #356]	@ (8001a58 <main+0x54c>)
 80018f4:	8c1b      	ldrh	r3, [r3, #32]
 80018f6:	2b10      	cmp	r3, #16
 80018f8:	d101      	bne.n	80018fe <main+0x3f2>
					MotorDrive();
 80018fa:	f000 feed 	bl	80026d8 <MotorDrive>
				}
				if(Arrived == 1 && registerFrame[0x10].U16 == 16) {
 80018fe:	4b5b      	ldr	r3, [pc, #364]	@ (8001a6c <main+0x560>)
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d106      	bne.n	8001914 <main+0x408>
 8001906:	4b54      	ldr	r3, [pc, #336]	@ (8001a58 <main+0x54c>)
 8001908:	8c1b      	ldrh	r3, [r3, #32]
 800190a:	2b10      	cmp	r3, #16
 800190c:	d102      	bne.n	8001914 <main+0x408>
					registerFrame[0x10].U16 = 0;
 800190e:	4b52      	ldr	r3, [pc, #328]	@ (8001a58 <main+0x54c>)
 8001910:	2200      	movs	r2, #0
 8001912:	841a      	strh	r2, [r3, #32]
				}

			//Run Jog Mode
			if(registerFrame[0x01].U16 == 4){
 8001914:	4b50      	ldr	r3, [pc, #320]	@ (8001a58 <main+0x54c>)
 8001916:	885b      	ldrh	r3, [r3, #2]
 8001918:	2b04      	cmp	r3, #4
 800191a:	d138      	bne.n	800198e <main+0x482>
				convert_to_string(registerFrame[0x21].U16, PickOrder, sizeof(PickOrder));
 800191c:	4b4e      	ldr	r3, [pc, #312]	@ (8001a58 <main+0x54c>)
 800191e:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8001922:	2206      	movs	r2, #6
 8001924:	4952      	ldr	r1, [pc, #328]	@ (8001a70 <main+0x564>)
 8001926:	4618      	mov	r0, r3
 8001928:	f000 fcbc 	bl	80022a4 <convert_to_string>
				convert_to_string(registerFrame[0x22].U16, PlaceOrder, sizeof(PlaceOrder));
 800192c:	4b4a      	ldr	r3, [pc, #296]	@ (8001a58 <main+0x54c>)
 800192e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8001932:	2206      	movs	r2, #6
 8001934:	494f      	ldr	r1, [pc, #316]	@ (8001a74 <main+0x568>)
 8001936:	4618      	mov	r0, r3
 8001938:	f000 fcb4 	bl	80022a4 <convert_to_string>
				registerFrame[0x01].U16 = 0;
 800193c:	4b46      	ldr	r3, [pc, #280]	@ (8001a58 <main+0x54c>)
 800193e:	2200      	movs	r2, #0
 8001940:	805a      	strh	r2, [r3, #2]
				registerFrame[0x10].U16 = 4;
 8001942:	4b45      	ldr	r3, [pc, #276]	@ (8001a58 <main+0x54c>)
 8001944:	2204      	movs	r2, #4
 8001946:	841a      	strh	r2, [r3, #32]
				for(int i = 0;i<=4;i++){
 8001948:	2300      	movs	r3, #0
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	e01c      	b.n	8001988 <main+0x47c>
					GoalPick[i] = ShelvePos[PickOrder[4-i]-'0'-1];
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f1c3 0304 	rsb	r3, r3, #4
 8001954:	4a46      	ldr	r2, [pc, #280]	@ (8001a70 <main+0x564>)
 8001956:	5cd3      	ldrb	r3, [r2, r3]
 8001958:	3b31      	subs	r3, #49	@ 0x31
 800195a:	4a3e      	ldr	r2, [pc, #248]	@ (8001a54 <main+0x548>)
 800195c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8001960:	4a45      	ldr	r2, [pc, #276]	@ (8001a78 <main+0x56c>)
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
					GoalPlace[i] = ShelvePos[PlaceOrder[4-i]-'0'-1];
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	f1c3 0304 	rsb	r3, r3, #4
 800196e:	4a41      	ldr	r2, [pc, #260]	@ (8001a74 <main+0x568>)
 8001970:	5cd3      	ldrb	r3, [r2, r3]
 8001972:	3b31      	subs	r3, #49	@ 0x31
 8001974:	4a37      	ldr	r2, [pc, #220]	@ (8001a54 <main+0x548>)
 8001976:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800197a:	4a40      	ldr	r2, [pc, #256]	@ (8001a7c <main+0x570>)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
				for(int i = 0;i<=4;i++){
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	3301      	adds	r3, #1
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	2b04      	cmp	r3, #4
 800198c:	dddf      	ble.n	800194e <main+0x442>
					}
			}
		/////////////////START JOG////////////////////////////////////////////////////////////
			if(registerFrame[0x10].U16 == 4 && j < 5){
 800198e:	4b32      	ldr	r3, [pc, #200]	@ (8001a58 <main+0x54c>)
 8001990:	8c1b      	ldrh	r3, [r3, #32]
 8001992:	2b04      	cmp	r3, #4
 8001994:	d106      	bne.n	80019a4 <main+0x498>
 8001996:	4b3a      	ldr	r3, [pc, #232]	@ (8001a80 <main+0x574>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b04      	cmp	r3, #4
 800199c:	dc02      	bgt.n	80019a4 <main+0x498>
				GoPick();
 800199e:	f000 fcbb 	bl	8002318 <GoPick>
 80019a2:	e047      	b.n	8001a34 <main+0x528>
			}else if(registerFrame[0x10].U16 == 8 && j < 5){
 80019a4:	4b2c      	ldr	r3, [pc, #176]	@ (8001a58 <main+0x54c>)
 80019a6:	8c1b      	ldrh	r3, [r3, #32]
 80019a8:	2b08      	cmp	r3, #8
 80019aa:	d133      	bne.n	8001a14 <main+0x508>
 80019ac:	4b34      	ldr	r3, [pc, #208]	@ (8001a80 <main+0x574>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b04      	cmp	r3, #4
 80019b2:	dc2f      	bgt.n	8001a14 <main+0x508>
					a = 3;
 80019b4:	4b33      	ldr	r3, [pc, #204]	@ (8001a84 <main+0x578>)
 80019b6:	2203      	movs	r2, #3
 80019b8:	701a      	strb	r2, [r3, #0]
				if(ActualGripper == 0){//Gripper BW before move
 80019ba:	4b33      	ldr	r3, [pc, #204]	@ (8001a88 <main+0x57c>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d110      	bne.n	80019e4 <main+0x4d8>
					Goal = GoalPlace[j];
 80019c2:	4b2f      	ldr	r3, [pc, #188]	@ (8001a80 <main+0x574>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a2d      	ldr	r2, [pc, #180]	@ (8001a7c <main+0x570>)
 80019c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80019cc:	ee07 3a90 	vmov	s15, r3
 80019d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019d4:	4b24      	ldr	r3, [pc, #144]	@ (8001a68 <main+0x55c>)
 80019d6:	edc3 7a00 	vstr	s15, [r3]
					MotorDrive();
 80019da:	f000 fe7d 	bl	80026d8 <MotorDrive>
					a = 4;
 80019de:	4b29      	ldr	r3, [pc, #164]	@ (8001a84 <main+0x578>)
 80019e0:	2204      	movs	r2, #4
 80019e2:	701a      	strb	r2, [r3, #0]
				}//Gripper FW Vacuum Off
				if(Arrived == 1 && ActualGripper == 1 && ActualVacuum == 0){
 80019e4:	4b21      	ldr	r3, [pc, #132]	@ (8001a6c <main+0x560>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d122      	bne.n	8001a32 <main+0x526>
 80019ec:	4b26      	ldr	r3, [pc, #152]	@ (8001a88 <main+0x57c>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d11e      	bne.n	8001a32 <main+0x526>
 80019f4:	4b25      	ldr	r3, [pc, #148]	@ (8001a8c <main+0x580>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d11a      	bne.n	8001a32 <main+0x526>
					registerFrame[0x10].U16 = 4;
 80019fc:	4b16      	ldr	r3, [pc, #88]	@ (8001a58 <main+0x54c>)
 80019fe:	2204      	movs	r2, #4
 8001a00:	841a      	strh	r2, [r3, #32]
					j += 1;
 8001a02:	4b1f      	ldr	r3, [pc, #124]	@ (8001a80 <main+0x574>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	3301      	adds	r3, #1
 8001a08:	4a1d      	ldr	r2, [pc, #116]	@ (8001a80 <main+0x574>)
 8001a0a:	6013      	str	r3, [r2, #0]
					a = 5;
 8001a0c:	4b1d      	ldr	r3, [pc, #116]	@ (8001a84 <main+0x578>)
 8001a0e:	2205      	movs	r2, #5
 8001a10:	701a      	strb	r2, [r3, #0]
				if(Arrived == 1 && ActualGripper == 1 && ActualVacuum == 0){
 8001a12:	e00e      	b.n	8001a32 <main+0x526>
					}
			}else if(j==5){
 8001a14:	4b1a      	ldr	r3, [pc, #104]	@ (8001a80 <main+0x574>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b05      	cmp	r3, #5
 8001a1a:	f47f add7 	bne.w	80015cc <main+0xc0>
				registerFrame[0x10].U16 = 0;
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001a58 <main+0x54c>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	841a      	strh	r2, [r3, #32]
				j = 0;
 8001a24:	4b16      	ldr	r3, [pc, #88]	@ (8001a80 <main+0x574>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	601a      	str	r2, [r3, #0]
				a = 6;
 8001a2a:	4b16      	ldr	r3, [pc, #88]	@ (8001a84 <main+0x578>)
 8001a2c:	2206      	movs	r2, #6
 8001a2e:	701a      	strb	r2, [r3, #0]
 8001a30:	e5cc      	b.n	80015cc <main+0xc0>
				if(Arrived == 1 && ActualGripper == 1 && ActualVacuum == 0){
 8001a32:	bf00      	nop
  {
 8001a34:	e5ca      	b.n	80015cc <main+0xc0>
 8001a36:	bf00      	nop
 8001a38:	200008e4 	.word	0x200008e4
 8001a3c:	200008e5 	.word	0x200008e5
 8001a40:	20000240 	.word	0x20000240
 8001a44:	200008e9 	.word	0x200008e9
 8001a48:	200008e8 	.word	0x200008e8
 8001a4c:	200008ac 	.word	0x200008ac
 8001a50:	20000fc9 	.word	0x20000fc9
 8001a54:	20000f80 	.word	0x20000f80
 8001a58:	20000df0 	.word	0x20000df0
 8001a5c:	20000fcc 	.word	0x20000fcc
 8001a60:	48000800 	.word	0x48000800
 8001a64:	cccccccd 	.word	0xcccccccd
 8001a68:	200008f4 	.word	0x200008f4
 8001a6c:	20000fc8 	.word	0x20000fc8
 8001a70:	20000f9c 	.word	0x20000f9c
 8001a74:	20000fa4 	.word	0x20000fa4
 8001a78:	20000fac 	.word	0x20000fac
 8001a7c:	20000fb8 	.word	0x20000fb8
 8001a80:	20000fc4 	.word	0x20000fc4
 8001a84:	20000fca 	.word	0x20000fca
 8001a88:	20000f9b 	.word	0x20000f9b
 8001a8c:	20000f9a 	.word	0x20000f9a

08001a90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b094      	sub	sp, #80	@ 0x50
 8001a94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a96:	f107 0318 	add.w	r3, r7, #24
 8001a9a:	2238      	movs	r2, #56	@ 0x38
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f007 fa98 	bl	8008fd4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001aa4:	1d3b      	adds	r3, r7, #4
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	609a      	str	r2, [r3, #8]
 8001aae:	60da      	str	r2, [r3, #12]
 8001ab0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001ab2:	2000      	movs	r0, #0
 8001ab4:	f002 fa82 	bl	8003fbc <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001abc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ac2:	2340      	movs	r3, #64	@ 0x40
 8001ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001aca:	2302      	movs	r3, #2
 8001acc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001ace:	2304      	movs	r3, #4
 8001ad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001ad2:	2355      	movs	r3, #85	@ 0x55
 8001ad4:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001ada:	2302      	movs	r3, #2
 8001adc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ae2:	f107 0318 	add.w	r3, r7, #24
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f002 fb1c 	bl	8004124 <HAL_RCC_OscConfig>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d001      	beq.n	8001af6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001af2:	f000 ffab 	bl	8002a4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001af6:	230f      	movs	r3, #15
 8001af8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001afa:	2303      	movs	r3, #3
 8001afc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001afe:	2300      	movs	r3, #0
 8001b00:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b02:	2300      	movs	r3, #0
 8001b04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001b0a:	1d3b      	adds	r3, r7, #4
 8001b0c:	2104      	movs	r1, #4
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f002 fe1a 	bl	8004748 <HAL_RCC_ClockConfig>
 8001b14:	4603      	mov	r3, r0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d001      	beq.n	8001b1e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001b1a:	f000 ff97 	bl	8002a4c <Error_Handler>
  }
}
 8001b1e:	bf00      	nop
 8001b20:	3750      	adds	r7, #80	@ 0x50
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
	...

08001b28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b098      	sub	sp, #96	@ 0x60
 8001b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b2e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]
 8001b38:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b3a:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b3e:	2200      	movs	r2, #0
 8001b40:	601a      	str	r2, [r3, #0]
 8001b42:	605a      	str	r2, [r3, #4]
 8001b44:	609a      	str	r2, [r3, #8]
 8001b46:	60da      	str	r2, [r3, #12]
 8001b48:	611a      	str	r2, [r3, #16]
 8001b4a:	615a      	str	r2, [r3, #20]
 8001b4c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b4e:	1d3b      	adds	r3, r7, #4
 8001b50:	2234      	movs	r2, #52	@ 0x34
 8001b52:	2100      	movs	r1, #0
 8001b54:	4618      	mov	r0, r3
 8001b56:	f007 fa3d 	bl	8008fd4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b5a:	4b3b      	ldr	r3, [pc, #236]	@ (8001c48 <MX_TIM1_Init+0x120>)
 8001b5c:	4a3b      	ldr	r2, [pc, #236]	@ (8001c4c <MX_TIM1_Init+0x124>)
 8001b5e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8001b60:	4b39      	ldr	r3, [pc, #228]	@ (8001c48 <MX_TIM1_Init+0x120>)
 8001b62:	22a9      	movs	r2, #169	@ 0xa9
 8001b64:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b66:	4b38      	ldr	r3, [pc, #224]	@ (8001c48 <MX_TIM1_Init+0x120>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 3999;
 8001b6c:	4b36      	ldr	r3, [pc, #216]	@ (8001c48 <MX_TIM1_Init+0x120>)
 8001b6e:	f640 729f 	movw	r2, #3999	@ 0xf9f
 8001b72:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b74:	4b34      	ldr	r3, [pc, #208]	@ (8001c48 <MX_TIM1_Init+0x120>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b7a:	4b33      	ldr	r3, [pc, #204]	@ (8001c48 <MX_TIM1_Init+0x120>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b80:	4b31      	ldr	r3, [pc, #196]	@ (8001c48 <MX_TIM1_Init+0x120>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b86:	4830      	ldr	r0, [pc, #192]	@ (8001c48 <MX_TIM1_Init+0x120>)
 8001b88:	f003 fb94 	bl	80052b4 <HAL_TIM_PWM_Init>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d001      	beq.n	8001b96 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001b92:	f000 ff5b 	bl	8002a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b96:	2300      	movs	r3, #0
 8001b98:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ba2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4827      	ldr	r0, [pc, #156]	@ (8001c48 <MX_TIM1_Init+0x120>)
 8001baa:	f005 f9a5 	bl	8006ef8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001bb4:	f000 ff4a 	bl	8002a4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bb8:	2360      	movs	r3, #96	@ 0x60
 8001bba:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bd4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001bd8:	2200      	movs	r2, #0
 8001bda:	4619      	mov	r1, r3
 8001bdc:	481a      	ldr	r0, [pc, #104]	@ (8001c48 <MX_TIM1_Init+0x120>)
 8001bde:	f004 f891 	bl	8005d04 <HAL_TIM_PWM_ConfigChannel>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d001      	beq.n	8001bec <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001be8:	f000 ff30 	bl	8002a4c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bec:	2300      	movs	r3, #0
 8001bee:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c00:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c04:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c12:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c16:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	4619      	mov	r1, r3
 8001c28:	4807      	ldr	r0, [pc, #28]	@ (8001c48 <MX_TIM1_Init+0x120>)
 8001c2a:	f005 f9fb 	bl	8007024 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c2e:	4603      	mov	r3, r0
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d001      	beq.n	8001c38 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001c34:	f000 ff0a 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c38:	4803      	ldr	r0, [pc, #12]	@ (8001c48 <MX_TIM1_Init+0x120>)
 8001c3a:	f001 f977 	bl	8002f2c <HAL_TIM_MspPostInit>

}
 8001c3e:	bf00      	nop
 8001c40:	3760      	adds	r7, #96	@ 0x60
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	20000240 	.word	0x20000240
 8001c4c:	40012c00 	.word	0x40012c00

08001c50 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b088      	sub	sp, #32
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c56:	f107 0310 	add.w	r3, r7, #16
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]
 8001c60:	609a      	str	r2, [r3, #8]
 8001c62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ce8 <MX_TIM2_Init+0x98>)
 8001c70:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c74:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c76:	4b1c      	ldr	r3, [pc, #112]	@ (8001ce8 <MX_TIM2_Init+0x98>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ce8 <MX_TIM2_Init+0x98>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001c82:	4b19      	ldr	r3, [pc, #100]	@ (8001ce8 <MX_TIM2_Init+0x98>)
 8001c84:	f04f 32ff 	mov.w	r2, #4294967295
 8001c88:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c8a:	4b17      	ldr	r3, [pc, #92]	@ (8001ce8 <MX_TIM2_Init+0x98>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c90:	4b15      	ldr	r3, [pc, #84]	@ (8001ce8 <MX_TIM2_Init+0x98>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001c96:	4814      	ldr	r0, [pc, #80]	@ (8001ce8 <MX_TIM2_Init+0x98>)
 8001c98:	f003 f9c0 	bl	800501c <HAL_TIM_Base_Init>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001ca2:	f000 fed3 	bl	8002a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ca6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001caa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001cac:	f107 0310 	add.w	r3, r7, #16
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	480d      	ldr	r0, [pc, #52]	@ (8001ce8 <MX_TIM2_Init+0x98>)
 8001cb4:	f004 f93a 	bl	8005f2c <HAL_TIM_ConfigClockSource>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001cbe:	f000 fec5 	bl	8002a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4806      	ldr	r0, [pc, #24]	@ (8001ce8 <MX_TIM2_Init+0x98>)
 8001cd0:	f005 f912 	bl	8006ef8 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001cda:	f000 feb7 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001cde:	bf00      	nop
 8001ce0:	3720      	adds	r7, #32
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	2000030c 	.word	0x2000030c

08001cec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b08c      	sub	sp, #48	@ 0x30
 8001cf0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cf2:	f107 030c 	add.w	r3, r7, #12
 8001cf6:	2224      	movs	r2, #36	@ 0x24
 8001cf8:	2100      	movs	r1, #0
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f007 f96a 	bl	8008fd4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d00:	463b      	mov	r3, r7
 8001d02:	2200      	movs	r2, #0
 8001d04:	601a      	str	r2, [r3, #0]
 8001d06:	605a      	str	r2, [r3, #4]
 8001d08:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d0a:	4b21      	ldr	r3, [pc, #132]	@ (8001d90 <MX_TIM3_Init+0xa4>)
 8001d0c:	4a21      	ldr	r2, [pc, #132]	@ (8001d94 <MX_TIM3_Init+0xa8>)
 8001d0e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d10:	4b1f      	ldr	r3, [pc, #124]	@ (8001d90 <MX_TIM3_Init+0xa4>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d16:	4b1e      	ldr	r3, [pc, #120]	@ (8001d90 <MX_TIM3_Init+0xa4>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 64799;
 8001d1c:	4b1c      	ldr	r3, [pc, #112]	@ (8001d90 <MX_TIM3_Init+0xa4>)
 8001d1e:	f64f 521f 	movw	r2, #64799	@ 0xfd1f
 8001d22:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d24:	4b1a      	ldr	r3, [pc, #104]	@ (8001d90 <MX_TIM3_Init+0xa4>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d2a:	4b19      	ldr	r3, [pc, #100]	@ (8001d90 <MX_TIM3_Init+0xa4>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d30:	2303      	movs	r3, #3
 8001d32:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d34:	2300      	movs	r3, #0
 8001d36:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d40:	2300      	movs	r3, #0
 8001d42:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d44:	2300      	movs	r3, #0
 8001d46:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001d54:	f107 030c 	add.w	r3, r7, #12
 8001d58:	4619      	mov	r1, r3
 8001d5a:	480d      	ldr	r0, [pc, #52]	@ (8001d90 <MX_TIM3_Init+0xa4>)
 8001d5c:	f003 fd16 	bl	800578c <HAL_TIM_Encoder_Init>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d001      	beq.n	8001d6a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001d66:	f000 fe71 	bl	8002a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d72:	463b      	mov	r3, r7
 8001d74:	4619      	mov	r1, r3
 8001d76:	4806      	ldr	r0, [pc, #24]	@ (8001d90 <MX_TIM3_Init+0xa4>)
 8001d78:	f005 f8be 	bl	8006ef8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001d82:	f000 fe63 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d86:	bf00      	nop
 8001d88:	3730      	adds	r7, #48	@ 0x30
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	200003d8 	.word	0x200003d8
 8001d94:	40000400 	.word	0x40000400

08001d98 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b088      	sub	sp, #32
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d9e:	f107 0310 	add.w	r3, r7, #16
 8001da2:	2200      	movs	r2, #0
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	605a      	str	r2, [r3, #4]
 8001da8:	609a      	str	r2, [r3, #8]
 8001daa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dac:	1d3b      	adds	r3, r7, #4
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001db6:	4b1d      	ldr	r3, [pc, #116]	@ (8001e2c <MX_TIM4_Init+0x94>)
 8001db8:	4a1d      	ldr	r2, [pc, #116]	@ (8001e30 <MX_TIM4_Init+0x98>)
 8001dba:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8001dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e2c <MX_TIM4_Init+0x94>)
 8001dbe:	22a9      	movs	r2, #169	@ 0xa9
 8001dc0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e2c <MX_TIM4_Init+0x94>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 4999;
 8001dc8:	4b18      	ldr	r3, [pc, #96]	@ (8001e2c <MX_TIM4_Init+0x94>)
 8001dca:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001dce:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd0:	4b16      	ldr	r3, [pc, #88]	@ (8001e2c <MX_TIM4_Init+0x94>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd6:	4b15      	ldr	r3, [pc, #84]	@ (8001e2c <MX_TIM4_Init+0x94>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ddc:	4813      	ldr	r0, [pc, #76]	@ (8001e2c <MX_TIM4_Init+0x94>)
 8001dde:	f003 f91d 	bl	800501c <HAL_TIM_Base_Init>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001de8:	f000 fe30 	bl	8002a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001df0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001df2:	f107 0310 	add.w	r3, r7, #16
 8001df6:	4619      	mov	r1, r3
 8001df8:	480c      	ldr	r0, [pc, #48]	@ (8001e2c <MX_TIM4_Init+0x94>)
 8001dfa:	f004 f897 	bl	8005f2c <HAL_TIM_ConfigClockSource>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001e04:	f000 fe22 	bl	8002a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e10:	1d3b      	adds	r3, r7, #4
 8001e12:	4619      	mov	r1, r3
 8001e14:	4805      	ldr	r0, [pc, #20]	@ (8001e2c <MX_TIM4_Init+0x94>)
 8001e16:	f005 f86f 	bl	8006ef8 <HAL_TIMEx_MasterConfigSynchronization>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001e20:	f000 fe14 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001e24:	bf00      	nop
 8001e26:	3720      	adds	r7, #32
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	200004a4 	.word	0x200004a4
 8001e30:	40000800 	.word	0x40000800

08001e34 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b088      	sub	sp, #32
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e3a:	f107 0310 	add.w	r3, r7, #16
 8001e3e:	2200      	movs	r2, #0
 8001e40:	601a      	str	r2, [r3, #0]
 8001e42:	605a      	str	r2, [r3, #4]
 8001e44:	609a      	str	r2, [r3, #8]
 8001e46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e48:	1d3b      	adds	r3, r7, #4
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]
 8001e50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001e52:	4b1d      	ldr	r3, [pc, #116]	@ (8001ec8 <MX_TIM5_Init+0x94>)
 8001e54:	4a1d      	ldr	r2, [pc, #116]	@ (8001ecc <MX_TIM5_Init+0x98>)
 8001e56:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8001e58:	4b1b      	ldr	r3, [pc, #108]	@ (8001ec8 <MX_TIM5_Init+0x94>)
 8001e5a:	22a9      	movs	r2, #169	@ 0xa9
 8001e5c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ec8 <MX_TIM5_Init+0x94>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001e64:	4b18      	ldr	r3, [pc, #96]	@ (8001ec8 <MX_TIM5_Init+0x94>)
 8001e66:	f04f 32ff 	mov.w	r2, #4294967295
 8001e6a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e6c:	4b16      	ldr	r3, [pc, #88]	@ (8001ec8 <MX_TIM5_Init+0x94>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e72:	4b15      	ldr	r3, [pc, #84]	@ (8001ec8 <MX_TIM5_Init+0x94>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001e78:	4813      	ldr	r0, [pc, #76]	@ (8001ec8 <MX_TIM5_Init+0x94>)
 8001e7a:	f003 f8cf 	bl	800501c <HAL_TIM_Base_Init>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001e84:	f000 fde2 	bl	8002a4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001e8e:	f107 0310 	add.w	r3, r7, #16
 8001e92:	4619      	mov	r1, r3
 8001e94:	480c      	ldr	r0, [pc, #48]	@ (8001ec8 <MX_TIM5_Init+0x94>)
 8001e96:	f004 f849 	bl	8005f2c <HAL_TIM_ConfigClockSource>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001ea0:	f000 fdd4 	bl	8002a4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001eac:	1d3b      	adds	r3, r7, #4
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4805      	ldr	r0, [pc, #20]	@ (8001ec8 <MX_TIM5_Init+0x94>)
 8001eb2:	f005 f821 	bl	8006ef8 <HAL_TIMEx_MasterConfigSynchronization>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001ebc:	f000 fdc6 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001ec0:	bf00      	nop
 8001ec2:	3720      	adds	r7, #32
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	20000570 	.word	0x20000570
 8001ecc:	40000c00 	.word	0x40000c00

08001ed0 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001ed4:	4b14      	ldr	r3, [pc, #80]	@ (8001f28 <MX_TIM16_Init+0x58>)
 8001ed6:	4a15      	ldr	r2, [pc, #84]	@ (8001f2c <MX_TIM16_Init+0x5c>)
 8001ed8:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8001eda:	4b13      	ldr	r3, [pc, #76]	@ (8001f28 <MX_TIM16_Init+0x58>)
 8001edc:	22a9      	movs	r2, #169	@ 0xa9
 8001ede:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ee0:	4b11      	ldr	r3, [pc, #68]	@ (8001f28 <MX_TIM16_Init+0x58>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8001ee6:	4b10      	ldr	r3, [pc, #64]	@ (8001f28 <MX_TIM16_Init+0x58>)
 8001ee8:	f240 4279 	movw	r2, #1145	@ 0x479
 8001eec:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eee:	4b0e      	ldr	r3, [pc, #56]	@ (8001f28 <MX_TIM16_Init+0x58>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f28 <MX_TIM16_Init+0x58>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001efa:	4b0b      	ldr	r3, [pc, #44]	@ (8001f28 <MX_TIM16_Init+0x58>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001f00:	4809      	ldr	r0, [pc, #36]	@ (8001f28 <MX_TIM16_Init+0x58>)
 8001f02:	f003 f88b 	bl	800501c <HAL_TIM_Base_Init>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001f0c:	f000 fd9e 	bl	8002a4c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8001f10:	2108      	movs	r1, #8
 8001f12:	4805      	ldr	r0, [pc, #20]	@ (8001f28 <MX_TIM16_Init+0x58>)
 8001f14:	f003 fb44 	bl	80055a0 <HAL_TIM_OnePulse_Init>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8001f1e:	f000 fd95 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	2000063c 	.word	0x2000063c
 8001f2c:	40014400 	.word	0x40014400

08001f30 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f34:	4b23      	ldr	r3, [pc, #140]	@ (8001fc4 <MX_USART2_UART_Init+0x94>)
 8001f36:	4a24      	ldr	r2, [pc, #144]	@ (8001fc8 <MX_USART2_UART_Init+0x98>)
 8001f38:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001f3a:	4b22      	ldr	r3, [pc, #136]	@ (8001fc4 <MX_USART2_UART_Init+0x94>)
 8001f3c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8001f40:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001f42:	4b20      	ldr	r3, [pc, #128]	@ (8001fc4 <MX_USART2_UART_Init+0x94>)
 8001f44:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001f48:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f4a:	4b1e      	ldr	r3, [pc, #120]	@ (8001fc4 <MX_USART2_UART_Init+0x94>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001f50:	4b1c      	ldr	r3, [pc, #112]	@ (8001fc4 <MX_USART2_UART_Init+0x94>)
 8001f52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f56:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f58:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc4 <MX_USART2_UART_Init+0x94>)
 8001f5a:	220c      	movs	r2, #12
 8001f5c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f5e:	4b19      	ldr	r3, [pc, #100]	@ (8001fc4 <MX_USART2_UART_Init+0x94>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f64:	4b17      	ldr	r3, [pc, #92]	@ (8001fc4 <MX_USART2_UART_Init+0x94>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f6a:	4b16      	ldr	r3, [pc, #88]	@ (8001fc4 <MX_USART2_UART_Init+0x94>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f70:	4b14      	ldr	r3, [pc, #80]	@ (8001fc4 <MX_USART2_UART_Init+0x94>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f76:	4b13      	ldr	r3, [pc, #76]	@ (8001fc4 <MX_USART2_UART_Init+0x94>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f7c:	4811      	ldr	r0, [pc, #68]	@ (8001fc4 <MX_USART2_UART_Init+0x94>)
 8001f7e:	f005 f935 	bl	80071ec <HAL_UART_Init>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8001f88:	f000 fd60 	bl	8002a4c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	480d      	ldr	r0, [pc, #52]	@ (8001fc4 <MX_USART2_UART_Init+0x94>)
 8001f90:	f006 ff55 	bl	8008e3e <HAL_UARTEx_SetTxFifoThreshold>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8001f9a:	f000 fd57 	bl	8002a4c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4808      	ldr	r0, [pc, #32]	@ (8001fc4 <MX_USART2_UART_Init+0x94>)
 8001fa2:	f006 ff8a 	bl	8008eba <HAL_UARTEx_SetRxFifoThreshold>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d001      	beq.n	8001fb0 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8001fac:	f000 fd4e 	bl	8002a4c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001fb0:	4804      	ldr	r0, [pc, #16]	@ (8001fc4 <MX_USART2_UART_Init+0x94>)
 8001fb2:	f006 ff0b 	bl	8008dcc <HAL_UARTEx_DisableFifoMode>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8001fbc:	f000 fd46 	bl	8002a4c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fc0:	bf00      	nop
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	20000708 	.word	0x20000708
 8001fc8:	40004400 	.word	0x40004400

08001fcc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b082      	sub	sp, #8
 8001fd0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001fd2:	4b16      	ldr	r3, [pc, #88]	@ (800202c <MX_DMA_Init+0x60>)
 8001fd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fd6:	4a15      	ldr	r2, [pc, #84]	@ (800202c <MX_DMA_Init+0x60>)
 8001fd8:	f043 0304 	orr.w	r3, r3, #4
 8001fdc:	6493      	str	r3, [r2, #72]	@ 0x48
 8001fde:	4b13      	ldr	r3, [pc, #76]	@ (800202c <MX_DMA_Init+0x60>)
 8001fe0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fe2:	f003 0304 	and.w	r3, r3, #4
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fea:	4b10      	ldr	r3, [pc, #64]	@ (800202c <MX_DMA_Init+0x60>)
 8001fec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fee:	4a0f      	ldr	r2, [pc, #60]	@ (800202c <MX_DMA_Init+0x60>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	6493      	str	r3, [r2, #72]	@ 0x48
 8001ff6:	4b0d      	ldr	r3, [pc, #52]	@ (800202c <MX_DMA_Init+0x60>)
 8001ff8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	603b      	str	r3, [r7, #0]
 8002000:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002002:	2200      	movs	r2, #0
 8002004:	2100      	movs	r1, #0
 8002006:	200b      	movs	r0, #11
 8002008:	f001 fa8d 	bl	8003526 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800200c:	200b      	movs	r0, #11
 800200e:	f001 faa4 	bl	800355a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8002012:	2200      	movs	r2, #0
 8002014:	2100      	movs	r1, #0
 8002016:	200c      	movs	r0, #12
 8002018:	f001 fa85 	bl	8003526 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800201c:	200c      	movs	r0, #12
 800201e:	f001 fa9c 	bl	800355a <HAL_NVIC_EnableIRQ>

}
 8002022:	bf00      	nop
 8002024:	3708      	adds	r7, #8
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40021000 	.word	0x40021000

08002030 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08a      	sub	sp, #40	@ 0x28
 8002034:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002036:	f107 0314 	add.w	r3, r7, #20
 800203a:	2200      	movs	r2, #0
 800203c:	601a      	str	r2, [r3, #0]
 800203e:	605a      	str	r2, [r3, #4]
 8002040:	609a      	str	r2, [r3, #8]
 8002042:	60da      	str	r2, [r3, #12]
 8002044:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002046:	4b68      	ldr	r3, [pc, #416]	@ (80021e8 <MX_GPIO_Init+0x1b8>)
 8002048:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800204a:	4a67      	ldr	r2, [pc, #412]	@ (80021e8 <MX_GPIO_Init+0x1b8>)
 800204c:	f043 0304 	orr.w	r3, r3, #4
 8002050:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002052:	4b65      	ldr	r3, [pc, #404]	@ (80021e8 <MX_GPIO_Init+0x1b8>)
 8002054:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002056:	f003 0304 	and.w	r3, r3, #4
 800205a:	613b      	str	r3, [r7, #16]
 800205c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800205e:	4b62      	ldr	r3, [pc, #392]	@ (80021e8 <MX_GPIO_Init+0x1b8>)
 8002060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002062:	4a61      	ldr	r2, [pc, #388]	@ (80021e8 <MX_GPIO_Init+0x1b8>)
 8002064:	f043 0320 	orr.w	r3, r3, #32
 8002068:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800206a:	4b5f      	ldr	r3, [pc, #380]	@ (80021e8 <MX_GPIO_Init+0x1b8>)
 800206c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800206e:	f003 0320 	and.w	r3, r3, #32
 8002072:	60fb      	str	r3, [r7, #12]
 8002074:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002076:	4b5c      	ldr	r3, [pc, #368]	@ (80021e8 <MX_GPIO_Init+0x1b8>)
 8002078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800207a:	4a5b      	ldr	r2, [pc, #364]	@ (80021e8 <MX_GPIO_Init+0x1b8>)
 800207c:	f043 0301 	orr.w	r3, r3, #1
 8002080:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002082:	4b59      	ldr	r3, [pc, #356]	@ (80021e8 <MX_GPIO_Init+0x1b8>)
 8002084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002086:	f003 0301 	and.w	r3, r3, #1
 800208a:	60bb      	str	r3, [r7, #8]
 800208c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800208e:	4b56      	ldr	r3, [pc, #344]	@ (80021e8 <MX_GPIO_Init+0x1b8>)
 8002090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002092:	4a55      	ldr	r2, [pc, #340]	@ (80021e8 <MX_GPIO_Init+0x1b8>)
 8002094:	f043 0302 	orr.w	r3, r3, #2
 8002098:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800209a:	4b53      	ldr	r3, [pc, #332]	@ (80021e8 <MX_GPIO_Init+0x1b8>)
 800209c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209e:	f003 0302 	and.w	r3, r3, #2
 80020a2:	607b      	str	r3, [r7, #4]
 80020a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 80020a6:	2200      	movs	r2, #0
 80020a8:	210a      	movs	r1, #10
 80020aa:	4850      	ldr	r0, [pc, #320]	@ (80021ec <MX_GPIO_Init+0x1bc>)
 80020ac:	f001 ff3c 	bl	8003f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80020b0:	2200      	movs	r2, #0
 80020b2:	2120      	movs	r1, #32
 80020b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80020b8:	f001 ff36 	bl	8003f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|Relay4_Pin, GPIO_PIN_RESET);
 80020bc:	2200      	movs	r2, #0
 80020be:	f240 2106 	movw	r1, #518	@ 0x206
 80020c2:	484b      	ldr	r0, [pc, #300]	@ (80021f0 <MX_GPIO_Init+0x1c0>)
 80020c4:	f001 ff30 	bl	8003f28 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80020c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80020ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80020d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	4619      	mov	r1, r3
 80020de:	4843      	ldr	r0, [pc, #268]	@ (80021ec <MX_GPIO_Init+0x1bc>)
 80020e0:	f001 fd88 	bl	8003bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80020e4:	230a      	movs	r3, #10
 80020e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020e8:	2301      	movs	r3, #1
 80020ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ec:	2300      	movs	r3, #0
 80020ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020f0:	2300      	movs	r3, #0
 80020f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020f4:	f107 0314 	add.w	r3, r7, #20
 80020f8:	4619      	mov	r1, r3
 80020fa:	483c      	ldr	r0, [pc, #240]	@ (80021ec <MX_GPIO_Init+0x1bc>)
 80020fc:	f001 fd7a 	bl	8003bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 PA8
                           PA9 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_8
 8002100:	f240 7313 	movw	r3, #1811	@ 0x713
 8002104:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002106:	2300      	movs	r3, #0
 8002108:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800210a:	2301      	movs	r3, #1
 800210c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210e:	f107 0314 	add.w	r3, r7, #20
 8002112:	4619      	mov	r1, r3
 8002114:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002118:	f001 fd6c 	bl	8003bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800211c:	2320      	movs	r3, #32
 800211e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002120:	2301      	movs	r3, #1
 8002122:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002128:	2300      	movs	r3, #0
 800212a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800212c:	f107 0314 	add.w	r3, r7, #20
 8002130:	4619      	mov	r1, r3
 8002132:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002136:	f001 fd5d 	bl	8003bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800213a:	2301      	movs	r3, #1
 800213c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800213e:	2300      	movs	r3, #0
 8002140:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002142:	2301      	movs	r3, #1
 8002144:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002146:	f107 0314 	add.w	r3, r7, #20
 800214a:	4619      	mov	r1, r3
 800214c:	4828      	ldr	r0, [pc, #160]	@ (80021f0 <MX_GPIO_Init+0x1c0>)
 800214e:	f001 fd51 	bl	8003bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 Relay4_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|Relay4_Pin;
 8002152:	f240 2306 	movw	r3, #518	@ 0x206
 8002156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002158:	2301      	movs	r3, #1
 800215a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215c:	2300      	movs	r3, #0
 800215e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002160:	2300      	movs	r3, #0
 8002162:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002164:	f107 0314 	add.w	r3, r7, #20
 8002168:	4619      	mov	r1, r3
 800216a:	4821      	ldr	r0, [pc, #132]	@ (80021f0 <MX_GPIO_Init+0x1c0>)
 800216c:	f001 fd42 	bl	8003bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002170:	2380      	movs	r3, #128	@ 0x80
 8002172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8002174:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8002178:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800217e:	f107 0314 	add.w	r3, r7, #20
 8002182:	4619      	mov	r1, r3
 8002184:	4819      	ldr	r0, [pc, #100]	@ (80021ec <MX_GPIO_Init+0x1bc>)
 8002186:	f001 fd35 	bl	8003bf4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800218a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800218e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002190:	2300      	movs	r3, #0
 8002192:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002194:	2301      	movs	r3, #1
 8002196:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002198:	f107 0314 	add.w	r3, r7, #20
 800219c:	4619      	mov	r1, r3
 800219e:	4813      	ldr	r0, [pc, #76]	@ (80021ec <MX_GPIO_Init+0x1bc>)
 80021a0:	f001 fd28 	bl	8003bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021a4:	2340      	movs	r3, #64	@ 0x40
 80021a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021a8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80021ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b2:	f107 0314 	add.w	r3, r7, #20
 80021b6:	4619      	mov	r1, r3
 80021b8:	480d      	ldr	r0, [pc, #52]	@ (80021f0 <MX_GPIO_Init+0x1c0>)
 80021ba:	f001 fd1b 	bl	8003bf4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80021be:	2200      	movs	r2, #0
 80021c0:	2100      	movs	r1, #0
 80021c2:	2017      	movs	r0, #23
 80021c4:	f001 f9af 	bl	8003526 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80021c8:	2017      	movs	r0, #23
 80021ca:	f001 f9c6 	bl	800355a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80021ce:	2200      	movs	r2, #0
 80021d0:	2100      	movs	r1, #0
 80021d2:	2028      	movs	r0, #40	@ 0x28
 80021d4:	f001 f9a7 	bl	8003526 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80021d8:	2028      	movs	r0, #40	@ 0x28
 80021da:	f001 f9be 	bl	800355a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021de:	bf00      	nop
 80021e0:	3728      	adds	r7, #40	@ 0x28
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	40021000 	.word	0x40021000
 80021ec:	48000800 	.word	0x48000800
 80021f0:	48000400 	.word	0x48000400

080021f4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback (uint16_t GPIO_Pin)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	4603      	mov	r3, r0
 80021fc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_7){ //limitBottom
 80021fe:	88fb      	ldrh	r3, [r7, #6]
 8002200:	2b80      	cmp	r3, #128	@ 0x80
 8002202:	d10a      	bne.n	800221a <HAL_GPIO_EXTI_Callback+0x26>
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002204:	4b0d      	ldr	r3, [pc, #52]	@ (800223c <HAL_GPIO_EXTI_Callback+0x48>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2200      	movs	r2, #0
 800220a:	635a      	str	r2, [r3, #52]	@ 0x34
		HomePos = QEIdata.TotalPos;
 800220c:	4b0c      	ldr	r3, [pc, #48]	@ (8002240 <HAL_GPIO_EXTI_Callback+0x4c>)
 800220e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002210:	4a0c      	ldr	r2, [pc, #48]	@ (8002244 <HAL_GPIO_EXTI_Callback+0x50>)
 8002212:	6013      	str	r3, [r2, #0]
		registerFrame[0x10].U16 = 0;
 8002214:	4b0c      	ldr	r3, [pc, #48]	@ (8002248 <HAL_GPIO_EXTI_Callback+0x54>)
 8002216:	2200      	movs	r2, #0
 8002218:	841a      	strh	r2, [r3, #32]


	}
	if(GPIO_Pin == GPIO_PIN_6){
 800221a:	88fb      	ldrh	r3, [r7, #6]
 800221c:	2b40      	cmp	r3, #64	@ 0x40
 800221e:	d106      	bne.n	800222e <HAL_GPIO_EXTI_Callback+0x3a>
		mode = 1;
 8002220:	4b0a      	ldr	r3, [pc, #40]	@ (800224c <HAL_GPIO_EXTI_Callback+0x58>)
 8002222:	2201      	movs	r2, #1
 8002224:	701a      	strb	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8002226:	4b05      	ldr	r3, [pc, #20]	@ (800223c <HAL_GPIO_EXTI_Callback+0x48>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2200      	movs	r2, #0
 800222c:	635a      	str	r2, [r3, #52]	@ 0x34

	}
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	20000240 	.word	0x20000240
 8002240:	200008b0 	.word	0x200008b0
 8002244:	20000f8c 	.word	0x20000f8c
 8002248:	20000df0 	.word	0x20000df0
 800224c:	20000204 	.word	0x20000204

08002250 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002250:	b5b0      	push	{r4, r5, r7, lr}
 8002252:	b082      	sub	sp, #8
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
	if(htim == &htim4)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a0e      	ldr	r2, [pc, #56]	@ (8002294 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d103      	bne.n	8002268 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		registerFrame[0].U16 = 22881;
 8002260:	4b0d      	ldr	r3, [pc, #52]	@ (8002298 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8002262:	f645 1261 	movw	r2, #22881	@ 0x5961
 8002266:	801a      	strh	r2, [r3, #0]
	}
	if (htim == &htim5) {
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	4a0c      	ldr	r2, [pc, #48]	@ (800229c <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d10d      	bne.n	800228c <HAL_TIM_PeriodElapsedCallback+0x3c>
		upper += 1;
 8002270:	4b0b      	ldr	r3, [pc, #44]	@ (80022a0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002276:	1c54      	adds	r4, r2, #1
 8002278:	f143 0500 	adc.w	r5, r3, #0
 800227c:	4b08      	ldr	r3, [pc, #32]	@ (80022a0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800227e:	e9c3 4500 	strd	r4, r5, [r3]
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8002282:	2120      	movs	r1, #32
 8002284:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002288:	f001 fe66 	bl	8003f58 <HAL_GPIO_TogglePin>
	}
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bdb0      	pop	{r4, r5, r7, pc}
 8002294:	200004a4 	.word	0x200004a4
 8002298:	20000df0 	.word	0x20000df0
 800229c:	20000570 	.word	0x20000570
 80022a0:	20000898 	.word	0x20000898

080022a4 <convert_to_string>:

void convert_to_string(uint16_t number, char* buffer, int buffer_size) {
 80022a4:	b480      	push	{r7}
 80022a6:	b087      	sub	sp, #28
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	4603      	mov	r3, r0
 80022ac:	60b9      	str	r1, [r7, #8]
 80022ae:	607a      	str	r2, [r7, #4]
 80022b0:	81fb      	strh	r3, [r7, #14]
  if (buffer_size < 6) { // Ensure buffer size is at least 6 (for 5 digits + null terminator)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2b05      	cmp	r3, #5
 80022b6:	dd26      	ble.n	8002306 <convert_to_string+0x62>
    return; // Handle error (insufficient buffer size)
  }

  int index = 0;
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]
  do {
    uint8_t digit = number % 10;
 80022bc:	89fa      	ldrh	r2, [r7, #14]
 80022be:	4b15      	ldr	r3, [pc, #84]	@ (8002314 <convert_to_string+0x70>)
 80022c0:	fba3 1302 	umull	r1, r3, r3, r2
 80022c4:	08d9      	lsrs	r1, r3, #3
 80022c6:	460b      	mov	r3, r1
 80022c8:	009b      	lsls	r3, r3, #2
 80022ca:	440b      	add	r3, r1
 80022cc:	005b      	lsls	r3, r3, #1
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	74fb      	strb	r3, [r7, #19]
    buffer[index++] = digit + '0';
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	1c5a      	adds	r2, r3, #1
 80022d8:	617a      	str	r2, [r7, #20]
 80022da:	461a      	mov	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	4413      	add	r3, r2
 80022e0:	7cfa      	ldrb	r2, [r7, #19]
 80022e2:	3230      	adds	r2, #48	@ 0x30
 80022e4:	b2d2      	uxtb	r2, r2
 80022e6:	701a      	strb	r2, [r3, #0]
    number /= 10;
 80022e8:	89fb      	ldrh	r3, [r7, #14]
 80022ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002314 <convert_to_string+0x70>)
 80022ec:	fba2 2303 	umull	r2, r3, r2, r3
 80022f0:	08db      	lsrs	r3, r3, #3
 80022f2:	81fb      	strh	r3, [r7, #14]
  } while (number > 0);
 80022f4:	89fb      	ldrh	r3, [r7, #14]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d1e0      	bne.n	80022bc <convert_to_string+0x18>
  buffer[index] = '\0';
 80022fa:	697b      	ldr	r3, [r7, #20]
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	4413      	add	r3, r2
 8002300:	2200      	movs	r2, #0
 8002302:	701a      	strb	r2, [r3, #0]
 8002304:	e000      	b.n	8002308 <convert_to_string+0x64>
    return; // Handle error (insufficient buffer size)
 8002306:	bf00      	nop
}
 8002308:	371c      	adds	r7, #28
 800230a:	46bd      	mov	sp, r7
 800230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002310:	4770      	bx	lr
 8002312:	bf00      	nop
 8002314:	cccccccd 	.word	0xcccccccd

08002318 <GoPick>:

void GoPick() {
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
	a=0;
 800231c:	4b13      	ldr	r3, [pc, #76]	@ (800236c <GoPick+0x54>)
 800231e:	2200      	movs	r2, #0
 8002320:	701a      	strb	r2, [r3, #0]
	b_check[5] = 1;
 8002322:	4b13      	ldr	r3, [pc, #76]	@ (8002370 <GoPick+0x58>)
 8002324:	2201      	movs	r2, #1
 8002326:	715a      	strb	r2, [r3, #5]

	Goal = GoalPick[j];
 8002328:	4b12      	ldr	r3, [pc, #72]	@ (8002374 <GoPick+0x5c>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a12      	ldr	r2, [pc, #72]	@ (8002378 <GoPick+0x60>)
 800232e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002332:	ee07 3a90 	vmov	s15, r3
 8002336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800233a:	4b10      	ldr	r3, [pc, #64]	@ (800237c <GoPick+0x64>)
 800233c:	edc3 7a00 	vstr	s15, [r3]
	MotorDrive();
 8002340:	f000 f9ca 	bl	80026d8 <MotorDrive>
  //Gripper FW Vacuum On
	if(Arrived == 1 && ActualGripper == 1 && ActualVacuum == 1){
 8002344:	4b0e      	ldr	r3, [pc, #56]	@ (8002380 <GoPick+0x68>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d10d      	bne.n	8002368 <GoPick+0x50>
 800234c:	4b0d      	ldr	r3, [pc, #52]	@ (8002384 <GoPick+0x6c>)
 800234e:	781b      	ldrb	r3, [r3, #0]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d109      	bne.n	8002368 <GoPick+0x50>
 8002354:	4b0c      	ldr	r3, [pc, #48]	@ (8002388 <GoPick+0x70>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d105      	bne.n	8002368 <GoPick+0x50>
		registerFrame[0x10].U16 = 8;
 800235c:	4b0b      	ldr	r3, [pc, #44]	@ (800238c <GoPick+0x74>)
 800235e:	2208      	movs	r2, #8
 8002360:	841a      	strh	r2, [r3, #32]
		a = 2;
 8002362:	4b02      	ldr	r3, [pc, #8]	@ (800236c <GoPick+0x54>)
 8002364:	2202      	movs	r2, #2
 8002366:	701a      	strb	r2, [r3, #0]
	}
}
 8002368:	bf00      	nop
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20000fca 	.word	0x20000fca
 8002370:	20000fcc 	.word	0x20000fcc
 8002374:	20000fc4 	.word	0x20000fc4
 8002378:	20000fac 	.word	0x20000fac
 800237c:	200008f4 	.word	0x200008f4
 8002380:	20000fc8 	.word	0x20000fc8
 8002384:	20000f9b 	.word	0x20000f9b
 8002388:	20000f9a 	.word	0x20000f9a
 800238c:	20000df0 	.word	0x20000df0

08002390 <Micros>:
void GoPlace() {

}


uint64_t Micros() {
 8002390:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
 8002394:	b084      	sub	sp, #16
 8002396:	af00      	add	r7, sp, #0
//	static uint32_t timestamp = 0;
	uint32_t lower = 0;
 8002398:	2300      	movs	r3, #0
 800239a:	60fb      	str	r3, [r7, #12]
	uint64_t time = 0;
 800239c:	f04f 0200 	mov.w	r2, #0
 80023a0:	f04f 0300 	mov.w	r3, #0
 80023a4:	e9c7 2300 	strd	r2, r3, [r7]
	lower = __HAL_TIM_GET_COUNTER(&htim5);
 80023a8:	4b10      	ldr	r3, [pc, #64]	@ (80023ec <Micros+0x5c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ae:	60fb      	str	r3, [r7, #12]
	time = (upper << 32) | lower;
 80023b0:	4b0f      	ldr	r3, [pc, #60]	@ (80023f0 <Micros+0x60>)
 80023b2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80023b6:	f04f 0200 	mov.w	r2, #0
 80023ba:	f04f 0300 	mov.w	r3, #0
 80023be:	4643      	mov	r3, r8
 80023c0:	2200      	movs	r2, #0
 80023c2:	68fe      	ldr	r6, [r7, #12]
 80023c4:	f04f 0c00 	mov.w	ip, #0
 80023c8:	4630      	mov	r0, r6
 80023ca:	4661      	mov	r1, ip
 80023cc:	ea42 0400 	orr.w	r4, r2, r0
 80023d0:	ea43 0501 	orr.w	r5, r3, r1
 80023d4:	e9c7 4500 	strd	r4, r5, [r7]
	return time;
 80023d8:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80023dc:	4610      	mov	r0, r2
 80023de:	4619      	mov	r1, r3
 80023e0:	3710      	adds	r7, #16
 80023e2:	46bd      	mov	sp, r7
 80023e4:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	20000570 	.word	0x20000570
 80023f0:	20000898 	.word	0x20000898
 80023f4:	00000000 	.word	0x00000000

080023f8 <QEIEncoderPosVel_Update>:

void QEIEncoderPosVel_Update() {
 80023f8:	b5b0      	push	{r4, r5, r7, lr}
 80023fa:	b084      	sub	sp, #16
 80023fc:	af00      	add	r7, sp, #0
	CurrentPos = QEIdata.TotalPos-HomePos;
 80023fe:	4b66      	ldr	r3, [pc, #408]	@ (8002598 <QEIEncoderPosVel_Update+0x1a0>)
 8002400:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002404:	4b65      	ldr	r3, [pc, #404]	@ (800259c <QEIEncoderPosVel_Update+0x1a4>)
 8002406:	edd3 7a00 	vldr	s15, [r3]
 800240a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800240e:	4b64      	ldr	r3, [pc, #400]	@ (80025a0 <QEIEncoderPosVel_Update+0x1a8>)
 8002410:	edc3 7a00 	vstr	s15, [r3]
	//collect data
	QEIdata.TimeStamp[NEW] = Micros();
 8002414:	f7ff ffbc 	bl	8002390 <Micros>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	495e      	ldr	r1, [pc, #376]	@ (8002598 <QEIEncoderPosVel_Update+0x1a0>)
 800241e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	QEIdata.Position[NEW] = __HAL_TIM_GET_COUNTER(&htim3);
 8002422:	4b60      	ldr	r3, [pc, #384]	@ (80025a4 <QEIEncoderPosVel_Update+0x1ac>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002428:	4a5b      	ldr	r2, [pc, #364]	@ (8002598 <QEIEncoderPosVel_Update+0x1a0>)
 800242a:	6013      	str	r3, [r2, #0]
	//Position 1 turn calculation
	QEIdata.QEIPostion_1turn[NEW] = QEIdata.Position[NEW] % 800;
 800242c:	4b5a      	ldr	r3, [pc, #360]	@ (8002598 <QEIEncoderPosVel_Update+0x1a0>)
 800242e:	681a      	ldr	r2, [r3, #0]
 8002430:	4b5d      	ldr	r3, [pc, #372]	@ (80025a8 <QEIEncoderPosVel_Update+0x1b0>)
 8002432:	fba3 1302 	umull	r1, r3, r3, r2
 8002436:	0a1b      	lsrs	r3, r3, #8
 8002438:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800243c:	fb01 f303 	mul.w	r3, r1, r3
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	ee07 3a90 	vmov	s15, r3
 8002446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800244a:	4b53      	ldr	r3, [pc, #332]	@ (8002598 <QEIEncoderPosVel_Update+0x1a0>)
 800244c:	edc3 7a06 	vstr	s15, [r3, #24]
	QEIdata.Angle = QEIdata.QEIPostion_1turn[NEW] * 360 / 800;
 8002450:	4b51      	ldr	r3, [pc, #324]	@ (8002598 <QEIEncoderPosVel_Update+0x1a0>)
 8002452:	edd3 7a06 	vldr	s15, [r3, #24]
 8002456:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 80025ac <QEIEncoderPosVel_Update+0x1b4>
 800245a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800245e:	eddf 6a54 	vldr	s13, [pc, #336]	@ 80025b0 <QEIEncoderPosVel_Update+0x1b8>
 8002462:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002466:	4b4c      	ldr	r3, [pc, #304]	@ (8002598 <QEIEncoderPosVel_Update+0x1a0>)
 8002468:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	//calculate dx
	int32_t diffPosition = QEIdata.Position[NEW] - QEIdata.Position[OLD];
 800246c:	4b4a      	ldr	r3, [pc, #296]	@ (8002598 <QEIEncoderPosVel_Update+0x1a0>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	4b49      	ldr	r3, [pc, #292]	@ (8002598 <QEIEncoderPosVel_Update+0x1a0>)
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	60fb      	str	r3, [r7, #12]
	int32_t diff1turn = QEIdata.QEIPostion_1turn[NEW] - QEIdata.QEIPostion_1turn[OLD];
 8002478:	4b47      	ldr	r3, [pc, #284]	@ (8002598 <QEIEncoderPosVel_Update+0x1a0>)
 800247a:	ed93 7a06 	vldr	s14, [r3, #24]
 800247e:	4b46      	ldr	r3, [pc, #280]	@ (8002598 <QEIEncoderPosVel_Update+0x1a0>)
 8002480:	edd3 7a07 	vldr	s15, [r3, #28]
 8002484:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002488:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800248c:	ee17 3a90 	vmov	r3, s15
 8002490:	60bb      	str	r3, [r7, #8]
	//Handle Warp around
	if (diffPosition > 32400) {
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	f647 6290 	movw	r2, #32400	@ 0x7e90
 8002498:	4293      	cmp	r3, r2
 800249a:	dd04      	ble.n	80024a6 <QEIEncoderPosVel_Update+0xae>
		diffPosition -= 64800;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f5a3 437d 	sub.w	r3, r3, #64768	@ 0xfd00
 80024a2:	3b20      	subs	r3, #32
 80024a4:	60fb      	str	r3, [r7, #12]
	}
	if (diffPosition < -32400) {
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	4a42      	ldr	r2, [pc, #264]	@ (80025b4 <QEIEncoderPosVel_Update+0x1bc>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	da04      	bge.n	80024b8 <QEIEncoderPosVel_Update+0xc0>
		diffPosition += 64800;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f503 437d 	add.w	r3, r3, #64768	@ 0xfd00
 80024b4:	3320      	adds	r3, #32
 80024b6:	60fb      	str	r3, [r7, #12]
	}
	//Calculate Linear Position in mm unit
	if (diff1turn > 400) {
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 80024be:	dd09      	ble.n	80024d4 <QEIEncoderPosVel_Update+0xdc>
		QEIdata.QEIRound -= 1;
 80024c0:	4b35      	ldr	r3, [pc, #212]	@ (8002598 <QEIEncoderPosVel_Update+0x1a0>)
 80024c2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80024c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80024ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024ce:	4b32      	ldr	r3, [pc, #200]	@ (8002598 <QEIEncoderPosVel_Update+0x1a0>)
 80024d0:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}
	if (diff1turn < -400) {
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	f513 7fc8 	cmn.w	r3, #400	@ 0x190
 80024da:	da09      	bge.n	80024f0 <QEIEncoderPosVel_Update+0xf8>
		QEIdata.QEIRound += 1;
 80024dc:	4b2e      	ldr	r3, [pc, #184]	@ (8002598 <QEIEncoderPosVel_Update+0x1a0>)
 80024de:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80024e2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80024e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002598 <QEIEncoderPosVel_Update+0x1a0>)
 80024ec:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
	}
	QEIdata.TotalPos = (QEIdata.QEIRound * 14) + QEIdata.QEIPostion_1turn[NEW] * 14 / 800; //linear pos in mm uint
 80024f0:	4b29      	ldr	r3, [pc, #164]	@ (8002598 <QEIEncoderPosVel_Update+0x1a0>)
 80024f2:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 80024f6:	eeb2 7a0c 	vmov.f32	s14, #44	@ 0x41600000  14.0
 80024fa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024fe:	4b26      	ldr	r3, [pc, #152]	@ (8002598 <QEIEncoderPosVel_Update+0x1a0>)
 8002500:	edd3 7a06 	vldr	s15, [r3, #24]
 8002504:	eef2 6a0c 	vmov.f32	s13, #44	@ 0x41600000  14.0
 8002508:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800250c:	ed9f 6a28 	vldr	s12, [pc, #160]	@ 80025b0 <QEIEncoderPosVel_Update+0x1b8>
 8002510:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8002514:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002518:	4b1f      	ldr	r3, [pc, #124]	@ (8002598 <QEIEncoderPosVel_Update+0x1a0>)
 800251a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

			//calculate dt
	float diffTime = (QEIdata.TimeStamp[NEW] - QEIdata.TimeStamp[OLD])
 800251e:	4b1e      	ldr	r3, [pc, #120]	@ (8002598 <QEIEncoderPosVel_Update+0x1a0>)
 8002520:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002524:	4b1c      	ldr	r3, [pc, #112]	@ (8002598 <QEIEncoderPosVel_Update+0x1a0>)
 8002526:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800252a:	1a84      	subs	r4, r0, r2
 800252c:	eb61 0503 	sbc.w	r5, r1, r3
			* 1e-6;
 8002530:	4620      	mov	r0, r4
 8002532:	4629      	mov	r1, r5
 8002534:	f7fd fff6 	bl	8000524 <__aeabi_ul2d>
 8002538:	a315      	add	r3, pc, #84	@ (adr r3, 8002590 <QEIEncoderPosVel_Update+0x198>)
 800253a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800253e:	f7fe f827 	bl	8000590 <__aeabi_dmul>
 8002542:	4602      	mov	r2, r0
 8002544:	460b      	mov	r3, r1
	float diffTime = (QEIdata.TimeStamp[NEW] - QEIdata.TimeStamp[OLD])
 8002546:	4610      	mov	r0, r2
 8002548:	4619      	mov	r1, r3
 800254a:	f7fe fae3 	bl	8000b14 <__aeabi_d2f>
 800254e:	4603      	mov	r3, r0
 8002550:	607b      	str	r3, [r7, #4]
	//calculate angular velocity
	QEIdata.QEIAngularVelocity = diffPosition / diffTime;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	ee07 3a90 	vmov	s15, r3
 8002558:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800255c:	ed97 7a01 	vldr	s14, [r7, #4]
 8002560:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002564:	4b0c      	ldr	r3, [pc, #48]	@ (8002598 <QEIEncoderPosVel_Update+0x1a0>)
 8002566:	edc3 7a08 	vstr	s15, [r3, #32]
	//store value for next loop
	QEIdata.Position[OLD] = QEIdata.Position[NEW];
 800256a:	4b0b      	ldr	r3, [pc, #44]	@ (8002598 <QEIEncoderPosVel_Update+0x1a0>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a0a      	ldr	r2, [pc, #40]	@ (8002598 <QEIEncoderPosVel_Update+0x1a0>)
 8002570:	6053      	str	r3, [r2, #4]
	QEIdata.TimeStamp[OLD] = QEIdata.TimeStamp[NEW];
 8002572:	4b09      	ldr	r3, [pc, #36]	@ (8002598 <QEIEncoderPosVel_Update+0x1a0>)
 8002574:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002578:	4907      	ldr	r1, [pc, #28]	@ (8002598 <QEIEncoderPosVel_Update+0x1a0>)
 800257a:	e9c1 2304 	strd	r2, r3, [r1, #16]
	QEIdata.QEIPostion_1turn[OLD] = QEIdata.QEIPostion_1turn[NEW];
 800257e:	4b06      	ldr	r3, [pc, #24]	@ (8002598 <QEIEncoderPosVel_Update+0x1a0>)
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	4a05      	ldr	r2, [pc, #20]	@ (8002598 <QEIEncoderPosVel_Update+0x1a0>)
 8002584:	61d3      	str	r3, [r2, #28]

}
 8002586:	bf00      	nop
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bdb0      	pop	{r4, r5, r7, pc}
 800258e:	bf00      	nop
 8002590:	a0b5ed8d 	.word	0xa0b5ed8d
 8002594:	3eb0c6f7 	.word	0x3eb0c6f7
 8002598:	200008b0 	.word	0x200008b0
 800259c:	20000f8c 	.word	0x20000f8c
 80025a0:	200008ac 	.word	0x200008ac
 80025a4:	200003d8 	.word	0x200003d8
 80025a8:	51eb851f 	.word	0x51eb851f
 80025ac:	43b40000 	.word	0x43b40000
 80025b0:	44480000 	.word	0x44480000
 80025b4:	ffff8170 	.word	0xffff8170

080025b8 <ReadLogicConv>:

void ReadLogicConv() {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
	Lo1 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0); //Lo1
 80025bc:	2101      	movs	r1, #1
 80025be:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025c2:	f001 fc99 	bl	8003ef8 <HAL_GPIO_ReadPin>
 80025c6:	4603      	mov	r3, r0
 80025c8:	461a      	mov	r2, r3
 80025ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002608 <ReadLogicConv+0x50>)
 80025cc:	701a      	strb	r2, [r3, #0]
	Lo2 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1); //Lo2
 80025ce:	2102      	movs	r1, #2
 80025d0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025d4:	f001 fc90 	bl	8003ef8 <HAL_GPIO_ReadPin>
 80025d8:	4603      	mov	r3, r0
 80025da:	461a      	mov	r2, r3
 80025dc:	4b0b      	ldr	r3, [pc, #44]	@ (800260c <ReadLogicConv+0x54>)
 80025de:	701a      	strb	r2, [r3, #0]
	Lo3 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4); //Lo3
 80025e0:	2110      	movs	r1, #16
 80025e2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025e6:	f001 fc87 	bl	8003ef8 <HAL_GPIO_ReadPin>
 80025ea:	4603      	mov	r3, r0
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b08      	ldr	r3, [pc, #32]	@ (8002610 <ReadLogicConv+0x58>)
 80025f0:	701a      	strb	r2, [r3, #0]
	Lo4 = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0); //Lo4
 80025f2:	2101      	movs	r1, #1
 80025f4:	4807      	ldr	r0, [pc, #28]	@ (8002614 <ReadLogicConv+0x5c>)
 80025f6:	f001 fc7f 	bl	8003ef8 <HAL_GPIO_ReadPin>
 80025fa:	4603      	mov	r3, r0
 80025fc:	461a      	mov	r2, r3
 80025fe:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <ReadLogicConv+0x60>)
 8002600:	701a      	strb	r2, [r3, #0]
}
 8002602:	bf00      	nop
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	200008e0 	.word	0x200008e0
 800260c:	200008e1 	.word	0x200008e1
 8002610:	200008e2 	.word	0x200008e2
 8002614:	48000400 	.word	0x48000400
 8002618:	200008e3 	.word	0x200008e3

0800261c <ReadButton>:

void ReadButton() {
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
	bt1 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_8); //BT1
 8002620:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002624:	4817      	ldr	r0, [pc, #92]	@ (8002684 <ReadButton+0x68>)
 8002626:	f001 fc67 	bl	8003ef8 <HAL_GPIO_ReadPin>
 800262a:	4603      	mov	r3, r0
 800262c:	461a      	mov	r2, r3
 800262e:	4b16      	ldr	r3, [pc, #88]	@ (8002688 <ReadButton+0x6c>)
 8002630:	701a      	strb	r2, [r3, #0]
	bt2 = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_9); //BT2
 8002632:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002636:	4813      	ldr	r0, [pc, #76]	@ (8002684 <ReadButton+0x68>)
 8002638:	f001 fc5e 	bl	8003ef8 <HAL_GPIO_ReadPin>
 800263c:	4603      	mov	r3, r0
 800263e:	461a      	mov	r2, r3
 8002640:	4b12      	ldr	r3, [pc, #72]	@ (800268c <ReadButton+0x70>)
 8002642:	701a      	strb	r2, [r3, #0]
	bt3 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_8); //BT3
 8002644:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002648:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800264c:	f001 fc54 	bl	8003ef8 <HAL_GPIO_ReadPin>
 8002650:	4603      	mov	r3, r0
 8002652:	461a      	mov	r2, r3
 8002654:	4b0e      	ldr	r3, [pc, #56]	@ (8002690 <ReadButton+0x74>)
 8002656:	701a      	strb	r2, [r3, #0]
	bt4 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_9); //BT4
 8002658:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800265c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002660:	f001 fc4a 	bl	8003ef8 <HAL_GPIO_ReadPin>
 8002664:	4603      	mov	r3, r0
 8002666:	461a      	mov	r2, r3
 8002668:	4b0a      	ldr	r3, [pc, #40]	@ (8002694 <ReadButton+0x78>)
 800266a:	701a      	strb	r2, [r3, #0]
	bt5 = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10); //BT5
 800266c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002670:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002674:	f001 fc40 	bl	8003ef8 <HAL_GPIO_ReadPin>
 8002678:	4603      	mov	r3, r0
 800267a:	461a      	mov	r2, r3
 800267c:	4b06      	ldr	r3, [pc, #24]	@ (8002698 <ReadButton+0x7c>)
 800267e:	701a      	strb	r2, [r3, #0]
}
 8002680:	bf00      	nop
 8002682:	bd80      	pop	{r7, pc}
 8002684:	48000800 	.word	0x48000800
 8002688:	200008e4 	.word	0x200008e4
 800268c:	200008e5 	.word	0x200008e5
 8002690:	200008e6 	.word	0x200008e6
 8002694:	200008e7 	.word	0x200008e7
 8002698:	200008e8 	.word	0x200008e8

0800269c <ReadLimit>:

void ReadLimit() {
 800269c:	b580      	push	{r7, lr}
 800269e:	af00      	add	r7, sp, #0
	LimitBottom = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_7); // LimitTop
 80026a0:	2180      	movs	r1, #128	@ 0x80
 80026a2:	4808      	ldr	r0, [pc, #32]	@ (80026c4 <ReadLimit+0x28>)
 80026a4:	f001 fc28 	bl	8003ef8 <HAL_GPIO_ReadPin>
 80026a8:	4603      	mov	r3, r0
 80026aa:	461a      	mov	r2, r3
 80026ac:	4b06      	ldr	r3, [pc, #24]	@ (80026c8 <ReadLimit+0x2c>)
 80026ae:	701a      	strb	r2, [r3, #0]
	LimitTop = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6); // LimitBottom
 80026b0:	2140      	movs	r1, #64	@ 0x40
 80026b2:	4806      	ldr	r0, [pc, #24]	@ (80026cc <ReadLimit+0x30>)
 80026b4:	f001 fc20 	bl	8003ef8 <HAL_GPIO_ReadPin>
 80026b8:	4603      	mov	r3, r0
 80026ba:	461a      	mov	r2, r3
 80026bc:	4b04      	ldr	r3, [pc, #16]	@ (80026d0 <ReadLimit+0x34>)
 80026be:	701a      	strb	r2, [r3, #0]

}
 80026c0:	bf00      	nop
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	48000800 	.word	0x48000800
 80026c8:	200008eb 	.word	0x200008eb
 80026cc:	48000400 	.word	0x48000400
 80026d0:	200008ea 	.word	0x200008ea
 80026d4:	00000000 	.word	0x00000000

080026d8 <MotorDrive>:

void MotorDrive() {
 80026d8:	b5b0      	push	{r4, r5, r7, lr}
 80026da:	af00      	add	r7, sp, #0
	if (MotorDriveFlag == 0) {
 80026dc:	4bb8      	ldr	r3, [pc, #736]	@ (80029c0 <MotorDrive+0x2e8>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d11e      	bne.n	8002722 <MotorDrive+0x4a>
		// Start: This box of code run only one time.
		MotorDriveDampDistance = fabs(Goal - CurrentPos) * 0.35;
 80026e4:	4bb7      	ldr	r3, [pc, #732]	@ (80029c4 <MotorDrive+0x2ec>)
 80026e6:	ed93 7a00 	vldr	s14, [r3]
 80026ea:	4bb7      	ldr	r3, [pc, #732]	@ (80029c8 <MotorDrive+0x2f0>)
 80026ec:	edd3 7a00 	vldr	s15, [r3]
 80026f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026f4:	eef0 7ae7 	vabs.f32	s15, s15
 80026f8:	ee17 0a90 	vmov	r0, s15
 80026fc:	f7fd fef0 	bl	80004e0 <__aeabi_f2d>
 8002700:	a3a5      	add	r3, pc, #660	@ (adr r3, 8002998 <MotorDrive+0x2c0>)
 8002702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002706:	f7fd ff43 	bl	8000590 <__aeabi_dmul>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	4610      	mov	r0, r2
 8002710:	4619      	mov	r1, r3
 8002712:	f7fe f9ff 	bl	8000b14 <__aeabi_d2f>
 8002716:	4603      	mov	r3, r0
 8002718:	4aac      	ldr	r2, [pc, #688]	@ (80029cc <MotorDrive+0x2f4>)
 800271a:	6013      	str	r3, [r2, #0]
		// End
		MotorDriveFlag = 1;
 800271c:	4ba8      	ldr	r3, [pc, #672]	@ (80029c0 <MotorDrive+0x2e8>)
 800271e:	2201      	movs	r2, #1
 8002720:	701a      	strb	r2, [r3, #0]
	}

	if((Goal-CurrentPos) > 0.2 || (Goal-CurrentPos) < -0.2){
 8002722:	4ba8      	ldr	r3, [pc, #672]	@ (80029c4 <MotorDrive+0x2ec>)
 8002724:	ed93 7a00 	vldr	s14, [r3]
 8002728:	4ba7      	ldr	r3, [pc, #668]	@ (80029c8 <MotorDrive+0x2f0>)
 800272a:	edd3 7a00 	vldr	s15, [r3]
 800272e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002732:	ee17 0a90 	vmov	r0, s15
 8002736:	f7fd fed3 	bl	80004e0 <__aeabi_f2d>
 800273a:	a399      	add	r3, pc, #612	@ (adr r3, 80029a0 <MotorDrive+0x2c8>)
 800273c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002740:	f7fe f9b6 	bl	8000ab0 <__aeabi_dcmpgt>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d114      	bne.n	8002774 <MotorDrive+0x9c>
 800274a:	4b9e      	ldr	r3, [pc, #632]	@ (80029c4 <MotorDrive+0x2ec>)
 800274c:	ed93 7a00 	vldr	s14, [r3]
 8002750:	4b9d      	ldr	r3, [pc, #628]	@ (80029c8 <MotorDrive+0x2f0>)
 8002752:	edd3 7a00 	vldr	s15, [r3]
 8002756:	ee77 7a67 	vsub.f32	s15, s14, s15
 800275a:	ee17 0a90 	vmov	r0, s15
 800275e:	f7fd febf 	bl	80004e0 <__aeabi_f2d>
 8002762:	a391      	add	r3, pc, #580	@ (adr r3, 80029a8 <MotorDrive+0x2d0>)
 8002764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002768:	f7fe f984 	bl	8000a74 <__aeabi_dcmplt>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 8103 	beq.w	800297a <MotorDrive+0x2a2>
		Arrived = 0;
 8002774:	4b96      	ldr	r3, [pc, #600]	@ (80029d0 <MotorDrive+0x2f8>)
 8002776:	2200      	movs	r2, #0
 8002778:	701a      	strb	r2, [r3, #0]

		Vfeedback = Update_pid(&pid_control, Goal-CurrentPos, 8, 10);
 800277a:	4b92      	ldr	r3, [pc, #584]	@ (80029c4 <MotorDrive+0x2ec>)
 800277c:	ed93 7a00 	vldr	s14, [r3]
 8002780:	4b91      	ldr	r3, [pc, #580]	@ (80029c8 <MotorDrive+0x2f0>)
 8002782:	edd3 7a00 	vldr	s15, [r3]
 8002786:	ee77 7a67 	vsub.f32	s15, s14, s15
 800278a:	eeb2 1a04 	vmov.f32	s2, #36	@ 0x41200000  10.0
 800278e:	eef2 0a00 	vmov.f32	s1, #32	@ 0x41000000  8.0
 8002792:	eeb0 0a67 	vmov.f32	s0, s15
 8002796:	488f      	ldr	r0, [pc, #572]	@ (80029d4 <MotorDrive+0x2fc>)
 8002798:	f000 f984 	bl	8002aa4 <Update_pid>
 800279c:	ee07 0a90 	vmov	s15, r0
 80027a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027a4:	4b8c      	ldr	r3, [pc, #560]	@ (80029d8 <MotorDrive+0x300>)
 80027a6:	edc3 7a00 	vstr	s15, [r3]

		if(fabs(Goal-CurrentPos) > Goal-MotorDriveDampDistance){ //stop
 80027aa:	4b86      	ldr	r3, [pc, #536]	@ (80029c4 <MotorDrive+0x2ec>)
 80027ac:	ed93 7a00 	vldr	s14, [r3]
 80027b0:	4b85      	ldr	r3, [pc, #532]	@ (80029c8 <MotorDrive+0x2f0>)
 80027b2:	edd3 7a00 	vldr	s15, [r3]
 80027b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027ba:	eeb0 7ae7 	vabs.f32	s14, s15
 80027be:	4b81      	ldr	r3, [pc, #516]	@ (80029c4 <MotorDrive+0x2ec>)
 80027c0:	edd3 6a00 	vldr	s13, [r3]
 80027c4:	4b81      	ldr	r3, [pc, #516]	@ (80029cc <MotorDrive+0x2f4>)
 80027c6:	edd3 7a00 	vldr	s15, [r3]
 80027ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80027ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027d6:	dd16      	ble.n	8002806 <MotorDrive+0x12e>
			RealVfeedback = Vfeedback*0.4;
 80027d8:	4b7f      	ldr	r3, [pc, #508]	@ (80029d8 <MotorDrive+0x300>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f7fd fe7f 	bl	80004e0 <__aeabi_f2d>
 80027e2:	a373      	add	r3, pc, #460	@ (adr r3, 80029b0 <MotorDrive+0x2d8>)
 80027e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027e8:	f7fd fed2 	bl	8000590 <__aeabi_dmul>
 80027ec:	4602      	mov	r2, r0
 80027ee:	460b      	mov	r3, r1
 80027f0:	4610      	mov	r0, r2
 80027f2:	4619      	mov	r1, r3
 80027f4:	f7fe f98e 	bl	8000b14 <__aeabi_d2f>
 80027f8:	4603      	mov	r3, r0
 80027fa:	4a78      	ldr	r2, [pc, #480]	@ (80029dc <MotorDrive+0x304>)
 80027fc:	6013      	str	r3, [r2, #0]
			b_check[6]= 1;
 80027fe:	4b78      	ldr	r3, [pc, #480]	@ (80029e0 <MotorDrive+0x308>)
 8002800:	2201      	movs	r2, #1
 8002802:	719a      	strb	r2, [r3, #6]
 8002804:	e04e      	b.n	80028a4 <MotorDrive+0x1cc>
		}else if(fabs(Goal-CurrentPos) < MotorDriveDampDistance){  //start
 8002806:	4b6f      	ldr	r3, [pc, #444]	@ (80029c4 <MotorDrive+0x2ec>)
 8002808:	ed93 7a00 	vldr	s14, [r3]
 800280c:	4b6e      	ldr	r3, [pc, #440]	@ (80029c8 <MotorDrive+0x2f0>)
 800280e:	edd3 7a00 	vldr	s15, [r3]
 8002812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002816:	eeb0 7ae7 	vabs.f32	s14, s15
 800281a:	4b6c      	ldr	r3, [pc, #432]	@ (80029cc <MotorDrive+0x2f4>)
 800281c:	edd3 7a00 	vldr	s15, [r3]
 8002820:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002824:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002828:	d535      	bpl.n	8002896 <MotorDrive+0x1be>
			RealVfeedback = fabs(Goal-CurrentPos)*6/(Goal-MotorDriveDampDistance);
 800282a:	4b66      	ldr	r3, [pc, #408]	@ (80029c4 <MotorDrive+0x2ec>)
 800282c:	ed93 7a00 	vldr	s14, [r3]
 8002830:	4b65      	ldr	r3, [pc, #404]	@ (80029c8 <MotorDrive+0x2f0>)
 8002832:	edd3 7a00 	vldr	s15, [r3]
 8002836:	ee77 7a67 	vsub.f32	s15, s14, s15
 800283a:	eef0 7ae7 	vabs.f32	s15, s15
 800283e:	ee17 0a90 	vmov	r0, s15
 8002842:	f7fd fe4d 	bl	80004e0 <__aeabi_f2d>
 8002846:	f04f 0200 	mov.w	r2, #0
 800284a:	4b66      	ldr	r3, [pc, #408]	@ (80029e4 <MotorDrive+0x30c>)
 800284c:	f7fd fea0 	bl	8000590 <__aeabi_dmul>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4614      	mov	r4, r2
 8002856:	461d      	mov	r5, r3
 8002858:	4b5a      	ldr	r3, [pc, #360]	@ (80029c4 <MotorDrive+0x2ec>)
 800285a:	ed93 7a00 	vldr	s14, [r3]
 800285e:	4b5b      	ldr	r3, [pc, #364]	@ (80029cc <MotorDrive+0x2f4>)
 8002860:	edd3 7a00 	vldr	s15, [r3]
 8002864:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002868:	ee17 0a90 	vmov	r0, s15
 800286c:	f7fd fe38 	bl	80004e0 <__aeabi_f2d>
 8002870:	4602      	mov	r2, r0
 8002872:	460b      	mov	r3, r1
 8002874:	4620      	mov	r0, r4
 8002876:	4629      	mov	r1, r5
 8002878:	f7fd ffb4 	bl	80007e4 <__aeabi_ddiv>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4610      	mov	r0, r2
 8002882:	4619      	mov	r1, r3
 8002884:	f7fe f946 	bl	8000b14 <__aeabi_d2f>
 8002888:	4603      	mov	r3, r0
 800288a:	4a54      	ldr	r2, [pc, #336]	@ (80029dc <MotorDrive+0x304>)
 800288c:	6013      	str	r3, [r2, #0]
			b_check[6]= 2;
 800288e:	4b54      	ldr	r3, [pc, #336]	@ (80029e0 <MotorDrive+0x308>)
 8002890:	2202      	movs	r2, #2
 8002892:	719a      	strb	r2, [r3, #6]
 8002894:	e006      	b.n	80028a4 <MotorDrive+0x1cc>
		}else{
			RealVfeedback = Vfeedback;
 8002896:	4b50      	ldr	r3, [pc, #320]	@ (80029d8 <MotorDrive+0x300>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a50      	ldr	r2, [pc, #320]	@ (80029dc <MotorDrive+0x304>)
 800289c:	6013      	str	r3, [r2, #0]
			b_check[6]= 3;
 800289e:	4b50      	ldr	r3, [pc, #320]	@ (80029e0 <MotorDrive+0x308>)
 80028a0:	2203      	movs	r2, #3
 80028a2:	719a      	strb	r2, [r3, #6]
//		if (Vfeedback > VfeedbackLimit) {
//			b_check[6] = 5;
//			Vfeedback = VfeedbackLimit;
//		}
//
		if(fabs(RealVfeedback) < 3.3 && Vfeedback != 0 &&RealVfeedback!=0){
 80028a4:	4b4d      	ldr	r3, [pc, #308]	@ (80029dc <MotorDrive+0x304>)
 80028a6:	edd3 7a00 	vldr	s15, [r3]
 80028aa:	eef0 7ae7 	vabs.f32	s15, s15
 80028ae:	ee17 0a90 	vmov	r0, s15
 80028b2:	f7fd fe15 	bl	80004e0 <__aeabi_f2d>
 80028b6:	a340      	add	r3, pc, #256	@ (adr r3, 80029b8 <MotorDrive+0x2e0>)
 80028b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028bc:	f7fe f8da 	bl	8000a74 <__aeabi_dcmplt>
 80028c0:	4603      	mov	r3, r0
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d015      	beq.n	80028f2 <MotorDrive+0x21a>
 80028c6:	4b44      	ldr	r3, [pc, #272]	@ (80029d8 <MotorDrive+0x300>)
 80028c8:	edd3 7a00 	vldr	s15, [r3]
 80028cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d4:	d00d      	beq.n	80028f2 <MotorDrive+0x21a>
 80028d6:	4b41      	ldr	r3, [pc, #260]	@ (80029dc <MotorDrive+0x304>)
 80028d8:	edd3 7a00 	vldr	s15, [r3]
 80028dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028e4:	d005      	beq.n	80028f2 <MotorDrive+0x21a>
			RealVfeedback = 3.3;
 80028e6:	4b3d      	ldr	r3, [pc, #244]	@ (80029dc <MotorDrive+0x304>)
 80028e8:	4a3f      	ldr	r2, [pc, #252]	@ (80029e8 <MotorDrive+0x310>)
 80028ea:	601a      	str	r2, [r3, #0]
			b_check[7] = 1;
 80028ec:	4b3c      	ldr	r3, [pc, #240]	@ (80029e0 <MotorDrive+0x308>)
 80028ee:	2201      	movs	r2, #1
 80028f0:	71da      	strb	r2, [r3, #7]
		}

		if (RealVfeedback > 0) {  //go up
 80028f2:	4b3a      	ldr	r3, [pc, #232]	@ (80029dc <MotorDrive+0x304>)
 80028f4:	edd3 7a00 	vldr	s15, [r3]
 80028f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80028fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002900:	dd08      	ble.n	8002914 <MotorDrive+0x23c>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 8002902:	2200      	movs	r2, #0
 8002904:	2108      	movs	r1, #8
 8002906:	4839      	ldr	r0, [pc, #228]	@ (80029ec <MotorDrive+0x314>)
 8002908:	f001 fb0e 	bl	8003f28 <HAL_GPIO_WritePin>
			b_check[6]= 4;
 800290c:	4b34      	ldr	r3, [pc, #208]	@ (80029e0 <MotorDrive+0x308>)
 800290e:	2204      	movs	r2, #4
 8002910:	719a      	strb	r2, [r3, #6]
 8002912:	e00f      	b.n	8002934 <MotorDrive+0x25c>
		} else {  //go down
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 8002914:	2201      	movs	r2, #1
 8002916:	2108      	movs	r1, #8
 8002918:	4834      	ldr	r0, [pc, #208]	@ (80029ec <MotorDrive+0x314>)
 800291a:	f001 fb05 	bl	8003f28 <HAL_GPIO_WritePin>
			RealVfeedback = RealVfeedback * (-1);
 800291e:	4b2f      	ldr	r3, [pc, #188]	@ (80029dc <MotorDrive+0x304>)
 8002920:	edd3 7a00 	vldr	s15, [r3]
 8002924:	eef1 7a67 	vneg.f32	s15, s15
 8002928:	4b2c      	ldr	r3, [pc, #176]	@ (80029dc <MotorDrive+0x304>)
 800292a:	edc3 7a00 	vstr	s15, [r3]
			b_check[6]= 5;
 800292e:	4b2c      	ldr	r3, [pc, #176]	@ (80029e0 <MotorDrive+0x308>)
 8002930:	2205      	movs	r2, #5
 8002932:	719a      	strb	r2, [r3, #6]
		}

		duty_cycle_pid = RealVfeedback * 4000 / 12;
 8002934:	4b29      	ldr	r3, [pc, #164]	@ (80029dc <MotorDrive+0x304>)
 8002936:	edd3 7a00 	vldr	s15, [r3]
 800293a:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 80029f0 <MotorDrive+0x318>
 800293e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002942:	eef2 6a08 	vmov.f32	s13, #40	@ 0x41400000  12.0
 8002946:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800294a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800294e:	ee17 3a90 	vmov	r3, s15
 8002952:	b29a      	uxth	r2, r3
 8002954:	4b27      	ldr	r3, [pc, #156]	@ (80029f4 <MotorDrive+0x31c>)
 8002956:	801a      	strh	r2, [r3, #0]
		if(RealVfeedback == 0){
 8002958:	4b20      	ldr	r3, [pc, #128]	@ (80029dc <MotorDrive+0x304>)
 800295a:	edd3 7a00 	vldr	s15, [r3]
 800295e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002966:	d102      	bne.n	800296e <MotorDrive+0x296>
			duty_cycle_pid = 0;
 8002968:	4b22      	ldr	r3, [pc, #136]	@ (80029f4 <MotorDrive+0x31c>)
 800296a:	2200      	movs	r2, #0
 800296c:	801a      	strh	r2, [r3, #0]
		}


		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, duty_cycle_pid);
 800296e:	4b21      	ldr	r3, [pc, #132]	@ (80029f4 <MotorDrive+0x31c>)
 8002970:	881a      	ldrh	r2, [r3, #0]
 8002972:	4b21      	ldr	r3, [pc, #132]	@ (80029f8 <MotorDrive+0x320>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	635a      	str	r2, [r3, #52]	@ 0x34
 8002978:	e00a      	b.n	8002990 <MotorDrive+0x2b8>
	}else{
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800297a:	4b1f      	ldr	r3, [pc, #124]	@ (80029f8 <MotorDrive+0x320>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	2200      	movs	r2, #0
 8002980:	635a      	str	r2, [r3, #52]	@ 0x34
		Arrived = 1;
 8002982:	4b13      	ldr	r3, [pc, #76]	@ (80029d0 <MotorDrive+0x2f8>)
 8002984:	2201      	movs	r2, #1
 8002986:	701a      	strb	r2, [r3, #0]
		b_check[6] = 4;
 8002988:	4b15      	ldr	r3, [pc, #84]	@ (80029e0 <MotorDrive+0x308>)
 800298a:	2204      	movs	r2, #4
 800298c:	719a      	strb	r2, [r3, #6]
	}
}
 800298e:	bf00      	nop
 8002990:	bf00      	nop
 8002992:	bdb0      	pop	{r4, r5, r7, pc}
 8002994:	f3af 8000 	nop.w
 8002998:	66666666 	.word	0x66666666
 800299c:	3fd66666 	.word	0x3fd66666
 80029a0:	9999999a 	.word	0x9999999a
 80029a4:	3fc99999 	.word	0x3fc99999
 80029a8:	9999999a 	.word	0x9999999a
 80029ac:	bfc99999 	.word	0xbfc99999
 80029b0:	9999999a 	.word	0x9999999a
 80029b4:	3fd99999 	.word	0x3fd99999
 80029b8:	66666666 	.word	0x66666666
 80029bc:	400a6666 	.word	0x400a6666
 80029c0:	20000fd6 	.word	0x20000fd6
 80029c4:	200008f4 	.word	0x200008f4
 80029c8:	200008ac 	.word	0x200008ac
 80029cc:	20000fd8 	.word	0x20000fd8
 80029d0:	20000fc8 	.word	0x20000fc8
 80029d4:	20000900 	.word	0x20000900
 80029d8:	200008ec 	.word	0x200008ec
 80029dc:	200008f0 	.word	0x200008f0
 80029e0:	20000fcc 	.word	0x20000fcc
 80029e4:	40180000 	.word	0x40180000
 80029e8:	40533333 	.word	0x40533333
 80029ec:	48000800 	.word	0x48000800
 80029f0:	457a0000 	.word	0x457a0000
 80029f4:	200008f8 	.word	0x200008f8
 80029f8:	20000240 	.word	0x20000240

080029fc <RelayDrive>:

void RelayDrive() {
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, relay[0]); //
 8002a00:	4b0f      	ldr	r3, [pc, #60]	@ (8002a40 <RelayDrive+0x44>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	461a      	mov	r2, r3
 8002a06:	2102      	movs	r1, #2
 8002a08:	480e      	ldr	r0, [pc, #56]	@ (8002a44 <RelayDrive+0x48>)
 8002a0a:	f001 fa8d 	bl	8003f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, relay[1]); // Relay1
 8002a0e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a40 <RelayDrive+0x44>)
 8002a10:	785b      	ldrb	r3, [r3, #1]
 8002a12:	461a      	mov	r2, r3
 8002a14:	2102      	movs	r1, #2
 8002a16:	480c      	ldr	r0, [pc, #48]	@ (8002a48 <RelayDrive+0x4c>)
 8002a18:	f001 fa86 	bl	8003f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, relay[2]); // Mode status led
 8002a1c:	4b08      	ldr	r3, [pc, #32]	@ (8002a40 <RelayDrive+0x44>)
 8002a1e:	789b      	ldrb	r3, [r3, #2]
 8002a20:	461a      	mov	r2, r3
 8002a22:	2104      	movs	r1, #4
 8002a24:	4808      	ldr	r0, [pc, #32]	@ (8002a48 <RelayDrive+0x4c>)
 8002a26:	f001 fa7f 	bl	8003f28 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, relay[3]); // Heart beat
 8002a2a:	4b05      	ldr	r3, [pc, #20]	@ (8002a40 <RelayDrive+0x44>)
 8002a2c:	78db      	ldrb	r3, [r3, #3]
 8002a2e:	461a      	mov	r2, r3
 8002a30:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002a34:	4804      	ldr	r0, [pc, #16]	@ (8002a48 <RelayDrive+0x4c>)
 8002a36:	f001 fa77 	bl	8003f28 <HAL_GPIO_WritePin>
}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	200008a4 	.word	0x200008a4
 8002a44:	48000800 	.word	0x48000800
 8002a48:	48000400 	.word	0x48000400

08002a4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a50:	b672      	cpsid	i
}
 8002a52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002a54:	bf00      	nop
 8002a56:	e7fd      	b.n	8002a54 <Error_Handler+0x8>

08002a58 <PID_init>:
 *  Created on: Apr 26, 2024
 *      Author: naker
 */
#include "pid.h"

void PID_init(PID* pid, float32_t _kp,  float32_t _ki, float32_t _kd, float32_t _sampt){
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6178      	str	r0, [r7, #20]
 8002a60:	ed87 0a04 	vstr	s0, [r7, #16]
 8002a64:	edc7 0a03 	vstr	s1, [r7, #12]
 8002a68:	ed87 1a02 	vstr	s2, [r7, #8]
 8002a6c:	edc7 1a01 	vstr	s3, [r7, #4]
	pid -> kp = _kp;
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	601a      	str	r2, [r3, #0]
	pid -> ki = _ki;
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	605a      	str	r2, [r3, #4]
	pid -> kd = _kd;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	68ba      	ldr	r2, [r7, #8]
 8002a80:	609a      	str	r2, [r3, #8]
	pid -> sampt = _sampt;
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	60da      	str	r2, [r3, #12]
	pid -> y_n = 0.0;
 8002a88:	6979      	ldr	r1, [r7, #20]
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	f04f 0300 	mov.w	r3, #0
 8002a92:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8002a96:	bf00      	nop
 8002a98:	371c      	adds	r7, #28
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
	...

08002aa4 <Update_pid>:
int32_t Update_pid(PID *pid, float32_t error, float32_t pid_sat, float32_t plant_sat) {
 8002aa4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002aa8:	b08a      	sub	sp, #40	@ 0x28
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	60f8      	str	r0, [r7, #12]
 8002aae:	ed87 0a02 	vstr	s0, [r7, #8]
 8002ab2:	edc7 0a01 	vstr	s1, [r7, #4]
 8002ab6:	ed87 1a00 	vstr	s2, [r7]
//	static float32_t y_n = 0; // Output[n]
	static float32_t y_n_1 = 0; // Output[n-1]
	float32_t e_n = error; // error[n]
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	61bb      	str	r3, [r7, #24]
	static float32_t e_n_1 = 0; // error[n-1]

	float32_t p_term = e_n * pid -> kp;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	edd3 7a00 	vldr	s15, [r3]
 8002ac4:	ed97 7a06 	vldr	s14, [r7, #24]
 8002ac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002acc:	edc7 7a05 	vstr	s15, [r7, #20]
	float32_t d_term = ((e_n - e_n_1) * pid -> kd) / pid -> sampt;
 8002ad0:	4b96      	ldr	r3, [pc, #600]	@ (8002d2c <Update_pid+0x288>)
 8002ad2:	edd3 7a00 	vldr	s15, [r3]
 8002ad6:	ed97 7a06 	vldr	s14, [r7, #24]
 8002ada:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	edd3 7a02 	vldr	s15, [r3, #8]
 8002ae4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	ed93 7a03 	vldr	s14, [r3, #12]
 8002aee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002af2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
	float32_t i_term = ((pid -> ki * pid -> sampt / 2.0)*(e_n + e_n_1)) + y_n_1;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	ed93 7a01 	vldr	s14, [r3, #4]
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b06:	ee17 0a90 	vmov	r0, s15
 8002b0a:	f7fd fce9 	bl	80004e0 <__aeabi_f2d>
 8002b0e:	f04f 0200 	mov.w	r2, #0
 8002b12:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8002b16:	f7fd fe65 	bl	80007e4 <__aeabi_ddiv>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	460b      	mov	r3, r1
 8002b1e:	4690      	mov	r8, r2
 8002b20:	4699      	mov	r9, r3
 8002b22:	4b82      	ldr	r3, [pc, #520]	@ (8002d2c <Update_pid+0x288>)
 8002b24:	ed93 7a00 	vldr	s14, [r3]
 8002b28:	edd7 7a06 	vldr	s15, [r7, #24]
 8002b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b30:	ee17 0a90 	vmov	r0, s15
 8002b34:	f7fd fcd4 	bl	80004e0 <__aeabi_f2d>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4640      	mov	r0, r8
 8002b3e:	4649      	mov	r1, r9
 8002b40:	f7fd fd26 	bl	8000590 <__aeabi_dmul>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4690      	mov	r8, r2
 8002b4a:	4699      	mov	r9, r3
 8002b4c:	4b78      	ldr	r3, [pc, #480]	@ (8002d30 <Update_pid+0x28c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7fd fcc5 	bl	80004e0 <__aeabi_f2d>
 8002b56:	4602      	mov	r2, r0
 8002b58:	460b      	mov	r3, r1
 8002b5a:	4640      	mov	r0, r8
 8002b5c:	4649      	mov	r1, r9
 8002b5e:	f7fd fb61 	bl	8000224 <__adddf3>
 8002b62:	4602      	mov	r2, r0
 8002b64:	460b      	mov	r3, r1
 8002b66:	4610      	mov	r0, r2
 8002b68:	4619      	mov	r1, r3
 8002b6a:	f7fd ffd3 	bl	8000b14 <__aeabi_d2f>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	623b      	str	r3, [r7, #32]

	if(pid -> ki == 0){
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b78:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b80:	d102      	bne.n	8002b88 <Update_pid+0xe4>
		i_term = 0;
 8002b82:	f04f 0300 	mov.w	r3, #0
 8002b86:	623b      	str	r3, [r7, #32]
	}
	if(pid -> kd == 0){
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	edd3 7a02 	vldr	s15, [r3, #8]
 8002b8e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b96:	d102      	bne.n	8002b9e <Update_pid+0xfa>
		d_term = 0;
 8002b98:	f04f 0300 	mov.w	r3, #0
 8002b9c:	627b      	str	r3, [r7, #36]	@ 0x24
	}
	pid -> y_n = p_term + d_term + i_term; // pid output
 8002b9e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002ba2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002ba6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002baa:	edd7 7a08 	vldr	s15, [r7, #32]
 8002bae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bb2:	ee17 0a90 	vmov	r0, s15
 8002bb6:	f7fd fc93 	bl	80004e0 <__aeabi_f2d>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	68f9      	ldr	r1, [r7, #12]
 8002bc0:	e9c1 2304 	strd	r2, r3, [r1, #16]
	uint8_t is_sat = 0;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	77fb      	strb	r3, [r7, #31]
	// check is pid output is saturating
	if(pid -> y_n > pid_sat){
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f7fd fc86 	bl	80004e0 <__aeabi_f2d>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	460b      	mov	r3, r1
 8002bd8:	4640      	mov	r0, r8
 8002bda:	4649      	mov	r1, r9
 8002bdc:	f7fd ff68 	bl	8000ab0 <__aeabi_dcmpgt>
 8002be0:	4603      	mov	r3, r0
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d002      	beq.n	8002bec <Update_pid+0x148>
		is_sat = 1;
 8002be6:	2301      	movs	r3, #1
 8002be8:	77fb      	strb	r3, [r7, #31]
 8002bea:	e016      	b.n	8002c1a <Update_pid+0x176>
	}
	else if(pid -> y_n < -(pid_sat)){
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	e9d3 8904 	ldrd	r8, r9, [r3, #16]
 8002bf2:	edd7 7a01 	vldr	s15, [r7, #4]
 8002bf6:	eef1 7a67 	vneg.f32	s15, s15
 8002bfa:	ee17 3a90 	vmov	r3, s15
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7fd fc6e 	bl	80004e0 <__aeabi_f2d>
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4640      	mov	r0, r8
 8002c0a:	4649      	mov	r1, r9
 8002c0c:	f7fd ff32 	bl	8000a74 <__aeabi_dcmplt>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <Update_pid+0x176>
		is_sat = 1;
 8002c16:	2301      	movs	r3, #1
 8002c18:	77fb      	strb	r3, [r7, #31]
	}
	// check is error sign and output sign is equal
	if(e_n * pid -> y_n == fabs(e_n * pid -> y_n)){
 8002c1a:	69b8      	ldr	r0, [r7, #24]
 8002c1c:	f7fd fc60 	bl	80004e0 <__aeabi_f2d>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002c26:	f7fd fcb3 	bl	8000590 <__aeabi_dmul>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4690      	mov	r8, r2
 8002c30:	4699      	mov	r9, r3
 8002c32:	69b8      	ldr	r0, [r7, #24]
 8002c34:	f7fd fc54 	bl	80004e0 <__aeabi_f2d>
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002c3e:	f7fd fca7 	bl	8000590 <__aeabi_dmul>
 8002c42:	4602      	mov	r2, r0
 8002c44:	460b      	mov	r3, r1
 8002c46:	4614      	mov	r4, r2
 8002c48:	f023 4500 	bic.w	r5, r3, #2147483648	@ 0x80000000
 8002c4c:	4622      	mov	r2, r4
 8002c4e:	462b      	mov	r3, r5
 8002c50:	4640      	mov	r0, r8
 8002c52:	4649      	mov	r1, r9
 8002c54:	f7fd ff04 	bl	8000a60 <__aeabi_dcmpeq>
 8002c58:	4603      	mov	r3, r0
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d011      	beq.n	8002c82 <Update_pid+0x1de>
		// if pid output is saturating and error sign and output sign is  i_term = 0;
		if(is_sat == 1){
 8002c5e:	7ffb      	ldrb	r3, [r7, #31]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d10e      	bne.n	8002c82 <Update_pid+0x1de>
			pid -> y_n = p_term + d_term;
 8002c64:	ed97 7a05 	vldr	s14, [r7, #20]
 8002c68:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8002c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c70:	ee17 0a90 	vmov	r0, s15
 8002c74:	f7fd fc34 	bl	80004e0 <__aeabi_f2d>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	68f9      	ldr	r1, [r7, #12]
 8002c7e:	e9c1 2304 	strd	r2, r3, [r1, #16]
		}
	}
	// Plant saturation
	if(pid -> y_n > plant_sat){
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002c88:	6838      	ldr	r0, [r7, #0]
 8002c8a:	f7fd fc29 	bl	80004e0 <__aeabi_f2d>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	460b      	mov	r3, r1
 8002c92:	4620      	mov	r0, r4
 8002c94:	4629      	mov	r1, r5
 8002c96:	f7fd ff0b 	bl	8000ab0 <__aeabi_dcmpgt>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d008      	beq.n	8002cb2 <Update_pid+0x20e>
		pid -> y_n = plant_sat;
 8002ca0:	6838      	ldr	r0, [r7, #0]
 8002ca2:	f7fd fc1d 	bl	80004e0 <__aeabi_f2d>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	460b      	mov	r3, r1
 8002caa:	68f9      	ldr	r1, [r7, #12]
 8002cac:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002cb0:	e022      	b.n	8002cf8 <Update_pid+0x254>
	}
	else if(pid -> y_n < -(plant_sat)){
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002cb8:	edd7 7a00 	vldr	s15, [r7]
 8002cbc:	eef1 7a67 	vneg.f32	s15, s15
 8002cc0:	ee17 3a90 	vmov	r3, s15
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7fd fc0b 	bl	80004e0 <__aeabi_f2d>
 8002cca:	4602      	mov	r2, r0
 8002ccc:	460b      	mov	r3, r1
 8002cce:	4620      	mov	r0, r4
 8002cd0:	4629      	mov	r1, r5
 8002cd2:	f7fd fecf 	bl	8000a74 <__aeabi_dcmplt>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d00d      	beq.n	8002cf8 <Update_pid+0x254>
		pid -> y_n = (-(plant_sat));
 8002cdc:	edd7 7a00 	vldr	s15, [r7]
 8002ce0:	eef1 7a67 	vneg.f32	s15, s15
 8002ce4:	ee17 3a90 	vmov	r3, s15
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7fd fbf9 	bl	80004e0 <__aeabi_f2d>
 8002cee:	4602      	mov	r2, r0
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	68f9      	ldr	r1, [r7, #12]
 8002cf4:	e9c1 2304 	strd	r2, r3, [r1, #16]
	}
	// Update value
	y_n_1 = pid -> y_n;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002cfe:	4610      	mov	r0, r2
 8002d00:	4619      	mov	r1, r3
 8002d02:	f7fd ff07 	bl	8000b14 <__aeabi_d2f>
 8002d06:	4603      	mov	r3, r0
 8002d08:	4a09      	ldr	r2, [pc, #36]	@ (8002d30 <Update_pid+0x28c>)
 8002d0a:	6013      	str	r3, [r2, #0]
	e_n_1 = e_n;
 8002d0c:	4a07      	ldr	r2, [pc, #28]	@ (8002d2c <Update_pid+0x288>)
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	6013      	str	r3, [r2, #0]
	return pid -> y_n;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002d18:	4610      	mov	r0, r2
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	f7fd fed2 	bl	8000ac4 <__aeabi_d2iz>
 8002d20:	4603      	mov	r3, r0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3728      	adds	r7, #40	@ 0x28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d2c:	20000fe8 	.word	0x20000fe8
 8002d30:	20000fec 	.word	0x20000fec

08002d34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b082      	sub	sp, #8
 8002d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8002d78 <HAL_MspInit+0x44>)
 8002d3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d3e:	4a0e      	ldr	r2, [pc, #56]	@ (8002d78 <HAL_MspInit+0x44>)
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d46:	4b0c      	ldr	r3, [pc, #48]	@ (8002d78 <HAL_MspInit+0x44>)
 8002d48:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	607b      	str	r3, [r7, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002d52:	4b09      	ldr	r3, [pc, #36]	@ (8002d78 <HAL_MspInit+0x44>)
 8002d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d56:	4a08      	ldr	r2, [pc, #32]	@ (8002d78 <HAL_MspInit+0x44>)
 8002d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d5c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002d5e:	4b06      	ldr	r3, [pc, #24]	@ (8002d78 <HAL_MspInit+0x44>)
 8002d60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d66:	603b      	str	r3, [r7, #0]
 8002d68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002d6a:	f001 f9cb 	bl	8004104 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002d6e:	bf00      	nop
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	40021000 	.word	0x40021000

08002d7c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a0d      	ldr	r2, [pc, #52]	@ (8002dc0 <HAL_TIM_PWM_MspInit+0x44>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d113      	bne.n	8002db6 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002dc4 <HAL_TIM_PWM_MspInit+0x48>)
 8002d90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d92:	4a0c      	ldr	r2, [pc, #48]	@ (8002dc4 <HAL_TIM_PWM_MspInit+0x48>)
 8002d94:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002d98:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc4 <HAL_TIM_PWM_MspInit+0x48>)
 8002d9c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002da2:	60fb      	str	r3, [r7, #12]
 8002da4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002da6:	2200      	movs	r2, #0
 8002da8:	2100      	movs	r1, #0
 8002daa:	2019      	movs	r0, #25
 8002dac:	f000 fbbb 	bl	8003526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002db0:	2019      	movs	r0, #25
 8002db2:	f000 fbd2 	bl	800355a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002db6:	bf00      	nop
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40012c00 	.word	0x40012c00
 8002dc4:	40021000 	.word	0x40021000

08002dc8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b086      	sub	sp, #24
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002dd8:	d10c      	bne.n	8002df4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002dda:	4b2b      	ldr	r3, [pc, #172]	@ (8002e88 <HAL_TIM_Base_MspInit+0xc0>)
 8002ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dde:	4a2a      	ldr	r2, [pc, #168]	@ (8002e88 <HAL_TIM_Base_MspInit+0xc0>)
 8002de0:	f043 0301 	orr.w	r3, r3, #1
 8002de4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002de6:	4b28      	ldr	r3, [pc, #160]	@ (8002e88 <HAL_TIM_Base_MspInit+0xc0>)
 8002de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	617b      	str	r3, [r7, #20]
 8002df0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8002df2:	e044      	b.n	8002e7e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM4)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a24      	ldr	r2, [pc, #144]	@ (8002e8c <HAL_TIM_Base_MspInit+0xc4>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d114      	bne.n	8002e28 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002dfe:	4b22      	ldr	r3, [pc, #136]	@ (8002e88 <HAL_TIM_Base_MspInit+0xc0>)
 8002e00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e02:	4a21      	ldr	r2, [pc, #132]	@ (8002e88 <HAL_TIM_Base_MspInit+0xc0>)
 8002e04:	f043 0304 	orr.w	r3, r3, #4
 8002e08:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e0a:	4b1f      	ldr	r3, [pc, #124]	@ (8002e88 <HAL_TIM_Base_MspInit+0xc0>)
 8002e0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e0e:	f003 0304 	and.w	r3, r3, #4
 8002e12:	613b      	str	r3, [r7, #16]
 8002e14:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002e16:	2200      	movs	r2, #0
 8002e18:	2100      	movs	r1, #0
 8002e1a:	201e      	movs	r0, #30
 8002e1c:	f000 fb83 	bl	8003526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002e20:	201e      	movs	r0, #30
 8002e22:	f000 fb9a 	bl	800355a <HAL_NVIC_EnableIRQ>
}
 8002e26:	e02a      	b.n	8002e7e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM5)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a18      	ldr	r2, [pc, #96]	@ (8002e90 <HAL_TIM_Base_MspInit+0xc8>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d10c      	bne.n	8002e4c <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002e32:	4b15      	ldr	r3, [pc, #84]	@ (8002e88 <HAL_TIM_Base_MspInit+0xc0>)
 8002e34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e36:	4a14      	ldr	r2, [pc, #80]	@ (8002e88 <HAL_TIM_Base_MspInit+0xc0>)
 8002e38:	f043 0308 	orr.w	r3, r3, #8
 8002e3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002e3e:	4b12      	ldr	r3, [pc, #72]	@ (8002e88 <HAL_TIM_Base_MspInit+0xc0>)
 8002e40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	68fb      	ldr	r3, [r7, #12]
}
 8002e4a:	e018      	b.n	8002e7e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM16)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a10      	ldr	r2, [pc, #64]	@ (8002e94 <HAL_TIM_Base_MspInit+0xcc>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d113      	bne.n	8002e7e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002e56:	4b0c      	ldr	r3, [pc, #48]	@ (8002e88 <HAL_TIM_Base_MspInit+0xc0>)
 8002e58:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e5a:	4a0b      	ldr	r2, [pc, #44]	@ (8002e88 <HAL_TIM_Base_MspInit+0xc0>)
 8002e5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e60:	6613      	str	r3, [r2, #96]	@ 0x60
 8002e62:	4b09      	ldr	r3, [pc, #36]	@ (8002e88 <HAL_TIM_Base_MspInit+0xc0>)
 8002e64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e6a:	60bb      	str	r3, [r7, #8]
 8002e6c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8002e6e:	2200      	movs	r2, #0
 8002e70:	2100      	movs	r1, #0
 8002e72:	2019      	movs	r0, #25
 8002e74:	f000 fb57 	bl	8003526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002e78:	2019      	movs	r0, #25
 8002e7a:	f000 fb6e 	bl	800355a <HAL_NVIC_EnableIRQ>
}
 8002e7e:	bf00      	nop
 8002e80:	3718      	adds	r7, #24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	40000800 	.word	0x40000800
 8002e90:	40000c00 	.word	0x40000c00
 8002e94:	40014400 	.word	0x40014400

08002e98 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b08a      	sub	sp, #40	@ 0x28
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ea0:	f107 0314 	add.w	r3, r7, #20
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
 8002ea8:	605a      	str	r2, [r3, #4]
 8002eaa:	609a      	str	r2, [r3, #8]
 8002eac:	60da      	str	r2, [r3, #12]
 8002eae:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a1b      	ldr	r2, [pc, #108]	@ (8002f24 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d130      	bne.n	8002f1c <HAL_TIM_Encoder_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002eba:	4b1b      	ldr	r3, [pc, #108]	@ (8002f28 <HAL_TIM_Encoder_MspInit+0x90>)
 8002ebc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ebe:	4a1a      	ldr	r2, [pc, #104]	@ (8002f28 <HAL_TIM_Encoder_MspInit+0x90>)
 8002ec0:	f043 0302 	orr.w	r3, r3, #2
 8002ec4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ec6:	4b18      	ldr	r3, [pc, #96]	@ (8002f28 <HAL_TIM_Encoder_MspInit+0x90>)
 8002ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002eca:	f003 0302 	and.w	r3, r3, #2
 8002ece:	613b      	str	r3, [r7, #16]
 8002ed0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed2:	4b15      	ldr	r3, [pc, #84]	@ (8002f28 <HAL_TIM_Encoder_MspInit+0x90>)
 8002ed4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ed6:	4a14      	ldr	r2, [pc, #80]	@ (8002f28 <HAL_TIM_Encoder_MspInit+0x90>)
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ede:	4b12      	ldr	r3, [pc, #72]	@ (8002f28 <HAL_TIM_Encoder_MspInit+0x90>)
 8002ee0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002eea:	23c0      	movs	r3, #192	@ 0xc0
 8002eec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eee:	2302      	movs	r3, #2
 8002ef0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002efa:	2302      	movs	r3, #2
 8002efc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002efe:	f107 0314 	add.w	r3, r7, #20
 8002f02:	4619      	mov	r1, r3
 8002f04:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002f08:	f000 fe74 	bl	8003bf4 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	2100      	movs	r1, #0
 8002f10:	201d      	movs	r0, #29
 8002f12:	f000 fb08 	bl	8003526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002f16:	201d      	movs	r0, #29
 8002f18:	f000 fb1f 	bl	800355a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002f1c:	bf00      	nop
 8002f1e:	3728      	adds	r7, #40	@ 0x28
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40000400 	.word	0x40000400
 8002f28:	40021000 	.word	0x40021000

08002f2c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f34:	f107 030c 	add.w	r3, r7, #12
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	609a      	str	r2, [r3, #8]
 8002f40:	60da      	str	r2, [r3, #12]
 8002f42:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a11      	ldr	r2, [pc, #68]	@ (8002f90 <HAL_TIM_MspPostInit+0x64>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d11b      	bne.n	8002f86 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f4e:	4b11      	ldr	r3, [pc, #68]	@ (8002f94 <HAL_TIM_MspPostInit+0x68>)
 8002f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f52:	4a10      	ldr	r2, [pc, #64]	@ (8002f94 <HAL_TIM_MspPostInit+0x68>)
 8002f54:	f043 0304 	orr.w	r3, r3, #4
 8002f58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002f94 <HAL_TIM_MspPostInit+0x68>)
 8002f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f5e:	f003 0304 	and.w	r3, r3, #4
 8002f62:	60bb      	str	r3, [r7, #8]
 8002f64:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002f66:	2301      	movs	r3, #1
 8002f68:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f72:	2300      	movs	r3, #0
 8002f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8002f76:	2302      	movs	r3, #2
 8002f78:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f7a:	f107 030c 	add.w	r3, r7, #12
 8002f7e:	4619      	mov	r1, r3
 8002f80:	4805      	ldr	r0, [pc, #20]	@ (8002f98 <HAL_TIM_MspPostInit+0x6c>)
 8002f82:	f000 fe37 	bl	8003bf4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002f86:	bf00      	nop
 8002f88:	3720      	adds	r7, #32
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40012c00 	.word	0x40012c00
 8002f94:	40021000 	.word	0x40021000
 8002f98:	48000800 	.word	0x48000800

08002f9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b09e      	sub	sp, #120	@ 0x78
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	605a      	str	r2, [r3, #4]
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	60da      	str	r2, [r3, #12]
 8002fb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fb4:	f107 0310 	add.w	r3, r7, #16
 8002fb8:	2254      	movs	r2, #84	@ 0x54
 8002fba:	2100      	movs	r1, #0
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f006 f809 	bl	8008fd4 <memset>
  if(huart->Instance==USART2)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a4d      	ldr	r2, [pc, #308]	@ (80030fc <HAL_UART_MspInit+0x160>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	f040 8092 	bne.w	80030f2 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002fce:	2302      	movs	r3, #2
 8002fd0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002fd6:	f107 0310 	add.w	r3, r7, #16
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f001 fdd0 	bl	8004b80 <HAL_RCCEx_PeriphCLKConfig>
 8002fe0:	4603      	mov	r3, r0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d001      	beq.n	8002fea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002fe6:	f7ff fd31 	bl	8002a4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002fea:	4b45      	ldr	r3, [pc, #276]	@ (8003100 <HAL_UART_MspInit+0x164>)
 8002fec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fee:	4a44      	ldr	r2, [pc, #272]	@ (8003100 <HAL_UART_MspInit+0x164>)
 8002ff0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ff4:	6593      	str	r3, [r2, #88]	@ 0x58
 8002ff6:	4b42      	ldr	r3, [pc, #264]	@ (8003100 <HAL_UART_MspInit+0x164>)
 8002ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ffa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003002:	4b3f      	ldr	r3, [pc, #252]	@ (8003100 <HAL_UART_MspInit+0x164>)
 8003004:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003006:	4a3e      	ldr	r2, [pc, #248]	@ (8003100 <HAL_UART_MspInit+0x164>)
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800300e:	4b3c      	ldr	r3, [pc, #240]	@ (8003100 <HAL_UART_MspInit+0x164>)
 8003010:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	60bb      	str	r3, [r7, #8]
 8003018:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800301a:	230c      	movs	r3, #12
 800301c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301e:	2302      	movs	r3, #2
 8003020:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003022:	2300      	movs	r3, #0
 8003024:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003026:	2300      	movs	r3, #0
 8003028:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800302a:	2307      	movs	r3, #7
 800302c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800302e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8003032:	4619      	mov	r1, r3
 8003034:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8003038:	f000 fddc 	bl	8003bf4 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 800303c:	4b31      	ldr	r3, [pc, #196]	@ (8003104 <HAL_UART_MspInit+0x168>)
 800303e:	4a32      	ldr	r2, [pc, #200]	@ (8003108 <HAL_UART_MspInit+0x16c>)
 8003040:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8003042:	4b30      	ldr	r3, [pc, #192]	@ (8003104 <HAL_UART_MspInit+0x168>)
 8003044:	221b      	movs	r2, #27
 8003046:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003048:	4b2e      	ldr	r3, [pc, #184]	@ (8003104 <HAL_UART_MspInit+0x168>)
 800304a:	2210      	movs	r2, #16
 800304c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800304e:	4b2d      	ldr	r3, [pc, #180]	@ (8003104 <HAL_UART_MspInit+0x168>)
 8003050:	2200      	movs	r2, #0
 8003052:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003054:	4b2b      	ldr	r3, [pc, #172]	@ (8003104 <HAL_UART_MspInit+0x168>)
 8003056:	2280      	movs	r2, #128	@ 0x80
 8003058:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800305a:	4b2a      	ldr	r3, [pc, #168]	@ (8003104 <HAL_UART_MspInit+0x168>)
 800305c:	2200      	movs	r2, #0
 800305e:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003060:	4b28      	ldr	r3, [pc, #160]	@ (8003104 <HAL_UART_MspInit+0x168>)
 8003062:	2200      	movs	r2, #0
 8003064:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003066:	4b27      	ldr	r3, [pc, #156]	@ (8003104 <HAL_UART_MspInit+0x168>)
 8003068:	2200      	movs	r2, #0
 800306a:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800306c:	4b25      	ldr	r3, [pc, #148]	@ (8003104 <HAL_UART_MspInit+0x168>)
 800306e:	2200      	movs	r2, #0
 8003070:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003072:	4824      	ldr	r0, [pc, #144]	@ (8003104 <HAL_UART_MspInit+0x168>)
 8003074:	f000 fa8c 	bl	8003590 <HAL_DMA_Init>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 800307e:	f7ff fce5 	bl	8002a4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a1f      	ldr	r2, [pc, #124]	@ (8003104 <HAL_UART_MspInit+0x168>)
 8003086:	67da      	str	r2, [r3, #124]	@ 0x7c
 8003088:	4a1e      	ldr	r2, [pc, #120]	@ (8003104 <HAL_UART_MspInit+0x168>)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 800308e:	4b1f      	ldr	r3, [pc, #124]	@ (800310c <HAL_UART_MspInit+0x170>)
 8003090:	4a1f      	ldr	r2, [pc, #124]	@ (8003110 <HAL_UART_MspInit+0x174>)
 8003092:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8003094:	4b1d      	ldr	r3, [pc, #116]	@ (800310c <HAL_UART_MspInit+0x170>)
 8003096:	221a      	movs	r2, #26
 8003098:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800309a:	4b1c      	ldr	r3, [pc, #112]	@ (800310c <HAL_UART_MspInit+0x170>)
 800309c:	2200      	movs	r2, #0
 800309e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030a0:	4b1a      	ldr	r3, [pc, #104]	@ (800310c <HAL_UART_MspInit+0x170>)
 80030a2:	2200      	movs	r2, #0
 80030a4:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030a6:	4b19      	ldr	r3, [pc, #100]	@ (800310c <HAL_UART_MspInit+0x170>)
 80030a8:	2280      	movs	r2, #128	@ 0x80
 80030aa:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030ac:	4b17      	ldr	r3, [pc, #92]	@ (800310c <HAL_UART_MspInit+0x170>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030b2:	4b16      	ldr	r3, [pc, #88]	@ (800310c <HAL_UART_MspInit+0x170>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80030b8:	4b14      	ldr	r3, [pc, #80]	@ (800310c <HAL_UART_MspInit+0x170>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030be:	4b13      	ldr	r3, [pc, #76]	@ (800310c <HAL_UART_MspInit+0x170>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80030c4:	4811      	ldr	r0, [pc, #68]	@ (800310c <HAL_UART_MspInit+0x170>)
 80030c6:	f000 fa63 	bl	8003590 <HAL_DMA_Init>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 80030d0:	f7ff fcbc 	bl	8002a4c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a0d      	ldr	r2, [pc, #52]	@ (800310c <HAL_UART_MspInit+0x170>)
 80030d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80030dc:	4a0b      	ldr	r2, [pc, #44]	@ (800310c <HAL_UART_MspInit+0x170>)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80030e2:	2200      	movs	r2, #0
 80030e4:	2100      	movs	r1, #0
 80030e6:	2026      	movs	r0, #38	@ 0x26
 80030e8:	f000 fa1d 	bl	8003526 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80030ec:	2026      	movs	r0, #38	@ 0x26
 80030ee:	f000 fa34 	bl	800355a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80030f2:	bf00      	nop
 80030f4:	3778      	adds	r7, #120	@ 0x78
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40004400 	.word	0x40004400
 8003100:	40021000 	.word	0x40021000
 8003104:	200007d4 	.word	0x200007d4
 8003108:	40020008 	.word	0x40020008
 800310c:	20000834 	.word	0x20000834
 8003110:	4002001c 	.word	0x4002001c

08003114 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003118:	bf00      	nop
 800311a:	e7fd      	b.n	8003118 <NMI_Handler+0x4>

0800311c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003120:	bf00      	nop
 8003122:	e7fd      	b.n	8003120 <HardFault_Handler+0x4>

08003124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003128:	bf00      	nop
 800312a:	e7fd      	b.n	8003128 <MemManage_Handler+0x4>

0800312c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800312c:	b480      	push	{r7}
 800312e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003130:	bf00      	nop
 8003132:	e7fd      	b.n	8003130 <BusFault_Handler+0x4>

08003134 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003134:	b480      	push	{r7}
 8003136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003138:	bf00      	nop
 800313a:	e7fd      	b.n	8003138 <UsageFault_Handler+0x4>

0800313c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800313c:	b480      	push	{r7}
 800313e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003140:	bf00      	nop
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr

0800314a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800314a:	b480      	push	{r7}
 800314c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800314e:	bf00      	nop
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800315c:	bf00      	nop
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003166:	b580      	push	{r7, lr}
 8003168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800316a:	f000 f8e3 	bl	8003334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800316e:	bf00      	nop
 8003170:	bd80      	pop	{r7, pc}
	...

08003174 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003178:	4802      	ldr	r0, [pc, #8]	@ (8003184 <DMA1_Channel1_IRQHandler+0x10>)
 800317a:	f000 fbec 	bl	8003956 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800317e:	bf00      	nop
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	200007d4 	.word	0x200007d4

08003188 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800318c:	4802      	ldr	r0, [pc, #8]	@ (8003198 <DMA1_Channel2_IRQHandler+0x10>)
 800318e:	f000 fbe2 	bl	8003956 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8003192:	bf00      	nop
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	20000834 	.word	0x20000834

0800319c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80031a0:	2040      	movs	r0, #64	@ 0x40
 80031a2:	f000 fef3 	bl	8003f8c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80031a6:	2080      	movs	r0, #128	@ 0x80
 80031a8:	f000 fef0 	bl	8003f8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80031ac:	bf00      	nop
 80031ae:	bd80      	pop	{r7, pc}

080031b0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80031b4:	4803      	ldr	r0, [pc, #12]	@ (80031c4 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80031b6:	f002 fc2b 	bl	8005a10 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80031ba:	4803      	ldr	r0, [pc, #12]	@ (80031c8 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80031bc:	f002 fc28 	bl	8005a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80031c0:	bf00      	nop
 80031c2:	bd80      	pop	{r7, pc}
 80031c4:	20000240 	.word	0x20000240
 80031c8:	2000063c 	.word	0x2000063c

080031cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80031d0:	4802      	ldr	r0, [pc, #8]	@ (80031dc <TIM3_IRQHandler+0x10>)
 80031d2:	f002 fc1d 	bl	8005a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80031d6:	bf00      	nop
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	200003d8 	.word	0x200003d8

080031e0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80031e4:	4802      	ldr	r0, [pc, #8]	@ (80031f0 <TIM4_IRQHandler+0x10>)
 80031e6:	f002 fc13 	bl	8005a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80031ea:	bf00      	nop
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	200004a4 	.word	0x200004a4

080031f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80031f8:	4802      	ldr	r0, [pc, #8]	@ (8003204 <USART2_IRQHandler+0x10>)
 80031fa:	f004 f9dd 	bl	80075b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80031fe:	bf00      	nop
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	20000708 	.word	0x20000708

08003208 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800320c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8003210:	f000 febc 	bl	8003f8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003214:	bf00      	nop
 8003216:	bd80      	pop	{r7, pc}

08003218 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003218:	b480      	push	{r7}
 800321a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800321c:	4b06      	ldr	r3, [pc, #24]	@ (8003238 <SystemInit+0x20>)
 800321e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003222:	4a05      	ldr	r2, [pc, #20]	@ (8003238 <SystemInit+0x20>)
 8003224:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003228:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800322c:	bf00      	nop
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	e000ed00 	.word	0xe000ed00

0800323c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800323c:	480d      	ldr	r0, [pc, #52]	@ (8003274 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800323e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003240:	f7ff ffea 	bl	8003218 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003244:	480c      	ldr	r0, [pc, #48]	@ (8003278 <LoopForever+0x6>)
  ldr r1, =_edata
 8003246:	490d      	ldr	r1, [pc, #52]	@ (800327c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003248:	4a0d      	ldr	r2, [pc, #52]	@ (8003280 <LoopForever+0xe>)
  movs r3, #0
 800324a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800324c:	e002      	b.n	8003254 <LoopCopyDataInit>

0800324e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800324e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003252:	3304      	adds	r3, #4

08003254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003258:	d3f9      	bcc.n	800324e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800325a:	4a0a      	ldr	r2, [pc, #40]	@ (8003284 <LoopForever+0x12>)
  ldr r4, =_ebss
 800325c:	4c0a      	ldr	r4, [pc, #40]	@ (8003288 <LoopForever+0x16>)
  movs r3, #0
 800325e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003260:	e001      	b.n	8003266 <LoopFillZerobss>

08003262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003264:	3204      	adds	r2, #4

08003266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003268:	d3fb      	bcc.n	8003262 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800326a:	f005 febb 	bl	8008fe4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800326e:	f7fe f94d 	bl	800150c <main>

08003272 <LoopForever>:

LoopForever:
    b LoopForever
 8003272:	e7fe      	b.n	8003272 <LoopForever>
  ldr   r0, =_estack
 8003274:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800327c:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8003280:	080090b0 	.word	0x080090b0
  ldr r2, =_sbss
 8003284:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8003288:	20000ff4 	.word	0x20000ff4

0800328c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800328c:	e7fe      	b.n	800328c <ADC1_2_IRQHandler>

0800328e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003294:	2300      	movs	r3, #0
 8003296:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003298:	2003      	movs	r0, #3
 800329a:	f000 f939 	bl	8003510 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800329e:	2000      	movs	r0, #0
 80032a0:	f000 f80e 	bl	80032c0 <HAL_InitTick>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d002      	beq.n	80032b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	71fb      	strb	r3, [r7, #7]
 80032ae:	e001      	b.n	80032b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80032b0:	f7ff fd40 	bl	8002d34 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80032b4:	79fb      	ldrb	r3, [r7, #7]

}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80032c8:	2300      	movs	r3, #0
 80032ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80032cc:	4b16      	ldr	r3, [pc, #88]	@ (8003328 <HAL_InitTick+0x68>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d022      	beq.n	800331a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80032d4:	4b15      	ldr	r3, [pc, #84]	@ (800332c <HAL_InitTick+0x6c>)
 80032d6:	681a      	ldr	r2, [r3, #0]
 80032d8:	4b13      	ldr	r3, [pc, #76]	@ (8003328 <HAL_InitTick+0x68>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80032e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80032e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 f944 	bl	8003576 <HAL_SYSTICK_Config>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d10f      	bne.n	8003314 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2b0f      	cmp	r3, #15
 80032f8:	d809      	bhi.n	800330e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80032fa:	2200      	movs	r2, #0
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003302:	f000 f910 	bl	8003526 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003306:	4a0a      	ldr	r2, [pc, #40]	@ (8003330 <HAL_InitTick+0x70>)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6013      	str	r3, [r2, #0]
 800330c:	e007      	b.n	800331e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	73fb      	strb	r3, [r7, #15]
 8003312:	e004      	b.n	800331e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	73fb      	strb	r3, [r7, #15]
 8003318:	e001      	b.n	800331e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800331e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003320:	4618      	mov	r0, r3
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	2000021c 	.word	0x2000021c
 800332c:	20000214 	.word	0x20000214
 8003330:	20000218 	.word	0x20000218

08003334 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003334:	b480      	push	{r7}
 8003336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003338:	4b05      	ldr	r3, [pc, #20]	@ (8003350 <HAL_IncTick+0x1c>)
 800333a:	681a      	ldr	r2, [r3, #0]
 800333c:	4b05      	ldr	r3, [pc, #20]	@ (8003354 <HAL_IncTick+0x20>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4413      	add	r3, r2
 8003342:	4a03      	ldr	r2, [pc, #12]	@ (8003350 <HAL_IncTick+0x1c>)
 8003344:	6013      	str	r3, [r2, #0]
}
 8003346:	bf00      	nop
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	20000ff0 	.word	0x20000ff0
 8003354:	2000021c 	.word	0x2000021c

08003358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
  return uwTick;
 800335c:	4b03      	ldr	r3, [pc, #12]	@ (800336c <HAL_GetTick+0x14>)
 800335e:	681b      	ldr	r3, [r3, #0]
}
 8003360:	4618      	mov	r0, r3
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
 800336a:	bf00      	nop
 800336c:	20000ff0 	.word	0x20000ff0

08003370 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003370:	b480      	push	{r7}
 8003372:	b085      	sub	sp, #20
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f003 0307 	and.w	r3, r3, #7
 800337e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003380:	4b0c      	ldr	r3, [pc, #48]	@ (80033b4 <__NVIC_SetPriorityGrouping+0x44>)
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800338c:	4013      	ands	r3, r2
 800338e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003398:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800339c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033a2:	4a04      	ldr	r2, [pc, #16]	@ (80033b4 <__NVIC_SetPriorityGrouping+0x44>)
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	60d3      	str	r3, [r2, #12]
}
 80033a8:	bf00      	nop
 80033aa:	3714      	adds	r7, #20
 80033ac:	46bd      	mov	sp, r7
 80033ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b2:	4770      	bx	lr
 80033b4:	e000ed00 	.word	0xe000ed00

080033b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033b8:	b480      	push	{r7}
 80033ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033bc:	4b04      	ldr	r3, [pc, #16]	@ (80033d0 <__NVIC_GetPriorityGrouping+0x18>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	0a1b      	lsrs	r3, r3, #8
 80033c2:	f003 0307 	and.w	r3, r3, #7
}
 80033c6:	4618      	mov	r0, r3
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr
 80033d0:	e000ed00 	.word	0xe000ed00

080033d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	db0b      	blt.n	80033fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	f003 021f 	and.w	r2, r3, #31
 80033ec:	4907      	ldr	r1, [pc, #28]	@ (800340c <__NVIC_EnableIRQ+0x38>)
 80033ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033f2:	095b      	lsrs	r3, r3, #5
 80033f4:	2001      	movs	r0, #1
 80033f6:	fa00 f202 	lsl.w	r2, r0, r2
 80033fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80033fe:	bf00      	nop
 8003400:	370c      	adds	r7, #12
 8003402:	46bd      	mov	sp, r7
 8003404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003408:	4770      	bx	lr
 800340a:	bf00      	nop
 800340c:	e000e100 	.word	0xe000e100

08003410 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	6039      	str	r1, [r7, #0]
 800341a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800341c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003420:	2b00      	cmp	r3, #0
 8003422:	db0a      	blt.n	800343a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	b2da      	uxtb	r2, r3
 8003428:	490c      	ldr	r1, [pc, #48]	@ (800345c <__NVIC_SetPriority+0x4c>)
 800342a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342e:	0112      	lsls	r2, r2, #4
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	440b      	add	r3, r1
 8003434:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003438:	e00a      	b.n	8003450 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	b2da      	uxtb	r2, r3
 800343e:	4908      	ldr	r1, [pc, #32]	@ (8003460 <__NVIC_SetPriority+0x50>)
 8003440:	79fb      	ldrb	r3, [r7, #7]
 8003442:	f003 030f 	and.w	r3, r3, #15
 8003446:	3b04      	subs	r3, #4
 8003448:	0112      	lsls	r2, r2, #4
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	440b      	add	r3, r1
 800344e:	761a      	strb	r2, [r3, #24]
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	e000e100 	.word	0xe000e100
 8003460:	e000ed00 	.word	0xe000ed00

08003464 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003464:	b480      	push	{r7}
 8003466:	b089      	sub	sp, #36	@ 0x24
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	f003 0307 	and.w	r3, r3, #7
 8003476:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	f1c3 0307 	rsb	r3, r3, #7
 800347e:	2b04      	cmp	r3, #4
 8003480:	bf28      	it	cs
 8003482:	2304      	movcs	r3, #4
 8003484:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	3304      	adds	r3, #4
 800348a:	2b06      	cmp	r3, #6
 800348c:	d902      	bls.n	8003494 <NVIC_EncodePriority+0x30>
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	3b03      	subs	r3, #3
 8003492:	e000      	b.n	8003496 <NVIC_EncodePriority+0x32>
 8003494:	2300      	movs	r3, #0
 8003496:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003498:	f04f 32ff 	mov.w	r2, #4294967295
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	fa02 f303 	lsl.w	r3, r2, r3
 80034a2:	43da      	mvns	r2, r3
 80034a4:	68bb      	ldr	r3, [r7, #8]
 80034a6:	401a      	ands	r2, r3
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034ac:	f04f 31ff 	mov.w	r1, #4294967295
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	fa01 f303 	lsl.w	r3, r1, r3
 80034b6:	43d9      	mvns	r1, r3
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034bc:	4313      	orrs	r3, r2
         );
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3724      	adds	r7, #36	@ 0x24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
	...

080034cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	3b01      	subs	r3, #1
 80034d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80034dc:	d301      	bcc.n	80034e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80034de:	2301      	movs	r3, #1
 80034e0:	e00f      	b.n	8003502 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80034e2:	4a0a      	ldr	r2, [pc, #40]	@ (800350c <SysTick_Config+0x40>)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	3b01      	subs	r3, #1
 80034e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80034ea:	210f      	movs	r1, #15
 80034ec:	f04f 30ff 	mov.w	r0, #4294967295
 80034f0:	f7ff ff8e 	bl	8003410 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80034f4:	4b05      	ldr	r3, [pc, #20]	@ (800350c <SysTick_Config+0x40>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80034fa:	4b04      	ldr	r3, [pc, #16]	@ (800350c <SysTick_Config+0x40>)
 80034fc:	2207      	movs	r2, #7
 80034fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3708      	adds	r7, #8
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
 800350a:	bf00      	nop
 800350c:	e000e010 	.word	0xe000e010

08003510 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f7ff ff29 	bl	8003370 <__NVIC_SetPriorityGrouping>
}
 800351e:	bf00      	nop
 8003520:	3708      	adds	r7, #8
 8003522:	46bd      	mov	sp, r7
 8003524:	bd80      	pop	{r7, pc}

08003526 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003526:	b580      	push	{r7, lr}
 8003528:	b086      	sub	sp, #24
 800352a:	af00      	add	r7, sp, #0
 800352c:	4603      	mov	r3, r0
 800352e:	60b9      	str	r1, [r7, #8]
 8003530:	607a      	str	r2, [r7, #4]
 8003532:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003534:	f7ff ff40 	bl	80033b8 <__NVIC_GetPriorityGrouping>
 8003538:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	68b9      	ldr	r1, [r7, #8]
 800353e:	6978      	ldr	r0, [r7, #20]
 8003540:	f7ff ff90 	bl	8003464 <NVIC_EncodePriority>
 8003544:	4602      	mov	r2, r0
 8003546:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800354a:	4611      	mov	r1, r2
 800354c:	4618      	mov	r0, r3
 800354e:	f7ff ff5f 	bl	8003410 <__NVIC_SetPriority>
}
 8003552:	bf00      	nop
 8003554:	3718      	adds	r7, #24
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}

0800355a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800355a:	b580      	push	{r7, lr}
 800355c:	b082      	sub	sp, #8
 800355e:	af00      	add	r7, sp, #0
 8003560:	4603      	mov	r3, r0
 8003562:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003564:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003568:	4618      	mov	r0, r3
 800356a:	f7ff ff33 	bl	80033d4 <__NVIC_EnableIRQ>
}
 800356e:	bf00      	nop
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b082      	sub	sp, #8
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f7ff ffa4 	bl	80034cc <SysTick_Config>
 8003584:	4603      	mov	r3, r0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e08d      	b.n	80036be <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	461a      	mov	r2, r3
 80035a8:	4b47      	ldr	r3, [pc, #284]	@ (80036c8 <HAL_DMA_Init+0x138>)
 80035aa:	429a      	cmp	r2, r3
 80035ac:	d80f      	bhi.n	80035ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	4b45      	ldr	r3, [pc, #276]	@ (80036cc <HAL_DMA_Init+0x13c>)
 80035b6:	4413      	add	r3, r2
 80035b8:	4a45      	ldr	r2, [pc, #276]	@ (80036d0 <HAL_DMA_Init+0x140>)
 80035ba:	fba2 2303 	umull	r2, r3, r2, r3
 80035be:	091b      	lsrs	r3, r3, #4
 80035c0:	009a      	lsls	r2, r3, #2
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a42      	ldr	r2, [pc, #264]	@ (80036d4 <HAL_DMA_Init+0x144>)
 80035ca:	641a      	str	r2, [r3, #64]	@ 0x40
 80035cc:	e00e      	b.n	80035ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	461a      	mov	r2, r3
 80035d4:	4b40      	ldr	r3, [pc, #256]	@ (80036d8 <HAL_DMA_Init+0x148>)
 80035d6:	4413      	add	r3, r2
 80035d8:	4a3d      	ldr	r2, [pc, #244]	@ (80036d0 <HAL_DMA_Init+0x140>)
 80035da:	fba2 2303 	umull	r2, r3, r2, r3
 80035de:	091b      	lsrs	r3, r3, #4
 80035e0:	009a      	lsls	r2, r3, #2
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a3c      	ldr	r2, [pc, #240]	@ (80036dc <HAL_DMA_Init+0x14c>)
 80035ea:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003602:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003606:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003610:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800361c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003628:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003630:	68fa      	ldr	r2, [r7, #12]
 8003632:	4313      	orrs	r3, r2
 8003634:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f000 fa76 	bl	8003b30 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800364c:	d102      	bne.n	8003654 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800365c:	b2d2      	uxtb	r2, r2
 800365e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003668:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d010      	beq.n	8003694 <HAL_DMA_Init+0x104>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	2b04      	cmp	r3, #4
 8003678:	d80c      	bhi.n	8003694 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 fa96 	bl	8003bac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003684:	2200      	movs	r2, #0
 8003686:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800368c:	687a      	ldr	r2, [r7, #4]
 800368e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003690:	605a      	str	r2, [r3, #4]
 8003692:	e008      	b.n	80036a6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2200      	movs	r2, #0
 80036a4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2200      	movs	r2, #0
 80036aa:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2200      	movs	r2, #0
 80036b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3710      	adds	r7, #16
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	40020407 	.word	0x40020407
 80036cc:	bffdfff8 	.word	0xbffdfff8
 80036d0:	cccccccd 	.word	0xcccccccd
 80036d4:	40020000 	.word	0x40020000
 80036d8:	bffdfbf8 	.word	0xbffdfbf8
 80036dc:	40020400 	.word	0x40020400

080036e0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d101      	bne.n	8003700 <HAL_DMA_Start_IT+0x20>
 80036fc:	2302      	movs	r3, #2
 80036fe:	e066      	b.n	80037ce <HAL_DMA_Start_IT+0xee>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800370e:	b2db      	uxtb	r3, r3
 8003710:	2b01      	cmp	r3, #1
 8003712:	d155      	bne.n	80037c0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2202      	movs	r2, #2
 8003718:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 0201 	bic.w	r2, r2, #1
 8003730:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	68b9      	ldr	r1, [r7, #8]
 8003738:	68f8      	ldr	r0, [r7, #12]
 800373a:	f000 f9bb 	bl	8003ab4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003742:	2b00      	cmp	r3, #0
 8003744:	d008      	beq.n	8003758 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 020e 	orr.w	r2, r2, #14
 8003754:	601a      	str	r2, [r3, #0]
 8003756:	e00f      	b.n	8003778 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0204 	bic.w	r2, r2, #4
 8003766:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 020a 	orr.w	r2, r2, #10
 8003776:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d007      	beq.n	8003796 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003790:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003794:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800379a:	2b00      	cmp	r3, #0
 800379c:	d007      	beq.n	80037ae <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037ac:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f042 0201 	orr.w	r2, r2, #1
 80037bc:	601a      	str	r2, [r3, #0]
 80037be:	e005      	b.n	80037cc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80037c8:	2302      	movs	r3, #2
 80037ca:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80037cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3718      	adds	r7, #24
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80037d6:	b480      	push	{r7}
 80037d8:	b085      	sub	sp, #20
 80037da:	af00      	add	r7, sp, #0
 80037dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d005      	beq.n	80037fa <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2204      	movs	r2, #4
 80037f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	73fb      	strb	r3, [r7, #15]
 80037f8:	e037      	b.n	800386a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681a      	ldr	r2, [r3, #0]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f022 020e 	bic.w	r2, r2, #14
 8003808:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003814:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003818:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 0201 	bic.w	r2, r2, #1
 8003828:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800382e:	f003 021f 	and.w	r2, r3, #31
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003836:	2101      	movs	r1, #1
 8003838:	fa01 f202 	lsl.w	r2, r1, r2
 800383c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003846:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00c      	beq.n	800386a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800385a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800385e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003868:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800387a:	7bfb      	ldrb	r3, [r7, #15]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3714      	adds	r7, #20
 8003880:	46bd      	mov	sp, r7
 8003882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003886:	4770      	bx	lr

08003888 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003890:	2300      	movs	r3, #0
 8003892:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800389a:	b2db      	uxtb	r3, r3
 800389c:	2b02      	cmp	r3, #2
 800389e:	d00d      	beq.n	80038bc <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2204      	movs	r2, #4
 80038a4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	73fb      	strb	r3, [r7, #15]
 80038ba:	e047      	b.n	800394c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	681a      	ldr	r2, [r3, #0]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f022 020e 	bic.w	r2, r2, #14
 80038ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f022 0201 	bic.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038e6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80038ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f0:	f003 021f 	and.w	r2, r3, #31
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038f8:	2101      	movs	r1, #1
 80038fa:	fa01 f202 	lsl.w	r2, r1, r2
 80038fe:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003908:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00c      	beq.n	800392c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800391c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003920:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003926:	687a      	ldr	r2, [r7, #4]
 8003928:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800392a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	4798      	blx	r3
    }
  }
  return status;
 800394c:	7bfb      	ldrb	r3, [r7, #15]
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}

08003956 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003956:	b580      	push	{r7, lr}
 8003958:	b084      	sub	sp, #16
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003972:	f003 031f 	and.w	r3, r3, #31
 8003976:	2204      	movs	r2, #4
 8003978:	409a      	lsls	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	4013      	ands	r3, r2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d026      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x7a>
 8003982:	68bb      	ldr	r3, [r7, #8]
 8003984:	f003 0304 	and.w	r3, r3, #4
 8003988:	2b00      	cmp	r3, #0
 800398a:	d021      	beq.n	80039d0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0320 	and.w	r3, r3, #32
 8003996:	2b00      	cmp	r3, #0
 8003998:	d107      	bne.n	80039aa <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f022 0204 	bic.w	r2, r2, #4
 80039a8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ae:	f003 021f 	and.w	r2, r3, #31
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b6:	2104      	movs	r1, #4
 80039b8:	fa01 f202 	lsl.w	r2, r1, r2
 80039bc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d071      	beq.n	8003aaa <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80039ce:	e06c      	b.n	8003aaa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039d4:	f003 031f 	and.w	r3, r3, #31
 80039d8:	2202      	movs	r2, #2
 80039da:	409a      	lsls	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	4013      	ands	r3, r2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d02e      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d029      	beq.n	8003a42 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 0320 	and.w	r3, r3, #32
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10b      	bne.n	8003a14 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f022 020a 	bic.w	r2, r2, #10
 8003a0a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a18:	f003 021f 	and.w	r2, r3, #31
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a20:	2102      	movs	r1, #2
 8003a22:	fa01 f202 	lsl.w	r2, r1, r2
 8003a26:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d038      	beq.n	8003aaa <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003a40:	e033      	b.n	8003aaa <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a46:	f003 031f 	and.w	r3, r3, #31
 8003a4a:	2208      	movs	r2, #8
 8003a4c:	409a      	lsls	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	4013      	ands	r3, r2
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d02a      	beq.n	8003aac <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	f003 0308 	and.w	r3, r3, #8
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d025      	beq.n	8003aac <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 020e 	bic.w	r2, r2, #14
 8003a6e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a74:	f003 021f 	and.w	r2, r3, #31
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a7c:	2101      	movs	r1, #1
 8003a7e:	fa01 f202 	lsl.w	r2, r1, r2
 8003a82:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d004      	beq.n	8003aac <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003aaa:	bf00      	nop
 8003aac:	bf00      	nop
}
 8003aae:	3710      	adds	r7, #16
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	60f8      	str	r0, [r7, #12]
 8003abc:	60b9      	str	r1, [r7, #8]
 8003abe:	607a      	str	r2, [r7, #4]
 8003ac0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003aca:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d004      	beq.n	8003ade <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003adc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae2:	f003 021f 	and.w	r2, r3, #31
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aea:	2101      	movs	r1, #1
 8003aec:	fa01 f202 	lsl.w	r2, r1, r2
 8003af0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	683a      	ldr	r2, [r7, #0]
 8003af8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	2b10      	cmp	r3, #16
 8003b00:	d108      	bne.n	8003b14 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68ba      	ldr	r2, [r7, #8]
 8003b10:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b12:	e007      	b.n	8003b24 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	68ba      	ldr	r2, [r7, #8]
 8003b1a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	60da      	str	r2, [r3, #12]
}
 8003b24:	bf00      	nop
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b087      	sub	sp, #28
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	461a      	mov	r2, r3
 8003b3e:	4b16      	ldr	r3, [pc, #88]	@ (8003b98 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d802      	bhi.n	8003b4a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003b44:	4b15      	ldr	r3, [pc, #84]	@ (8003b9c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	e001      	b.n	8003b4e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003b4a:	4b15      	ldr	r3, [pc, #84]	@ (8003ba0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003b4c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	3b08      	subs	r3, #8
 8003b5a:	4a12      	ldr	r2, [pc, #72]	@ (8003ba4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b60:	091b      	lsrs	r3, r3, #4
 8003b62:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b68:	089b      	lsrs	r3, r3, #2
 8003b6a:	009a      	lsls	r2, r3, #2
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	4413      	add	r3, r2
 8003b70:	461a      	mov	r2, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a0b      	ldr	r2, [pc, #44]	@ (8003ba8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003b7a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	f003 031f 	and.w	r3, r3, #31
 8003b82:	2201      	movs	r2, #1
 8003b84:	409a      	lsls	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003b8a:	bf00      	nop
 8003b8c:	371c      	adds	r7, #28
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
 8003b96:	bf00      	nop
 8003b98:	40020407 	.word	0x40020407
 8003b9c:	40020800 	.word	0x40020800
 8003ba0:	40020820 	.word	0x40020820
 8003ba4:	cccccccd 	.word	0xcccccccd
 8003ba8:	40020880 	.word	0x40020880

08003bac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b085      	sub	sp, #20
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8003bec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009b      	lsls	r3, r3, #2
 8003bc4:	461a      	mov	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a08      	ldr	r2, [pc, #32]	@ (8003bf0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003bce:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	3b01      	subs	r3, #1
 8003bd4:	f003 031f 	and.w	r3, r3, #31
 8003bd8:	2201      	movs	r2, #1
 8003bda:	409a      	lsls	r2, r3
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003be0:	bf00      	nop
 8003be2:	3714      	adds	r7, #20
 8003be4:	46bd      	mov	sp, r7
 8003be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bea:	4770      	bx	lr
 8003bec:	1000823f 	.word	0x1000823f
 8003bf0:	40020940 	.word	0x40020940

08003bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003c02:	e15a      	b.n	8003eba <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	2101      	movs	r1, #1
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c10:	4013      	ands	r3, r2
 8003c12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 814c 	beq.w	8003eb4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f003 0303 	and.w	r3, r3, #3
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	d005      	beq.n	8003c34 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003c30:	2b02      	cmp	r3, #2
 8003c32:	d130      	bne.n	8003c96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	2203      	movs	r2, #3
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	43db      	mvns	r3, r3
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	68da      	ldr	r2, [r3, #12]
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	fa02 f303 	lsl.w	r3, r2, r3
 8003c58:	693a      	ldr	r2, [r7, #16]
 8003c5a:	4313      	orrs	r3, r2
 8003c5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	693a      	ldr	r2, [r7, #16]
 8003c62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	697b      	ldr	r3, [r7, #20]
 8003c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c72:	43db      	mvns	r3, r3
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	4013      	ands	r3, r2
 8003c78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	091b      	lsrs	r3, r3, #4
 8003c80:	f003 0201 	and.w	r2, r3, #1
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	693a      	ldr	r2, [r7, #16]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f003 0303 	and.w	r3, r3, #3
 8003c9e:	2b03      	cmp	r3, #3
 8003ca0:	d017      	beq.n	8003cd2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	68db      	ldr	r3, [r3, #12]
 8003ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	2203      	movs	r2, #3
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	689a      	ldr	r2, [r3, #8]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	005b      	lsls	r3, r3, #1
 8003cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc6:	693a      	ldr	r2, [r7, #16]
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	693a      	ldr	r2, [r7, #16]
 8003cd0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	f003 0303 	and.w	r3, r3, #3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d123      	bne.n	8003d26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	08da      	lsrs	r2, r3, #3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3208      	adds	r2, #8
 8003ce6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f003 0307 	and.w	r3, r3, #7
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	220f      	movs	r2, #15
 8003cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfa:	43db      	mvns	r3, r3
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	691a      	ldr	r2, [r3, #16]
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f003 0307 	and.w	r3, r3, #7
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	4313      	orrs	r3, r2
 8003d16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	08da      	lsrs	r2, r3, #3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	3208      	adds	r2, #8
 8003d20:	6939      	ldr	r1, [r7, #16]
 8003d22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	2203      	movs	r2, #3
 8003d32:	fa02 f303 	lsl.w	r3, r2, r3
 8003d36:	43db      	mvns	r3, r3
 8003d38:	693a      	ldr	r2, [r7, #16]
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685b      	ldr	r3, [r3, #4]
 8003d42:	f003 0203 	and.w	r2, r3, #3
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d4e:	693a      	ldr	r2, [r7, #16]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 80a6 	beq.w	8003eb4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d68:	4b5b      	ldr	r3, [pc, #364]	@ (8003ed8 <HAL_GPIO_Init+0x2e4>)
 8003d6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d6c:	4a5a      	ldr	r2, [pc, #360]	@ (8003ed8 <HAL_GPIO_Init+0x2e4>)
 8003d6e:	f043 0301 	orr.w	r3, r3, #1
 8003d72:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d74:	4b58      	ldr	r3, [pc, #352]	@ (8003ed8 <HAL_GPIO_Init+0x2e4>)
 8003d76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d78:	f003 0301 	and.w	r3, r3, #1
 8003d7c:	60bb      	str	r3, [r7, #8]
 8003d7e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003d80:	4a56      	ldr	r2, [pc, #344]	@ (8003edc <HAL_GPIO_Init+0x2e8>)
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	089b      	lsrs	r3, r3, #2
 8003d86:	3302      	adds	r3, #2
 8003d88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d8c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f003 0303 	and.w	r3, r3, #3
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	220f      	movs	r2, #15
 8003d98:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4013      	ands	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003daa:	d01f      	beq.n	8003dec <HAL_GPIO_Init+0x1f8>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a4c      	ldr	r2, [pc, #304]	@ (8003ee0 <HAL_GPIO_Init+0x2ec>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d019      	beq.n	8003de8 <HAL_GPIO_Init+0x1f4>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	4a4b      	ldr	r2, [pc, #300]	@ (8003ee4 <HAL_GPIO_Init+0x2f0>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d013      	beq.n	8003de4 <HAL_GPIO_Init+0x1f0>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	4a4a      	ldr	r2, [pc, #296]	@ (8003ee8 <HAL_GPIO_Init+0x2f4>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d00d      	beq.n	8003de0 <HAL_GPIO_Init+0x1ec>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a49      	ldr	r2, [pc, #292]	@ (8003eec <HAL_GPIO_Init+0x2f8>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d007      	beq.n	8003ddc <HAL_GPIO_Init+0x1e8>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a48      	ldr	r2, [pc, #288]	@ (8003ef0 <HAL_GPIO_Init+0x2fc>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d101      	bne.n	8003dd8 <HAL_GPIO_Init+0x1e4>
 8003dd4:	2305      	movs	r3, #5
 8003dd6:	e00a      	b.n	8003dee <HAL_GPIO_Init+0x1fa>
 8003dd8:	2306      	movs	r3, #6
 8003dda:	e008      	b.n	8003dee <HAL_GPIO_Init+0x1fa>
 8003ddc:	2304      	movs	r3, #4
 8003dde:	e006      	b.n	8003dee <HAL_GPIO_Init+0x1fa>
 8003de0:	2303      	movs	r3, #3
 8003de2:	e004      	b.n	8003dee <HAL_GPIO_Init+0x1fa>
 8003de4:	2302      	movs	r3, #2
 8003de6:	e002      	b.n	8003dee <HAL_GPIO_Init+0x1fa>
 8003de8:	2301      	movs	r3, #1
 8003dea:	e000      	b.n	8003dee <HAL_GPIO_Init+0x1fa>
 8003dec:	2300      	movs	r3, #0
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	f002 0203 	and.w	r2, r2, #3
 8003df4:	0092      	lsls	r2, r2, #2
 8003df6:	4093      	lsls	r3, r2
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003dfe:	4937      	ldr	r1, [pc, #220]	@ (8003edc <HAL_GPIO_Init+0x2e8>)
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	089b      	lsrs	r3, r3, #2
 8003e04:	3302      	adds	r3, #2
 8003e06:	693a      	ldr	r2, [r7, #16]
 8003e08:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003e0c:	4b39      	ldr	r3, [pc, #228]	@ (8003ef4 <HAL_GPIO_Init+0x300>)
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	43db      	mvns	r3, r3
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	4013      	ands	r3, r2
 8003e1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d003      	beq.n	8003e30 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	4313      	orrs	r3, r2
 8003e2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e30:	4a30      	ldr	r2, [pc, #192]	@ (8003ef4 <HAL_GPIO_Init+0x300>)
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e36:	4b2f      	ldr	r3, [pc, #188]	@ (8003ef4 <HAL_GPIO_Init+0x300>)
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	43db      	mvns	r3, r3
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	4013      	ands	r3, r2
 8003e44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	685b      	ldr	r3, [r3, #4]
 8003e4a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e5a:	4a26      	ldr	r2, [pc, #152]	@ (8003ef4 <HAL_GPIO_Init+0x300>)
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003e60:	4b24      	ldr	r3, [pc, #144]	@ (8003ef4 <HAL_GPIO_Init+0x300>)
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	43db      	mvns	r3, r3
 8003e6a:	693a      	ldr	r2, [r7, #16]
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	4313      	orrs	r3, r2
 8003e82:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e84:	4a1b      	ldr	r2, [pc, #108]	@ (8003ef4 <HAL_GPIO_Init+0x300>)
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8003ef4 <HAL_GPIO_Init+0x300>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	43db      	mvns	r3, r3
 8003e94:	693a      	ldr	r2, [r7, #16]
 8003e96:	4013      	ands	r3, r2
 8003e98:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d003      	beq.n	8003eae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003eae:	4a11      	ldr	r2, [pc, #68]	@ (8003ef4 <HAL_GPIO_Init+0x300>)
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	681a      	ldr	r2, [r3, #0]
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f47f ae9d 	bne.w	8003c04 <HAL_GPIO_Init+0x10>
  }
}
 8003eca:	bf00      	nop
 8003ecc:	bf00      	nop
 8003ece:	371c      	adds	r7, #28
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed6:	4770      	bx	lr
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	40010000 	.word	0x40010000
 8003ee0:	48000400 	.word	0x48000400
 8003ee4:	48000800 	.word	0x48000800
 8003ee8:	48000c00 	.word	0x48000c00
 8003eec:	48001000 	.word	0x48001000
 8003ef0:	48001400 	.word	0x48001400
 8003ef4:	40010400 	.word	0x40010400

08003ef8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ef8:	b480      	push	{r7}
 8003efa:	b085      	sub	sp, #20
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	460b      	mov	r3, r1
 8003f02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691a      	ldr	r2, [r3, #16]
 8003f08:	887b      	ldrh	r3, [r7, #2]
 8003f0a:	4013      	ands	r3, r2
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d002      	beq.n	8003f16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003f10:	2301      	movs	r3, #1
 8003f12:	73fb      	strb	r3, [r7, #15]
 8003f14:	e001      	b.n	8003f1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003f16:	2300      	movs	r3, #0
 8003f18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3714      	adds	r7, #20
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b083      	sub	sp, #12
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
 8003f30:	460b      	mov	r3, r1
 8003f32:	807b      	strh	r3, [r7, #2]
 8003f34:	4613      	mov	r3, r2
 8003f36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f38:	787b      	ldrb	r3, [r7, #1]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d003      	beq.n	8003f46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003f3e:	887a      	ldrh	r2, [r7, #2]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003f44:	e002      	b.n	8003f4c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003f46:	887a      	ldrh	r2, [r7, #2]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003f4c:	bf00      	nop
 8003f4e:	370c      	adds	r7, #12
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b085      	sub	sp, #20
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	460b      	mov	r3, r1
 8003f62:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	695b      	ldr	r3, [r3, #20]
 8003f68:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f6a:	887a      	ldrh	r2, [r7, #2]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4013      	ands	r3, r2
 8003f70:	041a      	lsls	r2, r3, #16
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	43d9      	mvns	r1, r3
 8003f76:	887b      	ldrh	r3, [r7, #2]
 8003f78:	400b      	ands	r3, r1
 8003f7a:	431a      	orrs	r2, r3
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	619a      	str	r2, [r3, #24]
}
 8003f80:	bf00      	nop
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	4603      	mov	r3, r0
 8003f94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003f96:	4b08      	ldr	r3, [pc, #32]	@ (8003fb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f98:	695a      	ldr	r2, [r3, #20]
 8003f9a:	88fb      	ldrh	r3, [r7, #6]
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d006      	beq.n	8003fb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003fa2:	4a05      	ldr	r2, [pc, #20]	@ (8003fb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fa4:	88fb      	ldrh	r3, [r7, #6]
 8003fa6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fa8:	88fb      	ldrh	r3, [r7, #6]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f7fe f922 	bl	80021f4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003fb0:	bf00      	nop
 8003fb2:	3708      	adds	r7, #8
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}
 8003fb8:	40010400 	.word	0x40010400

08003fbc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d141      	bne.n	800404e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003fca:	4b4b      	ldr	r3, [pc, #300]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003fd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fd6:	d131      	bne.n	800403c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fd8:	4b47      	ldr	r3, [pc, #284]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003fde:	4a46      	ldr	r2, [pc, #280]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fe4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003fe8:	4b43      	ldr	r3, [pc, #268]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003ff0:	4a41      	ldr	r2, [pc, #260]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ff6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ff8:	4b40      	ldr	r3, [pc, #256]	@ (80040fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	2232      	movs	r2, #50	@ 0x32
 8003ffe:	fb02 f303 	mul.w	r3, r2, r3
 8004002:	4a3f      	ldr	r2, [pc, #252]	@ (8004100 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004004:	fba2 2303 	umull	r2, r3, r2, r3
 8004008:	0c9b      	lsrs	r3, r3, #18
 800400a:	3301      	adds	r3, #1
 800400c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800400e:	e002      	b.n	8004016 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	3b01      	subs	r3, #1
 8004014:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004016:	4b38      	ldr	r3, [pc, #224]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004018:	695b      	ldr	r3, [r3, #20]
 800401a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800401e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004022:	d102      	bne.n	800402a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f2      	bne.n	8004010 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800402a:	4b33      	ldr	r3, [pc, #204]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004032:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004036:	d158      	bne.n	80040ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e057      	b.n	80040ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800403c:	4b2e      	ldr	r3, [pc, #184]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800403e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004042:	4a2d      	ldr	r2, [pc, #180]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004044:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004048:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800404c:	e04d      	b.n	80040ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004054:	d141      	bne.n	80040da <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004056:	4b28      	ldr	r3, [pc, #160]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800405e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004062:	d131      	bne.n	80040c8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004064:	4b24      	ldr	r3, [pc, #144]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004066:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800406a:	4a23      	ldr	r2, [pc, #140]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800406c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004070:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004074:	4b20      	ldr	r3, [pc, #128]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800407c:	4a1e      	ldr	r2, [pc, #120]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800407e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004082:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004084:	4b1d      	ldr	r3, [pc, #116]	@ (80040fc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2232      	movs	r2, #50	@ 0x32
 800408a:	fb02 f303 	mul.w	r3, r2, r3
 800408e:	4a1c      	ldr	r2, [pc, #112]	@ (8004100 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004090:	fba2 2303 	umull	r2, r3, r2, r3
 8004094:	0c9b      	lsrs	r3, r3, #18
 8004096:	3301      	adds	r3, #1
 8004098:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800409a:	e002      	b.n	80040a2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	3b01      	subs	r3, #1
 80040a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80040a2:	4b15      	ldr	r3, [pc, #84]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040ae:	d102      	bne.n	80040b6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f2      	bne.n	800409c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80040b6:	4b10      	ldr	r3, [pc, #64]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80040be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80040c2:	d112      	bne.n	80040ea <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040c4:	2303      	movs	r3, #3
 80040c6:	e011      	b.n	80040ec <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040c8:	4b0b      	ldr	r3, [pc, #44]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80040ce:	4a0a      	ldr	r2, [pc, #40]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80040d8:	e007      	b.n	80040ea <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80040da:	4b07      	ldr	r3, [pc, #28]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80040e2:	4a05      	ldr	r2, [pc, #20]	@ (80040f8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040e8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3714      	adds	r7, #20
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	40007000 	.word	0x40007000
 80040fc:	20000214 	.word	0x20000214
 8004100:	431bde83 	.word	0x431bde83

08004104 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004104:	b480      	push	{r7}
 8004106:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004108:	4b05      	ldr	r3, [pc, #20]	@ (8004120 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	4a04      	ldr	r2, [pc, #16]	@ (8004120 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800410e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004112:	6093      	str	r3, [r2, #8]
}
 8004114:	bf00      	nop
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40007000 	.word	0x40007000

08004124 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b088      	sub	sp, #32
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d101      	bne.n	8004136 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
 8004134:	e2fe      	b.n	8004734 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	2b00      	cmp	r3, #0
 8004140:	d075      	beq.n	800422e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004142:	4b97      	ldr	r3, [pc, #604]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 030c 	and.w	r3, r3, #12
 800414a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800414c:	4b94      	ldr	r3, [pc, #592]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	f003 0303 	and.w	r3, r3, #3
 8004154:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004156:	69bb      	ldr	r3, [r7, #24]
 8004158:	2b0c      	cmp	r3, #12
 800415a:	d102      	bne.n	8004162 <HAL_RCC_OscConfig+0x3e>
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	2b03      	cmp	r3, #3
 8004160:	d002      	beq.n	8004168 <HAL_RCC_OscConfig+0x44>
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	2b08      	cmp	r3, #8
 8004166:	d10b      	bne.n	8004180 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004168:	4b8d      	ldr	r3, [pc, #564]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d05b      	beq.n	800422c <HAL_RCC_OscConfig+0x108>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d157      	bne.n	800422c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e2d9      	b.n	8004734 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004188:	d106      	bne.n	8004198 <HAL_RCC_OscConfig+0x74>
 800418a:	4b85      	ldr	r3, [pc, #532]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a84      	ldr	r2, [pc, #528]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 8004190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	e01d      	b.n	80041d4 <HAL_RCC_OscConfig+0xb0>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041a0:	d10c      	bne.n	80041bc <HAL_RCC_OscConfig+0x98>
 80041a2:	4b7f      	ldr	r3, [pc, #508]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a7e      	ldr	r2, [pc, #504]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 80041a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	4b7c      	ldr	r3, [pc, #496]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a7b      	ldr	r2, [pc, #492]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 80041b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041b8:	6013      	str	r3, [r2, #0]
 80041ba:	e00b      	b.n	80041d4 <HAL_RCC_OscConfig+0xb0>
 80041bc:	4b78      	ldr	r3, [pc, #480]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a77      	ldr	r2, [pc, #476]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 80041c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041c6:	6013      	str	r3, [r2, #0]
 80041c8:	4b75      	ldr	r3, [pc, #468]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a74      	ldr	r2, [pc, #464]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 80041ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d013      	beq.n	8004204 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041dc:	f7ff f8bc 	bl	8003358 <HAL_GetTick>
 80041e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041e2:	e008      	b.n	80041f6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80041e4:	f7ff f8b8 	bl	8003358 <HAL_GetTick>
 80041e8:	4602      	mov	r2, r0
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	2b64      	cmp	r3, #100	@ 0x64
 80041f0:	d901      	bls.n	80041f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041f2:	2303      	movs	r3, #3
 80041f4:	e29e      	b.n	8004734 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80041f6:	4b6a      	ldr	r3, [pc, #424]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d0f0      	beq.n	80041e4 <HAL_RCC_OscConfig+0xc0>
 8004202:	e014      	b.n	800422e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004204:	f7ff f8a8 	bl	8003358 <HAL_GetTick>
 8004208:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800420a:	e008      	b.n	800421e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800420c:	f7ff f8a4 	bl	8003358 <HAL_GetTick>
 8004210:	4602      	mov	r2, r0
 8004212:	693b      	ldr	r3, [r7, #16]
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	2b64      	cmp	r3, #100	@ 0x64
 8004218:	d901      	bls.n	800421e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800421a:	2303      	movs	r3, #3
 800421c:	e28a      	b.n	8004734 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800421e:	4b60      	ldr	r3, [pc, #384]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1f0      	bne.n	800420c <HAL_RCC_OscConfig+0xe8>
 800422a:	e000      	b.n	800422e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800422c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b00      	cmp	r3, #0
 8004238:	d075      	beq.n	8004326 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800423a:	4b59      	ldr	r3, [pc, #356]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	f003 030c 	and.w	r3, r3, #12
 8004242:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004244:	4b56      	ldr	r3, [pc, #344]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f003 0303 	and.w	r3, r3, #3
 800424c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	2b0c      	cmp	r3, #12
 8004252:	d102      	bne.n	800425a <HAL_RCC_OscConfig+0x136>
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	2b02      	cmp	r3, #2
 8004258:	d002      	beq.n	8004260 <HAL_RCC_OscConfig+0x13c>
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	2b04      	cmp	r3, #4
 800425e:	d11f      	bne.n	80042a0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004260:	4b4f      	ldr	r3, [pc, #316]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004268:	2b00      	cmp	r3, #0
 800426a:	d005      	beq.n	8004278 <HAL_RCC_OscConfig+0x154>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e25d      	b.n	8004734 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004278:	4b49      	ldr	r3, [pc, #292]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	061b      	lsls	r3, r3, #24
 8004286:	4946      	ldr	r1, [pc, #280]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 8004288:	4313      	orrs	r3, r2
 800428a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800428c:	4b45      	ldr	r3, [pc, #276]	@ (80043a4 <HAL_RCC_OscConfig+0x280>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4618      	mov	r0, r3
 8004292:	f7ff f815 	bl	80032c0 <HAL_InitTick>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d043      	beq.n	8004324 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e249      	b.n	8004734 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d023      	beq.n	80042f0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042a8:	4b3d      	ldr	r3, [pc, #244]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a3c      	ldr	r2, [pc, #240]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 80042ae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80042b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b4:	f7ff f850 	bl	8003358 <HAL_GetTick>
 80042b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042ba:	e008      	b.n	80042ce <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042bc:	f7ff f84c 	bl	8003358 <HAL_GetTick>
 80042c0:	4602      	mov	r2, r0
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	1ad3      	subs	r3, r2, r3
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d901      	bls.n	80042ce <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80042ca:	2303      	movs	r3, #3
 80042cc:	e232      	b.n	8004734 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042ce:	4b34      	ldr	r3, [pc, #208]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d0f0      	beq.n	80042bc <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042da:	4b31      	ldr	r3, [pc, #196]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	061b      	lsls	r3, r3, #24
 80042e8:	492d      	ldr	r1, [pc, #180]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 80042ea:	4313      	orrs	r3, r2
 80042ec:	604b      	str	r3, [r1, #4]
 80042ee:	e01a      	b.n	8004326 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042f0:	4b2b      	ldr	r3, [pc, #172]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a2a      	ldr	r2, [pc, #168]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 80042f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042fc:	f7ff f82c 	bl	8003358 <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004302:	e008      	b.n	8004316 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004304:	f7ff f828 	bl	8003358 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	2b02      	cmp	r3, #2
 8004310:	d901      	bls.n	8004316 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004312:	2303      	movs	r3, #3
 8004314:	e20e      	b.n	8004734 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004316:	4b22      	ldr	r3, [pc, #136]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800431e:	2b00      	cmp	r3, #0
 8004320:	d1f0      	bne.n	8004304 <HAL_RCC_OscConfig+0x1e0>
 8004322:	e000      	b.n	8004326 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004324:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0308 	and.w	r3, r3, #8
 800432e:	2b00      	cmp	r3, #0
 8004330:	d041      	beq.n	80043b6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d01c      	beq.n	8004374 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800433a:	4b19      	ldr	r3, [pc, #100]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 800433c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004340:	4a17      	ldr	r2, [pc, #92]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 8004342:	f043 0301 	orr.w	r3, r3, #1
 8004346:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800434a:	f7ff f805 	bl	8003358 <HAL_GetTick>
 800434e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004350:	e008      	b.n	8004364 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004352:	f7ff f801 	bl	8003358 <HAL_GetTick>
 8004356:	4602      	mov	r2, r0
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	1ad3      	subs	r3, r2, r3
 800435c:	2b02      	cmp	r3, #2
 800435e:	d901      	bls.n	8004364 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004360:	2303      	movs	r3, #3
 8004362:	e1e7      	b.n	8004734 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004364:	4b0e      	ldr	r3, [pc, #56]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 8004366:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800436a:	f003 0302 	and.w	r3, r3, #2
 800436e:	2b00      	cmp	r3, #0
 8004370:	d0ef      	beq.n	8004352 <HAL_RCC_OscConfig+0x22e>
 8004372:	e020      	b.n	80043b6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004374:	4b0a      	ldr	r3, [pc, #40]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 8004376:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800437a:	4a09      	ldr	r2, [pc, #36]	@ (80043a0 <HAL_RCC_OscConfig+0x27c>)
 800437c:	f023 0301 	bic.w	r3, r3, #1
 8004380:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004384:	f7fe ffe8 	bl	8003358 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800438a:	e00d      	b.n	80043a8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800438c:	f7fe ffe4 	bl	8003358 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d906      	bls.n	80043a8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e1ca      	b.n	8004734 <HAL_RCC_OscConfig+0x610>
 800439e:	bf00      	nop
 80043a0:	40021000 	.word	0x40021000
 80043a4:	20000218 	.word	0x20000218
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80043a8:	4b8c      	ldr	r3, [pc, #560]	@ (80045dc <HAL_RCC_OscConfig+0x4b8>)
 80043aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d1ea      	bne.n	800438c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0304 	and.w	r3, r3, #4
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 80a6 	beq.w	8004510 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043c4:	2300      	movs	r3, #0
 80043c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80043c8:	4b84      	ldr	r3, [pc, #528]	@ (80045dc <HAL_RCC_OscConfig+0x4b8>)
 80043ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <HAL_RCC_OscConfig+0x2b4>
 80043d4:	2301      	movs	r3, #1
 80043d6:	e000      	b.n	80043da <HAL_RCC_OscConfig+0x2b6>
 80043d8:	2300      	movs	r3, #0
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d00d      	beq.n	80043fa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043de:	4b7f      	ldr	r3, [pc, #508]	@ (80045dc <HAL_RCC_OscConfig+0x4b8>)
 80043e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043e2:	4a7e      	ldr	r2, [pc, #504]	@ (80045dc <HAL_RCC_OscConfig+0x4b8>)
 80043e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80043ea:	4b7c      	ldr	r3, [pc, #496]	@ (80045dc <HAL_RCC_OscConfig+0x4b8>)
 80043ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043f2:	60fb      	str	r3, [r7, #12]
 80043f4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80043f6:	2301      	movs	r3, #1
 80043f8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80043fa:	4b79      	ldr	r3, [pc, #484]	@ (80045e0 <HAL_RCC_OscConfig+0x4bc>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004402:	2b00      	cmp	r3, #0
 8004404:	d118      	bne.n	8004438 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004406:	4b76      	ldr	r3, [pc, #472]	@ (80045e0 <HAL_RCC_OscConfig+0x4bc>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4a75      	ldr	r2, [pc, #468]	@ (80045e0 <HAL_RCC_OscConfig+0x4bc>)
 800440c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004412:	f7fe ffa1 	bl	8003358 <HAL_GetTick>
 8004416:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004418:	e008      	b.n	800442c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800441a:	f7fe ff9d 	bl	8003358 <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e183      	b.n	8004734 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800442c:	4b6c      	ldr	r3, [pc, #432]	@ (80045e0 <HAL_RCC_OscConfig+0x4bc>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0f0      	beq.n	800441a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	689b      	ldr	r3, [r3, #8]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d108      	bne.n	8004452 <HAL_RCC_OscConfig+0x32e>
 8004440:	4b66      	ldr	r3, [pc, #408]	@ (80045dc <HAL_RCC_OscConfig+0x4b8>)
 8004442:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004446:	4a65      	ldr	r2, [pc, #404]	@ (80045dc <HAL_RCC_OscConfig+0x4b8>)
 8004448:	f043 0301 	orr.w	r3, r3, #1
 800444c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004450:	e024      	b.n	800449c <HAL_RCC_OscConfig+0x378>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689b      	ldr	r3, [r3, #8]
 8004456:	2b05      	cmp	r3, #5
 8004458:	d110      	bne.n	800447c <HAL_RCC_OscConfig+0x358>
 800445a:	4b60      	ldr	r3, [pc, #384]	@ (80045dc <HAL_RCC_OscConfig+0x4b8>)
 800445c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004460:	4a5e      	ldr	r2, [pc, #376]	@ (80045dc <HAL_RCC_OscConfig+0x4b8>)
 8004462:	f043 0304 	orr.w	r3, r3, #4
 8004466:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800446a:	4b5c      	ldr	r3, [pc, #368]	@ (80045dc <HAL_RCC_OscConfig+0x4b8>)
 800446c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004470:	4a5a      	ldr	r2, [pc, #360]	@ (80045dc <HAL_RCC_OscConfig+0x4b8>)
 8004472:	f043 0301 	orr.w	r3, r3, #1
 8004476:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800447a:	e00f      	b.n	800449c <HAL_RCC_OscConfig+0x378>
 800447c:	4b57      	ldr	r3, [pc, #348]	@ (80045dc <HAL_RCC_OscConfig+0x4b8>)
 800447e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004482:	4a56      	ldr	r2, [pc, #344]	@ (80045dc <HAL_RCC_OscConfig+0x4b8>)
 8004484:	f023 0301 	bic.w	r3, r3, #1
 8004488:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800448c:	4b53      	ldr	r3, [pc, #332]	@ (80045dc <HAL_RCC_OscConfig+0x4b8>)
 800448e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004492:	4a52      	ldr	r2, [pc, #328]	@ (80045dc <HAL_RCC_OscConfig+0x4b8>)
 8004494:	f023 0304 	bic.w	r3, r3, #4
 8004498:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d016      	beq.n	80044d2 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044a4:	f7fe ff58 	bl	8003358 <HAL_GetTick>
 80044a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044aa:	e00a      	b.n	80044c2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ac:	f7fe ff54 	bl	8003358 <HAL_GetTick>
 80044b0:	4602      	mov	r2, r0
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	1ad3      	subs	r3, r2, r3
 80044b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e138      	b.n	8004734 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044c2:	4b46      	ldr	r3, [pc, #280]	@ (80045dc <HAL_RCC_OscConfig+0x4b8>)
 80044c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d0ed      	beq.n	80044ac <HAL_RCC_OscConfig+0x388>
 80044d0:	e015      	b.n	80044fe <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044d2:	f7fe ff41 	bl	8003358 <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044d8:	e00a      	b.n	80044f0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044da:	f7fe ff3d 	bl	8003358 <HAL_GetTick>
 80044de:	4602      	mov	r2, r0
 80044e0:	693b      	ldr	r3, [r7, #16]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e121      	b.n	8004734 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80044f0:	4b3a      	ldr	r3, [pc, #232]	@ (80045dc <HAL_RCC_OscConfig+0x4b8>)
 80044f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d1ed      	bne.n	80044da <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044fe:	7ffb      	ldrb	r3, [r7, #31]
 8004500:	2b01      	cmp	r3, #1
 8004502:	d105      	bne.n	8004510 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004504:	4b35      	ldr	r3, [pc, #212]	@ (80045dc <HAL_RCC_OscConfig+0x4b8>)
 8004506:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004508:	4a34      	ldr	r2, [pc, #208]	@ (80045dc <HAL_RCC_OscConfig+0x4b8>)
 800450a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800450e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f003 0320 	and.w	r3, r3, #32
 8004518:	2b00      	cmp	r3, #0
 800451a:	d03c      	beq.n	8004596 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d01c      	beq.n	800455e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004524:	4b2d      	ldr	r3, [pc, #180]	@ (80045dc <HAL_RCC_OscConfig+0x4b8>)
 8004526:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800452a:	4a2c      	ldr	r2, [pc, #176]	@ (80045dc <HAL_RCC_OscConfig+0x4b8>)
 800452c:	f043 0301 	orr.w	r3, r3, #1
 8004530:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004534:	f7fe ff10 	bl	8003358 <HAL_GetTick>
 8004538:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800453a:	e008      	b.n	800454e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800453c:	f7fe ff0c 	bl	8003358 <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e0f2      	b.n	8004734 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800454e:	4b23      	ldr	r3, [pc, #140]	@ (80045dc <HAL_RCC_OscConfig+0x4b8>)
 8004550:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004554:	f003 0302 	and.w	r3, r3, #2
 8004558:	2b00      	cmp	r3, #0
 800455a:	d0ef      	beq.n	800453c <HAL_RCC_OscConfig+0x418>
 800455c:	e01b      	b.n	8004596 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800455e:	4b1f      	ldr	r3, [pc, #124]	@ (80045dc <HAL_RCC_OscConfig+0x4b8>)
 8004560:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004564:	4a1d      	ldr	r2, [pc, #116]	@ (80045dc <HAL_RCC_OscConfig+0x4b8>)
 8004566:	f023 0301 	bic.w	r3, r3, #1
 800456a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800456e:	f7fe fef3 	bl	8003358 <HAL_GetTick>
 8004572:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004574:	e008      	b.n	8004588 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004576:	f7fe feef 	bl	8003358 <HAL_GetTick>
 800457a:	4602      	mov	r2, r0
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	1ad3      	subs	r3, r2, r3
 8004580:	2b02      	cmp	r3, #2
 8004582:	d901      	bls.n	8004588 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e0d5      	b.n	8004734 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004588:	4b14      	ldr	r3, [pc, #80]	@ (80045dc <HAL_RCC_OscConfig+0x4b8>)
 800458a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1ef      	bne.n	8004576 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	2b00      	cmp	r3, #0
 800459c:	f000 80c9 	beq.w	8004732 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045a0:	4b0e      	ldr	r3, [pc, #56]	@ (80045dc <HAL_RCC_OscConfig+0x4b8>)
 80045a2:	689b      	ldr	r3, [r3, #8]
 80045a4:	f003 030c 	and.w	r3, r3, #12
 80045a8:	2b0c      	cmp	r3, #12
 80045aa:	f000 8083 	beq.w	80046b4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d15e      	bne.n	8004674 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045b6:	4b09      	ldr	r3, [pc, #36]	@ (80045dc <HAL_RCC_OscConfig+0x4b8>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a08      	ldr	r2, [pc, #32]	@ (80045dc <HAL_RCC_OscConfig+0x4b8>)
 80045bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80045c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c2:	f7fe fec9 	bl	8003358 <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045c8:	e00c      	b.n	80045e4 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045ca:	f7fe fec5 	bl	8003358 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d905      	bls.n	80045e4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e0ab      	b.n	8004734 <HAL_RCC_OscConfig+0x610>
 80045dc:	40021000 	.word	0x40021000
 80045e0:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80045e4:	4b55      	ldr	r3, [pc, #340]	@ (800473c <HAL_RCC_OscConfig+0x618>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1ec      	bne.n	80045ca <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045f0:	4b52      	ldr	r3, [pc, #328]	@ (800473c <HAL_RCC_OscConfig+0x618>)
 80045f2:	68da      	ldr	r2, [r3, #12]
 80045f4:	4b52      	ldr	r3, [pc, #328]	@ (8004740 <HAL_RCC_OscConfig+0x61c>)
 80045f6:	4013      	ands	r3, r2
 80045f8:	687a      	ldr	r2, [r7, #4]
 80045fa:	6a11      	ldr	r1, [r2, #32]
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004600:	3a01      	subs	r2, #1
 8004602:	0112      	lsls	r2, r2, #4
 8004604:	4311      	orrs	r1, r2
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800460a:	0212      	lsls	r2, r2, #8
 800460c:	4311      	orrs	r1, r2
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004612:	0852      	lsrs	r2, r2, #1
 8004614:	3a01      	subs	r2, #1
 8004616:	0552      	lsls	r2, r2, #21
 8004618:	4311      	orrs	r1, r2
 800461a:	687a      	ldr	r2, [r7, #4]
 800461c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800461e:	0852      	lsrs	r2, r2, #1
 8004620:	3a01      	subs	r2, #1
 8004622:	0652      	lsls	r2, r2, #25
 8004624:	4311      	orrs	r1, r2
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800462a:	06d2      	lsls	r2, r2, #27
 800462c:	430a      	orrs	r2, r1
 800462e:	4943      	ldr	r1, [pc, #268]	@ (800473c <HAL_RCC_OscConfig+0x618>)
 8004630:	4313      	orrs	r3, r2
 8004632:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004634:	4b41      	ldr	r3, [pc, #260]	@ (800473c <HAL_RCC_OscConfig+0x618>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	4a40      	ldr	r2, [pc, #256]	@ (800473c <HAL_RCC_OscConfig+0x618>)
 800463a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800463e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004640:	4b3e      	ldr	r3, [pc, #248]	@ (800473c <HAL_RCC_OscConfig+0x618>)
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	4a3d      	ldr	r2, [pc, #244]	@ (800473c <HAL_RCC_OscConfig+0x618>)
 8004646:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800464a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800464c:	f7fe fe84 	bl	8003358 <HAL_GetTick>
 8004650:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004652:	e008      	b.n	8004666 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004654:	f7fe fe80 	bl	8003358 <HAL_GetTick>
 8004658:	4602      	mov	r2, r0
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	1ad3      	subs	r3, r2, r3
 800465e:	2b02      	cmp	r3, #2
 8004660:	d901      	bls.n	8004666 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004662:	2303      	movs	r3, #3
 8004664:	e066      	b.n	8004734 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004666:	4b35      	ldr	r3, [pc, #212]	@ (800473c <HAL_RCC_OscConfig+0x618>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0f0      	beq.n	8004654 <HAL_RCC_OscConfig+0x530>
 8004672:	e05e      	b.n	8004732 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004674:	4b31      	ldr	r3, [pc, #196]	@ (800473c <HAL_RCC_OscConfig+0x618>)
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a30      	ldr	r2, [pc, #192]	@ (800473c <HAL_RCC_OscConfig+0x618>)
 800467a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800467e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004680:	f7fe fe6a 	bl	8003358 <HAL_GetTick>
 8004684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004686:	e008      	b.n	800469a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004688:	f7fe fe66 	bl	8003358 <HAL_GetTick>
 800468c:	4602      	mov	r2, r0
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	1ad3      	subs	r3, r2, r3
 8004692:	2b02      	cmp	r3, #2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e04c      	b.n	8004734 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800469a:	4b28      	ldr	r3, [pc, #160]	@ (800473c <HAL_RCC_OscConfig+0x618>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1f0      	bne.n	8004688 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80046a6:	4b25      	ldr	r3, [pc, #148]	@ (800473c <HAL_RCC_OscConfig+0x618>)
 80046a8:	68da      	ldr	r2, [r3, #12]
 80046aa:	4924      	ldr	r1, [pc, #144]	@ (800473c <HAL_RCC_OscConfig+0x618>)
 80046ac:	4b25      	ldr	r3, [pc, #148]	@ (8004744 <HAL_RCC_OscConfig+0x620>)
 80046ae:	4013      	ands	r3, r2
 80046b0:	60cb      	str	r3, [r1, #12]
 80046b2:	e03e      	b.n	8004732 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	69db      	ldr	r3, [r3, #28]
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d101      	bne.n	80046c0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e039      	b.n	8004734 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80046c0:	4b1e      	ldr	r3, [pc, #120]	@ (800473c <HAL_RCC_OscConfig+0x618>)
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	f003 0203 	and.w	r2, r3, #3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	429a      	cmp	r2, r3
 80046d2:	d12c      	bne.n	800472e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046de:	3b01      	subs	r3, #1
 80046e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d123      	bne.n	800472e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d11b      	bne.n	800472e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004700:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004702:	429a      	cmp	r2, r3
 8004704:	d113      	bne.n	800472e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004710:	085b      	lsrs	r3, r3, #1
 8004712:	3b01      	subs	r3, #1
 8004714:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004716:	429a      	cmp	r2, r3
 8004718:	d109      	bne.n	800472e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800471a:	697b      	ldr	r3, [r7, #20]
 800471c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004724:	085b      	lsrs	r3, r3, #1
 8004726:	3b01      	subs	r3, #1
 8004728:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800472a:	429a      	cmp	r2, r3
 800472c:	d001      	beq.n	8004732 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e000      	b.n	8004734 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8004732:	2300      	movs	r3, #0
}
 8004734:	4618      	mov	r0, r3
 8004736:	3720      	adds	r7, #32
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}
 800473c:	40021000 	.word	0x40021000
 8004740:	019f800c 	.word	0x019f800c
 8004744:	feeefffc 	.word	0xfeeefffc

08004748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b086      	sub	sp, #24
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004752:	2300      	movs	r3, #0
 8004754:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	e11e      	b.n	800499e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004760:	4b91      	ldr	r3, [pc, #580]	@ (80049a8 <HAL_RCC_ClockConfig+0x260>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 030f 	and.w	r3, r3, #15
 8004768:	683a      	ldr	r2, [r7, #0]
 800476a:	429a      	cmp	r2, r3
 800476c:	d910      	bls.n	8004790 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800476e:	4b8e      	ldr	r3, [pc, #568]	@ (80049a8 <HAL_RCC_ClockConfig+0x260>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f023 020f 	bic.w	r2, r3, #15
 8004776:	498c      	ldr	r1, [pc, #560]	@ (80049a8 <HAL_RCC_ClockConfig+0x260>)
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	4313      	orrs	r3, r2
 800477c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800477e:	4b8a      	ldr	r3, [pc, #552]	@ (80049a8 <HAL_RCC_ClockConfig+0x260>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	429a      	cmp	r2, r3
 800478a:	d001      	beq.n	8004790 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e106      	b.n	800499e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0301 	and.w	r3, r3, #1
 8004798:	2b00      	cmp	r3, #0
 800479a:	d073      	beq.n	8004884 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	2b03      	cmp	r3, #3
 80047a2:	d129      	bne.n	80047f8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80047a4:	4b81      	ldr	r3, [pc, #516]	@ (80049ac <HAL_RCC_ClockConfig+0x264>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d101      	bne.n	80047b4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	e0f4      	b.n	800499e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80047b4:	f000 f99e 	bl	8004af4 <RCC_GetSysClockFreqFromPLLSource>
 80047b8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	4a7c      	ldr	r2, [pc, #496]	@ (80049b0 <HAL_RCC_ClockConfig+0x268>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d93f      	bls.n	8004842 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80047c2:	4b7a      	ldr	r3, [pc, #488]	@ (80049ac <HAL_RCC_ClockConfig+0x264>)
 80047c4:	689b      	ldr	r3, [r3, #8]
 80047c6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d009      	beq.n	80047e2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d033      	beq.n	8004842 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d12f      	bne.n	8004842 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80047e2:	4b72      	ldr	r3, [pc, #456]	@ (80049ac <HAL_RCC_ClockConfig+0x264>)
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80047ea:	4a70      	ldr	r2, [pc, #448]	@ (80049ac <HAL_RCC_ClockConfig+0x264>)
 80047ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80047f0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80047f2:	2380      	movs	r3, #128	@ 0x80
 80047f4:	617b      	str	r3, [r7, #20]
 80047f6:	e024      	b.n	8004842 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	2b02      	cmp	r3, #2
 80047fe:	d107      	bne.n	8004810 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004800:	4b6a      	ldr	r3, [pc, #424]	@ (80049ac <HAL_RCC_ClockConfig+0x264>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d109      	bne.n	8004820 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e0c6      	b.n	800499e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004810:	4b66      	ldr	r3, [pc, #408]	@ (80049ac <HAL_RCC_ClockConfig+0x264>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004818:	2b00      	cmp	r3, #0
 800481a:	d101      	bne.n	8004820 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e0be      	b.n	800499e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004820:	f000 f8ce 	bl	80049c0 <HAL_RCC_GetSysClockFreq>
 8004824:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	4a61      	ldr	r2, [pc, #388]	@ (80049b0 <HAL_RCC_ClockConfig+0x268>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d909      	bls.n	8004842 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800482e:	4b5f      	ldr	r3, [pc, #380]	@ (80049ac <HAL_RCC_ClockConfig+0x264>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004836:	4a5d      	ldr	r2, [pc, #372]	@ (80049ac <HAL_RCC_ClockConfig+0x264>)
 8004838:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800483c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800483e:	2380      	movs	r3, #128	@ 0x80
 8004840:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004842:	4b5a      	ldr	r3, [pc, #360]	@ (80049ac <HAL_RCC_ClockConfig+0x264>)
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f023 0203 	bic.w	r2, r3, #3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	4957      	ldr	r1, [pc, #348]	@ (80049ac <HAL_RCC_ClockConfig+0x264>)
 8004850:	4313      	orrs	r3, r2
 8004852:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004854:	f7fe fd80 	bl	8003358 <HAL_GetTick>
 8004858:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800485a:	e00a      	b.n	8004872 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800485c:	f7fe fd7c 	bl	8003358 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800486a:	4293      	cmp	r3, r2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e095      	b.n	800499e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004872:	4b4e      	ldr	r3, [pc, #312]	@ (80049ac <HAL_RCC_ClockConfig+0x264>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 020c 	and.w	r2, r3, #12
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	429a      	cmp	r2, r3
 8004882:	d1eb      	bne.n	800485c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f003 0302 	and.w	r3, r3, #2
 800488c:	2b00      	cmp	r3, #0
 800488e:	d023      	beq.n	80048d8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f003 0304 	and.w	r3, r3, #4
 8004898:	2b00      	cmp	r3, #0
 800489a:	d005      	beq.n	80048a8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800489c:	4b43      	ldr	r3, [pc, #268]	@ (80049ac <HAL_RCC_ClockConfig+0x264>)
 800489e:	689b      	ldr	r3, [r3, #8]
 80048a0:	4a42      	ldr	r2, [pc, #264]	@ (80049ac <HAL_RCC_ClockConfig+0x264>)
 80048a2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80048a6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d007      	beq.n	80048c4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80048b4:	4b3d      	ldr	r3, [pc, #244]	@ (80049ac <HAL_RCC_ClockConfig+0x264>)
 80048b6:	689b      	ldr	r3, [r3, #8]
 80048b8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80048bc:	4a3b      	ldr	r2, [pc, #236]	@ (80049ac <HAL_RCC_ClockConfig+0x264>)
 80048be:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80048c2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048c4:	4b39      	ldr	r3, [pc, #228]	@ (80049ac <HAL_RCC_ClockConfig+0x264>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	4936      	ldr	r1, [pc, #216]	@ (80049ac <HAL_RCC_ClockConfig+0x264>)
 80048d2:	4313      	orrs	r3, r2
 80048d4:	608b      	str	r3, [r1, #8]
 80048d6:	e008      	b.n	80048ea <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80048d8:	697b      	ldr	r3, [r7, #20]
 80048da:	2b80      	cmp	r3, #128	@ 0x80
 80048dc:	d105      	bne.n	80048ea <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80048de:	4b33      	ldr	r3, [pc, #204]	@ (80049ac <HAL_RCC_ClockConfig+0x264>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	4a32      	ldr	r2, [pc, #200]	@ (80049ac <HAL_RCC_ClockConfig+0x264>)
 80048e4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048e8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048ea:	4b2f      	ldr	r3, [pc, #188]	@ (80049a8 <HAL_RCC_ClockConfig+0x260>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	683a      	ldr	r2, [r7, #0]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d21d      	bcs.n	8004934 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048f8:	4b2b      	ldr	r3, [pc, #172]	@ (80049a8 <HAL_RCC_ClockConfig+0x260>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f023 020f 	bic.w	r2, r3, #15
 8004900:	4929      	ldr	r1, [pc, #164]	@ (80049a8 <HAL_RCC_ClockConfig+0x260>)
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	4313      	orrs	r3, r2
 8004906:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004908:	f7fe fd26 	bl	8003358 <HAL_GetTick>
 800490c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800490e:	e00a      	b.n	8004926 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004910:	f7fe fd22 	bl	8003358 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800491e:	4293      	cmp	r3, r2
 8004920:	d901      	bls.n	8004926 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004922:	2303      	movs	r3, #3
 8004924:	e03b      	b.n	800499e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004926:	4b20      	ldr	r3, [pc, #128]	@ (80049a8 <HAL_RCC_ClockConfig+0x260>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f003 030f 	and.w	r3, r3, #15
 800492e:	683a      	ldr	r2, [r7, #0]
 8004930:	429a      	cmp	r2, r3
 8004932:	d1ed      	bne.n	8004910 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	d008      	beq.n	8004952 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004940:	4b1a      	ldr	r3, [pc, #104]	@ (80049ac <HAL_RCC_ClockConfig+0x264>)
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	4917      	ldr	r1, [pc, #92]	@ (80049ac <HAL_RCC_ClockConfig+0x264>)
 800494e:	4313      	orrs	r3, r2
 8004950:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	2b00      	cmp	r3, #0
 800495c:	d009      	beq.n	8004972 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800495e:	4b13      	ldr	r3, [pc, #76]	@ (80049ac <HAL_RCC_ClockConfig+0x264>)
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	490f      	ldr	r1, [pc, #60]	@ (80049ac <HAL_RCC_ClockConfig+0x264>)
 800496e:	4313      	orrs	r3, r2
 8004970:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004972:	f000 f825 	bl	80049c0 <HAL_RCC_GetSysClockFreq>
 8004976:	4602      	mov	r2, r0
 8004978:	4b0c      	ldr	r3, [pc, #48]	@ (80049ac <HAL_RCC_ClockConfig+0x264>)
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	091b      	lsrs	r3, r3, #4
 800497e:	f003 030f 	and.w	r3, r3, #15
 8004982:	490c      	ldr	r1, [pc, #48]	@ (80049b4 <HAL_RCC_ClockConfig+0x26c>)
 8004984:	5ccb      	ldrb	r3, [r1, r3]
 8004986:	f003 031f 	and.w	r3, r3, #31
 800498a:	fa22 f303 	lsr.w	r3, r2, r3
 800498e:	4a0a      	ldr	r2, [pc, #40]	@ (80049b8 <HAL_RCC_ClockConfig+0x270>)
 8004990:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004992:	4b0a      	ldr	r3, [pc, #40]	@ (80049bc <HAL_RCC_ClockConfig+0x274>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4618      	mov	r0, r3
 8004998:	f7fe fc92 	bl	80032c0 <HAL_InitTick>
 800499c:	4603      	mov	r3, r0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3718      	adds	r7, #24
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	40022000 	.word	0x40022000
 80049ac:	40021000 	.word	0x40021000
 80049b0:	04c4b400 	.word	0x04c4b400
 80049b4:	08009060 	.word	0x08009060
 80049b8:	20000214 	.word	0x20000214
 80049bc:	20000218 	.word	0x20000218

080049c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80049c6:	4b2c      	ldr	r3, [pc, #176]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 030c 	and.w	r3, r3, #12
 80049ce:	2b04      	cmp	r3, #4
 80049d0:	d102      	bne.n	80049d8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80049d2:	4b2a      	ldr	r3, [pc, #168]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0xbc>)
 80049d4:	613b      	str	r3, [r7, #16]
 80049d6:	e047      	b.n	8004a68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80049d8:	4b27      	ldr	r3, [pc, #156]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	f003 030c 	and.w	r3, r3, #12
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d102      	bne.n	80049ea <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80049e4:	4b26      	ldr	r3, [pc, #152]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0xc0>)
 80049e6:	613b      	str	r3, [r7, #16]
 80049e8:	e03e      	b.n	8004a68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80049ea:	4b23      	ldr	r3, [pc, #140]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 030c 	and.w	r3, r3, #12
 80049f2:	2b0c      	cmp	r3, #12
 80049f4:	d136      	bne.n	8004a64 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80049f6:	4b20      	ldr	r3, [pc, #128]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	f003 0303 	and.w	r3, r3, #3
 80049fe:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a00:	4b1d      	ldr	r3, [pc, #116]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a02:	68db      	ldr	r3, [r3, #12]
 8004a04:	091b      	lsrs	r3, r3, #4
 8004a06:	f003 030f 	and.w	r3, r3, #15
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	2b03      	cmp	r3, #3
 8004a12:	d10c      	bne.n	8004a2e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a14:	4a1a      	ldr	r2, [pc, #104]	@ (8004a80 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a1c:	4a16      	ldr	r2, [pc, #88]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a1e:	68d2      	ldr	r2, [r2, #12]
 8004a20:	0a12      	lsrs	r2, r2, #8
 8004a22:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a26:	fb02 f303 	mul.w	r3, r2, r3
 8004a2a:	617b      	str	r3, [r7, #20]
      break;
 8004a2c:	e00c      	b.n	8004a48 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a2e:	4a13      	ldr	r2, [pc, #76]	@ (8004a7c <HAL_RCC_GetSysClockFreq+0xbc>)
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a36:	4a10      	ldr	r2, [pc, #64]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a38:	68d2      	ldr	r2, [r2, #12]
 8004a3a:	0a12      	lsrs	r2, r2, #8
 8004a3c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a40:	fb02 f303 	mul.w	r3, r2, r3
 8004a44:	617b      	str	r3, [r7, #20]
      break;
 8004a46:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004a48:	4b0b      	ldr	r3, [pc, #44]	@ (8004a78 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	0e5b      	lsrs	r3, r3, #25
 8004a4e:	f003 0303 	and.w	r3, r3, #3
 8004a52:	3301      	adds	r3, #1
 8004a54:	005b      	lsls	r3, r3, #1
 8004a56:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004a58:	697a      	ldr	r2, [r7, #20]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a60:	613b      	str	r3, [r7, #16]
 8004a62:	e001      	b.n	8004a68 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004a64:	2300      	movs	r3, #0
 8004a66:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004a68:	693b      	ldr	r3, [r7, #16]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	371c      	adds	r7, #28
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr
 8004a76:	bf00      	nop
 8004a78:	40021000 	.word	0x40021000
 8004a7c:	00f42400 	.word	0x00f42400
 8004a80:	016e3600 	.word	0x016e3600

08004a84 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004a84:	b480      	push	{r7}
 8004a86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004a88:	4b03      	ldr	r3, [pc, #12]	@ (8004a98 <HAL_RCC_GetHCLKFreq+0x14>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
 8004a96:	bf00      	nop
 8004a98:	20000214 	.word	0x20000214

08004a9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004aa0:	f7ff fff0 	bl	8004a84 <HAL_RCC_GetHCLKFreq>
 8004aa4:	4602      	mov	r2, r0
 8004aa6:	4b06      	ldr	r3, [pc, #24]	@ (8004ac0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	0a1b      	lsrs	r3, r3, #8
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	4904      	ldr	r1, [pc, #16]	@ (8004ac4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004ab2:	5ccb      	ldrb	r3, [r1, r3]
 8004ab4:	f003 031f 	and.w	r3, r3, #31
 8004ab8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	40021000 	.word	0x40021000
 8004ac4:	08009070 	.word	0x08009070

08004ac8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004acc:	f7ff ffda 	bl	8004a84 <HAL_RCC_GetHCLKFreq>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	4b06      	ldr	r3, [pc, #24]	@ (8004aec <HAL_RCC_GetPCLK2Freq+0x24>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	0adb      	lsrs	r3, r3, #11
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	4904      	ldr	r1, [pc, #16]	@ (8004af0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004ade:	5ccb      	ldrb	r3, [r1, r3]
 8004ae0:	f003 031f 	and.w	r3, r3, #31
 8004ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40021000 	.word	0x40021000
 8004af0:	08009070 	.word	0x08009070

08004af4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004af4:	b480      	push	{r7}
 8004af6:	b087      	sub	sp, #28
 8004af8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004afa:	4b1e      	ldr	r3, [pc, #120]	@ (8004b74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004afc:	68db      	ldr	r3, [r3, #12]
 8004afe:	f003 0303 	and.w	r3, r3, #3
 8004b02:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004b04:	4b1b      	ldr	r3, [pc, #108]	@ (8004b74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	091b      	lsrs	r3, r3, #4
 8004b0a:	f003 030f 	and.w	r3, r3, #15
 8004b0e:	3301      	adds	r3, #1
 8004b10:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	2b03      	cmp	r3, #3
 8004b16:	d10c      	bne.n	8004b32 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b18:	4a17      	ldr	r2, [pc, #92]	@ (8004b78 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b20:	4a14      	ldr	r2, [pc, #80]	@ (8004b74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b22:	68d2      	ldr	r2, [r2, #12]
 8004b24:	0a12      	lsrs	r2, r2, #8
 8004b26:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b2a:	fb02 f303 	mul.w	r3, r2, r3
 8004b2e:	617b      	str	r3, [r7, #20]
    break;
 8004b30:	e00c      	b.n	8004b4c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004b32:	4a12      	ldr	r2, [pc, #72]	@ (8004b7c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b3a:	4a0e      	ldr	r2, [pc, #56]	@ (8004b74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b3c:	68d2      	ldr	r2, [r2, #12]
 8004b3e:	0a12      	lsrs	r2, r2, #8
 8004b40:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004b44:	fb02 f303 	mul.w	r3, r2, r3
 8004b48:	617b      	str	r3, [r7, #20]
    break;
 8004b4a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004b4c:	4b09      	ldr	r3, [pc, #36]	@ (8004b74 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	0e5b      	lsrs	r3, r3, #25
 8004b52:	f003 0303 	and.w	r3, r3, #3
 8004b56:	3301      	adds	r3, #1
 8004b58:	005b      	lsls	r3, r3, #1
 8004b5a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b64:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004b66:	687b      	ldr	r3, [r7, #4]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	371c      	adds	r7, #28
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr
 8004b74:	40021000 	.word	0x40021000
 8004b78:	016e3600 	.word	0x016e3600
 8004b7c:	00f42400 	.word	0x00f42400

08004b80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b086      	sub	sp, #24
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004b88:	2300      	movs	r3, #0
 8004b8a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	f000 8098 	beq.w	8004cce <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ba2:	4b43      	ldr	r3, [pc, #268]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ba6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10d      	bne.n	8004bca <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bae:	4b40      	ldr	r3, [pc, #256]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bb2:	4a3f      	ldr	r2, [pc, #252]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bb8:	6593      	str	r3, [r2, #88]	@ 0x58
 8004bba:	4b3d      	ldr	r3, [pc, #244]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004bbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004bc2:	60bb      	str	r3, [r7, #8]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004bca:	4b3a      	ldr	r3, [pc, #232]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a39      	ldr	r2, [pc, #228]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004bd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bd4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bd6:	f7fe fbbf 	bl	8003358 <HAL_GetTick>
 8004bda:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bdc:	e009      	b.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bde:	f7fe fbbb 	bl	8003358 <HAL_GetTick>
 8004be2:	4602      	mov	r2, r0
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	1ad3      	subs	r3, r2, r3
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d902      	bls.n	8004bf2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	74fb      	strb	r3, [r7, #19]
        break;
 8004bf0:	e005      	b.n	8004bfe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bf2:	4b30      	ldr	r3, [pc, #192]	@ (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d0ef      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004bfe:	7cfb      	ldrb	r3, [r7, #19]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d159      	bne.n	8004cb8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c04:	4b2a      	ldr	r3, [pc, #168]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c0e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d01e      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c1a:	697a      	ldr	r2, [r7, #20]
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d019      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c20:	4b23      	ldr	r3, [pc, #140]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c2a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c2c:	4b20      	ldr	r3, [pc, #128]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c32:	4a1f      	ldr	r2, [pc, #124]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c3c:	4b1c      	ldr	r3, [pc, #112]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c42:	4a1b      	ldr	r2, [pc, #108]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c44:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c48:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004c4c:	4a18      	ldr	r2, [pc, #96]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d016      	beq.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c5e:	f7fe fb7b 	bl	8003358 <HAL_GetTick>
 8004c62:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c64:	e00b      	b.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c66:	f7fe fb77 	bl	8003358 <HAL_GetTick>
 8004c6a:	4602      	mov	r2, r0
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	1ad3      	subs	r3, r2, r3
 8004c70:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d902      	bls.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004c78:	2303      	movs	r3, #3
 8004c7a:	74fb      	strb	r3, [r7, #19]
            break;
 8004c7c:	e006      	b.n	8004c8c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004c7e:	4b0c      	ldr	r3, [pc, #48]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c84:	f003 0302 	and.w	r3, r3, #2
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d0ec      	beq.n	8004c66 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004c8c:	7cfb      	ldrb	r3, [r7, #19]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d10b      	bne.n	8004caa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c92:	4b07      	ldr	r3, [pc, #28]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c98:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ca0:	4903      	ldr	r1, [pc, #12]	@ (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004ca2:	4313      	orrs	r3, r2
 8004ca4:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004ca8:	e008      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004caa:	7cfb      	ldrb	r3, [r7, #19]
 8004cac:	74bb      	strb	r3, [r7, #18]
 8004cae:	e005      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cb8:	7cfb      	ldrb	r3, [r7, #19]
 8004cba:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004cbc:	7c7b      	ldrb	r3, [r7, #17]
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d105      	bne.n	8004cce <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cc2:	4ba7      	ldr	r3, [pc, #668]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cc6:	4aa6      	ldr	r2, [pc, #664]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cc8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ccc:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004cda:	4ba1      	ldr	r3, [pc, #644]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ce0:	f023 0203 	bic.w	r2, r3, #3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	499d      	ldr	r1, [pc, #628]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00a      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004cfc:	4b98      	ldr	r3, [pc, #608]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d02:	f023 020c 	bic.w	r2, r3, #12
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	4995      	ldr	r1, [pc, #596]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00a      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004d1e:	4b90      	ldr	r3, [pc, #576]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d24:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	498c      	ldr	r1, [pc, #560]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00a      	beq.n	8004d56 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004d40:	4b87      	ldr	r3, [pc, #540]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d46:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	4984      	ldr	r1, [pc, #528]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0310 	and.w	r3, r3, #16
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00a      	beq.n	8004d78 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004d62:	4b7f      	ldr	r3, [pc, #508]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d68:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	497b      	ldr	r1, [pc, #492]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0320 	and.w	r3, r3, #32
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d00a      	beq.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d84:	4b76      	ldr	r3, [pc, #472]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d8a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	4973      	ldr	r1, [pc, #460]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d00a      	beq.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004da6:	4b6e      	ldr	r3, [pc, #440]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004da8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	496a      	ldr	r1, [pc, #424]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00a      	beq.n	8004dde <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004dc8:	4b65      	ldr	r3, [pc, #404]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6a1b      	ldr	r3, [r3, #32]
 8004dd6:	4962      	ldr	r1, [pc, #392]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dd8:	4313      	orrs	r3, r2
 8004dda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d00a      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004dea:	4b5d      	ldr	r3, [pc, #372]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004df0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df8:	4959      	ldr	r1, [pc, #356]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d00a      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e0c:	4b54      	ldr	r3, [pc, #336]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004e12:	f023 0203 	bic.w	r2, r3, #3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e1a:	4951      	ldr	r1, [pc, #324]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00a      	beq.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e2e:	4b4c      	ldr	r3, [pc, #304]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e34:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e3c:	4948      	ldr	r1, [pc, #288]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d015      	beq.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e50:	4b43      	ldr	r3, [pc, #268]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e56:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e5e:	4940      	ldr	r1, [pc, #256]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e60:	4313      	orrs	r3, r2
 8004e62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e6e:	d105      	bne.n	8004e7c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004e70:	4b3b      	ldr	r3, [pc, #236]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	4a3a      	ldr	r2, [pc, #232]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004e7a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d015      	beq.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004e88:	4b35      	ldr	r3, [pc, #212]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e8e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e96:	4932      	ldr	r1, [pc, #200]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ea2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ea6:	d105      	bne.n	8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ea8:	4b2d      	ldr	r3, [pc, #180]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	4a2c      	ldr	r2, [pc, #176]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004eae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004eb2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d015      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004ec0:	4b27      	ldr	r3, [pc, #156]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ec6:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ece:	4924      	ldr	r1, [pc, #144]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ed0:	4313      	orrs	r3, r2
 8004ed2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004eda:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004ede:	d105      	bne.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ee0:	4b1f      	ldr	r3, [pc, #124]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	4a1e      	ldr	r2, [pc, #120]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ee6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004eea:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d015      	beq.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004ef8:	4b19      	ldr	r3, [pc, #100]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004efe:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f06:	4916      	ldr	r1, [pc, #88]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f08:	4313      	orrs	r3, r2
 8004f0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f12:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f16:	d105      	bne.n	8004f24 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f18:	4b11      	ldr	r3, [pc, #68]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	4a10      	ldr	r2, [pc, #64]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f22:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d019      	beq.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004f30:	4b0b      	ldr	r3, [pc, #44]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f36:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3e:	4908      	ldr	r1, [pc, #32]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f40:	4313      	orrs	r3, r2
 8004f42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004f4e:	d109      	bne.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004f50:	4b03      	ldr	r3, [pc, #12]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	4a02      	ldr	r2, [pc, #8]	@ (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004f56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004f5a:	60d3      	str	r3, [r2, #12]
 8004f5c:	e002      	b.n	8004f64 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004f5e:	bf00      	nop
 8004f60:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d015      	beq.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004f70:	4b29      	ldr	r3, [pc, #164]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f76:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f7e:	4926      	ldr	r1, [pc, #152]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004f8e:	d105      	bne.n	8004f9c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004f90:	4b21      	ldr	r3, [pc, #132]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	4a20      	ldr	r2, [pc, #128]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004f96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f9a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d015      	beq.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fae:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fb6:	4918      	ldr	r1, [pc, #96]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fc6:	d105      	bne.n	8004fd4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004fc8:	4b13      	ldr	r3, [pc, #76]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	4a12      	ldr	r2, [pc, #72]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004fd2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d015      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004fe2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004fe6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004fee:	490a      	ldr	r1, [pc, #40]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ffa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ffe:	d105      	bne.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005000:	4b05      	ldr	r3, [pc, #20]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	4a04      	ldr	r2, [pc, #16]	@ (8005018 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005006:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800500a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800500c:	7cbb      	ldrb	r3, [r7, #18]
}
 800500e:	4618      	mov	r0, r3
 8005010:	3718      	adds	r7, #24
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
 8005016:	bf00      	nop
 8005018:	40021000 	.word	0x40021000

0800501c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d101      	bne.n	800502e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e054      	b.n	80050d8 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005034:	b2db      	uxtb	r3, r3
 8005036:	2b00      	cmp	r3, #0
 8005038:	d111      	bne.n	800505e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f001 fee2 	bl	8006e0c <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800504c:	2b00      	cmp	r3, #0
 800504e:	d102      	bne.n	8005056 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a23      	ldr	r2, [pc, #140]	@ (80050e0 <HAL_TIM_Base_Init+0xc4>)
 8005054:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800505a:	6878      	ldr	r0, [r7, #4]
 800505c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2202      	movs	r2, #2
 8005062:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	3304      	adds	r3, #4
 800506e:	4619      	mov	r1, r3
 8005070:	4610      	mov	r0, r2
 8005072:	f001 fa2b 	bl	80064cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2201      	movs	r2, #1
 8005082:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2201      	movs	r2, #1
 8005092:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2201      	movs	r2, #1
 80050b2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2201      	movs	r2, #1
 80050ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050d6:	2300      	movs	r3, #0
}
 80050d8:	4618      	mov	r0, r3
 80050da:	3708      	adds	r7, #8
 80050dc:	46bd      	mov	sp, r7
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	08002dc9 	.word	0x08002dc9

080050e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d001      	beq.n	80050fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e04c      	b.n	8005196 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a26      	ldr	r2, [pc, #152]	@ (80051a4 <HAL_TIM_Base_Start+0xc0>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d022      	beq.n	8005154 <HAL_TIM_Base_Start+0x70>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005116:	d01d      	beq.n	8005154 <HAL_TIM_Base_Start+0x70>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a22      	ldr	r2, [pc, #136]	@ (80051a8 <HAL_TIM_Base_Start+0xc4>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d018      	beq.n	8005154 <HAL_TIM_Base_Start+0x70>
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a21      	ldr	r2, [pc, #132]	@ (80051ac <HAL_TIM_Base_Start+0xc8>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d013      	beq.n	8005154 <HAL_TIM_Base_Start+0x70>
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a1f      	ldr	r2, [pc, #124]	@ (80051b0 <HAL_TIM_Base_Start+0xcc>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d00e      	beq.n	8005154 <HAL_TIM_Base_Start+0x70>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a1e      	ldr	r2, [pc, #120]	@ (80051b4 <HAL_TIM_Base_Start+0xd0>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d009      	beq.n	8005154 <HAL_TIM_Base_Start+0x70>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a1c      	ldr	r2, [pc, #112]	@ (80051b8 <HAL_TIM_Base_Start+0xd4>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d004      	beq.n	8005154 <HAL_TIM_Base_Start+0x70>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a1b      	ldr	r2, [pc, #108]	@ (80051bc <HAL_TIM_Base_Start+0xd8>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d115      	bne.n	8005180 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	689a      	ldr	r2, [r3, #8]
 800515a:	4b19      	ldr	r3, [pc, #100]	@ (80051c0 <HAL_TIM_Base_Start+0xdc>)
 800515c:	4013      	ands	r3, r2
 800515e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2b06      	cmp	r3, #6
 8005164:	d015      	beq.n	8005192 <HAL_TIM_Base_Start+0xae>
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800516c:	d011      	beq.n	8005192 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f042 0201 	orr.w	r2, r2, #1
 800517c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800517e:	e008      	b.n	8005192 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0201 	orr.w	r2, r2, #1
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	e000      	b.n	8005194 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005192:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005194:	2300      	movs	r3, #0
}
 8005196:	4618      	mov	r0, r3
 8005198:	3714      	adds	r7, #20
 800519a:	46bd      	mov	sp, r7
 800519c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a0:	4770      	bx	lr
 80051a2:	bf00      	nop
 80051a4:	40012c00 	.word	0x40012c00
 80051a8:	40000400 	.word	0x40000400
 80051ac:	40000800 	.word	0x40000800
 80051b0:	40000c00 	.word	0x40000c00
 80051b4:	40013400 	.word	0x40013400
 80051b8:	40014000 	.word	0x40014000
 80051bc:	40015000 	.word	0x40015000
 80051c0:	00010007 	.word	0x00010007

080051c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b085      	sub	sp, #20
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051d2:	b2db      	uxtb	r3, r3
 80051d4:	2b01      	cmp	r3, #1
 80051d6:	d001      	beq.n	80051dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e054      	b.n	8005286 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2202      	movs	r2, #2
 80051e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	68da      	ldr	r2, [r3, #12]
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f042 0201 	orr.w	r2, r2, #1
 80051f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a26      	ldr	r2, [pc, #152]	@ (8005294 <HAL_TIM_Base_Start_IT+0xd0>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d022      	beq.n	8005244 <HAL_TIM_Base_Start_IT+0x80>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005206:	d01d      	beq.n	8005244 <HAL_TIM_Base_Start_IT+0x80>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a22      	ldr	r2, [pc, #136]	@ (8005298 <HAL_TIM_Base_Start_IT+0xd4>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d018      	beq.n	8005244 <HAL_TIM_Base_Start_IT+0x80>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a21      	ldr	r2, [pc, #132]	@ (800529c <HAL_TIM_Base_Start_IT+0xd8>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d013      	beq.n	8005244 <HAL_TIM_Base_Start_IT+0x80>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a1f      	ldr	r2, [pc, #124]	@ (80052a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d00e      	beq.n	8005244 <HAL_TIM_Base_Start_IT+0x80>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a1e      	ldr	r2, [pc, #120]	@ (80052a4 <HAL_TIM_Base_Start_IT+0xe0>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d009      	beq.n	8005244 <HAL_TIM_Base_Start_IT+0x80>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a1c      	ldr	r2, [pc, #112]	@ (80052a8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d004      	beq.n	8005244 <HAL_TIM_Base_Start_IT+0x80>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a1b      	ldr	r2, [pc, #108]	@ (80052ac <HAL_TIM_Base_Start_IT+0xe8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d115      	bne.n	8005270 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689a      	ldr	r2, [r3, #8]
 800524a:	4b19      	ldr	r3, [pc, #100]	@ (80052b0 <HAL_TIM_Base_Start_IT+0xec>)
 800524c:	4013      	ands	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2b06      	cmp	r3, #6
 8005254:	d015      	beq.n	8005282 <HAL_TIM_Base_Start_IT+0xbe>
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800525c:	d011      	beq.n	8005282 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	681a      	ldr	r2, [r3, #0]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f042 0201 	orr.w	r2, r2, #1
 800526c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800526e:	e008      	b.n	8005282 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f042 0201 	orr.w	r2, r2, #1
 800527e:	601a      	str	r2, [r3, #0]
 8005280:	e000      	b.n	8005284 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005282:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3714      	adds	r7, #20
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	40012c00 	.word	0x40012c00
 8005298:	40000400 	.word	0x40000400
 800529c:	40000800 	.word	0x40000800
 80052a0:	40000c00 	.word	0x40000c00
 80052a4:	40013400 	.word	0x40013400
 80052a8:	40014000 	.word	0x40014000
 80052ac:	40015000 	.word	0x40015000
 80052b0:	00010007 	.word	0x00010007

080052b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b082      	sub	sp, #8
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d101      	bne.n	80052c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80052c2:	2301      	movs	r3, #1
 80052c4:	e054      	b.n	8005370 <HAL_TIM_PWM_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052cc:	b2db      	uxtb	r3, r3
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d111      	bne.n	80052f6 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f001 fd96 	bl	8006e0c <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d102      	bne.n	80052ee <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a23      	ldr	r2, [pc, #140]	@ (8005378 <HAL_TIM_PWM_Init+0xc4>)
 80052ec:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2202      	movs	r2, #2
 80052fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681a      	ldr	r2, [r3, #0]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	3304      	adds	r3, #4
 8005306:	4619      	mov	r1, r3
 8005308:	4610      	mov	r0, r2
 800530a:	f001 f8df 	bl	80064cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	2201      	movs	r2, #1
 800531a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2201      	movs	r2, #1
 800533a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	2201      	movs	r2, #1
 8005342:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2201      	movs	r2, #1
 8005352:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2201      	movs	r2, #1
 8005362:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	08002d7d 	.word	0x08002d7d

0800537c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b084      	sub	sp, #16
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
 8005384:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d109      	bne.n	80053a0 <HAL_TIM_PWM_Start+0x24>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005392:	b2db      	uxtb	r3, r3
 8005394:	2b01      	cmp	r3, #1
 8005396:	bf14      	ite	ne
 8005398:	2301      	movne	r3, #1
 800539a:	2300      	moveq	r3, #0
 800539c:	b2db      	uxtb	r3, r3
 800539e:	e03c      	b.n	800541a <HAL_TIM_PWM_Start+0x9e>
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	2b04      	cmp	r3, #4
 80053a4:	d109      	bne.n	80053ba <HAL_TIM_PWM_Start+0x3e>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	bf14      	ite	ne
 80053b2:	2301      	movne	r3, #1
 80053b4:	2300      	moveq	r3, #0
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	e02f      	b.n	800541a <HAL_TIM_PWM_Start+0x9e>
 80053ba:	683b      	ldr	r3, [r7, #0]
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d109      	bne.n	80053d4 <HAL_TIM_PWM_Start+0x58>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	bf14      	ite	ne
 80053cc:	2301      	movne	r3, #1
 80053ce:	2300      	moveq	r3, #0
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	e022      	b.n	800541a <HAL_TIM_PWM_Start+0x9e>
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	2b0c      	cmp	r3, #12
 80053d8:	d109      	bne.n	80053ee <HAL_TIM_PWM_Start+0x72>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053e0:	b2db      	uxtb	r3, r3
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	bf14      	ite	ne
 80053e6:	2301      	movne	r3, #1
 80053e8:	2300      	moveq	r3, #0
 80053ea:	b2db      	uxtb	r3, r3
 80053ec:	e015      	b.n	800541a <HAL_TIM_PWM_Start+0x9e>
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	2b10      	cmp	r3, #16
 80053f2:	d109      	bne.n	8005408 <HAL_TIM_PWM_Start+0x8c>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	bf14      	ite	ne
 8005400:	2301      	movne	r3, #1
 8005402:	2300      	moveq	r3, #0
 8005404:	b2db      	uxtb	r3, r3
 8005406:	e008      	b.n	800541a <HAL_TIM_PWM_Start+0x9e>
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b01      	cmp	r3, #1
 8005412:	bf14      	ite	ne
 8005414:	2301      	movne	r3, #1
 8005416:	2300      	moveq	r3, #0
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800541e:	2301      	movs	r3, #1
 8005420:	e0a6      	b.n	8005570 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d104      	bne.n	8005432 <HAL_TIM_PWM_Start+0xb6>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	2202      	movs	r2, #2
 800542c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005430:	e023      	b.n	800547a <HAL_TIM_PWM_Start+0xfe>
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	2b04      	cmp	r3, #4
 8005436:	d104      	bne.n	8005442 <HAL_TIM_PWM_Start+0xc6>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2202      	movs	r2, #2
 800543c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005440:	e01b      	b.n	800547a <HAL_TIM_PWM_Start+0xfe>
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	2b08      	cmp	r3, #8
 8005446:	d104      	bne.n	8005452 <HAL_TIM_PWM_Start+0xd6>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2202      	movs	r2, #2
 800544c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005450:	e013      	b.n	800547a <HAL_TIM_PWM_Start+0xfe>
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	2b0c      	cmp	r3, #12
 8005456:	d104      	bne.n	8005462 <HAL_TIM_PWM_Start+0xe6>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2202      	movs	r2, #2
 800545c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005460:	e00b      	b.n	800547a <HAL_TIM_PWM_Start+0xfe>
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	2b10      	cmp	r3, #16
 8005466:	d104      	bne.n	8005472 <HAL_TIM_PWM_Start+0xf6>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005470:	e003      	b.n	800547a <HAL_TIM_PWM_Start+0xfe>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2202      	movs	r2, #2
 8005476:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	2201      	movs	r2, #1
 8005480:	6839      	ldr	r1, [r7, #0]
 8005482:	4618      	mov	r0, r3
 8005484:	f001 fc9c 	bl	8006dc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a3a      	ldr	r2, [pc, #232]	@ (8005578 <HAL_TIM_PWM_Start+0x1fc>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d018      	beq.n	80054c4 <HAL_TIM_PWM_Start+0x148>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	4a39      	ldr	r2, [pc, #228]	@ (800557c <HAL_TIM_PWM_Start+0x200>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d013      	beq.n	80054c4 <HAL_TIM_PWM_Start+0x148>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a37      	ldr	r2, [pc, #220]	@ (8005580 <HAL_TIM_PWM_Start+0x204>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d00e      	beq.n	80054c4 <HAL_TIM_PWM_Start+0x148>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a36      	ldr	r2, [pc, #216]	@ (8005584 <HAL_TIM_PWM_Start+0x208>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d009      	beq.n	80054c4 <HAL_TIM_PWM_Start+0x148>
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a34      	ldr	r2, [pc, #208]	@ (8005588 <HAL_TIM_PWM_Start+0x20c>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d004      	beq.n	80054c4 <HAL_TIM_PWM_Start+0x148>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4a33      	ldr	r2, [pc, #204]	@ (800558c <HAL_TIM_PWM_Start+0x210>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d101      	bne.n	80054c8 <HAL_TIM_PWM_Start+0x14c>
 80054c4:	2301      	movs	r3, #1
 80054c6:	e000      	b.n	80054ca <HAL_TIM_PWM_Start+0x14e>
 80054c8:	2300      	movs	r3, #0
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d007      	beq.n	80054de <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80054dc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a25      	ldr	r2, [pc, #148]	@ (8005578 <HAL_TIM_PWM_Start+0x1fc>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d022      	beq.n	800552e <HAL_TIM_PWM_Start+0x1b2>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054f0:	d01d      	beq.n	800552e <HAL_TIM_PWM_Start+0x1b2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a26      	ldr	r2, [pc, #152]	@ (8005590 <HAL_TIM_PWM_Start+0x214>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d018      	beq.n	800552e <HAL_TIM_PWM_Start+0x1b2>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a24      	ldr	r2, [pc, #144]	@ (8005594 <HAL_TIM_PWM_Start+0x218>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d013      	beq.n	800552e <HAL_TIM_PWM_Start+0x1b2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a23      	ldr	r2, [pc, #140]	@ (8005598 <HAL_TIM_PWM_Start+0x21c>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d00e      	beq.n	800552e <HAL_TIM_PWM_Start+0x1b2>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a19      	ldr	r2, [pc, #100]	@ (800557c <HAL_TIM_PWM_Start+0x200>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d009      	beq.n	800552e <HAL_TIM_PWM_Start+0x1b2>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a18      	ldr	r2, [pc, #96]	@ (8005580 <HAL_TIM_PWM_Start+0x204>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d004      	beq.n	800552e <HAL_TIM_PWM_Start+0x1b2>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	4a18      	ldr	r2, [pc, #96]	@ (800558c <HAL_TIM_PWM_Start+0x210>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d115      	bne.n	800555a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	689a      	ldr	r2, [r3, #8]
 8005534:	4b19      	ldr	r3, [pc, #100]	@ (800559c <HAL_TIM_PWM_Start+0x220>)
 8005536:	4013      	ands	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2b06      	cmp	r3, #6
 800553e:	d015      	beq.n	800556c <HAL_TIM_PWM_Start+0x1f0>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005546:	d011      	beq.n	800556c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0201 	orr.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005558:	e008      	b.n	800556c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f042 0201 	orr.w	r2, r2, #1
 8005568:	601a      	str	r2, [r3, #0]
 800556a:	e000      	b.n	800556e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800556c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3710      	adds	r7, #16
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	40012c00 	.word	0x40012c00
 800557c:	40013400 	.word	0x40013400
 8005580:	40014000 	.word	0x40014000
 8005584:	40014400 	.word	0x40014400
 8005588:	40014800 	.word	0x40014800
 800558c:	40015000 	.word	0x40015000
 8005590:	40000400 	.word	0x40000400
 8005594:	40000800 	.word	0x40000800
 8005598:	40000c00 	.word	0x40000c00
 800559c:	00010007 	.word	0x00010007

080055a0 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e04c      	b.n	800564e <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d111      	bne.n	80055e4 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80055c8:	6878      	ldr	r0, [r7, #4]
 80055ca:	f001 fc1f 	bl	8006e0c <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d102      	bne.n	80055dc <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	4a1f      	ldr	r2, [pc, #124]	@ (8005658 <HAL_TIM_OnePulse_Init+0xb8>)
 80055da:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2202      	movs	r2, #2
 80055e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681a      	ldr	r2, [r3, #0]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	3304      	adds	r3, #4
 80055f4:	4619      	mov	r1, r3
 80055f6:	4610      	mov	r0, r2
 80055f8:	f000 ff68 	bl	80064cc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f022 0208 	bic.w	r2, r2, #8
 800560a:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6819      	ldr	r1, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	683a      	ldr	r2, [r7, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	0800565d 	.word	0x0800565d

0800565c <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 800565c:	b480      	push	{r7}
 800565e:	b083      	sub	sp, #12
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005680:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005688:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005690:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005698:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800569a:	7bfb      	ldrb	r3, [r7, #15]
 800569c:	2b01      	cmp	r3, #1
 800569e:	d108      	bne.n	80056b2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80056a0:	7bbb      	ldrb	r3, [r7, #14]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d105      	bne.n	80056b2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80056a6:	7b7b      	ldrb	r3, [r7, #13]
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d102      	bne.n	80056b2 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80056ac:	7b3b      	ldrb	r3, [r7, #12]
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d001      	beq.n	80056b6 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e059      	b.n	800576a <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2202      	movs	r2, #2
 80056ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2202      	movs	r2, #2
 80056c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2202      	movs	r2, #2
 80056ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2202      	movs	r2, #2
 80056d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	68da      	ldr	r2, [r3, #12]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f042 0202 	orr.w	r2, r2, #2
 80056e4:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	68da      	ldr	r2, [r3, #12]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f042 0204 	orr.w	r2, r2, #4
 80056f4:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2201      	movs	r2, #1
 80056fc:	2100      	movs	r1, #0
 80056fe:	4618      	mov	r0, r3
 8005700:	f001 fb5e 	bl	8006dc0 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2201      	movs	r2, #1
 800570a:	2104      	movs	r1, #4
 800570c:	4618      	mov	r0, r3
 800570e:	f001 fb57 	bl	8006dc0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	4a17      	ldr	r2, [pc, #92]	@ (8005774 <HAL_TIM_OnePulse_Start_IT+0x104>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d018      	beq.n	800574e <HAL_TIM_OnePulse_Start_IT+0xde>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a15      	ldr	r2, [pc, #84]	@ (8005778 <HAL_TIM_OnePulse_Start_IT+0x108>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d013      	beq.n	800574e <HAL_TIM_OnePulse_Start_IT+0xde>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4a14      	ldr	r2, [pc, #80]	@ (800577c <HAL_TIM_OnePulse_Start_IT+0x10c>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d00e      	beq.n	800574e <HAL_TIM_OnePulse_Start_IT+0xde>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a12      	ldr	r2, [pc, #72]	@ (8005780 <HAL_TIM_OnePulse_Start_IT+0x110>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d009      	beq.n	800574e <HAL_TIM_OnePulse_Start_IT+0xde>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a11      	ldr	r2, [pc, #68]	@ (8005784 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d004      	beq.n	800574e <HAL_TIM_OnePulse_Start_IT+0xde>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a0f      	ldr	r2, [pc, #60]	@ (8005788 <HAL_TIM_OnePulse_Start_IT+0x118>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d101      	bne.n	8005752 <HAL_TIM_OnePulse_Start_IT+0xe2>
 800574e:	2301      	movs	r3, #1
 8005750:	e000      	b.n	8005754 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8005752:	2300      	movs	r3, #0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d007      	beq.n	8005768 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005766:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	40012c00 	.word	0x40012c00
 8005778:	40013400 	.word	0x40013400
 800577c:	40014000 	.word	0x40014000
 8005780:	40014400 	.word	0x40014400
 8005784:	40014800 	.word	0x40014800
 8005788:	40015000 	.word	0x40015000

0800578c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800578c:	b580      	push	{r7, lr}
 800578e:	b086      	sub	sp, #24
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
 8005794:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800579c:	2301      	movs	r3, #1
 800579e:	e0a2      	b.n	80058e6 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d111      	bne.n	80057d0 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	f001 fb29 	bl	8006e0c <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d102      	bne.n	80057c8 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a4a      	ldr	r2, [pc, #296]	@ (80058f0 <HAL_TIM_Encoder_Init+0x164>)
 80057c6:	675a      	str	r2, [r3, #116]	@ 0x74
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2202      	movs	r2, #2
 80057d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	6812      	ldr	r2, [r2, #0]
 80057e2:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 80057e6:	f023 0307 	bic.w	r3, r3, #7
 80057ea:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3304      	adds	r3, #4
 80057f4:	4619      	mov	r1, r3
 80057f6:	4610      	mov	r0, r2
 80057f8:	f000 fe68 	bl	80064cc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	6a1b      	ldr	r3, [r3, #32]
 8005812:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	4313      	orrs	r3, r2
 800581c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005824:	f023 0303 	bic.w	r3, r3, #3
 8005828:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	689a      	ldr	r2, [r3, #8]
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	021b      	lsls	r3, r3, #8
 8005834:	4313      	orrs	r3, r2
 8005836:	693a      	ldr	r2, [r7, #16]
 8005838:	4313      	orrs	r3, r2
 800583a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005842:	f023 030c 	bic.w	r3, r3, #12
 8005846:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800584e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005852:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	68da      	ldr	r2, [r3, #12]
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	69db      	ldr	r3, [r3, #28]
 800585c:	021b      	lsls	r3, r3, #8
 800585e:	4313      	orrs	r3, r2
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	4313      	orrs	r3, r2
 8005864:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005866:	683b      	ldr	r3, [r7, #0]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	011a      	lsls	r2, r3, #4
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	6a1b      	ldr	r3, [r3, #32]
 8005870:	031b      	lsls	r3, r3, #12
 8005872:	4313      	orrs	r3, r2
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	4313      	orrs	r3, r2
 8005878:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005880:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8005888:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	695b      	ldr	r3, [r3, #20]
 8005892:	011b      	lsls	r3, r3, #4
 8005894:	4313      	orrs	r3, r2
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	4313      	orrs	r3, r2
 800589a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	697a      	ldr	r2, [r7, #20]
 80058a2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	693a      	ldr	r2, [r7, #16]
 80058aa:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	68fa      	ldr	r2, [r7, #12]
 80058b2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80058e4:	2300      	movs	r3, #0
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3718      	adds	r7, #24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}
 80058ee:	bf00      	nop
 80058f0:	08002e99 	.word	0x08002e99

080058f4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b084      	sub	sp, #16
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005904:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800590c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005914:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800591c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d110      	bne.n	8005946 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005924:	7bfb      	ldrb	r3, [r7, #15]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d102      	bne.n	8005930 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800592a:	7b7b      	ldrb	r3, [r7, #13]
 800592c:	2b01      	cmp	r3, #1
 800592e:	d001      	beq.n	8005934 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005930:	2301      	movs	r3, #1
 8005932:	e069      	b.n	8005a08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2202      	movs	r2, #2
 8005938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2202      	movs	r2, #2
 8005940:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005944:	e031      	b.n	80059aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	2b04      	cmp	r3, #4
 800594a:	d110      	bne.n	800596e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800594c:	7bbb      	ldrb	r3, [r7, #14]
 800594e:	2b01      	cmp	r3, #1
 8005950:	d102      	bne.n	8005958 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005952:	7b3b      	ldrb	r3, [r7, #12]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d001      	beq.n	800595c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005958:	2301      	movs	r3, #1
 800595a:	e055      	b.n	8005a08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2202      	movs	r2, #2
 8005960:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2202      	movs	r2, #2
 8005968:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800596c:	e01d      	b.n	80059aa <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800596e:	7bfb      	ldrb	r3, [r7, #15]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d108      	bne.n	8005986 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005974:	7bbb      	ldrb	r3, [r7, #14]
 8005976:	2b01      	cmp	r3, #1
 8005978:	d105      	bne.n	8005986 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800597a:	7b7b      	ldrb	r3, [r7, #13]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d102      	bne.n	8005986 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005980:	7b3b      	ldrb	r3, [r7, #12]
 8005982:	2b01      	cmp	r3, #1
 8005984:	d001      	beq.n	800598a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e03e      	b.n	8005a08 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2202      	movs	r2, #2
 800598e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2202      	movs	r2, #2
 8005996:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2202      	movs	r2, #2
 800599e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2202      	movs	r2, #2
 80059a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d003      	beq.n	80059b8 <HAL_TIM_Encoder_Start+0xc4>
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	2b04      	cmp	r3, #4
 80059b4:	d008      	beq.n	80059c8 <HAL_TIM_Encoder_Start+0xd4>
 80059b6:	e00f      	b.n	80059d8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	2201      	movs	r2, #1
 80059be:	2100      	movs	r1, #0
 80059c0:	4618      	mov	r0, r3
 80059c2:	f001 f9fd 	bl	8006dc0 <TIM_CCxChannelCmd>
      break;
 80059c6:	e016      	b.n	80059f6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	2201      	movs	r2, #1
 80059ce:	2104      	movs	r1, #4
 80059d0:	4618      	mov	r0, r3
 80059d2:	f001 f9f5 	bl	8006dc0 <TIM_CCxChannelCmd>
      break;
 80059d6:	e00e      	b.n	80059f6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	2201      	movs	r2, #1
 80059de:	2100      	movs	r1, #0
 80059e0:	4618      	mov	r0, r3
 80059e2:	f001 f9ed 	bl	8006dc0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	2201      	movs	r2, #1
 80059ec:	2104      	movs	r1, #4
 80059ee:	4618      	mov	r0, r3
 80059f0:	f001 f9e6 	bl	8006dc0 <TIM_CCxChannelCmd>
      break;
 80059f4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f042 0201 	orr.w	r2, r2, #1
 8005a04:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	3710      	adds	r7, #16
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	bd80      	pop	{r7, pc}

08005a10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b084      	sub	sp, #16
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	691b      	ldr	r3, [r3, #16]
 8005a26:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d026      	beq.n	8005a80 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d021      	beq.n	8005a80 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f06f 0202 	mvn.w	r2, #2
 8005a44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	f003 0303 	and.w	r3, r3, #3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d005      	beq.n	8005a66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005a60:	6878      	ldr	r0, [r7, #4]
 8005a62:	4798      	blx	r3
 8005a64:	e009      	b.n	8005a7a <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	f003 0304 	and.w	r3, r3, #4
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d026      	beq.n	8005ad8 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d021      	beq.n	8005ad8 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f06f 0204 	mvn.w	r2, #4
 8005a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2202      	movs	r2, #2
 8005aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d005      	beq.n	8005abe <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	4798      	blx	r3
 8005abc:	e009      	b.n	8005ad2 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2200      	movs	r2, #0
 8005ad6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	f003 0308 	and.w	r3, r3, #8
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d026      	beq.n	8005b30 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f003 0308 	and.w	r3, r3, #8
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d021      	beq.n	8005b30 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f06f 0208 	mvn.w	r2, #8
 8005af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2204      	movs	r2, #4
 8005afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	f003 0303 	and.w	r3, r3, #3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d005      	beq.n	8005b16 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b10:	6878      	ldr	r0, [r7, #4]
 8005b12:	4798      	blx	r3
 8005b14:	e009      	b.n	8005b2a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005b30:	68bb      	ldr	r3, [r7, #8]
 8005b32:	f003 0310 	and.w	r3, r3, #16
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d026      	beq.n	8005b88 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	f003 0310 	and.w	r3, r3, #16
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d021      	beq.n	8005b88 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f06f 0210 	mvn.w	r2, #16
 8005b4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2208      	movs	r2, #8
 8005b52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d005      	beq.n	8005b6e <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	4798      	blx	r3
 8005b6c:	e009      	b.n	8005b82 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2200      	movs	r2, #0
 8005b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d00e      	beq.n	8005bb0 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f003 0301 	and.w	r3, r3, #1
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d009      	beq.n	8005bb0 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f06f 0201 	mvn.w	r2, #1
 8005ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005bac:	6878      	ldr	r0, [r7, #4]
 8005bae:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005bb0:	68bb      	ldr	r3, [r7, #8]
 8005bb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d104      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d00e      	beq.n	8005be2 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d009      	beq.n	8005be2 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005bd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00e      	beq.n	8005c0a <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d009      	beq.n	8005c0a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d00e      	beq.n	8005c32 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d009      	beq.n	8005c32 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005c26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	f003 0320 	and.w	r3, r3, #32
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d00e      	beq.n	8005c5a <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	f003 0320 	and.w	r3, r3, #32
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d009      	beq.n	8005c5a <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f06f 0220 	mvn.w	r2, #32
 8005c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d00e      	beq.n	8005c82 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d009      	beq.n	8005c82 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005c76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d00e      	beq.n	8005caa <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d009      	beq.n	8005caa <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8005c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005ca6:	6878      	ldr	r0, [r7, #4]
 8005ca8:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00e      	beq.n	8005cd2 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d009      	beq.n	8005cd2 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8005cc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d00e      	beq.n	8005cfa <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d009      	beq.n	8005cfa <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8005cee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cfa:	bf00      	nop
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
	...

08005d04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005d10:	2300      	movs	r3, #0
 8005d12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d101      	bne.n	8005d22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005d1e:	2302      	movs	r3, #2
 8005d20:	e0ff      	b.n	8005f22 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2b14      	cmp	r3, #20
 8005d2e:	f200 80f0 	bhi.w	8005f12 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005d32:	a201      	add	r2, pc, #4	@ (adr r2, 8005d38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d38:	08005d8d 	.word	0x08005d8d
 8005d3c:	08005f13 	.word	0x08005f13
 8005d40:	08005f13 	.word	0x08005f13
 8005d44:	08005f13 	.word	0x08005f13
 8005d48:	08005dcd 	.word	0x08005dcd
 8005d4c:	08005f13 	.word	0x08005f13
 8005d50:	08005f13 	.word	0x08005f13
 8005d54:	08005f13 	.word	0x08005f13
 8005d58:	08005e0f 	.word	0x08005e0f
 8005d5c:	08005f13 	.word	0x08005f13
 8005d60:	08005f13 	.word	0x08005f13
 8005d64:	08005f13 	.word	0x08005f13
 8005d68:	08005e4f 	.word	0x08005e4f
 8005d6c:	08005f13 	.word	0x08005f13
 8005d70:	08005f13 	.word	0x08005f13
 8005d74:	08005f13 	.word	0x08005f13
 8005d78:	08005e91 	.word	0x08005e91
 8005d7c:	08005f13 	.word	0x08005f13
 8005d80:	08005f13 	.word	0x08005f13
 8005d84:	08005f13 	.word	0x08005f13
 8005d88:	08005ed1 	.word	0x08005ed1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	68b9      	ldr	r1, [r7, #8]
 8005d92:	4618      	mov	r0, r3
 8005d94:	f000 fc4e 	bl	8006634 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	699a      	ldr	r2, [r3, #24]
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0208 	orr.w	r2, r2, #8
 8005da6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	699a      	ldr	r2, [r3, #24]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f022 0204 	bic.w	r2, r2, #4
 8005db6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	6999      	ldr	r1, [r3, #24]
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	691a      	ldr	r2, [r3, #16]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	430a      	orrs	r2, r1
 8005dc8:	619a      	str	r2, [r3, #24]
      break;
 8005dca:	e0a5      	b.n	8005f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68b9      	ldr	r1, [r7, #8]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 fcc8 	bl	8006768 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	699a      	ldr	r2, [r3, #24]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005de6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	699a      	ldr	r2, [r3, #24]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005df6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	6999      	ldr	r1, [r3, #24]
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	021a      	lsls	r2, r3, #8
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	619a      	str	r2, [r3, #24]
      break;
 8005e0c:	e084      	b.n	8005f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68b9      	ldr	r1, [r7, #8]
 8005e14:	4618      	mov	r0, r3
 8005e16:	f000 fd3b 	bl	8006890 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	69da      	ldr	r2, [r3, #28]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	f042 0208 	orr.w	r2, r2, #8
 8005e28:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	69da      	ldr	r2, [r3, #28]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 0204 	bic.w	r2, r2, #4
 8005e38:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	69d9      	ldr	r1, [r3, #28]
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	691a      	ldr	r2, [r3, #16]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	61da      	str	r2, [r3, #28]
      break;
 8005e4c:	e064      	b.n	8005f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	68b9      	ldr	r1, [r7, #8]
 8005e54:	4618      	mov	r0, r3
 8005e56:	f000 fdad 	bl	80069b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	69da      	ldr	r2, [r3, #28]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005e68:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	69da      	ldr	r2, [r3, #28]
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005e78:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	69d9      	ldr	r1, [r3, #28]
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	021a      	lsls	r2, r3, #8
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	430a      	orrs	r2, r1
 8005e8c:	61da      	str	r2, [r3, #28]
      break;
 8005e8e:	e043      	b.n	8005f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68b9      	ldr	r1, [r7, #8]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f000 fe20 	bl	8006adc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f042 0208 	orr.w	r2, r2, #8
 8005eaa:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f022 0204 	bic.w	r2, r2, #4
 8005eba:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	691a      	ldr	r2, [r3, #16]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	430a      	orrs	r2, r1
 8005ecc:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005ece:	e023      	b.n	8005f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68b9      	ldr	r1, [r7, #8]
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f000 fe6a 	bl	8006bb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005eea:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005efa:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	021a      	lsls	r2, r3, #8
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	430a      	orrs	r2, r1
 8005f0e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005f10:	e002      	b.n	8005f18 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	75fb      	strb	r3, [r7, #23]
      break;
 8005f16:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3718      	adds	r7, #24
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop

08005f2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005f40:	2b01      	cmp	r3, #1
 8005f42:	d101      	bne.n	8005f48 <HAL_TIM_ConfigClockSource+0x1c>
 8005f44:	2302      	movs	r3, #2
 8005f46:	e0f6      	b.n	8006136 <HAL_TIM_ConfigClockSource+0x20a>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	689b      	ldr	r3, [r3, #8]
 8005f5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8005f66:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68ba      	ldr	r2, [r7, #8]
 8005f7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4a6f      	ldr	r2, [pc, #444]	@ (8006140 <HAL_TIM_ConfigClockSource+0x214>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	f000 80c1 	beq.w	800610a <HAL_TIM_ConfigClockSource+0x1de>
 8005f88:	4a6d      	ldr	r2, [pc, #436]	@ (8006140 <HAL_TIM_ConfigClockSource+0x214>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	f200 80c6 	bhi.w	800611c <HAL_TIM_ConfigClockSource+0x1f0>
 8005f90:	4a6c      	ldr	r2, [pc, #432]	@ (8006144 <HAL_TIM_ConfigClockSource+0x218>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	f000 80b9 	beq.w	800610a <HAL_TIM_ConfigClockSource+0x1de>
 8005f98:	4a6a      	ldr	r2, [pc, #424]	@ (8006144 <HAL_TIM_ConfigClockSource+0x218>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	f200 80be 	bhi.w	800611c <HAL_TIM_ConfigClockSource+0x1f0>
 8005fa0:	4a69      	ldr	r2, [pc, #420]	@ (8006148 <HAL_TIM_ConfigClockSource+0x21c>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	f000 80b1 	beq.w	800610a <HAL_TIM_ConfigClockSource+0x1de>
 8005fa8:	4a67      	ldr	r2, [pc, #412]	@ (8006148 <HAL_TIM_ConfigClockSource+0x21c>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	f200 80b6 	bhi.w	800611c <HAL_TIM_ConfigClockSource+0x1f0>
 8005fb0:	4a66      	ldr	r2, [pc, #408]	@ (800614c <HAL_TIM_ConfigClockSource+0x220>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	f000 80a9 	beq.w	800610a <HAL_TIM_ConfigClockSource+0x1de>
 8005fb8:	4a64      	ldr	r2, [pc, #400]	@ (800614c <HAL_TIM_ConfigClockSource+0x220>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	f200 80ae 	bhi.w	800611c <HAL_TIM_ConfigClockSource+0x1f0>
 8005fc0:	4a63      	ldr	r2, [pc, #396]	@ (8006150 <HAL_TIM_ConfigClockSource+0x224>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	f000 80a1 	beq.w	800610a <HAL_TIM_ConfigClockSource+0x1de>
 8005fc8:	4a61      	ldr	r2, [pc, #388]	@ (8006150 <HAL_TIM_ConfigClockSource+0x224>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	f200 80a6 	bhi.w	800611c <HAL_TIM_ConfigClockSource+0x1f0>
 8005fd0:	4a60      	ldr	r2, [pc, #384]	@ (8006154 <HAL_TIM_ConfigClockSource+0x228>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	f000 8099 	beq.w	800610a <HAL_TIM_ConfigClockSource+0x1de>
 8005fd8:	4a5e      	ldr	r2, [pc, #376]	@ (8006154 <HAL_TIM_ConfigClockSource+0x228>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	f200 809e 	bhi.w	800611c <HAL_TIM_ConfigClockSource+0x1f0>
 8005fe0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005fe4:	f000 8091 	beq.w	800610a <HAL_TIM_ConfigClockSource+0x1de>
 8005fe8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8005fec:	f200 8096 	bhi.w	800611c <HAL_TIM_ConfigClockSource+0x1f0>
 8005ff0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ff4:	f000 8089 	beq.w	800610a <HAL_TIM_ConfigClockSource+0x1de>
 8005ff8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ffc:	f200 808e 	bhi.w	800611c <HAL_TIM_ConfigClockSource+0x1f0>
 8006000:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006004:	d03e      	beq.n	8006084 <HAL_TIM_ConfigClockSource+0x158>
 8006006:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800600a:	f200 8087 	bhi.w	800611c <HAL_TIM_ConfigClockSource+0x1f0>
 800600e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006012:	f000 8086 	beq.w	8006122 <HAL_TIM_ConfigClockSource+0x1f6>
 8006016:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800601a:	d87f      	bhi.n	800611c <HAL_TIM_ConfigClockSource+0x1f0>
 800601c:	2b70      	cmp	r3, #112	@ 0x70
 800601e:	d01a      	beq.n	8006056 <HAL_TIM_ConfigClockSource+0x12a>
 8006020:	2b70      	cmp	r3, #112	@ 0x70
 8006022:	d87b      	bhi.n	800611c <HAL_TIM_ConfigClockSource+0x1f0>
 8006024:	2b60      	cmp	r3, #96	@ 0x60
 8006026:	d050      	beq.n	80060ca <HAL_TIM_ConfigClockSource+0x19e>
 8006028:	2b60      	cmp	r3, #96	@ 0x60
 800602a:	d877      	bhi.n	800611c <HAL_TIM_ConfigClockSource+0x1f0>
 800602c:	2b50      	cmp	r3, #80	@ 0x50
 800602e:	d03c      	beq.n	80060aa <HAL_TIM_ConfigClockSource+0x17e>
 8006030:	2b50      	cmp	r3, #80	@ 0x50
 8006032:	d873      	bhi.n	800611c <HAL_TIM_ConfigClockSource+0x1f0>
 8006034:	2b40      	cmp	r3, #64	@ 0x40
 8006036:	d058      	beq.n	80060ea <HAL_TIM_ConfigClockSource+0x1be>
 8006038:	2b40      	cmp	r3, #64	@ 0x40
 800603a:	d86f      	bhi.n	800611c <HAL_TIM_ConfigClockSource+0x1f0>
 800603c:	2b30      	cmp	r3, #48	@ 0x30
 800603e:	d064      	beq.n	800610a <HAL_TIM_ConfigClockSource+0x1de>
 8006040:	2b30      	cmp	r3, #48	@ 0x30
 8006042:	d86b      	bhi.n	800611c <HAL_TIM_ConfigClockSource+0x1f0>
 8006044:	2b20      	cmp	r3, #32
 8006046:	d060      	beq.n	800610a <HAL_TIM_ConfigClockSource+0x1de>
 8006048:	2b20      	cmp	r3, #32
 800604a:	d867      	bhi.n	800611c <HAL_TIM_ConfigClockSource+0x1f0>
 800604c:	2b00      	cmp	r3, #0
 800604e:	d05c      	beq.n	800610a <HAL_TIM_ConfigClockSource+0x1de>
 8006050:	2b10      	cmp	r3, #16
 8006052:	d05a      	beq.n	800610a <HAL_TIM_ConfigClockSource+0x1de>
 8006054:	e062      	b.n	800611c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006066:	f000 fe8b 	bl	8006d80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689b      	ldr	r3, [r3, #8]
 8006070:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006078:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	609a      	str	r2, [r3, #8]
      break;
 8006082:	e04f      	b.n	8006124 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006094:	f000 fe74 	bl	8006d80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	689a      	ldr	r2, [r3, #8]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80060a6:	609a      	str	r2, [r3, #8]
      break;
 80060a8:	e03c      	b.n	8006124 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060ae:	683b      	ldr	r3, [r7, #0]
 80060b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060b6:	461a      	mov	r2, r3
 80060b8:	f000 fde6 	bl	8006c88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2150      	movs	r1, #80	@ 0x50
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 fe3f 	bl	8006d46 <TIM_ITRx_SetConfig>
      break;
 80060c8:	e02c      	b.n	8006124 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80060d6:	461a      	mov	r2, r3
 80060d8:	f000 fe05 	bl	8006ce6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2160      	movs	r1, #96	@ 0x60
 80060e2:	4618      	mov	r0, r3
 80060e4:	f000 fe2f 	bl	8006d46 <TIM_ITRx_SetConfig>
      break;
 80060e8:	e01c      	b.n	8006124 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80060f6:	461a      	mov	r2, r3
 80060f8:	f000 fdc6 	bl	8006c88 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2140      	movs	r1, #64	@ 0x40
 8006102:	4618      	mov	r0, r3
 8006104:	f000 fe1f 	bl	8006d46 <TIM_ITRx_SetConfig>
      break;
 8006108:	e00c      	b.n	8006124 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4619      	mov	r1, r3
 8006114:	4610      	mov	r0, r2
 8006116:	f000 fe16 	bl	8006d46 <TIM_ITRx_SetConfig>
      break;
 800611a:	e003      	b.n	8006124 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	73fb      	strb	r3, [r7, #15]
      break;
 8006120:	e000      	b.n	8006124 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006122:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2201      	movs	r2, #1
 8006128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006134:	7bfb      	ldrb	r3, [r7, #15]
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	00100070 	.word	0x00100070
 8006144:	00100060 	.word	0x00100060
 8006148:	00100050 	.word	0x00100050
 800614c:	00100040 	.word	0x00100040
 8006150:	00100030 	.word	0x00100030
 8006154:	00100020 	.word	0x00100020

08006158 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006158:	b480      	push	{r7}
 800615a:	b083      	sub	sp, #12
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8006160:	bf00      	nop
 8006162:	370c      	adds	r7, #12
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr

0800616c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800616c:	b480      	push	{r7}
 800616e:	b083      	sub	sp, #12
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006174:	bf00      	nop
 8006176:	370c      	adds	r7, #12
 8006178:	46bd      	mov	sp, r7
 800617a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617e:	4770      	bx	lr

08006180 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006180:	b480      	push	{r7}
 8006182:	b083      	sub	sp, #12
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006188:	bf00      	nop
 800618a:	370c      	adds	r7, #12
 800618c:	46bd      	mov	sp, r7
 800618e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006192:	4770      	bx	lr

08006194 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006194:	b480      	push	{r7}
 8006196:	b083      	sub	sp, #12
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800619c:	bf00      	nop
 800619e:	370c      	adds	r7, #12
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr

080061a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80061a8:	b480      	push	{r7}
 80061aa:	b083      	sub	sp, #12
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80061b0:	bf00      	nop
 80061b2:	370c      	adds	r7, #12
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80061bc:	b480      	push	{r7}
 80061be:	b083      	sub	sp, #12
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80061c4:	bf00      	nop
 80061c6:	370c      	adds	r7, #12
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr

080061d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80061d0:	b480      	push	{r7}
 80061d2:	b083      	sub	sp, #12
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80061d8:	bf00      	nop
 80061da:	370c      	adds	r7, #12
 80061dc:	46bd      	mov	sp, r7
 80061de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e2:	4770      	bx	lr

080061e4 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b083      	sub	sp, #12
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 80061ec:	bf00      	nop
 80061ee:	370c      	adds	r7, #12
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr

080061f8 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b083      	sub	sp, #12
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8006200:	bf00      	nop
 8006202:	370c      	adds	r7, #12
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800620c:	b480      	push	{r7}
 800620e:	b087      	sub	sp, #28
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	460b      	mov	r3, r1
 8006216:	607a      	str	r2, [r7, #4]
 8006218:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800621a:	2300      	movs	r3, #0
 800621c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d101      	bne.n	8006228 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e14a      	b.n	80064be <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800622e:	b2db      	uxtb	r3, r3
 8006230:	2b01      	cmp	r3, #1
 8006232:	f040 80dd 	bne.w	80063f0 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8006236:	7afb      	ldrb	r3, [r7, #11]
 8006238:	2b1f      	cmp	r3, #31
 800623a:	f200 80d6 	bhi.w	80063ea <HAL_TIM_RegisterCallback+0x1de>
 800623e:	a201      	add	r2, pc, #4	@ (adr r2, 8006244 <HAL_TIM_RegisterCallback+0x38>)
 8006240:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006244:	080062c5 	.word	0x080062c5
 8006248:	080062cd 	.word	0x080062cd
 800624c:	080062d5 	.word	0x080062d5
 8006250:	080062dd 	.word	0x080062dd
 8006254:	080062e5 	.word	0x080062e5
 8006258:	080062ed 	.word	0x080062ed
 800625c:	080062f5 	.word	0x080062f5
 8006260:	080062fd 	.word	0x080062fd
 8006264:	08006305 	.word	0x08006305
 8006268:	0800630d 	.word	0x0800630d
 800626c:	08006315 	.word	0x08006315
 8006270:	0800631d 	.word	0x0800631d
 8006274:	08006325 	.word	0x08006325
 8006278:	0800632d 	.word	0x0800632d
 800627c:	08006337 	.word	0x08006337
 8006280:	08006341 	.word	0x08006341
 8006284:	0800634b 	.word	0x0800634b
 8006288:	08006355 	.word	0x08006355
 800628c:	0800635f 	.word	0x0800635f
 8006290:	08006369 	.word	0x08006369
 8006294:	08006373 	.word	0x08006373
 8006298:	0800637d 	.word	0x0800637d
 800629c:	08006387 	.word	0x08006387
 80062a0:	08006391 	.word	0x08006391
 80062a4:	0800639b 	.word	0x0800639b
 80062a8:	080063a5 	.word	0x080063a5
 80062ac:	080063af 	.word	0x080063af
 80062b0:	080063b9 	.word	0x080063b9
 80062b4:	080063c3 	.word	0x080063c3
 80062b8:	080063cd 	.word	0x080063cd
 80062bc:	080063d7 	.word	0x080063d7
 80062c0:	080063e1 	.word	0x080063e1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 80062ca:	e0f7      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 80062d2:	e0f3      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 80062da:	e0ef      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 80062e2:	e0eb      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 80062ea:	e0e7      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 80062f2:	e0e3      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 80062fa:	e0df      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	687a      	ldr	r2, [r7, #4]
 8006300:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8006302:	e0db      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	687a      	ldr	r2, [r7, #4]
 8006308:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 800630a:	e0d7      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8006312:	e0d3      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	687a      	ldr	r2, [r7, #4]
 8006318:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 800631a:	e0cf      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	687a      	ldr	r2, [r7, #4]
 8006320:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8006322:	e0cb      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	687a      	ldr	r2, [r7, #4]
 8006328:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 800632a:	e0c7      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8006334:	e0c2      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 800633e:	e0bd      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8006348:	e0b8      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	687a      	ldr	r2, [r7, #4]
 800634e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8006352:	e0b3      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 800635c:	e0ae      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8006366:	e0a9      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	687a      	ldr	r2, [r7, #4]
 800636c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8006370:	e0a4      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 800637a:	e09f      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8006384:	e09a      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 800638e:	e095      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8006398:	e090      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	687a      	ldr	r2, [r7, #4]
 800639e:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80063a2:	e08b      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	687a      	ldr	r2, [r7, #4]
 80063a8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 80063ac:	e086      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 80063b6:	e081      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 80063c0:	e07c      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 80063ca:	e077      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 80063d4:	e072      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	687a      	ldr	r2, [r7, #4]
 80063da:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80063de:	e06d      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80063e8:	e068      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	75fb      	strb	r3, [r7, #23]
        break;
 80063ee:	e065      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d15d      	bne.n	80064b8 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 80063fc:	7afb      	ldrb	r3, [r7, #11]
 80063fe:	2b0d      	cmp	r3, #13
 8006400:	d857      	bhi.n	80064b2 <HAL_TIM_RegisterCallback+0x2a6>
 8006402:	a201      	add	r2, pc, #4	@ (adr r2, 8006408 <HAL_TIM_RegisterCallback+0x1fc>)
 8006404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006408:	08006441 	.word	0x08006441
 800640c:	08006449 	.word	0x08006449
 8006410:	08006451 	.word	0x08006451
 8006414:	08006459 	.word	0x08006459
 8006418:	08006461 	.word	0x08006461
 800641c:	08006469 	.word	0x08006469
 8006420:	08006471 	.word	0x08006471
 8006424:	08006479 	.word	0x08006479
 8006428:	08006481 	.word	0x08006481
 800642c:	08006489 	.word	0x08006489
 8006430:	08006491 	.word	0x08006491
 8006434:	08006499 	.word	0x08006499
 8006438:	080064a1 	.word	0x080064a1
 800643c:	080064a9 	.word	0x080064a9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	687a      	ldr	r2, [r7, #4]
 8006444:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8006446:	e039      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 800644e:	e035      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	687a      	ldr	r2, [r7, #4]
 8006454:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8006456:	e031      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 800645e:	e02d      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8006466:	e029      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	687a      	ldr	r2, [r7, #4]
 800646c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 800646e:	e025      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	687a      	ldr	r2, [r7, #4]
 8006474:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8006476:	e021      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 800647e:	e01d      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8006486:	e019      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 800648e:	e015      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	687a      	ldr	r2, [r7, #4]
 8006494:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8006496:	e011      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	687a      	ldr	r2, [r7, #4]
 800649c:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 800649e:	e00d      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 80064a6:	e009      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	687a      	ldr	r2, [r7, #4]
 80064ac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 80064b0:	e004      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	75fb      	strb	r3, [r7, #23]
        break;
 80064b6:	e001      	b.n	80064bc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80064bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80064be:	4618      	mov	r0, r3
 80064c0:	371c      	adds	r7, #28
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr
 80064ca:	bf00      	nop

080064cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80064cc:	b480      	push	{r7}
 80064ce:	b085      	sub	sp, #20
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
 80064d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	4a4c      	ldr	r2, [pc, #304]	@ (8006610 <TIM_Base_SetConfig+0x144>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d017      	beq.n	8006514 <TIM_Base_SetConfig+0x48>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064ea:	d013      	beq.n	8006514 <TIM_Base_SetConfig+0x48>
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	4a49      	ldr	r2, [pc, #292]	@ (8006614 <TIM_Base_SetConfig+0x148>)
 80064f0:	4293      	cmp	r3, r2
 80064f2:	d00f      	beq.n	8006514 <TIM_Base_SetConfig+0x48>
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a48      	ldr	r2, [pc, #288]	@ (8006618 <TIM_Base_SetConfig+0x14c>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d00b      	beq.n	8006514 <TIM_Base_SetConfig+0x48>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a47      	ldr	r2, [pc, #284]	@ (800661c <TIM_Base_SetConfig+0x150>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d007      	beq.n	8006514 <TIM_Base_SetConfig+0x48>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a46      	ldr	r2, [pc, #280]	@ (8006620 <TIM_Base_SetConfig+0x154>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d003      	beq.n	8006514 <TIM_Base_SetConfig+0x48>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a45      	ldr	r2, [pc, #276]	@ (8006624 <TIM_Base_SetConfig+0x158>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d108      	bne.n	8006526 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800651a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	4313      	orrs	r3, r2
 8006524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a39      	ldr	r2, [pc, #228]	@ (8006610 <TIM_Base_SetConfig+0x144>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d023      	beq.n	8006576 <TIM_Base_SetConfig+0xaa>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006534:	d01f      	beq.n	8006576 <TIM_Base_SetConfig+0xaa>
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	4a36      	ldr	r2, [pc, #216]	@ (8006614 <TIM_Base_SetConfig+0x148>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d01b      	beq.n	8006576 <TIM_Base_SetConfig+0xaa>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	4a35      	ldr	r2, [pc, #212]	@ (8006618 <TIM_Base_SetConfig+0x14c>)
 8006542:	4293      	cmp	r3, r2
 8006544:	d017      	beq.n	8006576 <TIM_Base_SetConfig+0xaa>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	4a34      	ldr	r2, [pc, #208]	@ (800661c <TIM_Base_SetConfig+0x150>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d013      	beq.n	8006576 <TIM_Base_SetConfig+0xaa>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	4a33      	ldr	r2, [pc, #204]	@ (8006620 <TIM_Base_SetConfig+0x154>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d00f      	beq.n	8006576 <TIM_Base_SetConfig+0xaa>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4a33      	ldr	r2, [pc, #204]	@ (8006628 <TIM_Base_SetConfig+0x15c>)
 800655a:	4293      	cmp	r3, r2
 800655c:	d00b      	beq.n	8006576 <TIM_Base_SetConfig+0xaa>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4a32      	ldr	r2, [pc, #200]	@ (800662c <TIM_Base_SetConfig+0x160>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d007      	beq.n	8006576 <TIM_Base_SetConfig+0xaa>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	4a31      	ldr	r2, [pc, #196]	@ (8006630 <TIM_Base_SetConfig+0x164>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d003      	beq.n	8006576 <TIM_Base_SetConfig+0xaa>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a2c      	ldr	r2, [pc, #176]	@ (8006624 <TIM_Base_SetConfig+0x158>)
 8006572:	4293      	cmp	r3, r2
 8006574:	d108      	bne.n	8006588 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800657c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	68fa      	ldr	r2, [r7, #12]
 8006584:	4313      	orrs	r3, r2
 8006586:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	695b      	ldr	r3, [r3, #20]
 8006592:	4313      	orrs	r3, r2
 8006594:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	689a      	ldr	r2, [r3, #8]
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	681a      	ldr	r2, [r3, #0]
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	4a18      	ldr	r2, [pc, #96]	@ (8006610 <TIM_Base_SetConfig+0x144>)
 80065b0:	4293      	cmp	r3, r2
 80065b2:	d013      	beq.n	80065dc <TIM_Base_SetConfig+0x110>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	4a1a      	ldr	r2, [pc, #104]	@ (8006620 <TIM_Base_SetConfig+0x154>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d00f      	beq.n	80065dc <TIM_Base_SetConfig+0x110>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	4a1a      	ldr	r2, [pc, #104]	@ (8006628 <TIM_Base_SetConfig+0x15c>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d00b      	beq.n	80065dc <TIM_Base_SetConfig+0x110>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a19      	ldr	r2, [pc, #100]	@ (800662c <TIM_Base_SetConfig+0x160>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d007      	beq.n	80065dc <TIM_Base_SetConfig+0x110>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a18      	ldr	r2, [pc, #96]	@ (8006630 <TIM_Base_SetConfig+0x164>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d003      	beq.n	80065dc <TIM_Base_SetConfig+0x110>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a13      	ldr	r2, [pc, #76]	@ (8006624 <TIM_Base_SetConfig+0x158>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d103      	bne.n	80065e4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	691a      	ldr	r2, [r3, #16]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d105      	bne.n	8006602 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	691b      	ldr	r3, [r3, #16]
 80065fa:	f023 0201 	bic.w	r2, r3, #1
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	611a      	str	r2, [r3, #16]
  }
}
 8006602:	bf00      	nop
 8006604:	3714      	adds	r7, #20
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr
 800660e:	bf00      	nop
 8006610:	40012c00 	.word	0x40012c00
 8006614:	40000400 	.word	0x40000400
 8006618:	40000800 	.word	0x40000800
 800661c:	40000c00 	.word	0x40000c00
 8006620:	40013400 	.word	0x40013400
 8006624:	40015000 	.word	0x40015000
 8006628:	40014000 	.word	0x40014000
 800662c:	40014400 	.word	0x40014400
 8006630:	40014800 	.word	0x40014800

08006634 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006634:	b480      	push	{r7}
 8006636:	b087      	sub	sp, #28
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6a1b      	ldr	r3, [r3, #32]
 8006642:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6a1b      	ldr	r3, [r3, #32]
 8006648:	f023 0201 	bic.w	r2, r3, #1
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006662:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	f023 0303 	bic.w	r3, r3, #3
 800666e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68fa      	ldr	r2, [r7, #12]
 8006676:	4313      	orrs	r3, r2
 8006678:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	f023 0302 	bic.w	r3, r3, #2
 8006680:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006682:	683b      	ldr	r3, [r7, #0]
 8006684:	689b      	ldr	r3, [r3, #8]
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	4313      	orrs	r3, r2
 800668a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a30      	ldr	r2, [pc, #192]	@ (8006750 <TIM_OC1_SetConfig+0x11c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d013      	beq.n	80066bc <TIM_OC1_SetConfig+0x88>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a2f      	ldr	r2, [pc, #188]	@ (8006754 <TIM_OC1_SetConfig+0x120>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d00f      	beq.n	80066bc <TIM_OC1_SetConfig+0x88>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a2e      	ldr	r2, [pc, #184]	@ (8006758 <TIM_OC1_SetConfig+0x124>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d00b      	beq.n	80066bc <TIM_OC1_SetConfig+0x88>
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	4a2d      	ldr	r2, [pc, #180]	@ (800675c <TIM_OC1_SetConfig+0x128>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d007      	beq.n	80066bc <TIM_OC1_SetConfig+0x88>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	4a2c      	ldr	r2, [pc, #176]	@ (8006760 <TIM_OC1_SetConfig+0x12c>)
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d003      	beq.n	80066bc <TIM_OC1_SetConfig+0x88>
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4a2b      	ldr	r2, [pc, #172]	@ (8006764 <TIM_OC1_SetConfig+0x130>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d10c      	bne.n	80066d6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80066bc:	697b      	ldr	r3, [r7, #20]
 80066be:	f023 0308 	bic.w	r3, r3, #8
 80066c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	4313      	orrs	r3, r2
 80066cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	f023 0304 	bic.w	r3, r3, #4
 80066d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a1d      	ldr	r2, [pc, #116]	@ (8006750 <TIM_OC1_SetConfig+0x11c>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d013      	beq.n	8006706 <TIM_OC1_SetConfig+0xd2>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a1c      	ldr	r2, [pc, #112]	@ (8006754 <TIM_OC1_SetConfig+0x120>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d00f      	beq.n	8006706 <TIM_OC1_SetConfig+0xd2>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a1b      	ldr	r2, [pc, #108]	@ (8006758 <TIM_OC1_SetConfig+0x124>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d00b      	beq.n	8006706 <TIM_OC1_SetConfig+0xd2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a1a      	ldr	r2, [pc, #104]	@ (800675c <TIM_OC1_SetConfig+0x128>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d007      	beq.n	8006706 <TIM_OC1_SetConfig+0xd2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a19      	ldr	r2, [pc, #100]	@ (8006760 <TIM_OC1_SetConfig+0x12c>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d003      	beq.n	8006706 <TIM_OC1_SetConfig+0xd2>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a18      	ldr	r2, [pc, #96]	@ (8006764 <TIM_OC1_SetConfig+0x130>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d111      	bne.n	800672a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800670c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006714:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	695b      	ldr	r3, [r3, #20]
 800671a:	693a      	ldr	r2, [r7, #16]
 800671c:	4313      	orrs	r3, r2
 800671e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006720:	683b      	ldr	r3, [r7, #0]
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	693a      	ldr	r2, [r7, #16]
 8006726:	4313      	orrs	r3, r2
 8006728:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	693a      	ldr	r2, [r7, #16]
 800672e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	68fa      	ldr	r2, [r7, #12]
 8006734:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	685a      	ldr	r2, [r3, #4]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	697a      	ldr	r2, [r7, #20]
 8006742:	621a      	str	r2, [r3, #32]
}
 8006744:	bf00      	nop
 8006746:	371c      	adds	r7, #28
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	40012c00 	.word	0x40012c00
 8006754:	40013400 	.word	0x40013400
 8006758:	40014000 	.word	0x40014000
 800675c:	40014400 	.word	0x40014400
 8006760:	40014800 	.word	0x40014800
 8006764:	40015000 	.word	0x40015000

08006768 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006768:	b480      	push	{r7}
 800676a:	b087      	sub	sp, #28
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6a1b      	ldr	r3, [r3, #32]
 800677c:	f023 0210 	bic.w	r2, r3, #16
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006796:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800679a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	021b      	lsls	r3, r3, #8
 80067aa:	68fa      	ldr	r2, [r7, #12]
 80067ac:	4313      	orrs	r3, r2
 80067ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067b0:	697b      	ldr	r3, [r7, #20]
 80067b2:	f023 0320 	bic.w	r3, r3, #32
 80067b6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	011b      	lsls	r3, r3, #4
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	4313      	orrs	r3, r2
 80067c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	4a2c      	ldr	r2, [pc, #176]	@ (8006878 <TIM_OC2_SetConfig+0x110>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d007      	beq.n	80067dc <TIM_OC2_SetConfig+0x74>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	4a2b      	ldr	r2, [pc, #172]	@ (800687c <TIM_OC2_SetConfig+0x114>)
 80067d0:	4293      	cmp	r3, r2
 80067d2:	d003      	beq.n	80067dc <TIM_OC2_SetConfig+0x74>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	4a2a      	ldr	r2, [pc, #168]	@ (8006880 <TIM_OC2_SetConfig+0x118>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d10d      	bne.n	80067f8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	011b      	lsls	r3, r3, #4
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80067f6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a1f      	ldr	r2, [pc, #124]	@ (8006878 <TIM_OC2_SetConfig+0x110>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d013      	beq.n	8006828 <TIM_OC2_SetConfig+0xc0>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a1e      	ldr	r2, [pc, #120]	@ (800687c <TIM_OC2_SetConfig+0x114>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d00f      	beq.n	8006828 <TIM_OC2_SetConfig+0xc0>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	4a1e      	ldr	r2, [pc, #120]	@ (8006884 <TIM_OC2_SetConfig+0x11c>)
 800680c:	4293      	cmp	r3, r2
 800680e:	d00b      	beq.n	8006828 <TIM_OC2_SetConfig+0xc0>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a1d      	ldr	r2, [pc, #116]	@ (8006888 <TIM_OC2_SetConfig+0x120>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d007      	beq.n	8006828 <TIM_OC2_SetConfig+0xc0>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a1c      	ldr	r2, [pc, #112]	@ (800688c <TIM_OC2_SetConfig+0x124>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d003      	beq.n	8006828 <TIM_OC2_SetConfig+0xc0>
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	4a17      	ldr	r2, [pc, #92]	@ (8006880 <TIM_OC2_SetConfig+0x118>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d113      	bne.n	8006850 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800682e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006836:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	695b      	ldr	r3, [r3, #20]
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	693a      	ldr	r2, [r7, #16]
 8006840:	4313      	orrs	r3, r2
 8006842:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	699b      	ldr	r3, [r3, #24]
 8006848:	009b      	lsls	r3, r3, #2
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	4313      	orrs	r3, r2
 800684e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	693a      	ldr	r2, [r7, #16]
 8006854:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	68fa      	ldr	r2, [r7, #12]
 800685a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800685c:	683b      	ldr	r3, [r7, #0]
 800685e:	685a      	ldr	r2, [r3, #4]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	697a      	ldr	r2, [r7, #20]
 8006868:	621a      	str	r2, [r3, #32]
}
 800686a:	bf00      	nop
 800686c:	371c      	adds	r7, #28
 800686e:	46bd      	mov	sp, r7
 8006870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop
 8006878:	40012c00 	.word	0x40012c00
 800687c:	40013400 	.word	0x40013400
 8006880:	40015000 	.word	0x40015000
 8006884:	40014000 	.word	0x40014000
 8006888:	40014400 	.word	0x40014400
 800688c:	40014800 	.word	0x40014800

08006890 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006890:	b480      	push	{r7}
 8006892:	b087      	sub	sp, #28
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6a1b      	ldr	r3, [r3, #32]
 80068a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068be:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f023 0303 	bic.w	r3, r3, #3
 80068ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80068dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	021b      	lsls	r3, r3, #8
 80068e4:	697a      	ldr	r2, [r7, #20]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a2b      	ldr	r2, [pc, #172]	@ (800699c <TIM_OC3_SetConfig+0x10c>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d007      	beq.n	8006902 <TIM_OC3_SetConfig+0x72>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	4a2a      	ldr	r2, [pc, #168]	@ (80069a0 <TIM_OC3_SetConfig+0x110>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d003      	beq.n	8006902 <TIM_OC3_SetConfig+0x72>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a29      	ldr	r2, [pc, #164]	@ (80069a4 <TIM_OC3_SetConfig+0x114>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d10d      	bne.n	800691e <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006908:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	021b      	lsls	r3, r3, #8
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	4313      	orrs	r3, r2
 8006914:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800691c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a1e      	ldr	r2, [pc, #120]	@ (800699c <TIM_OC3_SetConfig+0x10c>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d013      	beq.n	800694e <TIM_OC3_SetConfig+0xbe>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a1d      	ldr	r2, [pc, #116]	@ (80069a0 <TIM_OC3_SetConfig+0x110>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d00f      	beq.n	800694e <TIM_OC3_SetConfig+0xbe>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a1d      	ldr	r2, [pc, #116]	@ (80069a8 <TIM_OC3_SetConfig+0x118>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d00b      	beq.n	800694e <TIM_OC3_SetConfig+0xbe>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a1c      	ldr	r2, [pc, #112]	@ (80069ac <TIM_OC3_SetConfig+0x11c>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d007      	beq.n	800694e <TIM_OC3_SetConfig+0xbe>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a1b      	ldr	r2, [pc, #108]	@ (80069b0 <TIM_OC3_SetConfig+0x120>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d003      	beq.n	800694e <TIM_OC3_SetConfig+0xbe>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a16      	ldr	r2, [pc, #88]	@ (80069a4 <TIM_OC3_SetConfig+0x114>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d113      	bne.n	8006976 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006956:	693b      	ldr	r3, [r7, #16]
 8006958:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800695c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	011b      	lsls	r3, r3, #4
 8006964:	693a      	ldr	r2, [r7, #16]
 8006966:	4313      	orrs	r3, r2
 8006968:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	011b      	lsls	r3, r3, #4
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	4313      	orrs	r3, r2
 8006974:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	68fa      	ldr	r2, [r7, #12]
 8006980:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	685a      	ldr	r2, [r3, #4]
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	621a      	str	r2, [r3, #32]
}
 8006990:	bf00      	nop
 8006992:	371c      	adds	r7, #28
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	40012c00 	.word	0x40012c00
 80069a0:	40013400 	.word	0x40013400
 80069a4:	40015000 	.word	0x40015000
 80069a8:	40014000 	.word	0x40014000
 80069ac:	40014400 	.word	0x40014400
 80069b0:	40014800 	.word	0x40014800

080069b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b087      	sub	sp, #28
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
 80069bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a1b      	ldr	r3, [r3, #32]
 80069c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a1b      	ldr	r3, [r3, #32]
 80069c8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	69db      	ldr	r3, [r3, #28]
 80069da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80069e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80069e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80069ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	021b      	lsls	r3, r3, #8
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006a02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	689b      	ldr	r3, [r3, #8]
 8006a08:	031b      	lsls	r3, r3, #12
 8006a0a:	697a      	ldr	r2, [r7, #20]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a2c      	ldr	r2, [pc, #176]	@ (8006ac4 <TIM_OC4_SetConfig+0x110>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d007      	beq.n	8006a28 <TIM_OC4_SetConfig+0x74>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	4a2b      	ldr	r2, [pc, #172]	@ (8006ac8 <TIM_OC4_SetConfig+0x114>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d003      	beq.n	8006a28 <TIM_OC4_SetConfig+0x74>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	4a2a      	ldr	r2, [pc, #168]	@ (8006acc <TIM_OC4_SetConfig+0x118>)
 8006a24:	4293      	cmp	r3, r2
 8006a26:	d10d      	bne.n	8006a44 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006a2e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	031b      	lsls	r3, r3, #12
 8006a36:	697a      	ldr	r2, [r7, #20]
 8006a38:	4313      	orrs	r3, r2
 8006a3a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a42:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	4a1f      	ldr	r2, [pc, #124]	@ (8006ac4 <TIM_OC4_SetConfig+0x110>)
 8006a48:	4293      	cmp	r3, r2
 8006a4a:	d013      	beq.n	8006a74 <TIM_OC4_SetConfig+0xc0>
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	4a1e      	ldr	r2, [pc, #120]	@ (8006ac8 <TIM_OC4_SetConfig+0x114>)
 8006a50:	4293      	cmp	r3, r2
 8006a52:	d00f      	beq.n	8006a74 <TIM_OC4_SetConfig+0xc0>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	4a1e      	ldr	r2, [pc, #120]	@ (8006ad0 <TIM_OC4_SetConfig+0x11c>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d00b      	beq.n	8006a74 <TIM_OC4_SetConfig+0xc0>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a1d      	ldr	r2, [pc, #116]	@ (8006ad4 <TIM_OC4_SetConfig+0x120>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d007      	beq.n	8006a74 <TIM_OC4_SetConfig+0xc0>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a1c      	ldr	r2, [pc, #112]	@ (8006ad8 <TIM_OC4_SetConfig+0x124>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d003      	beq.n	8006a74 <TIM_OC4_SetConfig+0xc0>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a17      	ldr	r2, [pc, #92]	@ (8006acc <TIM_OC4_SetConfig+0x118>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d113      	bne.n	8006a9c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006a7a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006a82:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	695b      	ldr	r3, [r3, #20]
 8006a88:	019b      	lsls	r3, r3, #6
 8006a8a:	693a      	ldr	r2, [r7, #16]
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	019b      	lsls	r3, r3, #6
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	68fa      	ldr	r2, [r7, #12]
 8006aa6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	685a      	ldr	r2, [r3, #4]
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	697a      	ldr	r2, [r7, #20]
 8006ab4:	621a      	str	r2, [r3, #32]
}
 8006ab6:	bf00      	nop
 8006ab8:	371c      	adds	r7, #28
 8006aba:	46bd      	mov	sp, r7
 8006abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	40012c00 	.word	0x40012c00
 8006ac8:	40013400 	.word	0x40013400
 8006acc:	40015000 	.word	0x40015000
 8006ad0:	40014000 	.word	0x40014000
 8006ad4:	40014400 	.word	0x40014400
 8006ad8:	40014800 	.word	0x40014800

08006adc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006adc:	b480      	push	{r7}
 8006ade:	b087      	sub	sp, #28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
 8006ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a1b      	ldr	r3, [r3, #32]
 8006aea:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	6a1b      	ldr	r3, [r3, #32]
 8006af0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	68fa      	ldr	r2, [r7, #12]
 8006b16:	4313      	orrs	r3, r2
 8006b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006b20:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b22:	683b      	ldr	r3, [r7, #0]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	041b      	lsls	r3, r3, #16
 8006b28:	693a      	ldr	r2, [r7, #16]
 8006b2a:	4313      	orrs	r3, r2
 8006b2c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	4a19      	ldr	r2, [pc, #100]	@ (8006b98 <TIM_OC5_SetConfig+0xbc>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d013      	beq.n	8006b5e <TIM_OC5_SetConfig+0x82>
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	4a18      	ldr	r2, [pc, #96]	@ (8006b9c <TIM_OC5_SetConfig+0xc0>)
 8006b3a:	4293      	cmp	r3, r2
 8006b3c:	d00f      	beq.n	8006b5e <TIM_OC5_SetConfig+0x82>
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	4a17      	ldr	r2, [pc, #92]	@ (8006ba0 <TIM_OC5_SetConfig+0xc4>)
 8006b42:	4293      	cmp	r3, r2
 8006b44:	d00b      	beq.n	8006b5e <TIM_OC5_SetConfig+0x82>
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	4a16      	ldr	r2, [pc, #88]	@ (8006ba4 <TIM_OC5_SetConfig+0xc8>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d007      	beq.n	8006b5e <TIM_OC5_SetConfig+0x82>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	4a15      	ldr	r2, [pc, #84]	@ (8006ba8 <TIM_OC5_SetConfig+0xcc>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d003      	beq.n	8006b5e <TIM_OC5_SetConfig+0x82>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	4a14      	ldr	r2, [pc, #80]	@ (8006bac <TIM_OC5_SetConfig+0xd0>)
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	d109      	bne.n	8006b72 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b64:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	695b      	ldr	r3, [r3, #20]
 8006b6a:	021b      	lsls	r3, r3, #8
 8006b6c:	697a      	ldr	r2, [r7, #20]
 8006b6e:	4313      	orrs	r3, r2
 8006b70:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	697a      	ldr	r2, [r7, #20]
 8006b76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	685a      	ldr	r2, [r3, #4]
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	693a      	ldr	r2, [r7, #16]
 8006b8a:	621a      	str	r2, [r3, #32]
}
 8006b8c:	bf00      	nop
 8006b8e:	371c      	adds	r7, #28
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr
 8006b98:	40012c00 	.word	0x40012c00
 8006b9c:	40013400 	.word	0x40013400
 8006ba0:	40014000 	.word	0x40014000
 8006ba4:	40014400 	.word	0x40014400
 8006ba8:	40014800 	.word	0x40014800
 8006bac:	40015000 	.word	0x40015000

08006bb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a1b      	ldr	r3, [r3, #32]
 8006bc4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006bde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	021b      	lsls	r3, r3, #8
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006bf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	051b      	lsls	r3, r3, #20
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a1a      	ldr	r2, [pc, #104]	@ (8006c70 <TIM_OC6_SetConfig+0xc0>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d013      	beq.n	8006c34 <TIM_OC6_SetConfig+0x84>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a19      	ldr	r2, [pc, #100]	@ (8006c74 <TIM_OC6_SetConfig+0xc4>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d00f      	beq.n	8006c34 <TIM_OC6_SetConfig+0x84>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a18      	ldr	r2, [pc, #96]	@ (8006c78 <TIM_OC6_SetConfig+0xc8>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d00b      	beq.n	8006c34 <TIM_OC6_SetConfig+0x84>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a17      	ldr	r2, [pc, #92]	@ (8006c7c <TIM_OC6_SetConfig+0xcc>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d007      	beq.n	8006c34 <TIM_OC6_SetConfig+0x84>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a16      	ldr	r2, [pc, #88]	@ (8006c80 <TIM_OC6_SetConfig+0xd0>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d003      	beq.n	8006c34 <TIM_OC6_SetConfig+0x84>
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a15      	ldr	r2, [pc, #84]	@ (8006c84 <TIM_OC6_SetConfig+0xd4>)
 8006c30:	4293      	cmp	r3, r2
 8006c32:	d109      	bne.n	8006c48 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c3c:	683b      	ldr	r3, [r7, #0]
 8006c3e:	695b      	ldr	r3, [r3, #20]
 8006c40:	029b      	lsls	r3, r3, #10
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	4313      	orrs	r3, r2
 8006c46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	685a      	ldr	r2, [r3, #4]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	693a      	ldr	r2, [r7, #16]
 8006c60:	621a      	str	r2, [r3, #32]
}
 8006c62:	bf00      	nop
 8006c64:	371c      	adds	r7, #28
 8006c66:	46bd      	mov	sp, r7
 8006c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6c:	4770      	bx	lr
 8006c6e:	bf00      	nop
 8006c70:	40012c00 	.word	0x40012c00
 8006c74:	40013400 	.word	0x40013400
 8006c78:	40014000 	.word	0x40014000
 8006c7c:	40014400 	.word	0x40014400
 8006c80:	40014800 	.word	0x40014800
 8006c84:	40015000 	.word	0x40015000

08006c88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c88:	b480      	push	{r7}
 8006c8a:	b087      	sub	sp, #28
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	60f8      	str	r0, [r7, #12]
 8006c90:	60b9      	str	r1, [r7, #8]
 8006c92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	6a1b      	ldr	r3, [r3, #32]
 8006c98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	f023 0201 	bic.w	r2, r3, #1
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	699b      	ldr	r3, [r3, #24]
 8006caa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006cb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	011b      	lsls	r3, r3, #4
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cbe:	697b      	ldr	r3, [r7, #20]
 8006cc0:	f023 030a 	bic.w	r3, r3, #10
 8006cc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	697a      	ldr	r2, [r7, #20]
 8006cd8:	621a      	str	r2, [r3, #32]
}
 8006cda:	bf00      	nop
 8006cdc:	371c      	adds	r7, #28
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce4:	4770      	bx	lr

08006ce6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ce6:	b480      	push	{r7}
 8006ce8:	b087      	sub	sp, #28
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	60f8      	str	r0, [r7, #12]
 8006cee:	60b9      	str	r1, [r7, #8]
 8006cf0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6a1b      	ldr	r3, [r3, #32]
 8006cfc:	f023 0210 	bic.w	r2, r3, #16
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006d10:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	031b      	lsls	r3, r3, #12
 8006d16:	693a      	ldr	r2, [r7, #16]
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006d22:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	011b      	lsls	r3, r3, #4
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	693a      	ldr	r2, [r7, #16]
 8006d32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	621a      	str	r2, [r3, #32]
}
 8006d3a:	bf00      	nop
 8006d3c:	371c      	adds	r7, #28
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr

08006d46 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d46:	b480      	push	{r7}
 8006d48:	b085      	sub	sp, #20
 8006d4a:	af00      	add	r7, sp, #0
 8006d4c:	6078      	str	r0, [r7, #4]
 8006d4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	689b      	ldr	r3, [r3, #8]
 8006d54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8006d5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d62:	683a      	ldr	r2, [r7, #0]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	f043 0307 	orr.w	r3, r3, #7
 8006d6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	609a      	str	r2, [r3, #8]
}
 8006d74:	bf00      	nop
 8006d76:	3714      	adds	r7, #20
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7e:	4770      	bx	lr

08006d80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d80:	b480      	push	{r7}
 8006d82:	b087      	sub	sp, #28
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
 8006d8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d94:	697b      	ldr	r3, [r7, #20]
 8006d96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006d9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	021a      	lsls	r2, r3, #8
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	431a      	orrs	r2, r3
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	697a      	ldr	r2, [r7, #20]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	609a      	str	r2, [r3, #8]
}
 8006db4:	bf00      	nop
 8006db6:	371c      	adds	r7, #28
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr

08006dc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b087      	sub	sp, #28
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	60b9      	str	r1, [r7, #8]
 8006dca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	f003 031f 	and.w	r3, r3, #31
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6a1a      	ldr	r2, [r3, #32]
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	43db      	mvns	r3, r3
 8006de2:	401a      	ands	r2, r3
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6a1a      	ldr	r2, [r3, #32]
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	f003 031f 	and.w	r3, r3, #31
 8006df2:	6879      	ldr	r1, [r7, #4]
 8006df4:	fa01 f303 	lsl.w	r3, r1, r3
 8006df8:	431a      	orrs	r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	621a      	str	r2, [r3, #32]
}
 8006dfe:	bf00      	nop
 8006e00:	371c      	adds	r7, #28
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
	...

08006e0c <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	4a26      	ldr	r2, [pc, #152]	@ (8006eb0 <TIM_ResetCallback+0xa4>)
 8006e18:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	4a25      	ldr	r2, [pc, #148]	@ (8006eb4 <TIM_ResetCallback+0xa8>)
 8006e20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a24      	ldr	r2, [pc, #144]	@ (8006eb8 <TIM_ResetCallback+0xac>)
 8006e28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a23      	ldr	r2, [pc, #140]	@ (8006ebc <TIM_ResetCallback+0xb0>)
 8006e30:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a22      	ldr	r2, [pc, #136]	@ (8006ec0 <TIM_ResetCallback+0xb4>)
 8006e38:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a21      	ldr	r2, [pc, #132]	@ (8006ec4 <TIM_ResetCallback+0xb8>)
 8006e40:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a20      	ldr	r2, [pc, #128]	@ (8006ec8 <TIM_ResetCallback+0xbc>)
 8006e48:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	4a1f      	ldr	r2, [pc, #124]	@ (8006ecc <TIM_ResetCallback+0xc0>)
 8006e50:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	4a1e      	ldr	r2, [pc, #120]	@ (8006ed0 <TIM_ResetCallback+0xc4>)
 8006e58:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a1d      	ldr	r2, [pc, #116]	@ (8006ed4 <TIM_ResetCallback+0xc8>)
 8006e60:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	4a1c      	ldr	r2, [pc, #112]	@ (8006ed8 <TIM_ResetCallback+0xcc>)
 8006e68:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	4a1b      	ldr	r2, [pc, #108]	@ (8006edc <TIM_ResetCallback+0xd0>)
 8006e70:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	4a1a      	ldr	r2, [pc, #104]	@ (8006ee0 <TIM_ResetCallback+0xd4>)
 8006e78:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	4a19      	ldr	r2, [pc, #100]	@ (8006ee4 <TIM_ResetCallback+0xd8>)
 8006e80:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	4a18      	ldr	r2, [pc, #96]	@ (8006ee8 <TIM_ResetCallback+0xdc>)
 8006e88:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	4a17      	ldr	r2, [pc, #92]	@ (8006eec <TIM_ResetCallback+0xe0>)
 8006e90:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	4a16      	ldr	r2, [pc, #88]	@ (8006ef0 <TIM_ResetCallback+0xe4>)
 8006e98:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	4a15      	ldr	r2, [pc, #84]	@ (8006ef4 <TIM_ResetCallback+0xe8>)
 8006ea0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	08002251 	.word	0x08002251
 8006eb4:	08006159 	.word	0x08006159
 8006eb8:	080061d1 	.word	0x080061d1
 8006ebc:	080061e5 	.word	0x080061e5
 8006ec0:	08006181 	.word	0x08006181
 8006ec4:	08006195 	.word	0x08006195
 8006ec8:	0800616d 	.word	0x0800616d
 8006ecc:	080061a9 	.word	0x080061a9
 8006ed0:	080061bd 	.word	0x080061bd
 8006ed4:	080061f9 	.word	0x080061f9
 8006ed8:	0800714d 	.word	0x0800714d
 8006edc:	08007161 	.word	0x08007161
 8006ee0:	08007175 	.word	0x08007175
 8006ee4:	08007189 	.word	0x08007189
 8006ee8:	0800719d 	.word	0x0800719d
 8006eec:	080071b1 	.word	0x080071b1
 8006ef0:	080071c5 	.word	0x080071c5
 8006ef4:	080071d9 	.word	0x080071d9

08006ef8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b085      	sub	sp, #20
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d101      	bne.n	8006f10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f0c:	2302      	movs	r3, #2
 8006f0e:	e074      	b.n	8006ffa <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2202      	movs	r2, #2
 8006f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	689b      	ldr	r3, [r3, #8]
 8006f2e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a34      	ldr	r2, [pc, #208]	@ (8007008 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d009      	beq.n	8006f4e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a33      	ldr	r2, [pc, #204]	@ (800700c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d004      	beq.n	8006f4e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a31      	ldr	r2, [pc, #196]	@ (8007010 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d108      	bne.n	8006f60 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006f54:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	685b      	ldr	r3, [r3, #4]
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006f66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	68fa      	ldr	r2, [r7, #12]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	68fa      	ldr	r2, [r7, #12]
 8006f7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	4a21      	ldr	r2, [pc, #132]	@ (8007008 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006f84:	4293      	cmp	r3, r2
 8006f86:	d022      	beq.n	8006fce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006f90:	d01d      	beq.n	8006fce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a1f      	ldr	r2, [pc, #124]	@ (8007014 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d018      	beq.n	8006fce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	4a1d      	ldr	r2, [pc, #116]	@ (8007018 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8006fa2:	4293      	cmp	r3, r2
 8006fa4:	d013      	beq.n	8006fce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a1c      	ldr	r2, [pc, #112]	@ (800701c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d00e      	beq.n	8006fce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a15      	ldr	r2, [pc, #84]	@ (800700c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d009      	beq.n	8006fce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a18      	ldr	r2, [pc, #96]	@ (8007020 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d004      	beq.n	8006fce <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	4a11      	ldr	r2, [pc, #68]	@ (8007010 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d10c      	bne.n	8006fe8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	68ba      	ldr	r2, [r7, #8]
 8006fe6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3714      	adds	r7, #20
 8006ffe:	46bd      	mov	sp, r7
 8007000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	40012c00 	.word	0x40012c00
 800700c:	40013400 	.word	0x40013400
 8007010:	40015000 	.word	0x40015000
 8007014:	40000400 	.word	0x40000400
 8007018:	40000800 	.word	0x40000800
 800701c:	40000c00 	.word	0x40000c00
 8007020:	40014000 	.word	0x40014000

08007024 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800702e:	2300      	movs	r3, #0
 8007030:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007038:	2b01      	cmp	r3, #1
 800703a:	d101      	bne.n	8007040 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800703c:	2302      	movs	r3, #2
 800703e:	e078      	b.n	8007132 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	4313      	orrs	r3, r2
 8007054:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800705c:	683b      	ldr	r3, [r7, #0]
 800705e:	689b      	ldr	r3, [r3, #8]
 8007060:	4313      	orrs	r3, r2
 8007062:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	4313      	orrs	r3, r2
 8007070:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4313      	orrs	r3, r2
 800707e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	691b      	ldr	r3, [r3, #16]
 800708a:	4313      	orrs	r3, r2
 800708c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	695b      	ldr	r3, [r3, #20]
 8007098:	4313      	orrs	r3, r2
 800709a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070a6:	4313      	orrs	r3, r2
 80070a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	699b      	ldr	r3, [r3, #24]
 80070b4:	041b      	lsls	r3, r3, #16
 80070b6:	4313      	orrs	r3, r2
 80070b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	69db      	ldr	r3, [r3, #28]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a1c      	ldr	r2, [pc, #112]	@ (8007140 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d009      	beq.n	80070e6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a1b      	ldr	r2, [pc, #108]	@ (8007144 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d004      	beq.n	80070e6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	4a19      	ldr	r2, [pc, #100]	@ (8007148 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80070e2:	4293      	cmp	r3, r2
 80070e4:	d11c      	bne.n	8007120 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80070ec:	683b      	ldr	r3, [r7, #0]
 80070ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070f0:	051b      	lsls	r3, r3, #20
 80070f2:	4313      	orrs	r3, r2
 80070f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	6a1b      	ldr	r3, [r3, #32]
 8007100:	4313      	orrs	r3, r2
 8007102:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800710e:	4313      	orrs	r3, r2
 8007110:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800711c:	4313      	orrs	r3, r2
 800711e:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	2200      	movs	r2, #0
 800712c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007130:	2300      	movs	r3, #0
}
 8007132:	4618      	mov	r0, r3
 8007134:	3714      	adds	r7, #20
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	40012c00 	.word	0x40012c00
 8007144:	40013400 	.word	0x40013400
 8007148:	40015000 	.word	0x40015000

0800714c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007154:	bf00      	nop
 8007156:	370c      	adds	r7, #12
 8007158:	46bd      	mov	sp, r7
 800715a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715e:	4770      	bx	lr

08007160 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8007160:	b480      	push	{r7}
 8007162:	b083      	sub	sp, #12
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8007168:	bf00      	nop
 800716a:	370c      	adds	r7, #12
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800717c:	bf00      	nop
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr

08007188 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007188:	b480      	push	{r7}
 800718a:	b083      	sub	sp, #12
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800719c:	b480      	push	{r7}
 800719e:	b083      	sub	sp, #12
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80071a4:	bf00      	nop
 80071a6:	370c      	adds	r7, #12
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr

080071b0 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80071b8:	bf00      	nop
 80071ba:	370c      	adds	r7, #12
 80071bc:	46bd      	mov	sp, r7
 80071be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c2:	4770      	bx	lr

080071c4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80071c4:	b480      	push	{r7}
 80071c6:	b083      	sub	sp, #12
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80071cc:	bf00      	nop
 80071ce:	370c      	adds	r7, #12
 80071d0:	46bd      	mov	sp, r7
 80071d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d6:	4770      	bx	lr

080071d8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80071d8:	b480      	push	{r7}
 80071da:	b083      	sub	sp, #12
 80071dc:	af00      	add	r7, sp, #0
 80071de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80071e0:	bf00      	nop
 80071e2:	370c      	adds	r7, #12
 80071e4:	46bd      	mov	sp, r7
 80071e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ea:	4770      	bx	lr

080071ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d101      	bne.n	80071fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071fa:	2301      	movs	r3, #1
 80071fc:	e050      	b.n	80072a0 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007204:	2b00      	cmp	r3, #0
 8007206:	d114      	bne.n	8007232 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 8007210:	6878      	ldr	r0, [r7, #4]
 8007212:	f000 fdc5 	bl	8007da0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800721c:	2b00      	cmp	r3, #0
 800721e:	d103      	bne.n	8007228 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	4a21      	ldr	r2, [pc, #132]	@ (80072a8 <HAL_UART_Init+0xbc>)
 8007224:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	2224      	movs	r2, #36	@ 0x24
 8007236:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	681a      	ldr	r2, [r3, #0]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f022 0201 	bic.w	r2, r2, #1
 8007248:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800724e:	2b00      	cmp	r3, #0
 8007250:	d002      	beq.n	8007258 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 8007252:	6878      	ldr	r0, [r7, #4]
 8007254:	f001 f8f2 	bl	800843c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f000 fdf3 	bl	8007e44 <UART_SetConfig>
 800725e:	4603      	mov	r3, r0
 8007260:	2b01      	cmp	r3, #1
 8007262:	d101      	bne.n	8007268 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8007264:	2301      	movs	r3, #1
 8007266:	e01b      	b.n	80072a0 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	685a      	ldr	r2, [r3, #4]
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007276:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	689a      	ldr	r2, [r3, #8]
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007286:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	681a      	ldr	r2, [r3, #0]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f042 0201 	orr.w	r2, r2, #1
 8007296:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f001 f971 	bl	8008580 <UART_CheckIdleState>
 800729e:	4603      	mov	r3, r0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3708      	adds	r7, #8
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	08002f9d 	.word	0x08002f9d

080072ac <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b087      	sub	sp, #28
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	60f8      	str	r0, [r7, #12]
 80072b4:	460b      	mov	r3, r1
 80072b6:	607a      	str	r2, [r7, #4]
 80072b8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 80072ba:	2300      	movs	r3, #0
 80072bc:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d109      	bne.n	80072d8 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80072ca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	e09c      	b.n	8007412 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072de:	2b20      	cmp	r3, #32
 80072e0:	d16c      	bne.n	80073bc <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 80072e2:	7afb      	ldrb	r3, [r7, #11]
 80072e4:	2b0c      	cmp	r3, #12
 80072e6:	d85e      	bhi.n	80073a6 <HAL_UART_RegisterCallback+0xfa>
 80072e8:	a201      	add	r2, pc, #4	@ (adr r2, 80072f0 <HAL_UART_RegisterCallback+0x44>)
 80072ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072ee:	bf00      	nop
 80072f0:	08007325 	.word	0x08007325
 80072f4:	0800732f 	.word	0x0800732f
 80072f8:	08007339 	.word	0x08007339
 80072fc:	08007343 	.word	0x08007343
 8007300:	0800734d 	.word	0x0800734d
 8007304:	08007357 	.word	0x08007357
 8007308:	08007361 	.word	0x08007361
 800730c:	0800736b 	.word	0x0800736b
 8007310:	08007375 	.word	0x08007375
 8007314:	0800737f 	.word	0x0800737f
 8007318:	08007389 	.word	0x08007389
 800731c:	08007393 	.word	0x08007393
 8007320:	0800739d 	.word	0x0800739d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 800732c:	e070      	b.n	8007410 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8007336:	e06b      	b.n	8007410 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	687a      	ldr	r2, [r7, #4]
 800733c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8007340:	e066      	b.n	8007410 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	687a      	ldr	r2, [r7, #4]
 8007346:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 800734a:	e061      	b.n	8007410 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8007354:	e05c      	b.n	8007410 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800735e:	e057      	b.n	8007410 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8007368:	e052      	b.n	8007410 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	687a      	ldr	r2, [r7, #4]
 800736e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8007372:	e04d      	b.n	8007410 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 800737c:	e048      	b.n	8007410 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8007386:	e043      	b.n	8007410 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8007390:	e03e      	b.n	8007410 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800739a:	e039      	b.n	8007410 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	687a      	ldr	r2, [r7, #4]
 80073a0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80073a4:	e034      	b.n	8007410 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ac:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	75fb      	strb	r3, [r7, #23]
        break;
 80073ba:	e029      	b.n	8007410 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d11a      	bne.n	80073fc <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 80073c6:	7afb      	ldrb	r3, [r7, #11]
 80073c8:	2b0b      	cmp	r3, #11
 80073ca:	d002      	beq.n	80073d2 <HAL_UART_RegisterCallback+0x126>
 80073cc:	2b0c      	cmp	r3, #12
 80073ce:	d005      	beq.n	80073dc <HAL_UART_RegisterCallback+0x130>
 80073d0:	e009      	b.n	80073e6 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	687a      	ldr	r2, [r7, #4]
 80073d6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 80073da:	e019      	b.n	8007410 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80073e4:	e014      	b.n	8007410 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80073ec:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80073f6:	2301      	movs	r3, #1
 80073f8:	75fb      	strb	r3, [r7, #23]
        break;
 80073fa:	e009      	b.n	8007410 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007402:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007410:	7dfb      	ldrb	r3, [r7, #23]
}
 8007412:	4618      	mov	r0, r3
 8007414:	371c      	adds	r7, #28
 8007416:	46bd      	mov	sp, r7
 8007418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741c:	4770      	bx	lr
 800741e:	bf00      	nop

08007420 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b08a      	sub	sp, #40	@ 0x28
 8007424:	af00      	add	r7, sp, #0
 8007426:	60f8      	str	r0, [r7, #12]
 8007428:	60b9      	str	r1, [r7, #8]
 800742a:	4613      	mov	r3, r2
 800742c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007434:	2b20      	cmp	r3, #32
 8007436:	d167      	bne.n	8007508 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d002      	beq.n	8007444 <HAL_UART_Transmit_DMA+0x24>
 800743e:	88fb      	ldrh	r3, [r7, #6]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d101      	bne.n	8007448 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
 8007446:	e060      	b.n	800750a <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	68ba      	ldr	r2, [r7, #8]
 800744c:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	88fa      	ldrh	r2, [r7, #6]
 8007452:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	88fa      	ldrh	r2, [r7, #6]
 800745a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2221      	movs	r2, #33	@ 0x21
 800746a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007472:	2b00      	cmp	r3, #0
 8007474:	d028      	beq.n	80074c8 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800747a:	4a26      	ldr	r2, [pc, #152]	@ (8007514 <HAL_UART_Transmit_DMA+0xf4>)
 800747c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007482:	4a25      	ldr	r2, [pc, #148]	@ (8007518 <HAL_UART_Transmit_DMA+0xf8>)
 8007484:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800748a:	4a24      	ldr	r2, [pc, #144]	@ (800751c <HAL_UART_Transmit_DMA+0xfc>)
 800748c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007492:	2200      	movs	r2, #0
 8007494:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800749e:	4619      	mov	r1, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	3328      	adds	r3, #40	@ 0x28
 80074a6:	461a      	mov	r2, r3
 80074a8:	88fb      	ldrh	r3, [r7, #6]
 80074aa:	f7fc f919 	bl	80036e0 <HAL_DMA_Start_IT>
 80074ae:	4603      	mov	r3, r0
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d009      	beq.n	80074c8 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2210      	movs	r2, #16
 80074b8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2220      	movs	r2, #32
 80074c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e020      	b.n	800750a <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	2240      	movs	r2, #64	@ 0x40
 80074ce:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	3308      	adds	r3, #8
 80074d6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	e853 3f00 	ldrex	r3, [r3]
 80074de:	613b      	str	r3, [r7, #16]
   return(result);
 80074e0:	693b      	ldr	r3, [r7, #16]
 80074e2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	3308      	adds	r3, #8
 80074ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80074f0:	623a      	str	r2, [r7, #32]
 80074f2:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f4:	69f9      	ldr	r1, [r7, #28]
 80074f6:	6a3a      	ldr	r2, [r7, #32]
 80074f8:	e841 2300 	strex	r3, r2, [r1]
 80074fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d1e5      	bne.n	80074d0 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007504:	2300      	movs	r3, #0
 8007506:	e000      	b.n	800750a <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007508:	2302      	movs	r3, #2
  }
}
 800750a:	4618      	mov	r0, r3
 800750c:	3728      	adds	r7, #40	@ 0x28
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop
 8007514:	08008a4b 	.word	0x08008a4b
 8007518:	08008ae9 	.word	0x08008ae9
 800751c:	08008c83 	.word	0x08008c83

08007520 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b08a      	sub	sp, #40	@ 0x28
 8007524:	af00      	add	r7, sp, #0
 8007526:	60f8      	str	r0, [r7, #12]
 8007528:	60b9      	str	r1, [r7, #8]
 800752a:	4613      	mov	r3, r2
 800752c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007534:	2b20      	cmp	r3, #32
 8007536:	d137      	bne.n	80075a8 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d002      	beq.n	8007544 <HAL_UART_Receive_DMA+0x24>
 800753e:	88fb      	ldrh	r3, [r7, #6]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d101      	bne.n	8007548 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007544:	2301      	movs	r3, #1
 8007546:	e030      	b.n	80075aa <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	2200      	movs	r2, #0
 800754c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a18      	ldr	r2, [pc, #96]	@ (80075b4 <HAL_UART_Receive_DMA+0x94>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d01f      	beq.n	8007598 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	685b      	ldr	r3, [r3, #4]
 800755e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d018      	beq.n	8007598 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	e853 3f00 	ldrex	r3, [r3]
 8007572:	613b      	str	r3, [r7, #16]
   return(result);
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800757a:	627b      	str	r3, [r7, #36]	@ 0x24
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	461a      	mov	r2, r3
 8007582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007584:	623b      	str	r3, [r7, #32]
 8007586:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007588:	69f9      	ldr	r1, [r7, #28]
 800758a:	6a3a      	ldr	r2, [r7, #32]
 800758c:	e841 2300 	strex	r3, r2, [r1]
 8007590:	61bb      	str	r3, [r7, #24]
   return(result);
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d1e6      	bne.n	8007566 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007598:	88fb      	ldrh	r3, [r7, #6]
 800759a:	461a      	mov	r2, r3
 800759c:	68b9      	ldr	r1, [r7, #8]
 800759e:	68f8      	ldr	r0, [r7, #12]
 80075a0:	f001 f906 	bl	80087b0 <UART_Start_Receive_DMA>
 80075a4:	4603      	mov	r3, r0
 80075a6:	e000      	b.n	80075aa <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80075a8:	2302      	movs	r3, #2
  }
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3728      	adds	r7, #40	@ 0x28
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	40008000 	.word	0x40008000

080075b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b0ba      	sub	sp, #232	@ 0xe8
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	69db      	ldr	r3, [r3, #28]
 80075c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	689b      	ldr	r3, [r3, #8]
 80075da:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80075de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80075e2:	f640 030f 	movw	r3, #2063	@ 0x80f
 80075e6:	4013      	ands	r3, r2
 80075e8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80075ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d11b      	bne.n	800762c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80075f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075f8:	f003 0320 	and.w	r3, r3, #32
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d015      	beq.n	800762c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007600:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007604:	f003 0320 	and.w	r3, r3, #32
 8007608:	2b00      	cmp	r3, #0
 800760a:	d105      	bne.n	8007618 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800760c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007610:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d009      	beq.n	800762c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800761c:	2b00      	cmp	r3, #0
 800761e:	f000 82f3 	beq.w	8007c08 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007626:	6878      	ldr	r0, [r7, #4]
 8007628:	4798      	blx	r3
      }
      return;
 800762a:	e2ed      	b.n	8007c08 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800762c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007630:	2b00      	cmp	r3, #0
 8007632:	f000 8129 	beq.w	8007888 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007636:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800763a:	4b90      	ldr	r3, [pc, #576]	@ (800787c <HAL_UART_IRQHandler+0x2c4>)
 800763c:	4013      	ands	r3, r2
 800763e:	2b00      	cmp	r3, #0
 8007640:	d106      	bne.n	8007650 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007642:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007646:	4b8e      	ldr	r3, [pc, #568]	@ (8007880 <HAL_UART_IRQHandler+0x2c8>)
 8007648:	4013      	ands	r3, r2
 800764a:	2b00      	cmp	r3, #0
 800764c:	f000 811c 	beq.w	8007888 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007654:	f003 0301 	and.w	r3, r3, #1
 8007658:	2b00      	cmp	r3, #0
 800765a:	d011      	beq.n	8007680 <HAL_UART_IRQHandler+0xc8>
 800765c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007660:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007664:	2b00      	cmp	r3, #0
 8007666:	d00b      	beq.n	8007680 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	2201      	movs	r2, #1
 800766e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007676:	f043 0201 	orr.w	r2, r3, #1
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007680:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007684:	f003 0302 	and.w	r3, r3, #2
 8007688:	2b00      	cmp	r3, #0
 800768a:	d011      	beq.n	80076b0 <HAL_UART_IRQHandler+0xf8>
 800768c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007690:	f003 0301 	and.w	r3, r3, #1
 8007694:	2b00      	cmp	r3, #0
 8007696:	d00b      	beq.n	80076b0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	2202      	movs	r2, #2
 800769e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076a6:	f043 0204 	orr.w	r2, r3, #4
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076b4:	f003 0304 	and.w	r3, r3, #4
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d011      	beq.n	80076e0 <HAL_UART_IRQHandler+0x128>
 80076bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076c0:	f003 0301 	and.w	r3, r3, #1
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d00b      	beq.n	80076e0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	2204      	movs	r2, #4
 80076ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076d6:	f043 0202 	orr.w	r2, r3, #2
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80076e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076e4:	f003 0308 	and.w	r3, r3, #8
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d017      	beq.n	800771c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80076ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076f0:	f003 0320 	and.w	r3, r3, #32
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d105      	bne.n	8007704 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80076f8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80076fc:	4b5f      	ldr	r3, [pc, #380]	@ (800787c <HAL_UART_IRQHandler+0x2c4>)
 80076fe:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00b      	beq.n	800771c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	2208      	movs	r2, #8
 800770a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007712:	f043 0208 	orr.w	r2, r3, #8
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800771c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007720:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007724:	2b00      	cmp	r3, #0
 8007726:	d012      	beq.n	800774e <HAL_UART_IRQHandler+0x196>
 8007728:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800772c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00c      	beq.n	800774e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800773c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007744:	f043 0220 	orr.w	r2, r3, #32
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007754:	2b00      	cmp	r3, #0
 8007756:	f000 8259 	beq.w	8007c0c <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800775a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800775e:	f003 0320 	and.w	r3, r3, #32
 8007762:	2b00      	cmp	r3, #0
 8007764:	d013      	beq.n	800778e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007766:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800776a:	f003 0320 	and.w	r3, r3, #32
 800776e:	2b00      	cmp	r3, #0
 8007770:	d105      	bne.n	800777e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007772:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800777a:	2b00      	cmp	r3, #0
 800777c:	d007      	beq.n	800778e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007782:	2b00      	cmp	r3, #0
 8007784:	d003      	beq.n	800778e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800778a:	6878      	ldr	r0, [r7, #4]
 800778c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007794:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077a2:	2b40      	cmp	r3, #64	@ 0x40
 80077a4:	d005      	beq.n	80077b2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80077a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077aa:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d058      	beq.n	8007864 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f001 f8e3 	bl	800897e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077c2:	2b40      	cmp	r3, #64	@ 0x40
 80077c4:	d148      	bne.n	8007858 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	3308      	adds	r3, #8
 80077cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80077d4:	e853 3f00 	ldrex	r3, [r3]
 80077d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80077dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80077e0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077e4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	3308      	adds	r3, #8
 80077ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80077f2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80077f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80077fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007802:	e841 2300 	strex	r3, r2, [r1]
 8007806:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800780a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800780e:	2b00      	cmp	r3, #0
 8007810:	d1d9      	bne.n	80077c6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007818:	2b00      	cmp	r3, #0
 800781a:	d017      	beq.n	800784c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007822:	4a18      	ldr	r2, [pc, #96]	@ (8007884 <HAL_UART_IRQHandler+0x2cc>)
 8007824:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800782c:	4618      	mov	r0, r3
 800782e:	f7fc f82b 	bl	8003888 <HAL_DMA_Abort_IT>
 8007832:	4603      	mov	r3, r0
 8007834:	2b00      	cmp	r3, #0
 8007836:	d01f      	beq.n	8007878 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800783e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007846:	4610      	mov	r0, r2
 8007848:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800784a:	e015      	b.n	8007878 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007856:	e00f      	b.n	8007878 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800785e:	6878      	ldr	r0, [r7, #4]
 8007860:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007862:	e009      	b.n	8007878 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800786a:	6878      	ldr	r0, [r7, #4]
 800786c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007876:	e1c9      	b.n	8007c0c <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007878:	bf00      	nop
    return;
 800787a:	e1c7      	b.n	8007c0c <HAL_UART_IRQHandler+0x654>
 800787c:	10000001 	.word	0x10000001
 8007880:	04000120 	.word	0x04000120
 8007884:	08008d07 	.word	0x08008d07

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800788c:	2b01      	cmp	r3, #1
 800788e:	f040 8157 	bne.w	8007b40 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007896:	f003 0310 	and.w	r3, r3, #16
 800789a:	2b00      	cmp	r3, #0
 800789c:	f000 8150 	beq.w	8007b40 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80078a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078a4:	f003 0310 	and.w	r3, r3, #16
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f000 8149 	beq.w	8007b40 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	2210      	movs	r2, #16
 80078b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078c0:	2b40      	cmp	r3, #64	@ 0x40
 80078c2:	f040 80bd 	bne.w	8007a40 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80078d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f000 8199 	beq.w	8007c10 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80078e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80078e8:	429a      	cmp	r2, r3
 80078ea:	f080 8191 	bcs.w	8007c10 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80078f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f003 0320 	and.w	r3, r3, #32
 8007906:	2b00      	cmp	r3, #0
 8007908:	f040 8087 	bne.w	8007a1a <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007914:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007918:	e853 3f00 	ldrex	r3, [r3]
 800791c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007920:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007924:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007928:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	461a      	mov	r2, r3
 8007932:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007936:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800793a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007942:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007946:	e841 2300 	strex	r3, r2, [r1]
 800794a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800794e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007952:	2b00      	cmp	r3, #0
 8007954:	d1da      	bne.n	800790c <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	3308      	adds	r3, #8
 800795c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007960:	e853 3f00 	ldrex	r3, [r3]
 8007964:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007966:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007968:	f023 0301 	bic.w	r3, r3, #1
 800796c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	3308      	adds	r3, #8
 8007976:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800797a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800797e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007980:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007982:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007986:	e841 2300 	strex	r3, r2, [r1]
 800798a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800798c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800798e:	2b00      	cmp	r3, #0
 8007990:	d1e1      	bne.n	8007956 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	3308      	adds	r3, #8
 8007998:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800799a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800799c:	e853 3f00 	ldrex	r3, [r3]
 80079a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80079a2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	3308      	adds	r3, #8
 80079b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80079b6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80079b8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ba:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80079bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80079be:	e841 2300 	strex	r3, r2, [r1]
 80079c2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80079c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d1e3      	bne.n	8007992 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2220      	movs	r2, #32
 80079ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079e0:	e853 3f00 	ldrex	r3, [r3]
 80079e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80079e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079e8:	f023 0310 	bic.w	r3, r3, #16
 80079ec:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	461a      	mov	r2, r3
 80079f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079fa:	65bb      	str	r3, [r7, #88]	@ 0x58
 80079fc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fe:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a02:	e841 2300 	strex	r3, r2, [r1]
 8007a06:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007a08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d1e4      	bne.n	80079d8 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7fb fede 	bl	80037d6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2202      	movs	r2, #2
 8007a1e:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8007a2c:	687a      	ldr	r2, [r7, #4]
 8007a2e:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8007a32:	b292      	uxth	r2, r2
 8007a34:	1a8a      	subs	r2, r1, r2
 8007a36:	b292      	uxth	r2, r2
 8007a38:	4611      	mov	r1, r2
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a3e:	e0e7      	b.n	8007c10 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	f000 80d9 	beq.w	8007c14 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8007a62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	f000 80d4 	beq.w	8007c14 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a74:	e853 3f00 	ldrex	r3, [r3]
 8007a78:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a80:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	461a      	mov	r2, r3
 8007a8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007a8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007a90:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a96:	e841 2300 	strex	r3, r2, [r1]
 8007a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d1e4      	bne.n	8007a6c <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	3308      	adds	r3, #8
 8007aa8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007aac:	e853 3f00 	ldrex	r3, [r3]
 8007ab0:	623b      	str	r3, [r7, #32]
   return(result);
 8007ab2:	6a3b      	ldr	r3, [r7, #32]
 8007ab4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007ab8:	f023 0301 	bic.w	r3, r3, #1
 8007abc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	3308      	adds	r3, #8
 8007ac6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007aca:	633a      	str	r2, [r7, #48]	@ 0x30
 8007acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ace:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ad0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ad2:	e841 2300 	strex	r3, r2, [r1]
 8007ad6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1e1      	bne.n	8007aa2 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2220      	movs	r2, #32
 8007ae2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af8:	693b      	ldr	r3, [r7, #16]
 8007afa:	e853 3f00 	ldrex	r3, [r3]
 8007afe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	f023 0310 	bic.w	r3, r3, #16
 8007b06:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	461a      	mov	r2, r3
 8007b10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007b14:	61fb      	str	r3, [r7, #28]
 8007b16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b18:	69b9      	ldr	r1, [r7, #24]
 8007b1a:	69fa      	ldr	r2, [r7, #28]
 8007b1c:	e841 2300 	strex	r3, r2, [r1]
 8007b20:	617b      	str	r3, [r7, #20]
   return(result);
 8007b22:	697b      	ldr	r3, [r7, #20]
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d1e4      	bne.n	8007af2 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2202      	movs	r2, #2
 8007b2c:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8007b34:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8007b38:	4611      	mov	r1, r2
 8007b3a:	6878      	ldr	r0, [r7, #4]
 8007b3c:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b3e:	e069      	b.n	8007c14 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b44:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d010      	beq.n	8007b6e <HAL_UART_IRQHandler+0x5b6>
 8007b4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b50:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d00a      	beq.n	8007b6e <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007b60:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b6c:	e055      	b.n	8007c1a <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007b6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d014      	beq.n	8007ba4 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007b7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d105      	bne.n	8007b92 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007b86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b8a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d008      	beq.n	8007ba4 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d03e      	beq.n	8007c18 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	4798      	blx	r3
    }
    return;
 8007ba2:	e039      	b.n	8007c18 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007ba4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007ba8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d009      	beq.n	8007bc4 <HAL_UART_IRQHandler+0x60c>
 8007bb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d003      	beq.n	8007bc4 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f001 f8ba 	bl	8008d36 <UART_EndTransmit_IT>
    return;
 8007bc2:	e02a      	b.n	8007c1a <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007bc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bc8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d00b      	beq.n	8007be8 <HAL_UART_IRQHandler+0x630>
 8007bd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bd4:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d005      	beq.n	8007be8 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007be6:	e018      	b.n	8007c1a <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d012      	beq.n	8007c1a <HAL_UART_IRQHandler+0x662>
 8007bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	da0e      	bge.n	8007c1a <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c06:	e008      	b.n	8007c1a <HAL_UART_IRQHandler+0x662>
      return;
 8007c08:	bf00      	nop
 8007c0a:	e006      	b.n	8007c1a <HAL_UART_IRQHandler+0x662>
    return;
 8007c0c:	bf00      	nop
 8007c0e:	e004      	b.n	8007c1a <HAL_UART_IRQHandler+0x662>
      return;
 8007c10:	bf00      	nop
 8007c12:	e002      	b.n	8007c1a <HAL_UART_IRQHandler+0x662>
      return;
 8007c14:	bf00      	nop
 8007c16:	e000      	b.n	8007c1a <HAL_UART_IRQHandler+0x662>
    return;
 8007c18:	bf00      	nop
  }
}
 8007c1a:	37e8      	adds	r7, #232	@ 0xe8
 8007c1c:	46bd      	mov	sp, r7
 8007c1e:	bd80      	pop	{r7, pc}

08007c20 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007c3c:	bf00      	nop
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8007c64:	bf00      	nop
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007c78:	bf00      	nop
 8007c7a:	370c      	adds	r7, #12
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c82:	4770      	bx	lr

08007c84 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8007cb4:	bf00      	nop
 8007cb6:	370c      	adds	r7, #12
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr

08007cc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007ccc:	bf00      	nop
 8007cce:	370c      	adds	r7, #12
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr

08007cd8 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8007cd8:	b480      	push	{r7}
 8007cda:	b083      	sub	sp, #12
 8007cdc:	af00      	add	r7, sp, #0
 8007cde:	6078      	str	r0, [r7, #4]
 8007ce0:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	4a09      	ldr	r2, [pc, #36]	@ (8007d0c <HAL_UART_ReceiverTimeout_Config+0x34>)
 8007ce8:	4293      	cmp	r3, r2
 8007cea:	d009      	beq.n	8007d00 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	695b      	ldr	r3, [r3, #20]
 8007cf2:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	683a      	ldr	r2, [r7, #0]
 8007cfc:	430a      	orrs	r2, r1
 8007cfe:	615a      	str	r2, [r3, #20]
  }
}
 8007d00:	bf00      	nop
 8007d02:	370c      	adds	r7, #12
 8007d04:	46bd      	mov	sp, r7
 8007d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0a:	4770      	bx	lr
 8007d0c:	40008000 	.word	0x40008000

08007d10 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
 8007d16:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a18      	ldr	r2, [pc, #96]	@ (8007d80 <HAL_UART_EnableReceiverTimeout+0x70>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d027      	beq.n	8007d72 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d28:	2b20      	cmp	r3, #32
 8007d2a:	d120      	bne.n	8007d6e <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d32:	2b01      	cmp	r3, #1
 8007d34:	d101      	bne.n	8007d3a <HAL_UART_EnableReceiverTimeout+0x2a>
 8007d36:	2302      	movs	r3, #2
 8007d38:	e01c      	b.n	8007d74 <HAL_UART_EnableReceiverTimeout+0x64>
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2201      	movs	r2, #1
 8007d3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2224      	movs	r2, #36	@ 0x24
 8007d46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	685a      	ldr	r2, [r3, #4]
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8007d58:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2220      	movs	r2, #32
 8007d5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	e002      	b.n	8007d74 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8007d6e:	2302      	movs	r3, #2
 8007d70:	e000      	b.n	8007d74 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8007d72:	2301      	movs	r3, #1
  }
}
 8007d74:	4618      	mov	r0, r3
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr
 8007d80:	40008000 	.word	0x40008000

08007d84 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8007d84:	b480      	push	{r7}
 8007d86:	b083      	sub	sp, #12
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8007d92:	4618      	mov	r0, r3
 8007d94:	370c      	adds	r7, #12
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr
	...

08007da0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b083      	sub	sp, #12
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a1a      	ldr	r2, [pc, #104]	@ (8007e14 <UART_InitCallbacksToDefault+0x74>)
 8007dac:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a19      	ldr	r2, [pc, #100]	@ (8007e18 <UART_InitCallbacksToDefault+0x78>)
 8007db4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	4a18      	ldr	r2, [pc, #96]	@ (8007e1c <UART_InitCallbacksToDefault+0x7c>)
 8007dbc:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a17      	ldr	r2, [pc, #92]	@ (8007e20 <UART_InitCallbacksToDefault+0x80>)
 8007dc4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a16      	ldr	r2, [pc, #88]	@ (8007e24 <UART_InitCallbacksToDefault+0x84>)
 8007dcc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a15      	ldr	r2, [pc, #84]	@ (8007e28 <UART_InitCallbacksToDefault+0x88>)
 8007dd4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	4a14      	ldr	r2, [pc, #80]	@ (8007e2c <UART_InitCallbacksToDefault+0x8c>)
 8007ddc:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	4a13      	ldr	r2, [pc, #76]	@ (8007e30 <UART_InitCallbacksToDefault+0x90>)
 8007de4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	4a12      	ldr	r2, [pc, #72]	@ (8007e34 <UART_InitCallbacksToDefault+0x94>)
 8007dec:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	4a11      	ldr	r2, [pc, #68]	@ (8007e38 <UART_InitCallbacksToDefault+0x98>)
 8007df4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	4a10      	ldr	r2, [pc, #64]	@ (8007e3c <UART_InitCallbacksToDefault+0x9c>)
 8007dfc:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	4a0f      	ldr	r2, [pc, #60]	@ (8007e40 <UART_InitCallbacksToDefault+0xa0>)
 8007e04:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	08007c35 	.word	0x08007c35
 8007e18:	08007c21 	.word	0x08007c21
 8007e1c:	08007c5d 	.word	0x08007c5d
 8007e20:	08007c49 	.word	0x08007c49
 8007e24:	08007c71 	.word	0x08007c71
 8007e28:	08007c85 	.word	0x08007c85
 8007e2c:	08007c99 	.word	0x08007c99
 8007e30:	08007cad 	.word	0x08007cad
 8007e34:	08008d91 	.word	0x08008d91
 8007e38:	08008da5 	.word	0x08008da5
 8007e3c:	08008db9 	.word	0x08008db9
 8007e40:	08007cc1 	.word	0x08007cc1

08007e44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e48:	b08c      	sub	sp, #48	@ 0x30
 8007e4a:	af00      	add	r7, sp, #0
 8007e4c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e4e:	2300      	movs	r3, #0
 8007e50:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	689a      	ldr	r2, [r3, #8]
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	691b      	ldr	r3, [r3, #16]
 8007e5c:	431a      	orrs	r2, r3
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	695b      	ldr	r3, [r3, #20]
 8007e62:	431a      	orrs	r2, r3
 8007e64:	697b      	ldr	r3, [r7, #20]
 8007e66:	69db      	ldr	r3, [r3, #28]
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	681a      	ldr	r2, [r3, #0]
 8007e72:	4baa      	ldr	r3, [pc, #680]	@ (800811c <UART_SetConfig+0x2d8>)
 8007e74:	4013      	ands	r3, r2
 8007e76:	697a      	ldr	r2, [r7, #20]
 8007e78:	6812      	ldr	r2, [r2, #0]
 8007e7a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007e7c:	430b      	orrs	r3, r1
 8007e7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	68da      	ldr	r2, [r3, #12]
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	430a      	orrs	r2, r1
 8007e94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	699b      	ldr	r3, [r3, #24]
 8007e9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a9f      	ldr	r2, [pc, #636]	@ (8008120 <UART_SetConfig+0x2dc>)
 8007ea2:	4293      	cmp	r3, r2
 8007ea4:	d004      	beq.n	8007eb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	6a1b      	ldr	r3, [r3, #32]
 8007eaa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007eac:	4313      	orrs	r3, r2
 8007eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007eb0:	697b      	ldr	r3, [r7, #20]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007eba:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007ebe:	697a      	ldr	r2, [r7, #20]
 8007ec0:	6812      	ldr	r2, [r2, #0]
 8007ec2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ec4:	430b      	orrs	r3, r1
 8007ec6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ece:	f023 010f 	bic.w	r1, r3, #15
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	430a      	orrs	r2, r1
 8007edc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a90      	ldr	r2, [pc, #576]	@ (8008124 <UART_SetConfig+0x2e0>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d125      	bne.n	8007f34 <UART_SetConfig+0xf0>
 8007ee8:	4b8f      	ldr	r3, [pc, #572]	@ (8008128 <UART_SetConfig+0x2e4>)
 8007eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007eee:	f003 0303 	and.w	r3, r3, #3
 8007ef2:	2b03      	cmp	r3, #3
 8007ef4:	d81a      	bhi.n	8007f2c <UART_SetConfig+0xe8>
 8007ef6:	a201      	add	r2, pc, #4	@ (adr r2, 8007efc <UART_SetConfig+0xb8>)
 8007ef8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007efc:	08007f0d 	.word	0x08007f0d
 8007f00:	08007f1d 	.word	0x08007f1d
 8007f04:	08007f15 	.word	0x08007f15
 8007f08:	08007f25 	.word	0x08007f25
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f12:	e116      	b.n	8008142 <UART_SetConfig+0x2fe>
 8007f14:	2302      	movs	r3, #2
 8007f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f1a:	e112      	b.n	8008142 <UART_SetConfig+0x2fe>
 8007f1c:	2304      	movs	r3, #4
 8007f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f22:	e10e      	b.n	8008142 <UART_SetConfig+0x2fe>
 8007f24:	2308      	movs	r3, #8
 8007f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f2a:	e10a      	b.n	8008142 <UART_SetConfig+0x2fe>
 8007f2c:	2310      	movs	r3, #16
 8007f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f32:	e106      	b.n	8008142 <UART_SetConfig+0x2fe>
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a7c      	ldr	r2, [pc, #496]	@ (800812c <UART_SetConfig+0x2e8>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d138      	bne.n	8007fb0 <UART_SetConfig+0x16c>
 8007f3e:	4b7a      	ldr	r3, [pc, #488]	@ (8008128 <UART_SetConfig+0x2e4>)
 8007f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f44:	f003 030c 	and.w	r3, r3, #12
 8007f48:	2b0c      	cmp	r3, #12
 8007f4a:	d82d      	bhi.n	8007fa8 <UART_SetConfig+0x164>
 8007f4c:	a201      	add	r2, pc, #4	@ (adr r2, 8007f54 <UART_SetConfig+0x110>)
 8007f4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f52:	bf00      	nop
 8007f54:	08007f89 	.word	0x08007f89
 8007f58:	08007fa9 	.word	0x08007fa9
 8007f5c:	08007fa9 	.word	0x08007fa9
 8007f60:	08007fa9 	.word	0x08007fa9
 8007f64:	08007f99 	.word	0x08007f99
 8007f68:	08007fa9 	.word	0x08007fa9
 8007f6c:	08007fa9 	.word	0x08007fa9
 8007f70:	08007fa9 	.word	0x08007fa9
 8007f74:	08007f91 	.word	0x08007f91
 8007f78:	08007fa9 	.word	0x08007fa9
 8007f7c:	08007fa9 	.word	0x08007fa9
 8007f80:	08007fa9 	.word	0x08007fa9
 8007f84:	08007fa1 	.word	0x08007fa1
 8007f88:	2300      	movs	r3, #0
 8007f8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f8e:	e0d8      	b.n	8008142 <UART_SetConfig+0x2fe>
 8007f90:	2302      	movs	r3, #2
 8007f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f96:	e0d4      	b.n	8008142 <UART_SetConfig+0x2fe>
 8007f98:	2304      	movs	r3, #4
 8007f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f9e:	e0d0      	b.n	8008142 <UART_SetConfig+0x2fe>
 8007fa0:	2308      	movs	r3, #8
 8007fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fa6:	e0cc      	b.n	8008142 <UART_SetConfig+0x2fe>
 8007fa8:	2310      	movs	r3, #16
 8007faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fae:	e0c8      	b.n	8008142 <UART_SetConfig+0x2fe>
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	4a5e      	ldr	r2, [pc, #376]	@ (8008130 <UART_SetConfig+0x2ec>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d125      	bne.n	8008006 <UART_SetConfig+0x1c2>
 8007fba:	4b5b      	ldr	r3, [pc, #364]	@ (8008128 <UART_SetConfig+0x2e4>)
 8007fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fc0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8007fc4:	2b30      	cmp	r3, #48	@ 0x30
 8007fc6:	d016      	beq.n	8007ff6 <UART_SetConfig+0x1b2>
 8007fc8:	2b30      	cmp	r3, #48	@ 0x30
 8007fca:	d818      	bhi.n	8007ffe <UART_SetConfig+0x1ba>
 8007fcc:	2b20      	cmp	r3, #32
 8007fce:	d00a      	beq.n	8007fe6 <UART_SetConfig+0x1a2>
 8007fd0:	2b20      	cmp	r3, #32
 8007fd2:	d814      	bhi.n	8007ffe <UART_SetConfig+0x1ba>
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d002      	beq.n	8007fde <UART_SetConfig+0x19a>
 8007fd8:	2b10      	cmp	r3, #16
 8007fda:	d008      	beq.n	8007fee <UART_SetConfig+0x1aa>
 8007fdc:	e00f      	b.n	8007ffe <UART_SetConfig+0x1ba>
 8007fde:	2300      	movs	r3, #0
 8007fe0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fe4:	e0ad      	b.n	8008142 <UART_SetConfig+0x2fe>
 8007fe6:	2302      	movs	r3, #2
 8007fe8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fec:	e0a9      	b.n	8008142 <UART_SetConfig+0x2fe>
 8007fee:	2304      	movs	r3, #4
 8007ff0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ff4:	e0a5      	b.n	8008142 <UART_SetConfig+0x2fe>
 8007ff6:	2308      	movs	r3, #8
 8007ff8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ffc:	e0a1      	b.n	8008142 <UART_SetConfig+0x2fe>
 8007ffe:	2310      	movs	r3, #16
 8008000:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008004:	e09d      	b.n	8008142 <UART_SetConfig+0x2fe>
 8008006:	697b      	ldr	r3, [r7, #20]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	4a4a      	ldr	r2, [pc, #296]	@ (8008134 <UART_SetConfig+0x2f0>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d125      	bne.n	800805c <UART_SetConfig+0x218>
 8008010:	4b45      	ldr	r3, [pc, #276]	@ (8008128 <UART_SetConfig+0x2e4>)
 8008012:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008016:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800801a:	2bc0      	cmp	r3, #192	@ 0xc0
 800801c:	d016      	beq.n	800804c <UART_SetConfig+0x208>
 800801e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008020:	d818      	bhi.n	8008054 <UART_SetConfig+0x210>
 8008022:	2b80      	cmp	r3, #128	@ 0x80
 8008024:	d00a      	beq.n	800803c <UART_SetConfig+0x1f8>
 8008026:	2b80      	cmp	r3, #128	@ 0x80
 8008028:	d814      	bhi.n	8008054 <UART_SetConfig+0x210>
 800802a:	2b00      	cmp	r3, #0
 800802c:	d002      	beq.n	8008034 <UART_SetConfig+0x1f0>
 800802e:	2b40      	cmp	r3, #64	@ 0x40
 8008030:	d008      	beq.n	8008044 <UART_SetConfig+0x200>
 8008032:	e00f      	b.n	8008054 <UART_SetConfig+0x210>
 8008034:	2300      	movs	r3, #0
 8008036:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800803a:	e082      	b.n	8008142 <UART_SetConfig+0x2fe>
 800803c:	2302      	movs	r3, #2
 800803e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008042:	e07e      	b.n	8008142 <UART_SetConfig+0x2fe>
 8008044:	2304      	movs	r3, #4
 8008046:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800804a:	e07a      	b.n	8008142 <UART_SetConfig+0x2fe>
 800804c:	2308      	movs	r3, #8
 800804e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008052:	e076      	b.n	8008142 <UART_SetConfig+0x2fe>
 8008054:	2310      	movs	r3, #16
 8008056:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800805a:	e072      	b.n	8008142 <UART_SetConfig+0x2fe>
 800805c:	697b      	ldr	r3, [r7, #20]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	4a35      	ldr	r2, [pc, #212]	@ (8008138 <UART_SetConfig+0x2f4>)
 8008062:	4293      	cmp	r3, r2
 8008064:	d12a      	bne.n	80080bc <UART_SetConfig+0x278>
 8008066:	4b30      	ldr	r3, [pc, #192]	@ (8008128 <UART_SetConfig+0x2e4>)
 8008068:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800806c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008070:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008074:	d01a      	beq.n	80080ac <UART_SetConfig+0x268>
 8008076:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800807a:	d81b      	bhi.n	80080b4 <UART_SetConfig+0x270>
 800807c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008080:	d00c      	beq.n	800809c <UART_SetConfig+0x258>
 8008082:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008086:	d815      	bhi.n	80080b4 <UART_SetConfig+0x270>
 8008088:	2b00      	cmp	r3, #0
 800808a:	d003      	beq.n	8008094 <UART_SetConfig+0x250>
 800808c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008090:	d008      	beq.n	80080a4 <UART_SetConfig+0x260>
 8008092:	e00f      	b.n	80080b4 <UART_SetConfig+0x270>
 8008094:	2300      	movs	r3, #0
 8008096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800809a:	e052      	b.n	8008142 <UART_SetConfig+0x2fe>
 800809c:	2302      	movs	r3, #2
 800809e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080a2:	e04e      	b.n	8008142 <UART_SetConfig+0x2fe>
 80080a4:	2304      	movs	r3, #4
 80080a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080aa:	e04a      	b.n	8008142 <UART_SetConfig+0x2fe>
 80080ac:	2308      	movs	r3, #8
 80080ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080b2:	e046      	b.n	8008142 <UART_SetConfig+0x2fe>
 80080b4:	2310      	movs	r3, #16
 80080b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080ba:	e042      	b.n	8008142 <UART_SetConfig+0x2fe>
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	4a17      	ldr	r2, [pc, #92]	@ (8008120 <UART_SetConfig+0x2dc>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d13a      	bne.n	800813c <UART_SetConfig+0x2f8>
 80080c6:	4b18      	ldr	r3, [pc, #96]	@ (8008128 <UART_SetConfig+0x2e4>)
 80080c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080cc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80080d0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80080d4:	d01a      	beq.n	800810c <UART_SetConfig+0x2c8>
 80080d6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80080da:	d81b      	bhi.n	8008114 <UART_SetConfig+0x2d0>
 80080dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080e0:	d00c      	beq.n	80080fc <UART_SetConfig+0x2b8>
 80080e2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080e6:	d815      	bhi.n	8008114 <UART_SetConfig+0x2d0>
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d003      	beq.n	80080f4 <UART_SetConfig+0x2b0>
 80080ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080f0:	d008      	beq.n	8008104 <UART_SetConfig+0x2c0>
 80080f2:	e00f      	b.n	8008114 <UART_SetConfig+0x2d0>
 80080f4:	2300      	movs	r3, #0
 80080f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080fa:	e022      	b.n	8008142 <UART_SetConfig+0x2fe>
 80080fc:	2302      	movs	r3, #2
 80080fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008102:	e01e      	b.n	8008142 <UART_SetConfig+0x2fe>
 8008104:	2304      	movs	r3, #4
 8008106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800810a:	e01a      	b.n	8008142 <UART_SetConfig+0x2fe>
 800810c:	2308      	movs	r3, #8
 800810e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008112:	e016      	b.n	8008142 <UART_SetConfig+0x2fe>
 8008114:	2310      	movs	r3, #16
 8008116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800811a:	e012      	b.n	8008142 <UART_SetConfig+0x2fe>
 800811c:	cfff69f3 	.word	0xcfff69f3
 8008120:	40008000 	.word	0x40008000
 8008124:	40013800 	.word	0x40013800
 8008128:	40021000 	.word	0x40021000
 800812c:	40004400 	.word	0x40004400
 8008130:	40004800 	.word	0x40004800
 8008134:	40004c00 	.word	0x40004c00
 8008138:	40005000 	.word	0x40005000
 800813c:	2310      	movs	r3, #16
 800813e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008142:	697b      	ldr	r3, [r7, #20]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4aae      	ldr	r2, [pc, #696]	@ (8008400 <UART_SetConfig+0x5bc>)
 8008148:	4293      	cmp	r3, r2
 800814a:	f040 8097 	bne.w	800827c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800814e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008152:	2b08      	cmp	r3, #8
 8008154:	d823      	bhi.n	800819e <UART_SetConfig+0x35a>
 8008156:	a201      	add	r2, pc, #4	@ (adr r2, 800815c <UART_SetConfig+0x318>)
 8008158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800815c:	08008181 	.word	0x08008181
 8008160:	0800819f 	.word	0x0800819f
 8008164:	08008189 	.word	0x08008189
 8008168:	0800819f 	.word	0x0800819f
 800816c:	0800818f 	.word	0x0800818f
 8008170:	0800819f 	.word	0x0800819f
 8008174:	0800819f 	.word	0x0800819f
 8008178:	0800819f 	.word	0x0800819f
 800817c:	08008197 	.word	0x08008197
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008180:	f7fc fc8c 	bl	8004a9c <HAL_RCC_GetPCLK1Freq>
 8008184:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008186:	e010      	b.n	80081aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008188:	4b9e      	ldr	r3, [pc, #632]	@ (8008404 <UART_SetConfig+0x5c0>)
 800818a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800818c:	e00d      	b.n	80081aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800818e:	f7fc fc17 	bl	80049c0 <HAL_RCC_GetSysClockFreq>
 8008192:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008194:	e009      	b.n	80081aa <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008196:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800819a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800819c:	e005      	b.n	80081aa <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800819e:	2300      	movs	r3, #0
 80081a0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80081a2:	2301      	movs	r3, #1
 80081a4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80081a8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80081aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f000 8130 	beq.w	8008412 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80081b2:	697b      	ldr	r3, [r7, #20]
 80081b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081b6:	4a94      	ldr	r2, [pc, #592]	@ (8008408 <UART_SetConfig+0x5c4>)
 80081b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081bc:	461a      	mov	r2, r3
 80081be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80081c4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	685a      	ldr	r2, [r3, #4]
 80081ca:	4613      	mov	r3, r2
 80081cc:	005b      	lsls	r3, r3, #1
 80081ce:	4413      	add	r3, r2
 80081d0:	69ba      	ldr	r2, [r7, #24]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d305      	bcc.n	80081e2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	685b      	ldr	r3, [r3, #4]
 80081da:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081dc:	69ba      	ldr	r2, [r7, #24]
 80081de:	429a      	cmp	r2, r3
 80081e0:	d903      	bls.n	80081ea <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80081e2:	2301      	movs	r3, #1
 80081e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80081e8:	e113      	b.n	8008412 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081ec:	2200      	movs	r2, #0
 80081ee:	60bb      	str	r3, [r7, #8]
 80081f0:	60fa      	str	r2, [r7, #12]
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081f6:	4a84      	ldr	r2, [pc, #528]	@ (8008408 <UART_SetConfig+0x5c4>)
 80081f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081fc:	b29b      	uxth	r3, r3
 80081fe:	2200      	movs	r2, #0
 8008200:	603b      	str	r3, [r7, #0]
 8008202:	607a      	str	r2, [r7, #4]
 8008204:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008208:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800820c:	f7f8 fcd2 	bl	8000bb4 <__aeabi_uldivmod>
 8008210:	4602      	mov	r2, r0
 8008212:	460b      	mov	r3, r1
 8008214:	4610      	mov	r0, r2
 8008216:	4619      	mov	r1, r3
 8008218:	f04f 0200 	mov.w	r2, #0
 800821c:	f04f 0300 	mov.w	r3, #0
 8008220:	020b      	lsls	r3, r1, #8
 8008222:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008226:	0202      	lsls	r2, r0, #8
 8008228:	6979      	ldr	r1, [r7, #20]
 800822a:	6849      	ldr	r1, [r1, #4]
 800822c:	0849      	lsrs	r1, r1, #1
 800822e:	2000      	movs	r0, #0
 8008230:	460c      	mov	r4, r1
 8008232:	4605      	mov	r5, r0
 8008234:	eb12 0804 	adds.w	r8, r2, r4
 8008238:	eb43 0905 	adc.w	r9, r3, r5
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	2200      	movs	r2, #0
 8008242:	469a      	mov	sl, r3
 8008244:	4693      	mov	fp, r2
 8008246:	4652      	mov	r2, sl
 8008248:	465b      	mov	r3, fp
 800824a:	4640      	mov	r0, r8
 800824c:	4649      	mov	r1, r9
 800824e:	f7f8 fcb1 	bl	8000bb4 <__aeabi_uldivmod>
 8008252:	4602      	mov	r2, r0
 8008254:	460b      	mov	r3, r1
 8008256:	4613      	mov	r3, r2
 8008258:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800825a:	6a3b      	ldr	r3, [r7, #32]
 800825c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008260:	d308      	bcc.n	8008274 <UART_SetConfig+0x430>
 8008262:	6a3b      	ldr	r3, [r7, #32]
 8008264:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008268:	d204      	bcs.n	8008274 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	6a3a      	ldr	r2, [r7, #32]
 8008270:	60da      	str	r2, [r3, #12]
 8008272:	e0ce      	b.n	8008412 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800827a:	e0ca      	b.n	8008412 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	69db      	ldr	r3, [r3, #28]
 8008280:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008284:	d166      	bne.n	8008354 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8008286:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800828a:	2b08      	cmp	r3, #8
 800828c:	d827      	bhi.n	80082de <UART_SetConfig+0x49a>
 800828e:	a201      	add	r2, pc, #4	@ (adr r2, 8008294 <UART_SetConfig+0x450>)
 8008290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008294:	080082b9 	.word	0x080082b9
 8008298:	080082c1 	.word	0x080082c1
 800829c:	080082c9 	.word	0x080082c9
 80082a0:	080082df 	.word	0x080082df
 80082a4:	080082cf 	.word	0x080082cf
 80082a8:	080082df 	.word	0x080082df
 80082ac:	080082df 	.word	0x080082df
 80082b0:	080082df 	.word	0x080082df
 80082b4:	080082d7 	.word	0x080082d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80082b8:	f7fc fbf0 	bl	8004a9c <HAL_RCC_GetPCLK1Freq>
 80082bc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082be:	e014      	b.n	80082ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80082c0:	f7fc fc02 	bl	8004ac8 <HAL_RCC_GetPCLK2Freq>
 80082c4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082c6:	e010      	b.n	80082ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80082c8:	4b4e      	ldr	r3, [pc, #312]	@ (8008404 <UART_SetConfig+0x5c0>)
 80082ca:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80082cc:	e00d      	b.n	80082ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082ce:	f7fc fb77 	bl	80049c0 <HAL_RCC_GetSysClockFreq>
 80082d2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082d4:	e009      	b.n	80082ea <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082d6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082da:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80082dc:	e005      	b.n	80082ea <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80082de:	2300      	movs	r3, #0
 80082e0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80082e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80082ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	f000 8090 	beq.w	8008412 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082f6:	4a44      	ldr	r2, [pc, #272]	@ (8008408 <UART_SetConfig+0x5c4>)
 80082f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082fc:	461a      	mov	r2, r3
 80082fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008300:	fbb3 f3f2 	udiv	r3, r3, r2
 8008304:	005a      	lsls	r2, r3, #1
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	685b      	ldr	r3, [r3, #4]
 800830a:	085b      	lsrs	r3, r3, #1
 800830c:	441a      	add	r2, r3
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	685b      	ldr	r3, [r3, #4]
 8008312:	fbb2 f3f3 	udiv	r3, r2, r3
 8008316:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008318:	6a3b      	ldr	r3, [r7, #32]
 800831a:	2b0f      	cmp	r3, #15
 800831c:	d916      	bls.n	800834c <UART_SetConfig+0x508>
 800831e:	6a3b      	ldr	r3, [r7, #32]
 8008320:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008324:	d212      	bcs.n	800834c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008326:	6a3b      	ldr	r3, [r7, #32]
 8008328:	b29b      	uxth	r3, r3
 800832a:	f023 030f 	bic.w	r3, r3, #15
 800832e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008330:	6a3b      	ldr	r3, [r7, #32]
 8008332:	085b      	lsrs	r3, r3, #1
 8008334:	b29b      	uxth	r3, r3
 8008336:	f003 0307 	and.w	r3, r3, #7
 800833a:	b29a      	uxth	r2, r3
 800833c:	8bfb      	ldrh	r3, [r7, #30]
 800833e:	4313      	orrs	r3, r2
 8008340:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008342:	697b      	ldr	r3, [r7, #20]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	8bfa      	ldrh	r2, [r7, #30]
 8008348:	60da      	str	r2, [r3, #12]
 800834a:	e062      	b.n	8008412 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 800834c:	2301      	movs	r3, #1
 800834e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008352:	e05e      	b.n	8008412 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008354:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008358:	2b08      	cmp	r3, #8
 800835a:	d828      	bhi.n	80083ae <UART_SetConfig+0x56a>
 800835c:	a201      	add	r2, pc, #4	@ (adr r2, 8008364 <UART_SetConfig+0x520>)
 800835e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008362:	bf00      	nop
 8008364:	08008389 	.word	0x08008389
 8008368:	08008391 	.word	0x08008391
 800836c:	08008399 	.word	0x08008399
 8008370:	080083af 	.word	0x080083af
 8008374:	0800839f 	.word	0x0800839f
 8008378:	080083af 	.word	0x080083af
 800837c:	080083af 	.word	0x080083af
 8008380:	080083af 	.word	0x080083af
 8008384:	080083a7 	.word	0x080083a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008388:	f7fc fb88 	bl	8004a9c <HAL_RCC_GetPCLK1Freq>
 800838c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800838e:	e014      	b.n	80083ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008390:	f7fc fb9a 	bl	8004ac8 <HAL_RCC_GetPCLK2Freq>
 8008394:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008396:	e010      	b.n	80083ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008398:	4b1a      	ldr	r3, [pc, #104]	@ (8008404 <UART_SetConfig+0x5c0>)
 800839a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800839c:	e00d      	b.n	80083ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800839e:	f7fc fb0f 	bl	80049c0 <HAL_RCC_GetSysClockFreq>
 80083a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083a4:	e009      	b.n	80083ba <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80083a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80083aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80083ac:	e005      	b.n	80083ba <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80083ae:	2300      	movs	r3, #0
 80083b0:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80083b2:	2301      	movs	r3, #1
 80083b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80083b8:	bf00      	nop
    }

    if (pclk != 0U)
 80083ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d028      	beq.n	8008412 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083c0:	697b      	ldr	r3, [r7, #20]
 80083c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083c4:	4a10      	ldr	r2, [pc, #64]	@ (8008408 <UART_SetConfig+0x5c4>)
 80083c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083ca:	461a      	mov	r2, r3
 80083cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	685b      	ldr	r3, [r3, #4]
 80083d6:	085b      	lsrs	r3, r3, #1
 80083d8:	441a      	add	r2, r3
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	fbb2 f3f3 	udiv	r3, r2, r3
 80083e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083e4:	6a3b      	ldr	r3, [r7, #32]
 80083e6:	2b0f      	cmp	r3, #15
 80083e8:	d910      	bls.n	800840c <UART_SetConfig+0x5c8>
 80083ea:	6a3b      	ldr	r3, [r7, #32]
 80083ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083f0:	d20c      	bcs.n	800840c <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80083f2:	6a3b      	ldr	r3, [r7, #32]
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	60da      	str	r2, [r3, #12]
 80083fc:	e009      	b.n	8008412 <UART_SetConfig+0x5ce>
 80083fe:	bf00      	nop
 8008400:	40008000 	.word	0x40008000
 8008404:	00f42400 	.word	0x00f42400
 8008408:	08009078 	.word	0x08009078
      }
      else
      {
        ret = HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008412:	697b      	ldr	r3, [r7, #20]
 8008414:	2201      	movs	r2, #1
 8008416:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	2201      	movs	r2, #1
 800841e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	2200      	movs	r2, #0
 8008426:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	2200      	movs	r2, #0
 800842c:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800842e:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8008432:	4618      	mov	r0, r3
 8008434:	3730      	adds	r7, #48	@ 0x30
 8008436:	46bd      	mov	sp, r7
 8008438:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800843c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800843c:	b480      	push	{r7}
 800843e:	b083      	sub	sp, #12
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008448:	f003 0308 	and.w	r3, r3, #8
 800844c:	2b00      	cmp	r3, #0
 800844e:	d00a      	beq.n	8008466 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	430a      	orrs	r2, r1
 8008464:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800846a:	f003 0301 	and.w	r3, r3, #1
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00a      	beq.n	8008488 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	430a      	orrs	r2, r1
 8008486:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800848c:	f003 0302 	and.w	r3, r3, #2
 8008490:	2b00      	cmp	r3, #0
 8008492:	d00a      	beq.n	80084aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	430a      	orrs	r2, r1
 80084a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ae:	f003 0304 	and.w	r3, r3, #4
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d00a      	beq.n	80084cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	685b      	ldr	r3, [r3, #4]
 80084bc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	430a      	orrs	r2, r1
 80084ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084d0:	f003 0310 	and.w	r3, r3, #16
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d00a      	beq.n	80084ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	430a      	orrs	r2, r1
 80084ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084f2:	f003 0320 	and.w	r3, r3, #32
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d00a      	beq.n	8008510 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	689b      	ldr	r3, [r3, #8]
 8008500:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	430a      	orrs	r2, r1
 800850e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008518:	2b00      	cmp	r3, #0
 800851a:	d01a      	beq.n	8008552 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	430a      	orrs	r2, r1
 8008530:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008536:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800853a:	d10a      	bne.n	8008552 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	430a      	orrs	r2, r1
 8008550:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008556:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800855a:	2b00      	cmp	r3, #0
 800855c:	d00a      	beq.n	8008574 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	430a      	orrs	r2, r1
 8008572:	605a      	str	r2, [r3, #4]
  }
}
 8008574:	bf00      	nop
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b098      	sub	sp, #96	@ 0x60
 8008584:	af02      	add	r7, sp, #8
 8008586:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2200      	movs	r2, #0
 800858c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008590:	f7fa fee2 	bl	8003358 <HAL_GetTick>
 8008594:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f003 0308 	and.w	r3, r3, #8
 80085a0:	2b08      	cmp	r3, #8
 80085a2:	d12f      	bne.n	8008604 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80085a8:	9300      	str	r3, [sp, #0]
 80085aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80085ac:	2200      	movs	r2, #0
 80085ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 f88e 	bl	80086d4 <UART_WaitOnFlagUntilTimeout>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d022      	beq.n	8008604 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085c6:	e853 3f00 	ldrex	r3, [r3]
 80085ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80085cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80085ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80085d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	461a      	mov	r2, r3
 80085da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80085dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80085de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80085e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80085e4:	e841 2300 	strex	r3, r2, [r1]
 80085e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80085ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d1e6      	bne.n	80085be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2220      	movs	r2, #32
 80085f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2200      	movs	r2, #0
 80085fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008600:	2303      	movs	r3, #3
 8008602:	e063      	b.n	80086cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f003 0304 	and.w	r3, r3, #4
 800860e:	2b04      	cmp	r3, #4
 8008610:	d149      	bne.n	80086a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008612:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008616:	9300      	str	r3, [sp, #0]
 8008618:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800861a:	2200      	movs	r2, #0
 800861c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 f857 	bl	80086d4 <UART_WaitOnFlagUntilTimeout>
 8008626:	4603      	mov	r3, r0
 8008628:	2b00      	cmp	r3, #0
 800862a:	d03c      	beq.n	80086a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008634:	e853 3f00 	ldrex	r3, [r3]
 8008638:	623b      	str	r3, [r7, #32]
   return(result);
 800863a:	6a3b      	ldr	r3, [r7, #32]
 800863c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008640:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	461a      	mov	r2, r3
 8008648:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800864a:	633b      	str	r3, [r7, #48]	@ 0x30
 800864c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800864e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008650:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008652:	e841 2300 	strex	r3, r2, [r1]
 8008656:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008658:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1e6      	bne.n	800862c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	3308      	adds	r3, #8
 8008664:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008666:	693b      	ldr	r3, [r7, #16]
 8008668:	e853 3f00 	ldrex	r3, [r3]
 800866c:	60fb      	str	r3, [r7, #12]
   return(result);
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	f023 0301 	bic.w	r3, r3, #1
 8008674:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	3308      	adds	r3, #8
 800867c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800867e:	61fa      	str	r2, [r7, #28]
 8008680:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008682:	69b9      	ldr	r1, [r7, #24]
 8008684:	69fa      	ldr	r2, [r7, #28]
 8008686:	e841 2300 	strex	r3, r2, [r1]
 800868a:	617b      	str	r3, [r7, #20]
   return(result);
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d1e5      	bne.n	800865e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2220      	movs	r2, #32
 8008696:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80086a2:	2303      	movs	r3, #3
 80086a4:	e012      	b.n	80086cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2220      	movs	r2, #32
 80086aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	2220      	movs	r2, #32
 80086b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	2200      	movs	r2, #0
 80086ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	2200      	movs	r2, #0
 80086c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80086ca:	2300      	movs	r3, #0
}
 80086cc:	4618      	mov	r0, r3
 80086ce:	3758      	adds	r7, #88	@ 0x58
 80086d0:	46bd      	mov	sp, r7
 80086d2:	bd80      	pop	{r7, pc}

080086d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	b084      	sub	sp, #16
 80086d8:	af00      	add	r7, sp, #0
 80086da:	60f8      	str	r0, [r7, #12]
 80086dc:	60b9      	str	r1, [r7, #8]
 80086de:	603b      	str	r3, [r7, #0]
 80086e0:	4613      	mov	r3, r2
 80086e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80086e4:	e04f      	b.n	8008786 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80086e6:	69bb      	ldr	r3, [r7, #24]
 80086e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086ec:	d04b      	beq.n	8008786 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80086ee:	f7fa fe33 	bl	8003358 <HAL_GetTick>
 80086f2:	4602      	mov	r2, r0
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	69ba      	ldr	r2, [r7, #24]
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d302      	bcc.n	8008704 <UART_WaitOnFlagUntilTimeout+0x30>
 80086fe:	69bb      	ldr	r3, [r7, #24]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d101      	bne.n	8008708 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008704:	2303      	movs	r3, #3
 8008706:	e04e      	b.n	80087a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	f003 0304 	and.w	r3, r3, #4
 8008712:	2b00      	cmp	r3, #0
 8008714:	d037      	beq.n	8008786 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008716:	68bb      	ldr	r3, [r7, #8]
 8008718:	2b80      	cmp	r3, #128	@ 0x80
 800871a:	d034      	beq.n	8008786 <UART_WaitOnFlagUntilTimeout+0xb2>
 800871c:	68bb      	ldr	r3, [r7, #8]
 800871e:	2b40      	cmp	r3, #64	@ 0x40
 8008720:	d031      	beq.n	8008786 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	69db      	ldr	r3, [r3, #28]
 8008728:	f003 0308 	and.w	r3, r3, #8
 800872c:	2b08      	cmp	r3, #8
 800872e:	d110      	bne.n	8008752 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2208      	movs	r2, #8
 8008736:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008738:	68f8      	ldr	r0, [r7, #12]
 800873a:	f000 f920 	bl	800897e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	2208      	movs	r2, #8
 8008742:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	2200      	movs	r2, #0
 800874a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800874e:	2301      	movs	r3, #1
 8008750:	e029      	b.n	80087a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	69db      	ldr	r3, [r3, #28]
 8008758:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800875c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008760:	d111      	bne.n	8008786 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800876a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800876c:	68f8      	ldr	r0, [r7, #12]
 800876e:	f000 f906 	bl	800897e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2220      	movs	r2, #32
 8008776:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	2200      	movs	r2, #0
 800877e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008782:	2303      	movs	r3, #3
 8008784:	e00f      	b.n	80087a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	69da      	ldr	r2, [r3, #28]
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	4013      	ands	r3, r2
 8008790:	68ba      	ldr	r2, [r7, #8]
 8008792:	429a      	cmp	r2, r3
 8008794:	bf0c      	ite	eq
 8008796:	2301      	moveq	r3, #1
 8008798:	2300      	movne	r3, #0
 800879a:	b2db      	uxtb	r3, r3
 800879c:	461a      	mov	r2, r3
 800879e:	79fb      	ldrb	r3, [r7, #7]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d0a0      	beq.n	80086e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80087a4:	2300      	movs	r3, #0
}
 80087a6:	4618      	mov	r0, r3
 80087a8:	3710      	adds	r7, #16
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
	...

080087b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b096      	sub	sp, #88	@ 0x58
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	60f8      	str	r0, [r7, #12]
 80087b8:	60b9      	str	r1, [r7, #8]
 80087ba:	4613      	mov	r3, r2
 80087bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	68ba      	ldr	r2, [r7, #8]
 80087c2:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	88fa      	ldrh	r2, [r7, #6]
 80087c8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2200      	movs	r2, #0
 80087d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	2222      	movs	r2, #34	@ 0x22
 80087d8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d02d      	beq.n	8008842 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087ec:	4a40      	ldr	r2, [pc, #256]	@ (80088f0 <UART_Start_Receive_DMA+0x140>)
 80087ee:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80087f6:	4a3f      	ldr	r2, [pc, #252]	@ (80088f4 <UART_Start_Receive_DMA+0x144>)
 80087f8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008800:	4a3d      	ldr	r2, [pc, #244]	@ (80088f8 <UART_Start_Receive_DMA+0x148>)
 8008802:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800880a:	2200      	movs	r2, #0
 800880c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	3324      	adds	r3, #36	@ 0x24
 800881a:	4619      	mov	r1, r3
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008820:	461a      	mov	r2, r3
 8008822:	88fb      	ldrh	r3, [r7, #6]
 8008824:	f7fa ff5c 	bl	80036e0 <HAL_DMA_Start_IT>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	d009      	beq.n	8008842 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2210      	movs	r2, #16
 8008832:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2220      	movs	r2, #32
 800883a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800883e:	2301      	movs	r3, #1
 8008840:	e051      	b.n	80088e6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008842:	68fb      	ldr	r3, [r7, #12]
 8008844:	691b      	ldr	r3, [r3, #16]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d018      	beq.n	800887c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008850:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008852:	e853 3f00 	ldrex	r3, [r3]
 8008856:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800885a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800885e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	461a      	mov	r2, r3
 8008866:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008868:	64bb      	str	r3, [r7, #72]	@ 0x48
 800886a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800886c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800886e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008870:	e841 2300 	strex	r3, r2, [r1]
 8008874:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008876:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008878:	2b00      	cmp	r3, #0
 800887a:	d1e6      	bne.n	800884a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	3308      	adds	r3, #8
 8008882:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008886:	e853 3f00 	ldrex	r3, [r3]
 800888a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800888c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800888e:	f043 0301 	orr.w	r3, r3, #1
 8008892:	653b      	str	r3, [r7, #80]	@ 0x50
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	3308      	adds	r3, #8
 800889a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800889c:	637a      	str	r2, [r7, #52]	@ 0x34
 800889e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088a0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80088a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80088a4:	e841 2300 	strex	r3, r2, [r1]
 80088a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80088aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1e5      	bne.n	800887c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	3308      	adds	r3, #8
 80088b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b8:	697b      	ldr	r3, [r7, #20]
 80088ba:	e853 3f00 	ldrex	r3, [r3]
 80088be:	613b      	str	r3, [r7, #16]
   return(result);
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	3308      	adds	r3, #8
 80088ce:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80088d0:	623a      	str	r2, [r7, #32]
 80088d2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d4:	69f9      	ldr	r1, [r7, #28]
 80088d6:	6a3a      	ldr	r2, [r7, #32]
 80088d8:	e841 2300 	strex	r3, r2, [r1]
 80088dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1e5      	bne.n	80088b0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80088e4:	2300      	movs	r3, #0
}
 80088e6:	4618      	mov	r0, r3
 80088e8:	3758      	adds	r7, #88	@ 0x58
 80088ea:	46bd      	mov	sp, r7
 80088ec:	bd80      	pop	{r7, pc}
 80088ee:	bf00      	nop
 80088f0:	08008b09 	.word	0x08008b09
 80088f4:	08008c3d 	.word	0x08008c3d
 80088f8:	08008c83 	.word	0x08008c83

080088fc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80088fc:	b480      	push	{r7}
 80088fe:	b08f      	sub	sp, #60	@ 0x3c
 8008900:	af00      	add	r7, sp, #0
 8008902:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890a:	6a3b      	ldr	r3, [r7, #32]
 800890c:	e853 3f00 	ldrex	r3, [r3]
 8008910:	61fb      	str	r3, [r7, #28]
   return(result);
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008918:	637b      	str	r3, [r7, #52]	@ 0x34
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	461a      	mov	r2, r3
 8008920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008922:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008924:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008926:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008928:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800892a:	e841 2300 	strex	r3, r2, [r1]
 800892e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008930:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008932:	2b00      	cmp	r3, #0
 8008934:	d1e6      	bne.n	8008904 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	3308      	adds	r3, #8
 800893c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	e853 3f00 	ldrex	r3, [r3]
 8008944:	60bb      	str	r3, [r7, #8]
   return(result);
 8008946:	68bb      	ldr	r3, [r7, #8]
 8008948:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800894c:	633b      	str	r3, [r7, #48]	@ 0x30
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	3308      	adds	r3, #8
 8008954:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008956:	61ba      	str	r2, [r7, #24]
 8008958:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895a:	6979      	ldr	r1, [r7, #20]
 800895c:	69ba      	ldr	r2, [r7, #24]
 800895e:	e841 2300 	strex	r3, r2, [r1]
 8008962:	613b      	str	r3, [r7, #16]
   return(result);
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d1e5      	bne.n	8008936 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	2220      	movs	r2, #32
 800896e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008972:	bf00      	nop
 8008974:	373c      	adds	r7, #60	@ 0x3c
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr

0800897e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800897e:	b480      	push	{r7}
 8008980:	b095      	sub	sp, #84	@ 0x54
 8008982:	af00      	add	r7, sp, #0
 8008984:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800898c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800898e:	e853 3f00 	ldrex	r3, [r3]
 8008992:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008996:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800899a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	461a      	mov	r2, r3
 80089a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80089a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80089a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80089aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80089ac:	e841 2300 	strex	r3, r2, [r1]
 80089b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80089b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d1e6      	bne.n	8008986 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	3308      	adds	r3, #8
 80089be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089c0:	6a3b      	ldr	r3, [r7, #32]
 80089c2:	e853 3f00 	ldrex	r3, [r3]
 80089c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80089c8:	69fb      	ldr	r3, [r7, #28]
 80089ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80089ce:	f023 0301 	bic.w	r3, r3, #1
 80089d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	3308      	adds	r3, #8
 80089da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80089dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80089de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80089e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80089e4:	e841 2300 	strex	r3, r2, [r1]
 80089e8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80089ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d1e3      	bne.n	80089b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80089f4:	2b01      	cmp	r3, #1
 80089f6:	d118      	bne.n	8008a2a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	e853 3f00 	ldrex	r3, [r3]
 8008a04:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	f023 0310 	bic.w	r3, r3, #16
 8008a0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	461a      	mov	r2, r3
 8008a14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008a16:	61bb      	str	r3, [r7, #24]
 8008a18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1a:	6979      	ldr	r1, [r7, #20]
 8008a1c:	69ba      	ldr	r2, [r7, #24]
 8008a1e:	e841 2300 	strex	r3, r2, [r1]
 8008a22:	613b      	str	r3, [r7, #16]
   return(result);
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d1e6      	bne.n	80089f8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	2220      	movs	r2, #32
 8008a2e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008a3e:	bf00      	nop
 8008a40:	3754      	adds	r7, #84	@ 0x54
 8008a42:	46bd      	mov	sp, r7
 8008a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a48:	4770      	bx	lr

08008a4a <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008a4a:	b580      	push	{r7, lr}
 8008a4c:	b090      	sub	sp, #64	@ 0x40
 8008a4e:	af00      	add	r7, sp, #0
 8008a50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a56:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f003 0320 	and.w	r3, r3, #32
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d137      	bne.n	8008ad6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8008a66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a68:	2200      	movs	r2, #0
 8008a6a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	3308      	adds	r3, #8
 8008a74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008a78:	e853 3f00 	ldrex	r3, [r3]
 8008a7c:	623b      	str	r3, [r7, #32]
   return(result);
 8008a7e:	6a3b      	ldr	r3, [r7, #32]
 8008a80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a84:	63bb      	str	r3, [r7, #56]	@ 0x38
 8008a86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	3308      	adds	r3, #8
 8008a8c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008a8e:	633a      	str	r2, [r7, #48]	@ 0x30
 8008a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008a94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a96:	e841 2300 	strex	r3, r2, [r1]
 8008a9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d1e5      	bne.n	8008a6e <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008aa2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	e853 3f00 	ldrex	r3, [r3]
 8008aae:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ab6:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	461a      	mov	r2, r3
 8008abe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ac0:	61fb      	str	r3, [r7, #28]
 8008ac2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac4:	69b9      	ldr	r1, [r7, #24]
 8008ac6:	69fa      	ldr	r2, [r7, #28]
 8008ac8:	e841 2300 	strex	r3, r2, [r1]
 8008acc:	617b      	str	r3, [r7, #20]
   return(result);
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d1e6      	bne.n	8008aa2 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ad4:	e004      	b.n	8008ae0 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 8008ad6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ad8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008adc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8008ade:	4798      	blx	r3
}
 8008ae0:	bf00      	nop
 8008ae2:	3740      	adds	r7, #64	@ 0x40
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008af4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8008afc:	68f8      	ldr	r0, [r7, #12]
 8008afe:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b00:	bf00      	nop
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}

08008b08 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b09c      	sub	sp, #112	@ 0x70
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b14:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f003 0320 	and.w	r3, r3, #32
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d171      	bne.n	8008c08 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8008b24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b26:	2200      	movs	r2, #0
 8008b28:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b32:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b34:	e853 3f00 	ldrex	r3, [r3]
 8008b38:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008b3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008b3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008b40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008b42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	461a      	mov	r2, r3
 8008b48:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008b4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008b4c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b4e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008b50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008b52:	e841 2300 	strex	r3, r2, [r1]
 8008b56:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008b58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d1e6      	bne.n	8008b2c <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	3308      	adds	r3, #8
 8008b64:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b68:	e853 3f00 	ldrex	r3, [r3]
 8008b6c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008b6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b70:	f023 0301 	bic.w	r3, r3, #1
 8008b74:	667b      	str	r3, [r7, #100]	@ 0x64
 8008b76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	3308      	adds	r3, #8
 8008b7c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008b7e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008b80:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b82:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b86:	e841 2300 	strex	r3, r2, [r1]
 8008b8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1e5      	bne.n	8008b5e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	3308      	adds	r3, #8
 8008b98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b9c:	e853 3f00 	ldrex	r3, [r3]
 8008ba0:	623b      	str	r3, [r7, #32]
   return(result);
 8008ba2:	6a3b      	ldr	r3, [r7, #32]
 8008ba4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ba8:	663b      	str	r3, [r7, #96]	@ 0x60
 8008baa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	3308      	adds	r3, #8
 8008bb0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008bb2:	633a      	str	r2, [r7, #48]	@ 0x30
 8008bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008bb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008bba:	e841 2300 	strex	r3, r2, [r1]
 8008bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bc2:	2b00      	cmp	r3, #0
 8008bc4:	d1e5      	bne.n	8008b92 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008bc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bc8:	2220      	movs	r2, #32
 8008bca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bd0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bd2:	2b01      	cmp	r3, #1
 8008bd4:	d118      	bne.n	8008c08 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bd6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bdc:	693b      	ldr	r3, [r7, #16]
 8008bde:	e853 3f00 	ldrex	r3, [r3]
 8008be2:	60fb      	str	r3, [r7, #12]
   return(result);
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f023 0310 	bic.w	r3, r3, #16
 8008bea:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008bec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008bf4:	61fb      	str	r3, [r7, #28]
 8008bf6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bf8:	69b9      	ldr	r1, [r7, #24]
 8008bfa:	69fa      	ldr	r2, [r7, #28]
 8008bfc:	e841 2300 	strex	r3, r2, [r1]
 8008c00:	617b      	str	r3, [r7, #20]
   return(result);
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d1e6      	bne.n	8008bd6 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008c08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c0e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c12:	2b01      	cmp	r3, #1
 8008c14:	d109      	bne.n	8008c2a <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8008c16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008c1c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8008c1e:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8008c22:	4611      	mov	r1, r2
 8008c24:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008c26:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c28:	e004      	b.n	8008c34 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 8008c2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008c2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8008c30:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8008c32:	4798      	blx	r3
}
 8008c34:	bf00      	nop
 8008c36:	3770      	adds	r7, #112	@ 0x70
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c48:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	2201      	movs	r2, #1
 8008c4e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	d10b      	bne.n	8008c70 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8008c58:	68fb      	ldr	r3, [r7, #12]
 8008c5a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008c5e:	68fa      	ldr	r2, [r7, #12]
 8008c60:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8008c64:	0852      	lsrs	r2, r2, #1
 8008c66:	b292      	uxth	r2, r2
 8008c68:	4611      	mov	r1, r2
 8008c6a:	68f8      	ldr	r0, [r7, #12]
 8008c6c:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008c6e:	e004      	b.n	8008c7a <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8008c76:	68f8      	ldr	r0, [r7, #12]
 8008c78:	4798      	blx	r3
}
 8008c7a:	bf00      	nop
 8008c7c:	3710      	adds	r7, #16
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b086      	sub	sp, #24
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c8e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008c96:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8008c98:	697b      	ldr	r3, [r7, #20]
 8008c9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008c9e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8008ca0:	697b      	ldr	r3, [r7, #20]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	689b      	ldr	r3, [r3, #8]
 8008ca6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008caa:	2b80      	cmp	r3, #128	@ 0x80
 8008cac:	d109      	bne.n	8008cc2 <UART_DMAError+0x40>
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	2b21      	cmp	r3, #33	@ 0x21
 8008cb2:	d106      	bne.n	8008cc2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8008cb4:	697b      	ldr	r3, [r7, #20]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8008cbc:	6978      	ldr	r0, [r7, #20]
 8008cbe:	f7ff fe1d 	bl	80088fc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008ccc:	2b40      	cmp	r3, #64	@ 0x40
 8008cce:	d109      	bne.n	8008ce4 <UART_DMAError+0x62>
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	2b22      	cmp	r3, #34	@ 0x22
 8008cd4:	d106      	bne.n	8008ce4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8008cd6:	697b      	ldr	r3, [r7, #20]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8008cde:	6978      	ldr	r0, [r7, #20]
 8008ce0:	f7ff fe4d 	bl	800897e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008cea:	f043 0210 	orr.w	r2, r3, #16
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008cfa:	6978      	ldr	r0, [r7, #20]
 8008cfc:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cfe:	bf00      	nop
 8008d00:	3718      	adds	r7, #24
 8008d02:	46bd      	mov	sp, r7
 8008d04:	bd80      	pop	{r7, pc}

08008d06 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d06:	b580      	push	{r7, lr}
 8008d08:	b084      	sub	sp, #16
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d12:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	2200      	movs	r2, #0
 8008d18:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008d2a:	68f8      	ldr	r0, [r7, #12]
 8008d2c:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d2e:	bf00      	nop
 8008d30:	3710      	adds	r7, #16
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}

08008d36 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008d36:	b580      	push	{r7, lr}
 8008d38:	b088      	sub	sp, #32
 8008d3a:	af00      	add	r7, sp, #0
 8008d3c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	e853 3f00 	ldrex	r3, [r3]
 8008d4a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d4c:	68bb      	ldr	r3, [r7, #8]
 8008d4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d52:	61fb      	str	r3, [r7, #28]
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	461a      	mov	r2, r3
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	61bb      	str	r3, [r7, #24]
 8008d5e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d60:	6979      	ldr	r1, [r7, #20]
 8008d62:	69ba      	ldr	r2, [r7, #24]
 8008d64:	e841 2300 	strex	r3, r2, [r1]
 8008d68:	613b      	str	r3, [r7, #16]
   return(result);
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d1e6      	bne.n	8008d3e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2220      	movs	r2, #32
 8008d74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d88:	bf00      	nop
 8008d8a:	3720      	adds	r7, #32
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	bd80      	pop	{r7, pc}

08008d90 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008d90:	b480      	push	{r7}
 8008d92:	b083      	sub	sp, #12
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008d98:	bf00      	nop
 8008d9a:	370c      	adds	r7, #12
 8008d9c:	46bd      	mov	sp, r7
 8008d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008da2:	4770      	bx	lr

08008da4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008da4:	b480      	push	{r7}
 8008da6:	b083      	sub	sp, #12
 8008da8:	af00      	add	r7, sp, #0
 8008daa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008dac:	bf00      	nop
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008dc0:	bf00      	nop
 8008dc2:	370c      	adds	r7, #12
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008dcc:	b480      	push	{r7}
 8008dce:	b085      	sub	sp, #20
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008dda:	2b01      	cmp	r3, #1
 8008ddc:	d101      	bne.n	8008de2 <HAL_UARTEx_DisableFifoMode+0x16>
 8008dde:	2302      	movs	r3, #2
 8008de0:	e027      	b.n	8008e32 <HAL_UARTEx_DisableFifoMode+0x66>
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2201      	movs	r2, #1
 8008de6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	2224      	movs	r2, #36	@ 0x24
 8008dee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	f022 0201 	bic.w	r2, r2, #1
 8008e08:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008e10:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	68fa      	ldr	r2, [r7, #12]
 8008e1e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2220      	movs	r2, #32
 8008e24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2200      	movs	r2, #0
 8008e2c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008e30:	2300      	movs	r3, #0
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3714      	adds	r7, #20
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr

08008e3e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b084      	sub	sp, #16
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
 8008e46:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008e4e:	2b01      	cmp	r3, #1
 8008e50:	d101      	bne.n	8008e56 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008e52:	2302      	movs	r3, #2
 8008e54:	e02d      	b.n	8008eb2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2224      	movs	r2, #36	@ 0x24
 8008e62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	681a      	ldr	r2, [r3, #0]
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	f022 0201 	bic.w	r2, r2, #1
 8008e7c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	683a      	ldr	r2, [r7, #0]
 8008e8e:	430a      	orrs	r2, r1
 8008e90:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 f850 	bl	8008f38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	68fa      	ldr	r2, [r7, #12]
 8008e9e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2220      	movs	r2, #32
 8008ea4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3710      	adds	r7, #16
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b084      	sub	sp, #16
 8008ebe:	af00      	add	r7, sp, #0
 8008ec0:	6078      	str	r0, [r7, #4]
 8008ec2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008eca:	2b01      	cmp	r3, #1
 8008ecc:	d101      	bne.n	8008ed2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008ece:	2302      	movs	r3, #2
 8008ed0:	e02d      	b.n	8008f2e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2201      	movs	r2, #1
 8008ed6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	2224      	movs	r2, #36	@ 0x24
 8008ede:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	681a      	ldr	r2, [r3, #0]
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f022 0201 	bic.w	r2, r2, #1
 8008ef8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	689b      	ldr	r3, [r3, #8]
 8008f00:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	683a      	ldr	r2, [r7, #0]
 8008f0a:	430a      	orrs	r2, r1
 8008f0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 f812 	bl	8008f38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	68fa      	ldr	r2, [r7, #12]
 8008f1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2220      	movs	r2, #32
 8008f20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008f2c:	2300      	movs	r3, #0
}
 8008f2e:	4618      	mov	r0, r3
 8008f30:	3710      	adds	r7, #16
 8008f32:	46bd      	mov	sp, r7
 8008f34:	bd80      	pop	{r7, pc}
	...

08008f38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008f38:	b480      	push	{r7}
 8008f3a:	b085      	sub	sp, #20
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d108      	bne.n	8008f5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	2201      	movs	r2, #1
 8008f4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	2201      	movs	r2, #1
 8008f54:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008f58:	e031      	b.n	8008fbe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008f5a:	2308      	movs	r3, #8
 8008f5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008f5e:	2308      	movs	r3, #8
 8008f60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	689b      	ldr	r3, [r3, #8]
 8008f68:	0e5b      	lsrs	r3, r3, #25
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	f003 0307 	and.w	r3, r3, #7
 8008f70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	689b      	ldr	r3, [r3, #8]
 8008f78:	0f5b      	lsrs	r3, r3, #29
 8008f7a:	b2db      	uxtb	r3, r3
 8008f7c:	f003 0307 	and.w	r3, r3, #7
 8008f80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f82:	7bbb      	ldrb	r3, [r7, #14]
 8008f84:	7b3a      	ldrb	r2, [r7, #12]
 8008f86:	4911      	ldr	r1, [pc, #68]	@ (8008fcc <UARTEx_SetNbDataToProcess+0x94>)
 8008f88:	5c8a      	ldrb	r2, [r1, r2]
 8008f8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008f8e:	7b3a      	ldrb	r2, [r7, #12]
 8008f90:	490f      	ldr	r1, [pc, #60]	@ (8008fd0 <UARTEx_SetNbDataToProcess+0x98>)
 8008f92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008f94:	fb93 f3f2 	sdiv	r3, r3, r2
 8008f98:	b29a      	uxth	r2, r3
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008fa0:	7bfb      	ldrb	r3, [r7, #15]
 8008fa2:	7b7a      	ldrb	r2, [r7, #13]
 8008fa4:	4909      	ldr	r1, [pc, #36]	@ (8008fcc <UARTEx_SetNbDataToProcess+0x94>)
 8008fa6:	5c8a      	ldrb	r2, [r1, r2]
 8008fa8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008fac:	7b7a      	ldrb	r2, [r7, #13]
 8008fae:	4908      	ldr	r1, [pc, #32]	@ (8008fd0 <UARTEx_SetNbDataToProcess+0x98>)
 8008fb0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008fb2:	fb93 f3f2 	sdiv	r3, r3, r2
 8008fb6:	b29a      	uxth	r2, r3
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008fbe:	bf00      	nop
 8008fc0:	3714      	adds	r7, #20
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	08009090 	.word	0x08009090
 8008fd0:	08009098 	.word	0x08009098

08008fd4 <memset>:
 8008fd4:	4402      	add	r2, r0
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d100      	bne.n	8008fde <memset+0xa>
 8008fdc:	4770      	bx	lr
 8008fde:	f803 1b01 	strb.w	r1, [r3], #1
 8008fe2:	e7f9      	b.n	8008fd8 <memset+0x4>

08008fe4 <__libc_init_array>:
 8008fe4:	b570      	push	{r4, r5, r6, lr}
 8008fe6:	4d0d      	ldr	r5, [pc, #52]	@ (800901c <__libc_init_array+0x38>)
 8008fe8:	4c0d      	ldr	r4, [pc, #52]	@ (8009020 <__libc_init_array+0x3c>)
 8008fea:	1b64      	subs	r4, r4, r5
 8008fec:	10a4      	asrs	r4, r4, #2
 8008fee:	2600      	movs	r6, #0
 8008ff0:	42a6      	cmp	r6, r4
 8008ff2:	d109      	bne.n	8009008 <__libc_init_array+0x24>
 8008ff4:	4d0b      	ldr	r5, [pc, #44]	@ (8009024 <__libc_init_array+0x40>)
 8008ff6:	4c0c      	ldr	r4, [pc, #48]	@ (8009028 <__libc_init_array+0x44>)
 8008ff8:	f000 f826 	bl	8009048 <_init>
 8008ffc:	1b64      	subs	r4, r4, r5
 8008ffe:	10a4      	asrs	r4, r4, #2
 8009000:	2600      	movs	r6, #0
 8009002:	42a6      	cmp	r6, r4
 8009004:	d105      	bne.n	8009012 <__libc_init_array+0x2e>
 8009006:	bd70      	pop	{r4, r5, r6, pc}
 8009008:	f855 3b04 	ldr.w	r3, [r5], #4
 800900c:	4798      	blx	r3
 800900e:	3601      	adds	r6, #1
 8009010:	e7ee      	b.n	8008ff0 <__libc_init_array+0xc>
 8009012:	f855 3b04 	ldr.w	r3, [r5], #4
 8009016:	4798      	blx	r3
 8009018:	3601      	adds	r6, #1
 800901a:	e7f2      	b.n	8009002 <__libc_init_array+0x1e>
 800901c:	080090a8 	.word	0x080090a8
 8009020:	080090a8 	.word	0x080090a8
 8009024:	080090a8 	.word	0x080090a8
 8009028:	080090ac 	.word	0x080090ac

0800902c <memcpy>:
 800902c:	440a      	add	r2, r1
 800902e:	4291      	cmp	r1, r2
 8009030:	f100 33ff 	add.w	r3, r0, #4294967295
 8009034:	d100      	bne.n	8009038 <memcpy+0xc>
 8009036:	4770      	bx	lr
 8009038:	b510      	push	{r4, lr}
 800903a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800903e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009042:	4291      	cmp	r1, r2
 8009044:	d1f9      	bne.n	800903a <memcpy+0xe>
 8009046:	bd10      	pop	{r4, pc}

08009048 <_init>:
 8009048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800904a:	bf00      	nop
 800904c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800904e:	bc08      	pop	{r3}
 8009050:	469e      	mov	lr, r3
 8009052:	4770      	bx	lr

08009054 <_fini>:
 8009054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009056:	bf00      	nop
 8009058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800905a:	bc08      	pop	{r3}
 800905c:	469e      	mov	lr, r3
 800905e:	4770      	bx	lr
