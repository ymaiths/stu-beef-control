
MODBUS2024ALT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000621c  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080063f4  080063f4  000073f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006434  08006434  00008210  2**0
                  CONTENTS
  4 .ARM          00000008  08006434  08006434  00007434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800643c  0800643c  00008210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800643c  0800643c  0000743c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006440  08006440  00007440  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08006444  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a04  20000210  08006654  00008210  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c14  08006654  00008c14  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008210  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001566e  00000000  00000000  00008240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028d4  00000000  00000000  0001d8ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001120  00000000  00000000  00020188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d6e  00000000  00000000  000212a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000263d1  00000000  00000000  00022016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000147fc  00000000  00000000  000483e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc17c  00000000  00000000  0005cbe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00158d5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000048f8  00000000  00000000  00158da4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  0015d69c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000210 	.word	0x20000210
 80001f4:	00000000 	.word	0x00000000
 80001f8:	080063dc 	.word	0x080063dc

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000214 	.word	0x20000214
 8000214:	080063dc 	.word	0x080063dc

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 800050c:	4b0d      	ldr	r3, [pc, #52]	@ (8000544 <modbus_1t5_Timeout+0x3c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2201      	movs	r2, #1
 8000512:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000514:	4b0b      	ldr	r3, [pc, #44]	@ (8000544 <modbus_1t5_Timeout+0x3c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	691b      	ldr	r3, [r3, #16]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2200      	movs	r2, #0
 800051e:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000520:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <modbus_1t5_Timeout+0x3c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	691b      	ldr	r3, [r3, #16]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <modbus_1t5_Timeout+0x3c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	691b      	ldr	r3, [r3, #16]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f042 0201 	orr.w	r2, r2, #1
 8000536:	601a      	str	r2, [r3, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	2000022c 	.word	0x2000022c

08000548 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000550:	4b04      	ldr	r3, [pc, #16]	@ (8000564 <modbus_3t5_Timeout+0x1c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2201      	movs	r2, #1
 8000556:	755a      	strb	r2, [r3, #21]

}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	2000022c 	.word	0x2000022c

08000568 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f004 fdd1 	bl	8005118 <HAL_UART_GetError>
 8000576:	4603      	mov	r3, r0
 8000578:	2b20      	cmp	r3, #32
 800057a:	d101      	bne.n	8000580 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 800057c:	f7ff ffc4 	bl	8000508 <modbus_1t5_Timeout>

	}
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000592:	4a25      	ldr	r2, [pc, #148]	@ (8000628 <Modbus_init+0xa0>)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000598:	4b23      	ldr	r3, [pc, #140]	@ (8000628 <Modbus_init+0xa0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	683a      	ldr	r2, [r7, #0]
 800059e:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	691b      	ldr	r3, [r3, #16]
 80005a4:	4a21      	ldr	r2, [pc, #132]	@ (800062c <Modbus_init+0xa4>)
 80005a6:	210e      	movs	r1, #14
 80005a8:	4618      	mov	r0, r3
 80005aa:	f003 fbb7 	bl	8003d1c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	68db      	ldr	r3, [r3, #12]
 80005b2:	2110      	movs	r1, #16
 80005b4:	4618      	mov	r0, r3
 80005b6:	f004 fd59 	bl	800506c <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	4618      	mov	r0, r3
 80005c0:	f004 fd70 	bl	80050a4 <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	4a19      	ldr	r2, [pc, #100]	@ (8000630 <Modbus_init+0xa8>)
 80005ca:	2104      	movs	r1, #4
 80005cc:	4618      	mov	r0, r3
 80005ce:	f004 f837 	bl	8004640 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80005d2:	4b15      	ldr	r3, [pc, #84]	@ (8000628 <Modbus_init+0xa0>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80005d8:	4b13      	ldr	r3, [pc, #76]	@ (8000628 <Modbus_init+0xa0>)
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	4b12      	ldr	r3, [pc, #72]	@ (8000628 <Modbus_init+0xa0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80005e4:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80005e8:	4413      	add	r3, r2
 80005ea:	3302      	adds	r3, #2
 80005ec:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80005f0:	4619      	mov	r1, r3
 80005f2:	f004 f95f 	bl	80048b4 <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80005f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <Modbus_init+0xa0>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	691b      	ldr	r3, [r3, #16]
 80005fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000600:	b2db      	uxtb	r3, r3
 8000602:	2b01      	cmp	r3, #1
 8000604:	d10c      	bne.n	8000620 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000606:	4b08      	ldr	r3, [pc, #32]	@ (8000628 <Modbus_init+0xa0>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	691b      	ldr	r3, [r3, #16]
 800060c:	4618      	mov	r0, r3
 800060e:	f002 ff2d 	bl	800346c <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000612:	4b05      	ldr	r3, [pc, #20]	@ (8000628 <Modbus_init+0xa0>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	691b      	ldr	r3, [r3, #16]
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f003 f806 	bl	800362c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	2000022c 	.word	0x2000022c
 800062c:	08000549 	.word	0x08000549
 8000630:	08000569 	.word	0x08000569

08000634 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000640:	23ff      	movs	r3, #255	@ 0xff
 8000642:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000644:	23ff      	movs	r3, #255	@ 0xff
 8000646:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000648:	e013      	b.n	8000672 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	1c5a      	adds	r2, r3, #1
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	781a      	ldrb	r2, [r3, #0]
 8000652:	7bbb      	ldrb	r3, [r7, #14]
 8000654:	4053      	eors	r3, r2
 8000656:	b2db      	uxtb	r3, r3
 8000658:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800065a:	4a0f      	ldr	r2, [pc, #60]	@ (8000698 <CRC16+0x64>)
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	4413      	add	r3, r2
 8000660:	781a      	ldrb	r2, [r3, #0]
 8000662:	7bfb      	ldrb	r3, [r7, #15]
 8000664:	4053      	eors	r3, r2
 8000666:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000668:	4a0c      	ldr	r2, [pc, #48]	@ (800069c <CRC16+0x68>)
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	4413      	add	r3, r2
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000672:	883b      	ldrh	r3, [r7, #0]
 8000674:	1e5a      	subs	r2, r3, #1
 8000676:	803a      	strh	r2, [r7, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d1e6      	bne.n	800064a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	021b      	lsls	r3, r3, #8
 8000680:	b21a      	sxth	r2, r3
 8000682:	7bbb      	ldrb	r3, [r7, #14]
 8000684:	b21b      	sxth	r3, r3
 8000686:	4313      	orrs	r3, r2
 8000688:	b21b      	sxth	r3, r3
 800068a:	b29b      	uxth	r3, r3
}
 800068c:	4618      	mov	r0, r3
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	20000100 	.word	0x20000100
 800069c:	20000000 	.word	0x20000000

080006a0 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80006a6:	4b7e      	ldr	r3, [pc, #504]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	7ddb      	ldrb	r3, [r3, #23]
 80006ac:	3b01      	subs	r3, #1
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	d80a      	bhi.n	80006c8 <Modbus_Protocal_Worker+0x28>
 80006b2:	a201      	add	r2, pc, #4	@ (adr r2, 80006b8 <Modbus_Protocal_Worker+0x18>)
 80006b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b8:	080006d3 	.word	0x080006d3
 80006bc:	08000867 	.word	0x08000867
 80006c0:	0800075f 	.word	0x0800075f
 80006c4:	080007a3 	.word	0x080007a3
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80006c8:	4b75      	ldr	r3, [pc, #468]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2201      	movs	r2, #1
 80006ce:	75da      	strb	r2, [r3, #23]
		break;
 80006d0:	e0e1      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80006d2:	4b73      	ldr	r3, [pc, #460]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d006      	beq.n	80006ec <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80006de:	4b70      	ldr	r3, [pc, #448]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2202      	movs	r2, #2
 80006e4:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80006e6:	f000 f9cd 	bl	8000a84 <Modbus_Emission>
 80006ea:	e018      	b.n	800071e <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80006ec:	4b6c      	ldr	r3, [pc, #432]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	68db      	ldr	r3, [r3, #12]
 80006f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80006f6:	4b6a      	ldr	r3, [pc, #424]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8000700:	b29b      	uxth	r3, r3
 8000702:	429a      	cmp	r2, r3
 8000704:	d00b      	beq.n	800071e <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000706:	4b66      	ldr	r3, [pc, #408]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2200      	movs	r2, #0
 800070c:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800070e:	4b64      	ldr	r3, [pc, #400]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2200      	movs	r2, #0
 8000714:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8000716:	4b62      	ldr	r3, [pc, #392]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2203      	movs	r2, #3
 800071c:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800071e:	4b60      	ldr	r3, [pc, #384]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000728:	2b20      	cmp	r3, #32
 800072a:	f040 80ad 	bne.w	8000888 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800072e:	4b5c      	ldr	r3, [pc, #368]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2200      	movs	r2, #0
 8000734:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8000738:	4b59      	ldr	r3, [pc, #356]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800073e:	4b58      	ldr	r3, [pc, #352]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	4b57      	ldr	r3, [pc, #348]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 800074a:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800074e:	4413      	add	r3, r2
 8000750:	3302      	adds	r3, #2
 8000752:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000756:	4619      	mov	r1, r3
 8000758:	f004 f8ac 	bl	80048b4 <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 800075c:	e094      	b.n	8000888 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800075e:	4b50      	ldr	r3, [pc, #320]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	7d1b      	ldrb	r3, [r3, #20]
 8000764:	2b00      	cmp	r3, #0
 8000766:	f000 8091 	beq.w	800088c <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800076a:	4b4d      	ldr	r3, [pc, #308]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	22fe      	movs	r2, #254	@ 0xfe
 8000770:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8000772:	4b4b      	ldr	r3, [pc, #300]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 800077c:	4b48      	ldr	r3, [pc, #288]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	68db      	ldr	r3, [r3, #12]
 8000782:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 800078c:	4b44      	ldr	r3, [pc, #272]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800078e:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8000790:	1a8a      	subs	r2, r1, r2
 8000792:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8000794:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8000798:	4b41      	ldr	r3, [pc, #260]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2204      	movs	r2, #4
 800079e:	75da      	strb	r2, [r3, #23]
		}
		break;
 80007a0:	e074      	b.n	800088c <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80007a2:	4b3f      	ldr	r3, [pc, #252]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80007aa:	f113 0f02 	cmn.w	r3, #2
 80007ae:	d150      	bne.n	8000852 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80007b0:	4b3b      	ldr	r3, [pc, #236]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2200      	movs	r2, #0
 80007b6:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80007b8:	4b39      	ldr	r3, [pc, #228]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80007c0:	4b37      	ldr	r3, [pc, #220]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80007c8:	3b02      	subs	r3, #2
 80007ca:	4619      	mov	r1, r3
 80007cc:	4610      	mov	r0, r2
 80007ce:	f7ff ff31 	bl	8000634 <CRC16>
 80007d2:	4603      	mov	r3, r0
 80007d4:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80007d6:	793a      	ldrb	r2, [r7, #4]
 80007d8:	4b31      	ldr	r3, [pc, #196]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007da:	6819      	ldr	r1, [r3, #0]
 80007dc:	4b30      	ldr	r3, [pc, #192]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80007e4:	3b02      	subs	r3, #2
 80007e6:	440b      	add	r3, r1
 80007e8:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d10c      	bne.n	800080a <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80007f0:	797a      	ldrb	r2, [r7, #5]
 80007f2:	4b2b      	ldr	r3, [pc, #172]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007f4:	6819      	ldr	r1, [r3, #0]
 80007f6:	4b2a      	ldr	r3, [pc, #168]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80007fe:	3b01      	subs	r3, #1
 8000800:	440b      	add	r3, r1
 8000802:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000806:	429a      	cmp	r2, r3
 8000808:	d004      	beq.n	8000814 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800080a:	4b25      	ldr	r3, [pc, #148]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	22ff      	movs	r2, #255	@ 0xff
 8000810:	759a      	strb	r2, [r3, #22]
				break;
 8000812:	e040      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8000814:	4b22      	ldr	r3, [pc, #136]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 800081c:	4b20      	ldr	r3, [pc, #128]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	429a      	cmp	r2, r3
 8000824:	d113      	bne.n	800084e <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8000826:	4b1e      	ldr	r3, [pc, #120]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800082e:	4b1c      	ldr	r3, [pc, #112]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8000836:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8000838:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000840:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8000842:	461a      	mov	r2, r3
 8000844:	f005 fdbc 	bl	80063c0 <memcpy>

			//execute command
			Modbus_frame_response();
 8000848:	f000 f904 	bl	8000a54 <Modbus_frame_response>
 800084c:	e001      	b.n	8000852 <Modbus_Protocal_Worker+0x1b2>
				break;
 800084e:	bf00      	nop
					}
		break;


	}
}
 8000850:	e021      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8000852:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	7d5b      	ldrb	r3, [r3, #21]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d019      	beq.n	8000890 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 800085c:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2201      	movs	r2, #1
 8000862:	75da      	strb	r2, [r3, #23]
		break;
 8000864:	e014      	b.n	8000890 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000870:	2b20      	cmp	r3, #32
 8000872:	d10f      	bne.n	8000894 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8000874:	4b0a      	ldr	r3, [pc, #40]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2200      	movs	r2, #0
 800087a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800087e:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2201      	movs	r2, #1
 8000884:	75da      	strb	r2, [r3, #23]
		break;
 8000886:	e005      	b.n	8000894 <Modbus_Protocal_Worker+0x1f4>
		break;
 8000888:	bf00      	nop
 800088a:	e004      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
		break;
 800088c:	bf00      	nop
 800088e:	e002      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
		break;
 8000890:	bf00      	nop
 8000892:	e000      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
		break;
 8000894:	bf00      	nop
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	2000022c 	.word	0x2000022c

080008a4 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80008aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	7e5b      	ldrb	r3, [r3, #25]
 80008b0:	021b      	lsls	r3, r3, #8
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	4a1a      	ldr	r2, [pc, #104]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008b6:	6812      	ldr	r2, [r2, #0]
 80008b8:	7e92      	ldrb	r2, [r2, #26]
 80008ba:	4413      	add	r3, r2
 80008bc:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80008be:	88fa      	ldrh	r2, [r7, #6]
 80008c0:	4b17      	ldr	r3, [pc, #92]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d903      	bls.n	80008d2 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80008ca:	2002      	movs	r0, #2
 80008cc:	f000 f8a0 	bl	8000a10 <ModbusErrorReply>
			 return;
 80008d0:	e023      	b.n	800091a <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80008d2:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	6859      	ldr	r1, [r3, #4]
 80008dc:	88fb      	ldrh	r3, [r7, #6]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	440b      	add	r3, r1
 80008e2:	7ed2      	ldrb	r2, [r2, #27]
 80008e4:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80008e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	6859      	ldr	r1, [r3, #4]
 80008f0:	88fb      	ldrh	r3, [r7, #6]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	440b      	add	r3, r1
 80008f6:	7f12      	ldrb	r2, [r2, #28]
 80008f8:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 8000902:	4b07      	ldr	r3, [pc, #28]	@ (8000920 <modbusWrite1Register+0x7c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8000908:	2208      	movs	r2, #8
 800090a:	4619      	mov	r1, r3
 800090c:	f005 fd58 	bl	80063c0 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8000910:	4b03      	ldr	r3, [pc, #12]	@ (8000920 <modbusWrite1Register+0x7c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2205      	movs	r2, #5
 8000916:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	2000022c 	.word	0x2000022c

08000924 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800092a:	4b38      	ldr	r3, [pc, #224]	@ (8000a0c <modbusRead1Register+0xe8>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	7edb      	ldrb	r3, [r3, #27]
 8000930:	021b      	lsls	r3, r3, #8
 8000932:	b29b      	uxth	r3, r3
 8000934:	4a35      	ldr	r2, [pc, #212]	@ (8000a0c <modbusRead1Register+0xe8>)
 8000936:	6812      	ldr	r2, [r2, #0]
 8000938:	7f12      	ldrb	r2, [r2, #28]
 800093a:	4413      	add	r3, r2
 800093c:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800093e:	4b33      	ldr	r3, [pc, #204]	@ (8000a0c <modbusRead1Register+0xe8>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	7e5b      	ldrb	r3, [r3, #25]
 8000944:	021b      	lsls	r3, r3, #8
 8000946:	b29b      	uxth	r3, r3
 8000948:	4a30      	ldr	r2, [pc, #192]	@ (8000a0c <modbusRead1Register+0xe8>)
 800094a:	6812      	ldr	r2, [r2, #0]
 800094c:	7e92      	ldrb	r2, [r2, #26]
 800094e:	4413      	add	r3, r2
 8000950:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8000952:	88fb      	ldrh	r3, [r7, #6]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d002      	beq.n	800095e <modbusRead1Register+0x3a>
 8000958:	88fb      	ldrh	r3, [r7, #6]
 800095a:	2b7d      	cmp	r3, #125	@ 0x7d
 800095c:	d903      	bls.n	8000966 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800095e:	2003      	movs	r0, #3
 8000960:	f000 f856 	bl	8000a10 <ModbusErrorReply>
		 return;
 8000964:	e04e      	b.n	8000a04 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8000966:	88ba      	ldrh	r2, [r7, #4]
 8000968:	4b28      	ldr	r3, [pc, #160]	@ (8000a0c <modbusRead1Register+0xe8>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	429a      	cmp	r2, r3
 8000970:	d808      	bhi.n	8000984 <modbusRead1Register+0x60>
 8000972:	88ba      	ldrh	r2, [r7, #4]
 8000974:	88fb      	ldrh	r3, [r7, #6]
 8000976:	4413      	add	r3, r2
 8000978:	461a      	mov	r2, r3
 800097a:	4b24      	ldr	r3, [pc, #144]	@ (8000a0c <modbusRead1Register+0xe8>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	429a      	cmp	r2, r3
 8000982:	d903      	bls.n	800098c <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000984:	2002      	movs	r0, #2
 8000986:	f000 f843 	bl	8000a10 <ModbusErrorReply>
		 return;
 800098a:	e03b      	b.n	8000a04 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 800098c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a0c <modbusRead1Register+0xe8>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2203      	movs	r2, #3
 8000992:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8000996:	88fb      	ldrh	r3, [r7, #6]
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a0c <modbusRead1Register+0xe8>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	0052      	lsls	r2, r2, #1
 80009a0:	b2d2      	uxtb	r2, r2
 80009a2:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80009a6:	2400      	movs	r4, #0
 80009a8:	e020      	b.n	80009ec <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80009aa:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	685a      	ldr	r2, [r3, #4]
 80009b0:	88bb      	ldrh	r3, [r7, #4]
 80009b2:	4423      	add	r3, r4
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	18d1      	adds	r1, r2, r3
 80009b8:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	1c63      	adds	r3, r4, #1
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	7849      	ldrb	r1, [r1, #1]
 80009c2:	4413      	add	r3, r2
 80009c4:	460a      	mov	r2, r1
 80009c6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80009ca:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	685a      	ldr	r2, [r3, #4]
 80009d0:	88bb      	ldrh	r3, [r7, #4]
 80009d2:	4423      	add	r3, r4
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	18d1      	adds	r1, r2, r3
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	0063      	lsls	r3, r4, #1
 80009de:	3303      	adds	r3, #3
 80009e0:	7809      	ldrb	r1, [r1, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	460a      	mov	r2, r1
 80009e6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80009ea:	3401      	adds	r4, #1
 80009ec:	88fb      	ldrh	r3, [r7, #6]
 80009ee:	429c      	cmp	r4, r3
 80009f0:	dbdb      	blt.n	80009aa <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	3301      	adds	r3, #1
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	0052      	lsls	r2, r2, #1
 80009fe:	b2d2      	uxtb	r2, r2
 8000a00:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd90      	pop	{r4, r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2000022c 	.word	0x2000022c

08000a10 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a50 <ModbusErrorReply+0x40>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	7e1a      	ldrb	r2, [r3, #24]
 8000a20:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <ModbusErrorReply+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000a28:	b2d2      	uxtb	r2, r2
 8000a2a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <ModbusErrorReply+0x40>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	79fa      	ldrb	r2, [r7, #7]
 8000a34:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8000a38:	4b05      	ldr	r3, [pc, #20]	@ (8000a50 <ModbusErrorReply+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	2000022c 	.word	0x2000022c

08000a54 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8000a58:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <Modbus_frame_response+0x2c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	7e1b      	ldrb	r3, [r3, #24]
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	d004      	beq.n	8000a6c <Modbus_frame_response+0x18>
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d105      	bne.n	8000a72 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8000a66:	f7ff ff1d 	bl	80008a4 <modbusWrite1Register>
		break;
 8000a6a:	e006      	b.n	8000a7a <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8000a6c:	f7ff ff5a 	bl	8000924 <modbusRead1Register>
		break;
 8000a70:	e003      	b.n	8000a7a <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f7ff ffcc 	bl	8000a10 <ModbusErrorReply>
		break;
 8000a78:	bf00      	nop

	}
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	2000022c 	.word	0x2000022c

08000a84 <Modbus_Emission>:

void Modbus_Emission()
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000a8a:	4b38      	ldr	r3, [pc, #224]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a94:	2b20      	cmp	r3, #32
 8000a96:	d15d      	bne.n	8000b54 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8000a98:	4b34      	ldr	r3, [pc, #208]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b33      	ldr	r3, [pc, #204]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	7812      	ldrb	r2, [r2, #0]
 8000aa2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8000aa6:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8000aae:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8000ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	f005 fc7d 	bl	80063c0 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8000ac6:	4b29      	ldr	r3, [pc, #164]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b26      	ldr	r3, [pc, #152]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	3203      	adds	r2, #3
 8000ad6:	b292      	uxth	r2, r2
 8000ad8:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000adc:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000aec:	3b02      	subs	r3, #2
 8000aee:	4619      	mov	r1, r3
 8000af0:	4610      	mov	r0, r2
 8000af2:	f7ff fd9f 	bl	8000634 <CRC16>
 8000af6:	4603      	mov	r3, r0
 8000af8:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8000afa:	4b1c      	ldr	r3, [pc, #112]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000b06:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8000b08:	7939      	ldrb	r1, [r7, #4]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	460a      	mov	r2, r1
 8000b0e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8000b12:	4b16      	ldr	r3, [pc, #88]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000b1e:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8000b20:	7979      	ldrb	r1, [r7, #5]
 8000b22:	4413      	add	r3, r2
 8000b24:	460a      	mov	r2, r1
 8000b26:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000b2a:	4b10      	ldr	r3, [pc, #64]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b34:	2b20      	cmp	r3, #32
 8000b36:	d10d      	bne.n	8000b54 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8000b38:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8000b46:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b48:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8000b4a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000b4e:	461a      	mov	r2, r3
 8000b50:	f003 fe30 	bl	80047b4 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8000b54:	4b05      	ldr	r3, [pc, #20]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2200      	movs	r2, #0
 8000b62:	755a      	strb	r2, [r3, #21]

}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	2000022c 	.word	0x2000022c

08000b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b76:	f000 fd74 	bl	8001662 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b7a:	f000 f99d 	bl	8000eb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7e:	f000 fae5 	bl	800114c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b82:	f000 fab1 	bl	80010e8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b86:	f000 fa61 	bl	800104c <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000b8a:	f000 fa2f 	bl	8000fec <MX_TIM16_Init>
  MX_TIM5_Init();
 8000b8e:	f000 f9df 	bl	8000f50 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  hmodbus.huart = &huart2;
 8000b92:	4b56      	ldr	r3, [pc, #344]	@ (8000cec <main+0x17c>)
 8000b94:	4a56      	ldr	r2, [pc, #344]	@ (8000cf0 <main+0x180>)
 8000b96:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 8000b98:	4b54      	ldr	r3, [pc, #336]	@ (8000cec <main+0x17c>)
 8000b9a:	4a56      	ldr	r2, [pc, #344]	@ (8000cf4 <main+0x184>)
 8000b9c:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8000b9e:	4b53      	ldr	r3, [pc, #332]	@ (8000cec <main+0x17c>)
 8000ba0:	2215      	movs	r2, #21
 8000ba2:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8000ba4:	4b51      	ldr	r3, [pc, #324]	@ (8000cec <main+0x17c>)
 8000ba6:	22c8      	movs	r2, #200	@ 0xc8
 8000ba8:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8000baa:	4953      	ldr	r1, [pc, #332]	@ (8000cf8 <main+0x188>)
 8000bac:	484f      	ldr	r0, [pc, #316]	@ (8000cec <main+0x17c>)
 8000bae:	f7ff fceb 	bl	8000588 <Modbus_init>

  HAL_TIM_Base_Start_IT(&htim5);
 8000bb2:	4852      	ldr	r0, [pc, #328]	@ (8000cfc <main+0x18c>)
 8000bb4:	f002 fc5a 	bl	800346c <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	Modbus_Protocal_Worker();
 8000bb8:	f7ff fd72 	bl	80006a0 <Modbus_Protocal_Worker>

	ShelvePos[0] = 1;
 8000bbc:	4b50      	ldr	r3, [pc, #320]	@ (8000d00 <main+0x190>)
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	801a      	strh	r2, [r3, #0]
	ShelvePos[1] = 2;
 8000bc2:	4b4f      	ldr	r3, [pc, #316]	@ (8000d00 <main+0x190>)
 8000bc4:	2202      	movs	r2, #2
 8000bc6:	805a      	strh	r2, [r3, #2]
	ShelvePos[2] = 3;
 8000bc8:	4b4d      	ldr	r3, [pc, #308]	@ (8000d00 <main+0x190>)
 8000bca:	2203      	movs	r2, #3
 8000bcc:	809a      	strh	r2, [r3, #4]
	ShelvePos[3] = 4;
 8000bce:	4b4c      	ldr	r3, [pc, #304]	@ (8000d00 <main+0x190>)
 8000bd0:	2204      	movs	r2, #4
 8000bd2:	80da      	strh	r2, [r3, #6]
	ShelvePos[4] = 5;
 8000bd4:	4b4a      	ldr	r3, [pc, #296]	@ (8000d00 <main+0x190>)
 8000bd6:	2205      	movs	r2, #5
 8000bd8:	811a      	strh	r2, [r3, #8]
//	Z[0] = 1;  //ZPos
//	Z[1] = 2;  //ZSpeed
//	Z[2] = 3;  //ZAccel
//	Z[3] = 4;  //XPos

	Vacuum = registerFrame[2].U16; // 0 = off , 1 = on
 8000bda:	4b47      	ldr	r3, [pc, #284]	@ (8000cf8 <main+0x188>)
 8000bdc:	889b      	ldrh	r3, [r3, #4]
 8000bde:	b2da      	uxtb	r2, r3
 8000be0:	4b48      	ldr	r3, [pc, #288]	@ (8000d04 <main+0x194>)
 8000be2:	701a      	strb	r2, [r3, #0]
	Gripper = registerFrame[3].U16; // 0 = Backward , 1 = Forward
 8000be4:	4b44      	ldr	r3, [pc, #272]	@ (8000cf8 <main+0x188>)
 8000be6:	88db      	ldrh	r3, [r3, #6]
 8000be8:	b2da      	uxtb	r2, r3
 8000bea:	4b47      	ldr	r3, [pc, #284]	@ (8000d08 <main+0x198>)
 8000bec:	701a      	strb	r2, [r3, #0]
	registerFrame[0x11].U16 =Z[0];
 8000bee:	4b47      	ldr	r3, [pc, #284]	@ (8000d0c <main+0x19c>)
 8000bf0:	881a      	ldrh	r2, [r3, #0]
 8000bf2:	4b41      	ldr	r3, [pc, #260]	@ (8000cf8 <main+0x188>)
 8000bf4:	845a      	strh	r2, [r3, #34]	@ 0x22
	registerFrame[0x12].U16 =Z[1];
 8000bf6:	4b45      	ldr	r3, [pc, #276]	@ (8000d0c <main+0x19c>)
 8000bf8:	885a      	ldrh	r2, [r3, #2]
 8000bfa:	4b3f      	ldr	r3, [pc, #252]	@ (8000cf8 <main+0x188>)
 8000bfc:	849a      	strh	r2, [r3, #36]	@ 0x24
	registerFrame[0x13].U16 =Z[2];
 8000bfe:	4b43      	ldr	r3, [pc, #268]	@ (8000d0c <main+0x19c>)
 8000c00:	889a      	ldrh	r2, [r3, #4]
 8000c02:	4b3d      	ldr	r3, [pc, #244]	@ (8000cf8 <main+0x188>)
 8000c04:	84da      	strh	r2, [r3, #38]	@ 0x26
	registerFrame[0x40].U16 =Z[3];
 8000c06:	4b41      	ldr	r3, [pc, #260]	@ (8000d0c <main+0x19c>)
 8000c08:	88da      	ldrh	r2, [r3, #6]
 8000c0a:	4b3b      	ldr	r3, [pc, #236]	@ (8000cf8 <main+0x188>)
 8000c0c:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80

	static uint32_t timestamp = 0;
	timestampglob = timestamp;
 8000c10:	4b3f      	ldr	r3, [pc, #252]	@ (8000d10 <main+0x1a0>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a3f      	ldr	r2, [pc, #252]	@ (8000d14 <main+0x1a4>)
 8000c16:	6013      	str	r3, [r2, #0]
	b = HAL_GetTick();
 8000c18:	f000 fd88 	bl	800172c <HAL_GetTick>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	461a      	mov	r2, r3
 8000c20:	4b3d      	ldr	r3, [pc, #244]	@ (8000d18 <main+0x1a8>)
 8000c22:	601a      	str	r2, [r3, #0]

	if (registerFrame[0x10].U16 == 1 && HAL_GetTick() >= timestamp){
 8000c24:	4b34      	ldr	r3, [pc, #208]	@ (8000cf8 <main+0x188>)
 8000c26:	8c1b      	ldrh	r3, [r3, #32]
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d109      	bne.n	8000c40 <main+0xd0>
 8000c2c:	f000 fd7e 	bl	800172c <HAL_GetTick>
 8000c30:	4602      	mov	r2, r0
 8000c32:	4b37      	ldr	r3, [pc, #220]	@ (8000d10 <main+0x1a0>)
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	429a      	cmp	r2, r3
 8000c38:	d302      	bcc.n	8000c40 <main+0xd0>
		registerFrame[0x10].U16 = 0;
 8000c3a:	4b2f      	ldr	r3, [pc, #188]	@ (8000cf8 <main+0x188>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	841a      	strh	r2, [r3, #32]
	}

	//Set Shelves
	if (registerFrame[0x01].U16 == 1){
 8000c40:	4b2d      	ldr	r3, [pc, #180]	@ (8000cf8 <main+0x188>)
 8000c42:	885b      	ldrh	r3, [r3, #2]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d125      	bne.n	8000c94 <main+0x124>
		registerFrame[0x01].U16 = 0;
 8000c48:	4b2b      	ldr	r3, [pc, #172]	@ (8000cf8 <main+0x188>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 1;
 8000c4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000cf8 <main+0x188>)
 8000c50:	2201      	movs	r2, #1
 8000c52:	841a      	strh	r2, [r3, #32]
		registerFrame[0x23].U16 = ShelvePos[0];
 8000c54:	4b2a      	ldr	r3, [pc, #168]	@ (8000d00 <main+0x190>)
 8000c56:	881a      	ldrh	r2, [r3, #0]
 8000c58:	4b27      	ldr	r3, [pc, #156]	@ (8000cf8 <main+0x188>)
 8000c5a:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
		registerFrame[0x24].U16 = ShelvePos[1];
 8000c5e:	4b28      	ldr	r3, [pc, #160]	@ (8000d00 <main+0x190>)
 8000c60:	885a      	ldrh	r2, [r3, #2]
 8000c62:	4b25      	ldr	r3, [pc, #148]	@ (8000cf8 <main+0x188>)
 8000c64:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
		registerFrame[0x25].U16 = ShelvePos[2];
 8000c68:	4b25      	ldr	r3, [pc, #148]	@ (8000d00 <main+0x190>)
 8000c6a:	889a      	ldrh	r2, [r3, #4]
 8000c6c:	4b22      	ldr	r3, [pc, #136]	@ (8000cf8 <main+0x188>)
 8000c6e:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
		registerFrame[0x26].U16 = ShelvePos[3];
 8000c72:	4b23      	ldr	r3, [pc, #140]	@ (8000d00 <main+0x190>)
 8000c74:	88da      	ldrh	r2, [r3, #6]
 8000c76:	4b20      	ldr	r3, [pc, #128]	@ (8000cf8 <main+0x188>)
 8000c78:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
		registerFrame[0x27].U16 = ShelvePos[4];
 8000c7c:	4b20      	ldr	r3, [pc, #128]	@ (8000d00 <main+0x190>)
 8000c7e:	891a      	ldrh	r2, [r3, #8]
 8000c80:	4b1d      	ldr	r3, [pc, #116]	@ (8000cf8 <main+0x188>)
 8000c82:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
		timestamp = HAL_GetTick()+2000;
 8000c86:	f000 fd51 	bl	800172c <HAL_GetTick>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000c90:	4a1f      	ldr	r2, [pc, #124]	@ (8000d10 <main+0x1a0>)
 8000c92:	6013      	str	r3, [r2, #0]
	}


	//Set Home
	if(registerFrame[0x01].U16 == 2){
 8000c94:	4b18      	ldr	r3, [pc, #96]	@ (8000cf8 <main+0x188>)
 8000c96:	885b      	ldrh	r3, [r3, #2]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d109      	bne.n	8000cb0 <main+0x140>
		registerFrame[0x01].U16 = 0;
 8000c9c:	4b16      	ldr	r3, [pc, #88]	@ (8000cf8 <main+0x188>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 2;
 8000ca2:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <main+0x188>)
 8000ca4:	2202      	movs	r2, #2
 8000ca6:	841a      	strh	r2, [r3, #32]
		Goal = HomePos;
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d1c <main+0x1ac>)
 8000caa:	881a      	ldrh	r2, [r3, #0]
 8000cac:	4b1c      	ldr	r3, [pc, #112]	@ (8000d20 <main+0x1b0>)
 8000cae:	801a      	strh	r2, [r3, #0]
	}

	//Run Jog Mode
	if(registerFrame[0x01].U16 == 4){
 8000cb0:	4b11      	ldr	r3, [pc, #68]	@ (8000cf8 <main+0x188>)
 8000cb2:	885b      	ldrh	r3, [r3, #2]
 8000cb4:	2b04      	cmp	r3, #4
 8000cb6:	d159      	bne.n	8000d6c <main+0x1fc>
		convert_to_string(registerFrame[0x21].U16, PickOrder, sizeof(PickOrder));
 8000cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf8 <main+0x188>)
 8000cba:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8000cbe:	2206      	movs	r2, #6
 8000cc0:	4918      	ldr	r1, [pc, #96]	@ (8000d24 <main+0x1b4>)
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 fab0 	bl	8001228 <convert_to_string>
		convert_to_string(registerFrame[0x22].U16, PlaceOrder, sizeof(PlaceOrder));
 8000cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8000cf8 <main+0x188>)
 8000cca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000cce:	2206      	movs	r2, #6
 8000cd0:	4915      	ldr	r1, [pc, #84]	@ (8000d28 <main+0x1b8>)
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f000 faa8 	bl	8001228 <convert_to_string>
		registerFrame[0x01].U16 = 0;
 8000cd8:	4b07      	ldr	r3, [pc, #28]	@ (8000cf8 <main+0x188>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 4;
 8000cde:	4b06      	ldr	r3, [pc, #24]	@ (8000cf8 <main+0x188>)
 8000ce0:	2204      	movs	r2, #4
 8000ce2:	841a      	strh	r2, [r3, #32]
		for(int i = 0;i<=4;i++){
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	607b      	str	r3, [r7, #4]
 8000ce8:	e03d      	b.n	8000d66 <main+0x1f6>
 8000cea:	bf00      	nop
 8000cec:	20000554 	.word	0x20000554
 8000cf0:	200003c8 	.word	0x200003c8
 8000cf4:	200002fc 	.word	0x200002fc
 8000cf8:	20000a2c 	.word	0x20000a2c
 8000cfc:	20000230 	.word	0x20000230
 8000d00:	20000bbc 	.word	0x20000bbc
 8000d04:	20000bd0 	.word	0x20000bd0
 8000d08:	20000bd1 	.word	0x20000bd1
 8000d0c:	20000bc8 	.word	0x20000bc8
 8000d10:	20000c0c 	.word	0x20000c0c
 8000d14:	20000c08 	.word	0x20000c08
 8000d18:	20000c04 	.word	0x20000c04
 8000d1c:	20000200 	.word	0x20000200
 8000d20:	20000bfa 	.word	0x20000bfa
 8000d24:	20000bd4 	.word	0x20000bd4
 8000d28:	20000bdc 	.word	0x20000bdc
			GoalPick[i] = ShelvePos[PickOrder[4-i]-'0'-1];
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f1c3 0304 	rsb	r3, r3, #4
 8000d32:	4a57      	ldr	r2, [pc, #348]	@ (8000e90 <main+0x320>)
 8000d34:	5cd3      	ldrb	r3, [r2, r3]
 8000d36:	3b31      	subs	r3, #49	@ 0x31
 8000d38:	4a56      	ldr	r2, [pc, #344]	@ (8000e94 <main+0x324>)
 8000d3a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000d3e:	4a56      	ldr	r2, [pc, #344]	@ (8000e98 <main+0x328>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
			GoalPlace[i] = ShelvePos[PlaceOrder[4-i]-'0'-1];
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f1c3 0304 	rsb	r3, r3, #4
 8000d4c:	4a53      	ldr	r2, [pc, #332]	@ (8000e9c <main+0x32c>)
 8000d4e:	5cd3      	ldrb	r3, [r2, r3]
 8000d50:	3b31      	subs	r3, #49	@ 0x31
 8000d52:	4a50      	ldr	r2, [pc, #320]	@ (8000e94 <main+0x324>)
 8000d54:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000d58:	4a51      	ldr	r2, [pc, #324]	@ (8000ea0 <main+0x330>)
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		for(int i = 0;i<=4;i++){
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	3301      	adds	r3, #1
 8000d64:	607b      	str	r3, [r7, #4]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2b04      	cmp	r3, #4
 8000d6a:	dddf      	ble.n	8000d2c <main+0x1bc>
			}
	}

	//Run Point Mode
	if(registerFrame[0x01].U16 == 8){
 8000d6c:	4b4d      	ldr	r3, [pc, #308]	@ (8000ea4 <main+0x334>)
 8000d6e:	885b      	ldrh	r3, [r3, #2]
 8000d70:	2b08      	cmp	r3, #8
 8000d72:	d10a      	bne.n	8000d8a <main+0x21a>
		registerFrame[0x01].U16 = 0;
 8000d74:	4b4b      	ldr	r3, [pc, #300]	@ (8000ea4 <main+0x334>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 16;
 8000d7a:	4b4a      	ldr	r3, [pc, #296]	@ (8000ea4 <main+0x334>)
 8000d7c:	2210      	movs	r2, #16
 8000d7e:	841a      	strh	r2, [r3, #32]
		Goal = registerFrame[48].U16;
 8000d80:	4b48      	ldr	r3, [pc, #288]	@ (8000ea4 <main+0x334>)
 8000d82:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 8000d86:	4b48      	ldr	r3, [pc, #288]	@ (8000ea8 <main+0x338>)
 8000d88:	801a      	strh	r2, [r3, #0]
	}

	if(Z[0] == Goal && registerFrame[0x10].U16 != 4 && registerFrame[0x10].U16 != 8 && registerFrame[0x10].U16 != 1){
 8000d8a:	4b48      	ldr	r3, [pc, #288]	@ (8000eac <main+0x33c>)
 8000d8c:	881a      	ldrh	r2, [r3, #0]
 8000d8e:	4b46      	ldr	r3, [pc, #280]	@ (8000ea8 <main+0x338>)
 8000d90:	881b      	ldrh	r3, [r3, #0]
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d10e      	bne.n	8000db4 <main+0x244>
 8000d96:	4b43      	ldr	r3, [pc, #268]	@ (8000ea4 <main+0x334>)
 8000d98:	8c1b      	ldrh	r3, [r3, #32]
 8000d9a:	2b04      	cmp	r3, #4
 8000d9c:	d00a      	beq.n	8000db4 <main+0x244>
 8000d9e:	4b41      	ldr	r3, [pc, #260]	@ (8000ea4 <main+0x334>)
 8000da0:	8c1b      	ldrh	r3, [r3, #32]
 8000da2:	2b08      	cmp	r3, #8
 8000da4:	d006      	beq.n	8000db4 <main+0x244>
 8000da6:	4b3f      	ldr	r3, [pc, #252]	@ (8000ea4 <main+0x334>)
 8000da8:	8c1b      	ldrh	r3, [r3, #32]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d002      	beq.n	8000db4 <main+0x244>
		registerFrame[0x10].U16 = 0;
 8000dae:	4b3d      	ldr	r3, [pc, #244]	@ (8000ea4 <main+0x334>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	841a      	strh	r2, [r3, #32]
	}
/////////////////START JOG////////////////////////////////////////////////////////////
	if(registerFrame[0x10].U16 == 4 && j < 5){
 8000db4:	4b3b      	ldr	r3, [pc, #236]	@ (8000ea4 <main+0x334>)
 8000db6:	8c1b      	ldrh	r3, [r3, #32]
 8000db8:	2b04      	cmp	r3, #4
 8000dba:	d128      	bne.n	8000e0e <main+0x29e>
 8000dbc:	4b3c      	ldr	r3, [pc, #240]	@ (8000eb0 <main+0x340>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b04      	cmp	r3, #4
 8000dc2:	dc24      	bgt.n	8000e0e <main+0x29e>
		a=0;
 8000dc4:	4b3b      	ldr	r3, [pc, #236]	@ (8000eb4 <main+0x344>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	701a      	strb	r2, [r3, #0]
		if(registerFrame[3].U16 == 0){//Gripper BW before move
 8000dca:	4b36      	ldr	r3, [pc, #216]	@ (8000ea4 <main+0x334>)
 8000dcc:	88db      	ldrh	r3, [r3, #6]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d109      	bne.n	8000de6 <main+0x276>
			Goal = GoalPick[j];
 8000dd2:	4b37      	ldr	r3, [pc, #220]	@ (8000eb0 <main+0x340>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a30      	ldr	r2, [pc, #192]	@ (8000e98 <main+0x328>)
 8000dd8:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000ddc:	4b32      	ldr	r3, [pc, #200]	@ (8000ea8 <main+0x338>)
 8000dde:	801a      	strh	r2, [r3, #0]
			a = 1;
 8000de0:	4b34      	ldr	r3, [pc, #208]	@ (8000eb4 <main+0x344>)
 8000de2:	2201      	movs	r2, #1
 8000de4:	701a      	strb	r2, [r3, #0]
		}  //Gripper FW Vacuum On
		if(Z[0] == Goal && registerFrame[3].U16 == 1 && registerFrame[2].U16 == 1){
 8000de6:	4b31      	ldr	r3, [pc, #196]	@ (8000eac <main+0x33c>)
 8000de8:	881a      	ldrh	r2, [r3, #0]
 8000dea:	4b2f      	ldr	r3, [pc, #188]	@ (8000ea8 <main+0x338>)
 8000dec:	881b      	ldrh	r3, [r3, #0]
 8000dee:	429a      	cmp	r2, r3
 8000df0:	d10d      	bne.n	8000e0e <main+0x29e>
 8000df2:	4b2c      	ldr	r3, [pc, #176]	@ (8000ea4 <main+0x334>)
 8000df4:	88db      	ldrh	r3, [r3, #6]
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d109      	bne.n	8000e0e <main+0x29e>
 8000dfa:	4b2a      	ldr	r3, [pc, #168]	@ (8000ea4 <main+0x334>)
 8000dfc:	889b      	ldrh	r3, [r3, #4]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d105      	bne.n	8000e0e <main+0x29e>
			registerFrame[0x10].U16 = 8;
 8000e02:	4b28      	ldr	r3, [pc, #160]	@ (8000ea4 <main+0x334>)
 8000e04:	2208      	movs	r2, #8
 8000e06:	841a      	strh	r2, [r3, #32]
			a = 2;
 8000e08:	4b2a      	ldr	r3, [pc, #168]	@ (8000eb4 <main+0x344>)
 8000e0a:	2202      	movs	r2, #2
 8000e0c:	701a      	strb	r2, [r3, #0]
		}}
	if(registerFrame[0x10].U16 == 8 && j < 5){
 8000e0e:	4b25      	ldr	r3, [pc, #148]	@ (8000ea4 <main+0x334>)
 8000e10:	8c1b      	ldrh	r3, [r3, #32]
 8000e12:	2b08      	cmp	r3, #8
 8000e14:	d12d      	bne.n	8000e72 <main+0x302>
 8000e16:	4b26      	ldr	r3, [pc, #152]	@ (8000eb0 <main+0x340>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	dc29      	bgt.n	8000e72 <main+0x302>
			a = 3;
 8000e1e:	4b25      	ldr	r3, [pc, #148]	@ (8000eb4 <main+0x344>)
 8000e20:	2203      	movs	r2, #3
 8000e22:	701a      	strb	r2, [r3, #0]
		if(registerFrame[3].U16 == 0){//Gripper BW before move
 8000e24:	4b1f      	ldr	r3, [pc, #124]	@ (8000ea4 <main+0x334>)
 8000e26:	88db      	ldrh	r3, [r3, #6]
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d109      	bne.n	8000e40 <main+0x2d0>
			Goal = GoalPlace[j];
 8000e2c:	4b20      	ldr	r3, [pc, #128]	@ (8000eb0 <main+0x340>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a1b      	ldr	r2, [pc, #108]	@ (8000ea0 <main+0x330>)
 8000e32:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e36:	4b1c      	ldr	r3, [pc, #112]	@ (8000ea8 <main+0x338>)
 8000e38:	801a      	strh	r2, [r3, #0]
			a = 4;
 8000e3a:	4b1e      	ldr	r3, [pc, #120]	@ (8000eb4 <main+0x344>)
 8000e3c:	2204      	movs	r2, #4
 8000e3e:	701a      	strb	r2, [r3, #0]
		}//Gripper FW Vacuum Off
		if(Z[0] == Goal && registerFrame[3].U16 == 1 && registerFrame[2].U16 == 0){
 8000e40:	4b1a      	ldr	r3, [pc, #104]	@ (8000eac <main+0x33c>)
 8000e42:	881a      	ldrh	r2, [r3, #0]
 8000e44:	4b18      	ldr	r3, [pc, #96]	@ (8000ea8 <main+0x338>)
 8000e46:	881b      	ldrh	r3, [r3, #0]
 8000e48:	429a      	cmp	r2, r3
 8000e4a:	d112      	bne.n	8000e72 <main+0x302>
 8000e4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ea4 <main+0x334>)
 8000e4e:	88db      	ldrh	r3, [r3, #6]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d10e      	bne.n	8000e72 <main+0x302>
 8000e54:	4b13      	ldr	r3, [pc, #76]	@ (8000ea4 <main+0x334>)
 8000e56:	889b      	ldrh	r3, [r3, #4]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d10a      	bne.n	8000e72 <main+0x302>
			registerFrame[0x10].U16 = 4;
 8000e5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ea4 <main+0x334>)
 8000e5e:	2204      	movs	r2, #4
 8000e60:	841a      	strh	r2, [r3, #32]
			j += 1;
 8000e62:	4b13      	ldr	r3, [pc, #76]	@ (8000eb0 <main+0x340>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	3301      	adds	r3, #1
 8000e68:	4a11      	ldr	r2, [pc, #68]	@ (8000eb0 <main+0x340>)
 8000e6a:	6013      	str	r3, [r2, #0]
			a = 5;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	@ (8000eb4 <main+0x344>)
 8000e6e:	2205      	movs	r2, #5
 8000e70:	701a      	strb	r2, [r3, #0]
			}
		}
	if(j==5){
 8000e72:	4b0f      	ldr	r3, [pc, #60]	@ (8000eb0 <main+0x340>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	2b05      	cmp	r3, #5
 8000e78:	f47f ae9e 	bne.w	8000bb8 <main+0x48>
		registerFrame[0x10].U16 = 0;
 8000e7c:	4b09      	ldr	r3, [pc, #36]	@ (8000ea4 <main+0x334>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	841a      	strh	r2, [r3, #32]
		j = 0;
 8000e82:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb0 <main+0x340>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
		a = 6;
 8000e88:	4b0a      	ldr	r3, [pc, #40]	@ (8000eb4 <main+0x344>)
 8000e8a:	2206      	movs	r2, #6
 8000e8c:	701a      	strb	r2, [r3, #0]
  {
 8000e8e:	e693      	b.n	8000bb8 <main+0x48>
 8000e90:	20000bd4 	.word	0x20000bd4
 8000e94:	20000bbc 	.word	0x20000bbc
 8000e98:	20000be4 	.word	0x20000be4
 8000e9c:	20000bdc 	.word	0x20000bdc
 8000ea0:	20000bf0 	.word	0x20000bf0
 8000ea4:	20000a2c 	.word	0x20000a2c
 8000ea8:	20000bfa 	.word	0x20000bfa
 8000eac:	20000bc8 	.word	0x20000bc8
 8000eb0:	20000bfc 	.word	0x20000bfc
 8000eb4:	20000c00 	.word	0x20000c00

08000eb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b094      	sub	sp, #80	@ 0x50
 8000ebc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ebe:	f107 0318 	add.w	r3, r7, #24
 8000ec2:	2238      	movs	r2, #56	@ 0x38
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f005 fa4e 	bl	8006368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
 8000ed8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000eda:	2000      	movs	r0, #0
 8000edc:	f001 fa32 	bl	8002344 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ee0:	2302      	movs	r3, #2
 8000ee2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ee4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ee8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000eea:	2340      	movs	r3, #64	@ 0x40
 8000eec:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000eee:	2302      	movs	r3, #2
 8000ef0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000ef6:	2304      	movs	r3, #4
 8000ef8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000efa:	2355      	movs	r3, #85	@ 0x55
 8000efc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000efe:	2302      	movs	r3, #2
 8000f00:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f02:	2302      	movs	r3, #2
 8000f04:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f06:	2302      	movs	r3, #2
 8000f08:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0a:	f107 0318 	add.w	r3, r7, #24
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f001 facc 	bl	80024ac <HAL_RCC_OscConfig>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000f1a:	f000 f9d5 	bl	80012c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f1e:	230f      	movs	r3, #15
 8000f20:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f22:	2303      	movs	r3, #3
 8000f24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000f32:	1d3b      	adds	r3, r7, #4
 8000f34:	2104      	movs	r1, #4
 8000f36:	4618      	mov	r0, r3
 8000f38:	f001 fdca 	bl	8002ad0 <HAL_RCC_ClockConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000f42:	f000 f9c1 	bl	80012c8 <Error_Handler>
  }
}
 8000f46:	bf00      	nop
 8000f48:	3750      	adds	r7, #80	@ 0x50
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
	...

08000f50 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f56:	f107 0310 	add.w	r3, r7, #16
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f64:	1d3b      	adds	r3, r7, #4
 8000f66:	2200      	movs	r2, #0
 8000f68:	601a      	str	r2, [r3, #0]
 8000f6a:	605a      	str	r2, [r3, #4]
 8000f6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe4 <MX_TIM5_Init+0x94>)
 8000f70:	4a1d      	ldr	r2, [pc, #116]	@ (8000fe8 <MX_TIM5_Init+0x98>)
 8000f72:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8000f74:	4b1b      	ldr	r3, [pc, #108]	@ (8000fe4 <MX_TIM5_Init+0x94>)
 8000f76:	22a9      	movs	r2, #169	@ 0xa9
 8000f78:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8000fe4 <MX_TIM5_Init+0x94>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4999;
 8000f80:	4b18      	ldr	r3, [pc, #96]	@ (8000fe4 <MX_TIM5_Init+0x94>)
 8000f82:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000f86:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f88:	4b16      	ldr	r3, [pc, #88]	@ (8000fe4 <MX_TIM5_Init+0x94>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f8e:	4b15      	ldr	r3, [pc, #84]	@ (8000fe4 <MX_TIM5_Init+0x94>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000f94:	4813      	ldr	r0, [pc, #76]	@ (8000fe4 <MX_TIM5_Init+0x94>)
 8000f96:	f002 fa05 	bl	80033a4 <HAL_TIM_Base_Init>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000fa0:	f000 f992 	bl	80012c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fa4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fa8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000faa:	f107 0310 	add.w	r3, r7, #16
 8000fae:	4619      	mov	r1, r3
 8000fb0:	480c      	ldr	r0, [pc, #48]	@ (8000fe4 <MX_TIM5_Init+0x94>)
 8000fb2:	f002 fd43 	bl	8003a3c <HAL_TIM_ConfigClockSource>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000fbc:	f000 f984 	bl	80012c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4805      	ldr	r0, [pc, #20]	@ (8000fe4 <MX_TIM5_Init+0x94>)
 8000fce:	f003 f9f1 	bl	80043b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000fd8:	f000 f976 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000fdc:	bf00      	nop
 8000fde:	3720      	adds	r7, #32
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	20000230 	.word	0x20000230
 8000fe8:	40000c00 	.word	0x40000c00

08000fec <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000ff0:	4b14      	ldr	r3, [pc, #80]	@ (8001044 <MX_TIM16_Init+0x58>)
 8000ff2:	4a15      	ldr	r2, [pc, #84]	@ (8001048 <MX_TIM16_Init+0x5c>)
 8000ff4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8000ff6:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <MX_TIM16_Init+0x58>)
 8000ff8:	22a9      	movs	r2, #169	@ 0xa9
 8000ffa:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ffc:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <MX_TIM16_Init+0x58>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8001002:	4b10      	ldr	r3, [pc, #64]	@ (8001044 <MX_TIM16_Init+0x58>)
 8001004:	f240 4279 	movw	r2, #1145	@ 0x479
 8001008:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800100a:	4b0e      	ldr	r3, [pc, #56]	@ (8001044 <MX_TIM16_Init+0x58>)
 800100c:	2200      	movs	r2, #0
 800100e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001010:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <MX_TIM16_Init+0x58>)
 8001012:	2200      	movs	r2, #0
 8001014:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001016:	4b0b      	ldr	r3, [pc, #44]	@ (8001044 <MX_TIM16_Init+0x58>)
 8001018:	2200      	movs	r2, #0
 800101a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800101c:	4809      	ldr	r0, [pc, #36]	@ (8001044 <MX_TIM16_Init+0x58>)
 800101e:	f002 f9c1 	bl	80033a4 <HAL_TIM_Base_Init>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8001028:	f000 f94e 	bl	80012c8 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 800102c:	2108      	movs	r1, #8
 800102e:	4805      	ldr	r0, [pc, #20]	@ (8001044 <MX_TIM16_Init+0x58>)
 8001030:	f002 fa94 	bl	800355c <HAL_TIM_OnePulse_Init>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 800103a:	f000 f945 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	200002fc 	.word	0x200002fc
 8001048:	40014400 	.word	0x40014400

0800104c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001050:	4b23      	ldr	r3, [pc, #140]	@ (80010e0 <MX_USART2_UART_Init+0x94>)
 8001052:	4a24      	ldr	r2, [pc, #144]	@ (80010e4 <MX_USART2_UART_Init+0x98>)
 8001054:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001056:	4b22      	ldr	r3, [pc, #136]	@ (80010e0 <MX_USART2_UART_Init+0x94>)
 8001058:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 800105c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800105e:	4b20      	ldr	r3, [pc, #128]	@ (80010e0 <MX_USART2_UART_Init+0x94>)
 8001060:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001064:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001066:	4b1e      	ldr	r3, [pc, #120]	@ (80010e0 <MX_USART2_UART_Init+0x94>)
 8001068:	2200      	movs	r2, #0
 800106a:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 800106c:	4b1c      	ldr	r3, [pc, #112]	@ (80010e0 <MX_USART2_UART_Init+0x94>)
 800106e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001072:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001074:	4b1a      	ldr	r3, [pc, #104]	@ (80010e0 <MX_USART2_UART_Init+0x94>)
 8001076:	220c      	movs	r2, #12
 8001078:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800107a:	4b19      	ldr	r3, [pc, #100]	@ (80010e0 <MX_USART2_UART_Init+0x94>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001080:	4b17      	ldr	r3, [pc, #92]	@ (80010e0 <MX_USART2_UART_Init+0x94>)
 8001082:	2200      	movs	r2, #0
 8001084:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001086:	4b16      	ldr	r3, [pc, #88]	@ (80010e0 <MX_USART2_UART_Init+0x94>)
 8001088:	2200      	movs	r2, #0
 800108a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800108c:	4b14      	ldr	r3, [pc, #80]	@ (80010e0 <MX_USART2_UART_Init+0x94>)
 800108e:	2200      	movs	r2, #0
 8001090:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001092:	4b13      	ldr	r3, [pc, #76]	@ (80010e0 <MX_USART2_UART_Init+0x94>)
 8001094:	2200      	movs	r2, #0
 8001096:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001098:	4811      	ldr	r0, [pc, #68]	@ (80010e0 <MX_USART2_UART_Init+0x94>)
 800109a:	f003 fa71 	bl	8004580 <HAL_UART_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 80010a4:	f000 f910 	bl	80012c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010a8:	2100      	movs	r1, #0
 80010aa:	480d      	ldr	r0, [pc, #52]	@ (80010e0 <MX_USART2_UART_Init+0x94>)
 80010ac:	f005 f891 	bl	80061d2 <HAL_UARTEx_SetTxFifoThreshold>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 80010b6:	f000 f907 	bl	80012c8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010ba:	2100      	movs	r1, #0
 80010bc:	4808      	ldr	r0, [pc, #32]	@ (80010e0 <MX_USART2_UART_Init+0x94>)
 80010be:	f005 f8c6 	bl	800624e <HAL_UARTEx_SetRxFifoThreshold>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 80010c8:	f000 f8fe 	bl	80012c8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80010cc:	4804      	ldr	r0, [pc, #16]	@ (80010e0 <MX_USART2_UART_Init+0x94>)
 80010ce:	f005 f847 	bl	8006160 <HAL_UARTEx_DisableFifoMode>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 80010d8:	f000 f8f6 	bl	80012c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010dc:	bf00      	nop
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	200003c8 	.word	0x200003c8
 80010e4:	40004400 	.word	0x40004400

080010e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80010ee:	4b16      	ldr	r3, [pc, #88]	@ (8001148 <MX_DMA_Init+0x60>)
 80010f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010f2:	4a15      	ldr	r2, [pc, #84]	@ (8001148 <MX_DMA_Init+0x60>)
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	6493      	str	r3, [r2, #72]	@ 0x48
 80010fa:	4b13      	ldr	r3, [pc, #76]	@ (8001148 <MX_DMA_Init+0x60>)
 80010fc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001106:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <MX_DMA_Init+0x60>)
 8001108:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800110a:	4a0f      	ldr	r2, [pc, #60]	@ (8001148 <MX_DMA_Init+0x60>)
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	6493      	str	r3, [r2, #72]	@ 0x48
 8001112:	4b0d      	ldr	r3, [pc, #52]	@ (8001148 <MX_DMA_Init+0x60>)
 8001114:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001116:	f003 0301 	and.w	r3, r3, #1
 800111a:	603b      	str	r3, [r7, #0]
 800111c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800111e:	2200      	movs	r2, #0
 8001120:	2100      	movs	r1, #0
 8001122:	200b      	movs	r0, #11
 8001124:	f000 fbe9 	bl	80018fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001128:	200b      	movs	r0, #11
 800112a:	f000 fc00 	bl	800192e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800112e:	2200      	movs	r2, #0
 8001130:	2100      	movs	r1, #0
 8001132:	200c      	movs	r0, #12
 8001134:	f000 fbe1 	bl	80018fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001138:	200c      	movs	r0, #12
 800113a:	f000 fbf8 	bl	800192e <HAL_NVIC_EnableIRQ>

}
 800113e:	bf00      	nop
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	40021000 	.word	0x40021000

0800114c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	@ 0x28
 8001150:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001152:	f107 0314 	add.w	r3, r7, #20
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]
 800115e:	60da      	str	r2, [r3, #12]
 8001160:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001162:	4b2f      	ldr	r3, [pc, #188]	@ (8001220 <MX_GPIO_Init+0xd4>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001166:	4a2e      	ldr	r2, [pc, #184]	@ (8001220 <MX_GPIO_Init+0xd4>)
 8001168:	f043 0304 	orr.w	r3, r3, #4
 800116c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800116e:	4b2c      	ldr	r3, [pc, #176]	@ (8001220 <MX_GPIO_Init+0xd4>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001172:	f003 0304 	and.w	r3, r3, #4
 8001176:	613b      	str	r3, [r7, #16]
 8001178:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800117a:	4b29      	ldr	r3, [pc, #164]	@ (8001220 <MX_GPIO_Init+0xd4>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800117e:	4a28      	ldr	r2, [pc, #160]	@ (8001220 <MX_GPIO_Init+0xd4>)
 8001180:	f043 0320 	orr.w	r3, r3, #32
 8001184:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001186:	4b26      	ldr	r3, [pc, #152]	@ (8001220 <MX_GPIO_Init+0xd4>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800118a:	f003 0320 	and.w	r3, r3, #32
 800118e:	60fb      	str	r3, [r7, #12]
 8001190:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	4b23      	ldr	r3, [pc, #140]	@ (8001220 <MX_GPIO_Init+0xd4>)
 8001194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001196:	4a22      	ldr	r2, [pc, #136]	@ (8001220 <MX_GPIO_Init+0xd4>)
 8001198:	f043 0301 	orr.w	r3, r3, #1
 800119c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800119e:	4b20      	ldr	r3, [pc, #128]	@ (8001220 <MX_GPIO_Init+0xd4>)
 80011a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a2:	f003 0301 	and.w	r3, r3, #1
 80011a6:	60bb      	str	r3, [r7, #8]
 80011a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011aa:	4b1d      	ldr	r3, [pc, #116]	@ (8001220 <MX_GPIO_Init+0xd4>)
 80011ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ae:	4a1c      	ldr	r2, [pc, #112]	@ (8001220 <MX_GPIO_Init+0xd4>)
 80011b0:	f043 0302 	orr.w	r3, r3, #2
 80011b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001220 <MX_GPIO_Init+0xd4>)
 80011b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ba:	f003 0302 	and.w	r3, r3, #2
 80011be:	607b      	str	r3, [r7, #4]
 80011c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80011c2:	2200      	movs	r2, #0
 80011c4:	2120      	movs	r1, #32
 80011c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011ca:	f001 f87f 	bl	80022cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011d4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80011d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011de:	f107 0314 	add.w	r3, r7, #20
 80011e2:	4619      	mov	r1, r3
 80011e4:	480f      	ldr	r0, [pc, #60]	@ (8001224 <MX_GPIO_Init+0xd8>)
 80011e6:	f000 feef 	bl	8001fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80011ea:	2320      	movs	r3, #32
 80011ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ee:	2301      	movs	r3, #1
 80011f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f2:	2300      	movs	r3, #0
 80011f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f6:	2300      	movs	r3, #0
 80011f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80011fa:	f107 0314 	add.w	r3, r7, #20
 80011fe:	4619      	mov	r1, r3
 8001200:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001204:	f000 fee0 	bl	8001fc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001208:	2200      	movs	r2, #0
 800120a:	2100      	movs	r1, #0
 800120c:	2028      	movs	r0, #40	@ 0x28
 800120e:	f000 fb74 	bl	80018fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001212:	2028      	movs	r0, #40	@ 0x28
 8001214:	f000 fb8b 	bl	800192e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001218:	bf00      	nop
 800121a:	3728      	adds	r7, #40	@ 0x28
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40021000 	.word	0x40021000
 8001224:	48000800 	.word	0x48000800

08001228 <convert_to_string>:
/* USER CODE BEGIN 4 */
uint32_t dalay_timestamp(){

}

void convert_to_string(uint16_t number, char* buffer, int buffer_size) {
 8001228:	b480      	push	{r7}
 800122a:	b087      	sub	sp, #28
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	60b9      	str	r1, [r7, #8]
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	81fb      	strh	r3, [r7, #14]
  if (buffer_size < 6) { // Ensure buffer size is at least 6 (for 5 digits + null terminator)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2b05      	cmp	r3, #5
 800123a:	dd26      	ble.n	800128a <convert_to_string+0x62>
    return; // Handle error (insufficient buffer size)
  }

  int index = 0;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
  do {
    uint8_t digit = number % 10;
 8001240:	89fa      	ldrh	r2, [r7, #14]
 8001242:	4b15      	ldr	r3, [pc, #84]	@ (8001298 <convert_to_string+0x70>)
 8001244:	fba3 1302 	umull	r1, r3, r3, r2
 8001248:	08d9      	lsrs	r1, r3, #3
 800124a:	460b      	mov	r3, r1
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	440b      	add	r3, r1
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	1ad3      	subs	r3, r2, r3
 8001254:	b29b      	uxth	r3, r3
 8001256:	74fb      	strb	r3, [r7, #19]
    buffer[index++] = digit + '0';
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	617a      	str	r2, [r7, #20]
 800125e:	461a      	mov	r2, r3
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	4413      	add	r3, r2
 8001264:	7cfa      	ldrb	r2, [r7, #19]
 8001266:	3230      	adds	r2, #48	@ 0x30
 8001268:	b2d2      	uxtb	r2, r2
 800126a:	701a      	strb	r2, [r3, #0]
    number /= 10;
 800126c:	89fb      	ldrh	r3, [r7, #14]
 800126e:	4a0a      	ldr	r2, [pc, #40]	@ (8001298 <convert_to_string+0x70>)
 8001270:	fba2 2303 	umull	r2, r3, r2, r3
 8001274:	08db      	lsrs	r3, r3, #3
 8001276:	81fb      	strh	r3, [r7, #14]
  } while (number > 0);
 8001278:	89fb      	ldrh	r3, [r7, #14]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1e0      	bne.n	8001240 <convert_to_string+0x18>
  buffer[index] = '\0';
 800127e:	697b      	ldr	r3, [r7, #20]
 8001280:	68ba      	ldr	r2, [r7, #8]
 8001282:	4413      	add	r3, r2
 8001284:	2200      	movs	r2, #0
 8001286:	701a      	strb	r2, [r3, #0]
 8001288:	e000      	b.n	800128c <convert_to_string+0x64>
    return; // Handle error (insufficient buffer size)
 800128a:	bf00      	nop
}
 800128c:	371c      	adds	r7, #28
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	cccccccd 	.word	0xcccccccd

0800129c <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a06      	ldr	r2, [pc, #24]	@ (80012c0 <HAL_TIM_PeriodElapsedCallback+0x24>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d103      	bne.n	80012b4 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		registerFrame[0].U16 = 22881;
 80012ac:	4b05      	ldr	r3, [pc, #20]	@ (80012c4 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80012ae:	f645 1261 	movw	r2, #22881	@ 0x5961
 80012b2:	801a      	strh	r2, [r3, #0]

		//registerFrame[10].U16 =
		}
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	20000230 	.word	0x20000230
 80012c4:	20000a2c 	.word	0x20000a2c

080012c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012cc:	b672      	cpsid	i
}
 80012ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012d0:	bf00      	nop
 80012d2:	e7fd      	b.n	80012d0 <Error_Handler+0x8>

080012d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012da:	4b0f      	ldr	r3, [pc, #60]	@ (8001318 <HAL_MspInit+0x44>)
 80012dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012de:	4a0e      	ldr	r2, [pc, #56]	@ (8001318 <HAL_MspInit+0x44>)
 80012e0:	f043 0301 	orr.w	r3, r3, #1
 80012e4:	6613      	str	r3, [r2, #96]	@ 0x60
 80012e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001318 <HAL_MspInit+0x44>)
 80012e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	607b      	str	r3, [r7, #4]
 80012f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012f2:	4b09      	ldr	r3, [pc, #36]	@ (8001318 <HAL_MspInit+0x44>)
 80012f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012f6:	4a08      	ldr	r2, [pc, #32]	@ (8001318 <HAL_MspInit+0x44>)
 80012f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80012fe:	4b06      	ldr	r3, [pc, #24]	@ (8001318 <HAL_MspInit+0x44>)
 8001300:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001302:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001306:	603b      	str	r3, [r7, #0]
 8001308:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800130a:	f001 f8bf 	bl	800248c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	40021000 	.word	0x40021000

0800131c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a1a      	ldr	r2, [pc, #104]	@ (8001394 <HAL_TIM_Base_MspInit+0x78>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d114      	bne.n	8001358 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800132e:	4b1a      	ldr	r3, [pc, #104]	@ (8001398 <HAL_TIM_Base_MspInit+0x7c>)
 8001330:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001332:	4a19      	ldr	r2, [pc, #100]	@ (8001398 <HAL_TIM_Base_MspInit+0x7c>)
 8001334:	f043 0308 	orr.w	r3, r3, #8
 8001338:	6593      	str	r3, [r2, #88]	@ 0x58
 800133a:	4b17      	ldr	r3, [pc, #92]	@ (8001398 <HAL_TIM_Base_MspInit+0x7c>)
 800133c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	60fb      	str	r3, [r7, #12]
 8001344:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001346:	2200      	movs	r2, #0
 8001348:	2100      	movs	r1, #0
 800134a:	2032      	movs	r0, #50	@ 0x32
 800134c:	f000 fad5 	bl	80018fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001350:	2032      	movs	r0, #50	@ 0x32
 8001352:	f000 faec 	bl	800192e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 8001356:	e018      	b.n	800138a <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM16)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a0f      	ldr	r2, [pc, #60]	@ (800139c <HAL_TIM_Base_MspInit+0x80>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d113      	bne.n	800138a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001362:	4b0d      	ldr	r3, [pc, #52]	@ (8001398 <HAL_TIM_Base_MspInit+0x7c>)
 8001364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001366:	4a0c      	ldr	r2, [pc, #48]	@ (8001398 <HAL_TIM_Base_MspInit+0x7c>)
 8001368:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800136c:	6613      	str	r3, [r2, #96]	@ 0x60
 800136e:	4b0a      	ldr	r3, [pc, #40]	@ (8001398 <HAL_TIM_Base_MspInit+0x7c>)
 8001370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	2019      	movs	r0, #25
 8001380:	f000 fabb 	bl	80018fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001384:	2019      	movs	r0, #25
 8001386:	f000 fad2 	bl	800192e <HAL_NVIC_EnableIRQ>
}
 800138a:	bf00      	nop
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40000c00 	.word	0x40000c00
 8001398:	40021000 	.word	0x40021000
 800139c:	40014400 	.word	0x40014400

080013a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b09e      	sub	sp, #120	@ 0x78
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013ac:	2200      	movs	r2, #0
 80013ae:	601a      	str	r2, [r3, #0]
 80013b0:	605a      	str	r2, [r3, #4]
 80013b2:	609a      	str	r2, [r3, #8]
 80013b4:	60da      	str	r2, [r3, #12]
 80013b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80013b8:	f107 0310 	add.w	r3, r7, #16
 80013bc:	2254      	movs	r2, #84	@ 0x54
 80013be:	2100      	movs	r1, #0
 80013c0:	4618      	mov	r0, r3
 80013c2:	f004 ffd1 	bl	8006368 <memset>
  if(huart->Instance==USART2)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a4d      	ldr	r2, [pc, #308]	@ (8001500 <HAL_UART_MspInit+0x160>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	f040 8092 	bne.w	80014f6 <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013d2:	2302      	movs	r3, #2
 80013d4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013d6:	2300      	movs	r3, #0
 80013d8:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013da:	f107 0310 	add.w	r3, r7, #16
 80013de:	4618      	mov	r0, r3
 80013e0:	f001 fd92 	bl	8002f08 <HAL_RCCEx_PeriphCLKConfig>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013ea:	f7ff ff6d 	bl	80012c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013ee:	4b45      	ldr	r3, [pc, #276]	@ (8001504 <HAL_UART_MspInit+0x164>)
 80013f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f2:	4a44      	ldr	r2, [pc, #272]	@ (8001504 <HAL_UART_MspInit+0x164>)
 80013f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80013fa:	4b42      	ldr	r3, [pc, #264]	@ (8001504 <HAL_UART_MspInit+0x164>)
 80013fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001406:	4b3f      	ldr	r3, [pc, #252]	@ (8001504 <HAL_UART_MspInit+0x164>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800140a:	4a3e      	ldr	r2, [pc, #248]	@ (8001504 <HAL_UART_MspInit+0x164>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001412:	4b3c      	ldr	r3, [pc, #240]	@ (8001504 <HAL_UART_MspInit+0x164>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800141e:	230c      	movs	r3, #12
 8001420:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800142e:	2307      	movs	r3, #7
 8001430:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001432:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001436:	4619      	mov	r1, r3
 8001438:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800143c:	f000 fdc4 	bl	8001fc8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8001440:	4b31      	ldr	r3, [pc, #196]	@ (8001508 <HAL_UART_MspInit+0x168>)
 8001442:	4a32      	ldr	r2, [pc, #200]	@ (800150c <HAL_UART_MspInit+0x16c>)
 8001444:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 8001446:	4b30      	ldr	r3, [pc, #192]	@ (8001508 <HAL_UART_MspInit+0x168>)
 8001448:	221b      	movs	r2, #27
 800144a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800144c:	4b2e      	ldr	r3, [pc, #184]	@ (8001508 <HAL_UART_MspInit+0x168>)
 800144e:	2210      	movs	r2, #16
 8001450:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001452:	4b2d      	ldr	r3, [pc, #180]	@ (8001508 <HAL_UART_MspInit+0x168>)
 8001454:	2200      	movs	r2, #0
 8001456:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001458:	4b2b      	ldr	r3, [pc, #172]	@ (8001508 <HAL_UART_MspInit+0x168>)
 800145a:	2280      	movs	r2, #128	@ 0x80
 800145c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800145e:	4b2a      	ldr	r3, [pc, #168]	@ (8001508 <HAL_UART_MspInit+0x168>)
 8001460:	2200      	movs	r2, #0
 8001462:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001464:	4b28      	ldr	r3, [pc, #160]	@ (8001508 <HAL_UART_MspInit+0x168>)
 8001466:	2200      	movs	r2, #0
 8001468:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800146a:	4b27      	ldr	r3, [pc, #156]	@ (8001508 <HAL_UART_MspInit+0x168>)
 800146c:	2200      	movs	r2, #0
 800146e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001470:	4b25      	ldr	r3, [pc, #148]	@ (8001508 <HAL_UART_MspInit+0x168>)
 8001472:	2200      	movs	r2, #0
 8001474:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001476:	4824      	ldr	r0, [pc, #144]	@ (8001508 <HAL_UART_MspInit+0x168>)
 8001478:	f000 fa74 	bl	8001964 <HAL_DMA_Init>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8001482:	f7ff ff21 	bl	80012c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a1f      	ldr	r2, [pc, #124]	@ (8001508 <HAL_UART_MspInit+0x168>)
 800148a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800148c:	4a1e      	ldr	r2, [pc, #120]	@ (8001508 <HAL_UART_MspInit+0x168>)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8001492:	4b1f      	ldr	r3, [pc, #124]	@ (8001510 <HAL_UART_MspInit+0x170>)
 8001494:	4a1f      	ldr	r2, [pc, #124]	@ (8001514 <HAL_UART_MspInit+0x174>)
 8001496:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 8001498:	4b1d      	ldr	r3, [pc, #116]	@ (8001510 <HAL_UART_MspInit+0x170>)
 800149a:	221a      	movs	r2, #26
 800149c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800149e:	4b1c      	ldr	r3, [pc, #112]	@ (8001510 <HAL_UART_MspInit+0x170>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014a4:	4b1a      	ldr	r3, [pc, #104]	@ (8001510 <HAL_UART_MspInit+0x170>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014aa:	4b19      	ldr	r3, [pc, #100]	@ (8001510 <HAL_UART_MspInit+0x170>)
 80014ac:	2280      	movs	r2, #128	@ 0x80
 80014ae:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014b0:	4b17      	ldr	r3, [pc, #92]	@ (8001510 <HAL_UART_MspInit+0x170>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014b6:	4b16      	ldr	r3, [pc, #88]	@ (8001510 <HAL_UART_MspInit+0x170>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80014bc:	4b14      	ldr	r3, [pc, #80]	@ (8001510 <HAL_UART_MspInit+0x170>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014c2:	4b13      	ldr	r3, [pc, #76]	@ (8001510 <HAL_UART_MspInit+0x170>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80014c8:	4811      	ldr	r0, [pc, #68]	@ (8001510 <HAL_UART_MspInit+0x170>)
 80014ca:	f000 fa4b 	bl	8001964 <HAL_DMA_Init>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d001      	beq.n	80014d8 <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 80014d4:	f7ff fef8 	bl	80012c8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a0d      	ldr	r2, [pc, #52]	@ (8001510 <HAL_UART_MspInit+0x170>)
 80014dc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80014e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001510 <HAL_UART_MspInit+0x170>)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014e6:	2200      	movs	r2, #0
 80014e8:	2100      	movs	r1, #0
 80014ea:	2026      	movs	r0, #38	@ 0x26
 80014ec:	f000 fa05 	bl	80018fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014f0:	2026      	movs	r0, #38	@ 0x26
 80014f2:	f000 fa1c 	bl	800192e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014f6:	bf00      	nop
 80014f8:	3778      	adds	r7, #120	@ 0x78
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	40004400 	.word	0x40004400
 8001504:	40021000 	.word	0x40021000
 8001508:	20000494 	.word	0x20000494
 800150c:	40020008 	.word	0x40020008
 8001510:	200004f4 	.word	0x200004f4
 8001514:	4002001c 	.word	0x4002001c

08001518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800151c:	bf00      	nop
 800151e:	e7fd      	b.n	800151c <NMI_Handler+0x4>

08001520 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001524:	bf00      	nop
 8001526:	e7fd      	b.n	8001524 <HardFault_Handler+0x4>

08001528 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800152c:	bf00      	nop
 800152e:	e7fd      	b.n	800152c <MemManage_Handler+0x4>

08001530 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001534:	bf00      	nop
 8001536:	e7fd      	b.n	8001534 <BusFault_Handler+0x4>

08001538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800153c:	bf00      	nop
 800153e:	e7fd      	b.n	800153c <UsageFault_Handler+0x4>

08001540 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800155c:	b480      	push	{r7}
 800155e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001560:	bf00      	nop
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr

0800156a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800156e:	f000 f8cb 	bl	8001708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800157c:	4802      	ldr	r0, [pc, #8]	@ (8001588 <DMA1_Channel1_IRQHandler+0x10>)
 800157e:	f000 fbd4 	bl	8001d2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001582:	bf00      	nop
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000494 	.word	0x20000494

0800158c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001590:	4802      	ldr	r0, [pc, #8]	@ (800159c <DMA1_Channel2_IRQHandler+0x10>)
 8001592:	f000 fbca 	bl	8001d2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	200004f4 	.word	0x200004f4

080015a0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 80015a4:	4802      	ldr	r0, [pc, #8]	@ (80015b0 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80015a6:	f002 f8cf 	bl	8003748 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	200002fc 	.word	0x200002fc

080015b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80015b8:	4802      	ldr	r0, [pc, #8]	@ (80015c4 <USART2_IRQHandler+0x10>)
 80015ba:	f003 f9c7 	bl	800494c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015be:	bf00      	nop
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	200003c8 	.word	0x200003c8

080015c8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80015cc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80015d0:	f000 fe94 	bl	80022fc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80015dc:	4802      	ldr	r0, [pc, #8]	@ (80015e8 <TIM5_IRQHandler+0x10>)
 80015de:	f002 f8b3 	bl	8003748 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000230 	.word	0x20000230

080015ec <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015f0:	4b06      	ldr	r3, [pc, #24]	@ (800160c <SystemInit+0x20>)
 80015f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015f6:	4a05      	ldr	r2, [pc, #20]	@ (800160c <SystemInit+0x20>)
 80015f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	e000ed00 	.word	0xe000ed00

08001610 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001610:	480d      	ldr	r0, [pc, #52]	@ (8001648 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001612:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001614:	f7ff ffea 	bl	80015ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001618:	480c      	ldr	r0, [pc, #48]	@ (800164c <LoopForever+0x6>)
  ldr r1, =_edata
 800161a:	490d      	ldr	r1, [pc, #52]	@ (8001650 <LoopForever+0xa>)
  ldr r2, =_sidata
 800161c:	4a0d      	ldr	r2, [pc, #52]	@ (8001654 <LoopForever+0xe>)
  movs r3, #0
 800161e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001620:	e002      	b.n	8001628 <LoopCopyDataInit>

08001622 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001622:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001624:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001626:	3304      	adds	r3, #4

08001628 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001628:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800162c:	d3f9      	bcc.n	8001622 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800162e:	4a0a      	ldr	r2, [pc, #40]	@ (8001658 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001630:	4c0a      	ldr	r4, [pc, #40]	@ (800165c <LoopForever+0x16>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001634:	e001      	b.n	800163a <LoopFillZerobss>

08001636 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001636:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001638:	3204      	adds	r2, #4

0800163a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800163c:	d3fb      	bcc.n	8001636 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800163e:	f004 fe9b 	bl	8006378 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001642:	f7ff fa95 	bl	8000b70 <main>

08001646 <LoopForever>:

LoopForever:
    b LoopForever
 8001646:	e7fe      	b.n	8001646 <LoopForever>
  ldr   r0, =_estack
 8001648:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800164c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001650:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8001654:	08006444 	.word	0x08006444
  ldr r2, =_sbss
 8001658:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 800165c:	20000c14 	.word	0x20000c14

08001660 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001660:	e7fe      	b.n	8001660 <ADC1_2_IRQHandler>

08001662 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001668:	2300      	movs	r3, #0
 800166a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166c:	2003      	movs	r0, #3
 800166e:	f000 f939 	bl	80018e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001672:	2000      	movs	r0, #0
 8001674:	f000 f80e 	bl	8001694 <HAL_InitTick>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d002      	beq.n	8001684 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	71fb      	strb	r3, [r7, #7]
 8001682:	e001      	b.n	8001688 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001684:	f7ff fe26 	bl	80012d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001688:	79fb      	ldrb	r3, [r7, #7]

}
 800168a:	4618      	mov	r0, r3
 800168c:	3708      	adds	r7, #8
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
	...

08001694 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800169c:	2300      	movs	r3, #0
 800169e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80016a0:	4b16      	ldr	r3, [pc, #88]	@ (80016fc <HAL_InitTick+0x68>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d022      	beq.n	80016ee <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80016a8:	4b15      	ldr	r3, [pc, #84]	@ (8001700 <HAL_InitTick+0x6c>)
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b13      	ldr	r3, [pc, #76]	@ (80016fc <HAL_InitTick+0x68>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80016b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80016b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80016bc:	4618      	mov	r0, r3
 80016be:	f000 f944 	bl	800194a <HAL_SYSTICK_Config>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d10f      	bne.n	80016e8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2b0f      	cmp	r3, #15
 80016cc:	d809      	bhi.n	80016e2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016ce:	2200      	movs	r2, #0
 80016d0:	6879      	ldr	r1, [r7, #4]
 80016d2:	f04f 30ff 	mov.w	r0, #4294967295
 80016d6:	f000 f910 	bl	80018fa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016da:	4a0a      	ldr	r2, [pc, #40]	@ (8001704 <HAL_InitTick+0x70>)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6013      	str	r3, [r2, #0]
 80016e0:	e007      	b.n	80016f2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	73fb      	strb	r3, [r7, #15]
 80016e6:	e004      	b.n	80016f2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	73fb      	strb	r3, [r7, #15]
 80016ec:	e001      	b.n	80016f2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	2000020c 	.word	0x2000020c
 8001700:	20000204 	.word	0x20000204
 8001704:	20000208 	.word	0x20000208

08001708 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001708:	b480      	push	{r7}
 800170a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800170c:	4b05      	ldr	r3, [pc, #20]	@ (8001724 <HAL_IncTick+0x1c>)
 800170e:	681a      	ldr	r2, [r3, #0]
 8001710:	4b05      	ldr	r3, [pc, #20]	@ (8001728 <HAL_IncTick+0x20>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4413      	add	r3, r2
 8001716:	4a03      	ldr	r2, [pc, #12]	@ (8001724 <HAL_IncTick+0x1c>)
 8001718:	6013      	str	r3, [r2, #0]
}
 800171a:	bf00      	nop
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	20000c10 	.word	0x20000c10
 8001728:	2000020c 	.word	0x2000020c

0800172c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return uwTick;
 8001730:	4b03      	ldr	r3, [pc, #12]	@ (8001740 <HAL_GetTick+0x14>)
 8001732:	681b      	ldr	r3, [r3, #0]
}
 8001734:	4618      	mov	r0, r3
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	20000c10 	.word	0x20000c10

08001744 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b480      	push	{r7}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f003 0307 	and.w	r3, r3, #7
 8001752:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001754:	4b0c      	ldr	r3, [pc, #48]	@ (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800175a:	68ba      	ldr	r2, [r7, #8]
 800175c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001760:	4013      	ands	r3, r2
 8001762:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800176c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001770:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001774:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001776:	4a04      	ldr	r2, [pc, #16]	@ (8001788 <__NVIC_SetPriorityGrouping+0x44>)
 8001778:	68bb      	ldr	r3, [r7, #8]
 800177a:	60d3      	str	r3, [r2, #12]
}
 800177c:	bf00      	nop
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr
 8001788:	e000ed00 	.word	0xe000ed00

0800178c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800178c:	b480      	push	{r7}
 800178e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001790:	4b04      	ldr	r3, [pc, #16]	@ (80017a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	0a1b      	lsrs	r3, r3, #8
 8001796:	f003 0307 	and.w	r3, r3, #7
}
 800179a:	4618      	mov	r0, r3
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	e000ed00 	.word	0xe000ed00

080017a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b083      	sub	sp, #12
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	4603      	mov	r3, r0
 80017b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	db0b      	blt.n	80017d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017ba:	79fb      	ldrb	r3, [r7, #7]
 80017bc:	f003 021f 	and.w	r2, r3, #31
 80017c0:	4907      	ldr	r1, [pc, #28]	@ (80017e0 <__NVIC_EnableIRQ+0x38>)
 80017c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017c6:	095b      	lsrs	r3, r3, #5
 80017c8:	2001      	movs	r0, #1
 80017ca:	fa00 f202 	lsl.w	r2, r0, r2
 80017ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr
 80017de:	bf00      	nop
 80017e0:	e000e100 	.word	0xe000e100

080017e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b083      	sub	sp, #12
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	4603      	mov	r3, r0
 80017ec:	6039      	str	r1, [r7, #0]
 80017ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	db0a      	blt.n	800180e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	b2da      	uxtb	r2, r3
 80017fc:	490c      	ldr	r1, [pc, #48]	@ (8001830 <__NVIC_SetPriority+0x4c>)
 80017fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001802:	0112      	lsls	r2, r2, #4
 8001804:	b2d2      	uxtb	r2, r2
 8001806:	440b      	add	r3, r1
 8001808:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800180c:	e00a      	b.n	8001824 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	b2da      	uxtb	r2, r3
 8001812:	4908      	ldr	r1, [pc, #32]	@ (8001834 <__NVIC_SetPriority+0x50>)
 8001814:	79fb      	ldrb	r3, [r7, #7]
 8001816:	f003 030f 	and.w	r3, r3, #15
 800181a:	3b04      	subs	r3, #4
 800181c:	0112      	lsls	r2, r2, #4
 800181e:	b2d2      	uxtb	r2, r2
 8001820:	440b      	add	r3, r1
 8001822:	761a      	strb	r2, [r3, #24]
}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	e000e100 	.word	0xe000e100
 8001834:	e000ed00 	.word	0xe000ed00

08001838 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001838:	b480      	push	{r7}
 800183a:	b089      	sub	sp, #36	@ 0x24
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	f003 0307 	and.w	r3, r3, #7
 800184a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	f1c3 0307 	rsb	r3, r3, #7
 8001852:	2b04      	cmp	r3, #4
 8001854:	bf28      	it	cs
 8001856:	2304      	movcs	r3, #4
 8001858:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	3304      	adds	r3, #4
 800185e:	2b06      	cmp	r3, #6
 8001860:	d902      	bls.n	8001868 <NVIC_EncodePriority+0x30>
 8001862:	69fb      	ldr	r3, [r7, #28]
 8001864:	3b03      	subs	r3, #3
 8001866:	e000      	b.n	800186a <NVIC_EncodePriority+0x32>
 8001868:	2300      	movs	r3, #0
 800186a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800186c:	f04f 32ff 	mov.w	r2, #4294967295
 8001870:	69bb      	ldr	r3, [r7, #24]
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43da      	mvns	r2, r3
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	401a      	ands	r2, r3
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001880:	f04f 31ff 	mov.w	r1, #4294967295
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	fa01 f303 	lsl.w	r3, r1, r3
 800188a:	43d9      	mvns	r1, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001890:	4313      	orrs	r3, r2
         );
}
 8001892:	4618      	mov	r0, r3
 8001894:	3724      	adds	r7, #36	@ 0x24
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
	...

080018a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3b01      	subs	r3, #1
 80018ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018b0:	d301      	bcc.n	80018b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00f      	b.n	80018d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018b6:	4a0a      	ldr	r2, [pc, #40]	@ (80018e0 <SysTick_Config+0x40>)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	3b01      	subs	r3, #1
 80018bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018be:	210f      	movs	r1, #15
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	f7ff ff8e 	bl	80017e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c8:	4b05      	ldr	r3, [pc, #20]	@ (80018e0 <SysTick_Config+0x40>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ce:	4b04      	ldr	r3, [pc, #16]	@ (80018e0 <SysTick_Config+0x40>)
 80018d0:	2207      	movs	r2, #7
 80018d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018d4:	2300      	movs	r3, #0
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3708      	adds	r7, #8
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	e000e010 	.word	0xe000e010

080018e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b082      	sub	sp, #8
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ff29 	bl	8001744 <__NVIC_SetPriorityGrouping>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b086      	sub	sp, #24
 80018fe:	af00      	add	r7, sp, #0
 8001900:	4603      	mov	r3, r0
 8001902:	60b9      	str	r1, [r7, #8]
 8001904:	607a      	str	r2, [r7, #4]
 8001906:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001908:	f7ff ff40 	bl	800178c <__NVIC_GetPriorityGrouping>
 800190c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800190e:	687a      	ldr	r2, [r7, #4]
 8001910:	68b9      	ldr	r1, [r7, #8]
 8001912:	6978      	ldr	r0, [r7, #20]
 8001914:	f7ff ff90 	bl	8001838 <NVIC_EncodePriority>
 8001918:	4602      	mov	r2, r0
 800191a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800191e:	4611      	mov	r1, r2
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff ff5f 	bl	80017e4 <__NVIC_SetPriority>
}
 8001926:	bf00      	nop
 8001928:	3718      	adds	r7, #24
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}

0800192e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b082      	sub	sp, #8
 8001932:	af00      	add	r7, sp, #0
 8001934:	4603      	mov	r3, r0
 8001936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff ff33 	bl	80017a8 <__NVIC_EnableIRQ>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}

0800194a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800194a:	b580      	push	{r7, lr}
 800194c:	b082      	sub	sp, #8
 800194e:	af00      	add	r7, sp, #0
 8001950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f7ff ffa4 	bl	80018a0 <SysTick_Config>
 8001958:	4603      	mov	r3, r0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3708      	adds	r7, #8
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
	...

08001964 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d101      	bne.n	8001976 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e08d      	b.n	8001a92 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	461a      	mov	r2, r3
 800197c:	4b47      	ldr	r3, [pc, #284]	@ (8001a9c <HAL_DMA_Init+0x138>)
 800197e:	429a      	cmp	r2, r3
 8001980:	d80f      	bhi.n	80019a2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	4b45      	ldr	r3, [pc, #276]	@ (8001aa0 <HAL_DMA_Init+0x13c>)
 800198a:	4413      	add	r3, r2
 800198c:	4a45      	ldr	r2, [pc, #276]	@ (8001aa4 <HAL_DMA_Init+0x140>)
 800198e:	fba2 2303 	umull	r2, r3, r2, r3
 8001992:	091b      	lsrs	r3, r3, #4
 8001994:	009a      	lsls	r2, r3, #2
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a42      	ldr	r2, [pc, #264]	@ (8001aa8 <HAL_DMA_Init+0x144>)
 800199e:	641a      	str	r2, [r3, #64]	@ 0x40
 80019a0:	e00e      	b.n	80019c0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	461a      	mov	r2, r3
 80019a8:	4b40      	ldr	r3, [pc, #256]	@ (8001aac <HAL_DMA_Init+0x148>)
 80019aa:	4413      	add	r3, r2
 80019ac:	4a3d      	ldr	r2, [pc, #244]	@ (8001aa4 <HAL_DMA_Init+0x140>)
 80019ae:	fba2 2303 	umull	r2, r3, r2, r3
 80019b2:	091b      	lsrs	r3, r3, #4
 80019b4:	009a      	lsls	r2, r3, #2
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4a3c      	ldr	r2, [pc, #240]	@ (8001ab0 <HAL_DMA_Init+0x14c>)
 80019be:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2202      	movs	r2, #2
 80019c4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80019d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80019da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80019e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	691b      	ldr	r3, [r3, #16]
 80019ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a1b      	ldr	r3, [r3, #32]
 8001a02:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a04:	68fa      	ldr	r2, [r7, #12]
 8001a06:	4313      	orrs	r3, r2
 8001a08:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	68fa      	ldr	r2, [r7, #12]
 8001a10:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f000 fa76 	bl	8001f04 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001a20:	d102      	bne.n	8001a28 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2200      	movs	r2, #0
 8001a26:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685a      	ldr	r2, [r3, #4]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001a3c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d010      	beq.n	8001a68 <HAL_DMA_Init+0x104>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	d80c      	bhi.n	8001a68 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	f000 fa96 	bl	8001f80 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a58:	2200      	movs	r2, #0
 8001a5a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001a64:	605a      	str	r2, [r3, #4]
 8001a66:	e008      	b.n	8001a7a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2200      	movs	r2, #0
 8001a78:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40020407 	.word	0x40020407
 8001aa0:	bffdfff8 	.word	0xbffdfff8
 8001aa4:	cccccccd 	.word	0xcccccccd
 8001aa8:	40020000 	.word	0x40020000
 8001aac:	bffdfbf8 	.word	0xbffdfbf8
 8001ab0:	40020400 	.word	0x40020400

08001ab4 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b086      	sub	sp, #24
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	60f8      	str	r0, [r7, #12]
 8001abc:	60b9      	str	r1, [r7, #8]
 8001abe:	607a      	str	r2, [r7, #4]
 8001ac0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d101      	bne.n	8001ad4 <HAL_DMA_Start_IT+0x20>
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	e066      	b.n	8001ba2 <HAL_DMA_Start_IT+0xee>
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d155      	bne.n	8001b94 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2202      	movs	r2, #2
 8001aec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2200      	movs	r2, #0
 8001af4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 0201 	bic.w	r2, r2, #1
 8001b04:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	68b9      	ldr	r1, [r7, #8]
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 f9bb 	bl	8001e88 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d008      	beq.n	8001b2c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f042 020e 	orr.w	r2, r2, #14
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	e00f      	b.n	8001b4c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681a      	ldr	r2, [r3, #0]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f022 0204 	bic.w	r2, r2, #4
 8001b3a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f042 020a 	orr.w	r2, r2, #10
 8001b4a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d007      	beq.n	8001b6a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b64:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b68:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d007      	beq.n	8001b82 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b7c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b80:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f042 0201 	orr.w	r2, r2, #1
 8001b90:	601a      	str	r2, [r3, #0]
 8001b92:	e005      	b.n	8001ba0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2200      	movs	r2, #0
 8001b98:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001ba0:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	3718      	adds	r7, #24
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001baa:	b480      	push	{r7}
 8001bac:	b085      	sub	sp, #20
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d005      	beq.n	8001bce <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2204      	movs	r2, #4
 8001bc6:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	73fb      	strb	r3, [r7, #15]
 8001bcc:	e037      	b.n	8001c3e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 020e 	bic.w	r2, r2, #14
 8001bdc:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001be8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bec:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f022 0201 	bic.w	r2, r2, #1
 8001bfc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c02:	f003 021f 	and.w	r2, r3, #31
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c0a:	2101      	movs	r1, #1
 8001c0c:	fa01 f202 	lsl.w	r2, r1, r2
 8001c10:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001c1a:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d00c      	beq.n	8001c3e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c28:	681a      	ldr	r2, [r3, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c2e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c32:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c38:	687a      	ldr	r2, [r7, #4]
 8001c3a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001c3c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c64:	2300      	movs	r3, #0
 8001c66:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d00d      	beq.n	8001c90 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2204      	movs	r2, #4
 8001c78:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2200      	movs	r2, #0
 8001c86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	73fb      	strb	r3, [r7, #15]
 8001c8e:	e047      	b.n	8001d20 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f022 020e 	bic.w	r2, r2, #14
 8001c9e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f022 0201 	bic.w	r2, r2, #1
 8001cae:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001cbe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cc4:	f003 021f 	and.w	r2, r3, #31
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ccc:	2101      	movs	r1, #1
 8001cce:	fa01 f202 	lsl.w	r2, r1, r2
 8001cd2:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001cdc:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d00c      	beq.n	8001d00 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001cf0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001cf4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001cfe:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	4798      	blx	r3
    }
  }
  return status;
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}

08001d2a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d2a:	b580      	push	{r7, lr}
 8001d2c:	b084      	sub	sp, #16
 8001d2e:	af00      	add	r7, sp, #0
 8001d30:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d46:	f003 031f 	and.w	r3, r3, #31
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	409a      	lsls	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4013      	ands	r3, r2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d026      	beq.n	8001da4 <HAL_DMA_IRQHandler+0x7a>
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	f003 0304 	and.w	r3, r3, #4
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d021      	beq.n	8001da4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0320 	and.w	r3, r3, #32
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d107      	bne.n	8001d7e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0204 	bic.w	r2, r2, #4
 8001d7c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d82:	f003 021f 	and.w	r2, r3, #31
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8a:	2104      	movs	r1, #4
 8001d8c:	fa01 f202 	lsl.w	r2, r1, r2
 8001d90:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d071      	beq.n	8001e7e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d9e:	6878      	ldr	r0, [r7, #4]
 8001da0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001da2:	e06c      	b.n	8001e7e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001da8:	f003 031f 	and.w	r3, r3, #31
 8001dac:	2202      	movs	r2, #2
 8001dae:	409a      	lsls	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	4013      	ands	r3, r2
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d02e      	beq.n	8001e16 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d029      	beq.n	8001e16 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0320 	and.w	r3, r3, #32
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d10b      	bne.n	8001de8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f022 020a 	bic.w	r2, r2, #10
 8001dde:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dec:	f003 021f 	and.w	r2, r3, #31
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df4:	2102      	movs	r1, #2
 8001df6:	fa01 f202 	lsl.w	r2, r1, r2
 8001dfa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d038      	beq.n	8001e7e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001e14:	e033      	b.n	8001e7e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e1a:	f003 031f 	and.w	r3, r3, #31
 8001e1e:	2208      	movs	r2, #8
 8001e20:	409a      	lsls	r2, r3
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	4013      	ands	r3, r2
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d02a      	beq.n	8001e80 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001e2a:	68bb      	ldr	r3, [r7, #8]
 8001e2c:	f003 0308 	and.w	r3, r3, #8
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d025      	beq.n	8001e80 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 020e 	bic.w	r2, r2, #14
 8001e42:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e48:	f003 021f 	and.w	r2, r3, #31
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e50:	2101      	movs	r1, #1
 8001e52:	fa01 f202 	lsl.w	r2, r1, r2
 8001e56:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2201      	movs	r2, #1
 8001e62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d004      	beq.n	8001e80 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001e7e:	bf00      	nop
 8001e80:	bf00      	nop
}
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	b085      	sub	sp, #20
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
 8001e94:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001e9e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d004      	beq.n	8001eb2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001eb0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb6:	f003 021f 	and.w	r2, r3, #31
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	683a      	ldr	r2, [r7, #0]
 8001ecc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	2b10      	cmp	r3, #16
 8001ed4:	d108      	bne.n	8001ee8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001ee6:	e007      	b.n	8001ef8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	68ba      	ldr	r2, [r7, #8]
 8001eee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	60da      	str	r2, [r3, #12]
}
 8001ef8:	bf00      	nop
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b087      	sub	sp, #28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	461a      	mov	r2, r3
 8001f12:	4b16      	ldr	r3, [pc, #88]	@ (8001f6c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d802      	bhi.n	8001f1e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001f18:	4b15      	ldr	r3, [pc, #84]	@ (8001f70 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	e001      	b.n	8001f22 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001f1e:	4b15      	ldr	r3, [pc, #84]	@ (8001f74 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001f20:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	3b08      	subs	r3, #8
 8001f2e:	4a12      	ldr	r2, [pc, #72]	@ (8001f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001f30:	fba2 2303 	umull	r2, r3, r2, r3
 8001f34:	091b      	lsrs	r3, r3, #4
 8001f36:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f3c:	089b      	lsrs	r3, r3, #2
 8001f3e:	009a      	lsls	r2, r3, #2
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	4413      	add	r3, r2
 8001f44:	461a      	mov	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a0b      	ldr	r2, [pc, #44]	@ (8001f7c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001f4e:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 031f 	and.w	r3, r3, #31
 8001f56:	2201      	movs	r2, #1
 8001f58:	409a      	lsls	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001f5e:	bf00      	nop
 8001f60:	371c      	adds	r7, #28
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40020407 	.word	0x40020407
 8001f70:	40020800 	.word	0x40020800
 8001f74:	40020820 	.word	0x40020820
 8001f78:	cccccccd 	.word	0xcccccccd
 8001f7c:	40020880 	.word	0x40020880

08001f80 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b085      	sub	sp, #20
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001f90:	68fa      	ldr	r2, [r7, #12]
 8001f92:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001f94:	4413      	add	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	461a      	mov	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a08      	ldr	r2, [pc, #32]	@ (8001fc4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001fa2:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	f003 031f 	and.w	r3, r3, #31
 8001fac:	2201      	movs	r2, #1
 8001fae:	409a      	lsls	r2, r3
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001fb4:	bf00      	nop
 8001fb6:	3714      	adds	r7, #20
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr
 8001fc0:	1000823f 	.word	0x1000823f
 8001fc4:	40020940 	.word	0x40020940

08001fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b087      	sub	sp, #28
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001fd6:	e15a      	b.n	800228e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	681a      	ldr	r2, [r3, #0]
 8001fdc:	2101      	movs	r1, #1
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	f000 814c 	beq.w	8002288 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f003 0303 	and.w	r3, r3, #3
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d005      	beq.n	8002008 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002004:	2b02      	cmp	r3, #2
 8002006:	d130      	bne.n	800206a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	2203      	movs	r2, #3
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	43db      	mvns	r3, r3
 800201a:	693a      	ldr	r2, [r7, #16]
 800201c:	4013      	ands	r3, r2
 800201e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	005b      	lsls	r3, r3, #1
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	693a      	ldr	r2, [r7, #16]
 800202e:	4313      	orrs	r3, r2
 8002030:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800203e:	2201      	movs	r2, #1
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	fa02 f303 	lsl.w	r3, r2, r3
 8002046:	43db      	mvns	r3, r3
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	4013      	ands	r3, r2
 800204c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	091b      	lsrs	r3, r3, #4
 8002054:	f003 0201 	and.w	r2, r3, #1
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	693a      	ldr	r2, [r7, #16]
 8002060:	4313      	orrs	r3, r2
 8002062:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f003 0303 	and.w	r3, r3, #3
 8002072:	2b03      	cmp	r3, #3
 8002074:	d017      	beq.n	80020a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	2203      	movs	r2, #3
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	43db      	mvns	r3, r3
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4013      	ands	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	689a      	ldr	r2, [r3, #8]
 8002092:	697b      	ldr	r3, [r7, #20]
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	693a      	ldr	r2, [r7, #16]
 800209c:	4313      	orrs	r3, r2
 800209e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f003 0303 	and.w	r3, r3, #3
 80020ae:	2b02      	cmp	r3, #2
 80020b0:	d123      	bne.n	80020fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	08da      	lsrs	r2, r3, #3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3208      	adds	r2, #8
 80020ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	220f      	movs	r2, #15
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43db      	mvns	r3, r3
 80020d0:	693a      	ldr	r2, [r7, #16]
 80020d2:	4013      	ands	r3, r2
 80020d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	691a      	ldr	r2, [r3, #16]
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	693a      	ldr	r2, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	08da      	lsrs	r2, r3, #3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	3208      	adds	r2, #8
 80020f4:	6939      	ldr	r1, [r7, #16]
 80020f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002100:	697b      	ldr	r3, [r7, #20]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	2203      	movs	r2, #3
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	693a      	ldr	r2, [r7, #16]
 800210e:	4013      	ands	r3, r2
 8002110:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 0203 	and.w	r2, r3, #3
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	fa02 f303 	lsl.w	r3, r2, r3
 8002122:	693a      	ldr	r2, [r7, #16]
 8002124:	4313      	orrs	r3, r2
 8002126:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	693a      	ldr	r2, [r7, #16]
 800212c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002136:	2b00      	cmp	r3, #0
 8002138:	f000 80a6 	beq.w	8002288 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800213c:	4b5b      	ldr	r3, [pc, #364]	@ (80022ac <HAL_GPIO_Init+0x2e4>)
 800213e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002140:	4a5a      	ldr	r2, [pc, #360]	@ (80022ac <HAL_GPIO_Init+0x2e4>)
 8002142:	f043 0301 	orr.w	r3, r3, #1
 8002146:	6613      	str	r3, [r2, #96]	@ 0x60
 8002148:	4b58      	ldr	r3, [pc, #352]	@ (80022ac <HAL_GPIO_Init+0x2e4>)
 800214a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800214c:	f003 0301 	and.w	r3, r3, #1
 8002150:	60bb      	str	r3, [r7, #8]
 8002152:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002154:	4a56      	ldr	r2, [pc, #344]	@ (80022b0 <HAL_GPIO_Init+0x2e8>)
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	089b      	lsrs	r3, r3, #2
 800215a:	3302      	adds	r3, #2
 800215c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002160:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f003 0303 	and.w	r3, r3, #3
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	220f      	movs	r2, #15
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	693a      	ldr	r2, [r7, #16]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800217e:	d01f      	beq.n	80021c0 <HAL_GPIO_Init+0x1f8>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a4c      	ldr	r2, [pc, #304]	@ (80022b4 <HAL_GPIO_Init+0x2ec>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d019      	beq.n	80021bc <HAL_GPIO_Init+0x1f4>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a4b      	ldr	r2, [pc, #300]	@ (80022b8 <HAL_GPIO_Init+0x2f0>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d013      	beq.n	80021b8 <HAL_GPIO_Init+0x1f0>
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	4a4a      	ldr	r2, [pc, #296]	@ (80022bc <HAL_GPIO_Init+0x2f4>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d00d      	beq.n	80021b4 <HAL_GPIO_Init+0x1ec>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a49      	ldr	r2, [pc, #292]	@ (80022c0 <HAL_GPIO_Init+0x2f8>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d007      	beq.n	80021b0 <HAL_GPIO_Init+0x1e8>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a48      	ldr	r2, [pc, #288]	@ (80022c4 <HAL_GPIO_Init+0x2fc>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d101      	bne.n	80021ac <HAL_GPIO_Init+0x1e4>
 80021a8:	2305      	movs	r3, #5
 80021aa:	e00a      	b.n	80021c2 <HAL_GPIO_Init+0x1fa>
 80021ac:	2306      	movs	r3, #6
 80021ae:	e008      	b.n	80021c2 <HAL_GPIO_Init+0x1fa>
 80021b0:	2304      	movs	r3, #4
 80021b2:	e006      	b.n	80021c2 <HAL_GPIO_Init+0x1fa>
 80021b4:	2303      	movs	r3, #3
 80021b6:	e004      	b.n	80021c2 <HAL_GPIO_Init+0x1fa>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e002      	b.n	80021c2 <HAL_GPIO_Init+0x1fa>
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <HAL_GPIO_Init+0x1fa>
 80021c0:	2300      	movs	r3, #0
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	f002 0203 	and.w	r2, r2, #3
 80021c8:	0092      	lsls	r2, r2, #2
 80021ca:	4093      	lsls	r3, r2
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021d2:	4937      	ldr	r1, [pc, #220]	@ (80022b0 <HAL_GPIO_Init+0x2e8>)
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	089b      	lsrs	r3, r3, #2
 80021d8:	3302      	adds	r3, #2
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80021e0:	4b39      	ldr	r3, [pc, #228]	@ (80022c8 <HAL_GPIO_Init+0x300>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	43db      	mvns	r3, r3
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	4013      	ands	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4313      	orrs	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002204:	4a30      	ldr	r2, [pc, #192]	@ (80022c8 <HAL_GPIO_Init+0x300>)
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800220a:	4b2f      	ldr	r3, [pc, #188]	@ (80022c8 <HAL_GPIO_Init+0x300>)
 800220c:	68db      	ldr	r3, [r3, #12]
 800220e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	43db      	mvns	r3, r3
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800222e:	4a26      	ldr	r2, [pc, #152]	@ (80022c8 <HAL_GPIO_Init+0x300>)
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002234:	4b24      	ldr	r3, [pc, #144]	@ (80022c8 <HAL_GPIO_Init+0x300>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	43db      	mvns	r3, r3
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4013      	ands	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002258:	4a1b      	ldr	r2, [pc, #108]	@ (80022c8 <HAL_GPIO_Init+0x300>)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800225e:	4b1a      	ldr	r3, [pc, #104]	@ (80022c8 <HAL_GPIO_Init+0x300>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	43db      	mvns	r3, r3
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4013      	ands	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4313      	orrs	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002282:	4a11      	ldr	r2, [pc, #68]	@ (80022c8 <HAL_GPIO_Init+0x300>)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	3301      	adds	r3, #1
 800228c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	fa22 f303 	lsr.w	r3, r2, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	f47f ae9d 	bne.w	8001fd8 <HAL_GPIO_Init+0x10>
  }
}
 800229e:	bf00      	nop
 80022a0:	bf00      	nop
 80022a2:	371c      	adds	r7, #28
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40010000 	.word	0x40010000
 80022b4:	48000400 	.word	0x48000400
 80022b8:	48000800 	.word	0x48000800
 80022bc:	48000c00 	.word	0x48000c00
 80022c0:	48001000 	.word	0x48001000
 80022c4:	48001400 	.word	0x48001400
 80022c8:	40010400 	.word	0x40010400

080022cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
 80022d4:	460b      	mov	r3, r1
 80022d6:	807b      	strh	r3, [r7, #2]
 80022d8:	4613      	mov	r3, r2
 80022da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022dc:	787b      	ldrb	r3, [r7, #1]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d003      	beq.n	80022ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022e2:	887a      	ldrh	r2, [r7, #2]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022e8:	e002      	b.n	80022f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022ea:	887a      	ldrh	r2, [r7, #2]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	4603      	mov	r3, r0
 8002304:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002306:	4b08      	ldr	r3, [pc, #32]	@ (8002328 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002308:	695a      	ldr	r2, [r3, #20]
 800230a:	88fb      	ldrh	r3, [r7, #6]
 800230c:	4013      	ands	r3, r2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d006      	beq.n	8002320 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002312:	4a05      	ldr	r2, [pc, #20]	@ (8002328 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002314:	88fb      	ldrh	r3, [r7, #6]
 8002316:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002318:	88fb      	ldrh	r3, [r7, #6]
 800231a:	4618      	mov	r0, r3
 800231c:	f000 f806 	bl	800232c <HAL_GPIO_EXTI_Callback>
  }
}
 8002320:	bf00      	nop
 8002322:	3708      	adds	r7, #8
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	40010400 	.word	0x40010400

0800232c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	4603      	mov	r3, r0
 8002334:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002336:	bf00      	nop
 8002338:	370c      	adds	r7, #12
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr
	...

08002344 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d141      	bne.n	80023d6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002352:	4b4b      	ldr	r3, [pc, #300]	@ (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800235a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800235e:	d131      	bne.n	80023c4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002360:	4b47      	ldr	r3, [pc, #284]	@ (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002362:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002366:	4a46      	ldr	r2, [pc, #280]	@ (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002368:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800236c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002370:	4b43      	ldr	r3, [pc, #268]	@ (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002378:	4a41      	ldr	r2, [pc, #260]	@ (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800237a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800237e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002380:	4b40      	ldr	r3, [pc, #256]	@ (8002484 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	2232      	movs	r2, #50	@ 0x32
 8002386:	fb02 f303 	mul.w	r3, r2, r3
 800238a:	4a3f      	ldr	r2, [pc, #252]	@ (8002488 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800238c:	fba2 2303 	umull	r2, r3, r2, r3
 8002390:	0c9b      	lsrs	r3, r3, #18
 8002392:	3301      	adds	r3, #1
 8002394:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002396:	e002      	b.n	800239e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	3b01      	subs	r3, #1
 800239c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800239e:	4b38      	ldr	r3, [pc, #224]	@ (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a0:	695b      	ldr	r3, [r3, #20]
 80023a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023aa:	d102      	bne.n	80023b2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d1f2      	bne.n	8002398 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023b2:	4b33      	ldr	r3, [pc, #204]	@ (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023b4:	695b      	ldr	r3, [r3, #20]
 80023b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023be:	d158      	bne.n	8002472 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023c0:	2303      	movs	r3, #3
 80023c2:	e057      	b.n	8002474 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023c4:	4b2e      	ldr	r3, [pc, #184]	@ (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023ca:	4a2d      	ldr	r2, [pc, #180]	@ (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023d0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80023d4:	e04d      	b.n	8002472 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023dc:	d141      	bne.n	8002462 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80023de:	4b28      	ldr	r3, [pc, #160]	@ (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023ea:	d131      	bne.n	8002450 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023ec:	4b24      	ldr	r3, [pc, #144]	@ (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023f2:	4a23      	ldr	r2, [pc, #140]	@ (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80023fc:	4b20      	ldr	r3, [pc, #128]	@ (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002404:	4a1e      	ldr	r2, [pc, #120]	@ (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002406:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800240a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800240c:	4b1d      	ldr	r3, [pc, #116]	@ (8002484 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	2232      	movs	r2, #50	@ 0x32
 8002412:	fb02 f303 	mul.w	r3, r2, r3
 8002416:	4a1c      	ldr	r2, [pc, #112]	@ (8002488 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002418:	fba2 2303 	umull	r2, r3, r2, r3
 800241c:	0c9b      	lsrs	r3, r3, #18
 800241e:	3301      	adds	r3, #1
 8002420:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002422:	e002      	b.n	800242a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	3b01      	subs	r3, #1
 8002428:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800242a:	4b15      	ldr	r3, [pc, #84]	@ (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002432:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002436:	d102      	bne.n	800243e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1f2      	bne.n	8002424 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800243e:	4b10      	ldr	r3, [pc, #64]	@ (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002446:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800244a:	d112      	bne.n	8002472 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e011      	b.n	8002474 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002450:	4b0b      	ldr	r3, [pc, #44]	@ (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002452:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002456:	4a0a      	ldr	r2, [pc, #40]	@ (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002458:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800245c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002460:	e007      	b.n	8002472 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002462:	4b07      	ldr	r3, [pc, #28]	@ (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800246a:	4a05      	ldr	r2, [pc, #20]	@ (8002480 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800246c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002470:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr
 8002480:	40007000 	.word	0x40007000
 8002484:	20000204 	.word	0x20000204
 8002488:	431bde83 	.word	0x431bde83

0800248c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002490:	4b05      	ldr	r3, [pc, #20]	@ (80024a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	4a04      	ldr	r2, [pc, #16]	@ (80024a8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002496:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800249a:	6093      	str	r3, [r2, #8]
}
 800249c:	bf00      	nop
 800249e:	46bd      	mov	sp, r7
 80024a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a4:	4770      	bx	lr
 80024a6:	bf00      	nop
 80024a8:	40007000 	.word	0x40007000

080024ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b088      	sub	sp, #32
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e2fe      	b.n	8002abc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0301 	and.w	r3, r3, #1
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d075      	beq.n	80025b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ca:	4b97      	ldr	r3, [pc, #604]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 80024cc:	689b      	ldr	r3, [r3, #8]
 80024ce:	f003 030c 	and.w	r3, r3, #12
 80024d2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024d4:	4b94      	ldr	r3, [pc, #592]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 80024d6:	68db      	ldr	r3, [r3, #12]
 80024d8:	f003 0303 	and.w	r3, r3, #3
 80024dc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80024de:	69bb      	ldr	r3, [r7, #24]
 80024e0:	2b0c      	cmp	r3, #12
 80024e2:	d102      	bne.n	80024ea <HAL_RCC_OscConfig+0x3e>
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	d002      	beq.n	80024f0 <HAL_RCC_OscConfig+0x44>
 80024ea:	69bb      	ldr	r3, [r7, #24]
 80024ec:	2b08      	cmp	r3, #8
 80024ee:	d10b      	bne.n	8002508 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f0:	4b8d      	ldr	r3, [pc, #564]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d05b      	beq.n	80025b4 <HAL_RCC_OscConfig+0x108>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d157      	bne.n	80025b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e2d9      	b.n	8002abc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002510:	d106      	bne.n	8002520 <HAL_RCC_OscConfig+0x74>
 8002512:	4b85      	ldr	r3, [pc, #532]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a84      	ldr	r2, [pc, #528]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 8002518:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800251c:	6013      	str	r3, [r2, #0]
 800251e:	e01d      	b.n	800255c <HAL_RCC_OscConfig+0xb0>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002528:	d10c      	bne.n	8002544 <HAL_RCC_OscConfig+0x98>
 800252a:	4b7f      	ldr	r3, [pc, #508]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a7e      	ldr	r2, [pc, #504]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 8002530:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	4b7c      	ldr	r3, [pc, #496]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a7b      	ldr	r2, [pc, #492]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 800253c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002540:	6013      	str	r3, [r2, #0]
 8002542:	e00b      	b.n	800255c <HAL_RCC_OscConfig+0xb0>
 8002544:	4b78      	ldr	r3, [pc, #480]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a77      	ldr	r2, [pc, #476]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 800254a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	4b75      	ldr	r3, [pc, #468]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a74      	ldr	r2, [pc, #464]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 8002556:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800255a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d013      	beq.n	800258c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002564:	f7ff f8e2 	bl	800172c <HAL_GetTick>
 8002568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800256a:	e008      	b.n	800257e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800256c:	f7ff f8de 	bl	800172c <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b64      	cmp	r3, #100	@ 0x64
 8002578:	d901      	bls.n	800257e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	e29e      	b.n	8002abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800257e:	4b6a      	ldr	r3, [pc, #424]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d0f0      	beq.n	800256c <HAL_RCC_OscConfig+0xc0>
 800258a:	e014      	b.n	80025b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7ff f8ce 	bl	800172c <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002594:	f7ff f8ca 	bl	800172c <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b64      	cmp	r3, #100	@ 0x64
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e28a      	b.n	8002abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025a6:	4b60      	ldr	r3, [pc, #384]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0xe8>
 80025b2:	e000      	b.n	80025b6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d075      	beq.n	80026ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025c2:	4b59      	ldr	r3, [pc, #356]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025cc:	4b56      	ldr	r3, [pc, #344]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	2b0c      	cmp	r3, #12
 80025da:	d102      	bne.n	80025e2 <HAL_RCC_OscConfig+0x136>
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d002      	beq.n	80025e8 <HAL_RCC_OscConfig+0x13c>
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d11f      	bne.n	8002628 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80025e8:	4b4f      	ldr	r3, [pc, #316]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <HAL_RCC_OscConfig+0x154>
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e25d      	b.n	8002abc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002600:	4b49      	ldr	r3, [pc, #292]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	061b      	lsls	r3, r3, #24
 800260e:	4946      	ldr	r1, [pc, #280]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 8002610:	4313      	orrs	r3, r2
 8002612:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002614:	4b45      	ldr	r3, [pc, #276]	@ (800272c <HAL_RCC_OscConfig+0x280>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4618      	mov	r0, r3
 800261a:	f7ff f83b 	bl	8001694 <HAL_InitTick>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d043      	beq.n	80026ac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e249      	b.n	8002abc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d023      	beq.n	8002678 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002630:	4b3d      	ldr	r3, [pc, #244]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a3c      	ldr	r2, [pc, #240]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 8002636:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800263a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263c:	f7ff f876 	bl	800172c <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002644:	f7ff f872 	bl	800172c <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e232      	b.n	8002abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002656:	4b34      	ldr	r3, [pc, #208]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002662:	4b31      	ldr	r3, [pc, #196]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	691b      	ldr	r3, [r3, #16]
 800266e:	061b      	lsls	r3, r3, #24
 8002670:	492d      	ldr	r1, [pc, #180]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 8002672:	4313      	orrs	r3, r2
 8002674:	604b      	str	r3, [r1, #4]
 8002676:	e01a      	b.n	80026ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002678:	4b2b      	ldr	r3, [pc, #172]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a2a      	ldr	r2, [pc, #168]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 800267e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002682:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002684:	f7ff f852 	bl	800172c <HAL_GetTick>
 8002688:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800268a:	e008      	b.n	800269e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800268c:	f7ff f84e 	bl	800172c <HAL_GetTick>
 8002690:	4602      	mov	r2, r0
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	1ad3      	subs	r3, r2, r3
 8002696:	2b02      	cmp	r3, #2
 8002698:	d901      	bls.n	800269e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800269a:	2303      	movs	r3, #3
 800269c:	e20e      	b.n	8002abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800269e:	4b22      	ldr	r3, [pc, #136]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d1f0      	bne.n	800268c <HAL_RCC_OscConfig+0x1e0>
 80026aa:	e000      	b.n	80026ae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0308 	and.w	r3, r3, #8
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d041      	beq.n	800273e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	695b      	ldr	r3, [r3, #20]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d01c      	beq.n	80026fc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026c2:	4b19      	ldr	r3, [pc, #100]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 80026c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026c8:	4a17      	ldr	r2, [pc, #92]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 80026ca:	f043 0301 	orr.w	r3, r3, #1
 80026ce:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d2:	f7ff f82b 	bl	800172c <HAL_GetTick>
 80026d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026d8:	e008      	b.n	80026ec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026da:	f7ff f827 	bl	800172c <HAL_GetTick>
 80026de:	4602      	mov	r2, r0
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	1ad3      	subs	r3, r2, r3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d901      	bls.n	80026ec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e1e7      	b.n	8002abc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80026ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 80026ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0ef      	beq.n	80026da <HAL_RCC_OscConfig+0x22e>
 80026fa:	e020      	b.n	800273e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 80026fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002702:	4a09      	ldr	r2, [pc, #36]	@ (8002728 <HAL_RCC_OscConfig+0x27c>)
 8002704:	f023 0301 	bic.w	r3, r3, #1
 8002708:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800270c:	f7ff f80e 	bl	800172c <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002712:	e00d      	b.n	8002730 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002714:	f7ff f80a 	bl	800172c <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d906      	bls.n	8002730 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e1ca      	b.n	8002abc <HAL_RCC_OscConfig+0x610>
 8002726:	bf00      	nop
 8002728:	40021000 	.word	0x40021000
 800272c:	20000208 	.word	0x20000208
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002730:	4b8c      	ldr	r3, [pc, #560]	@ (8002964 <HAL_RCC_OscConfig+0x4b8>)
 8002732:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1ea      	bne.n	8002714 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f003 0304 	and.w	r3, r3, #4
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 80a6 	beq.w	8002898 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800274c:	2300      	movs	r3, #0
 800274e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002750:	4b84      	ldr	r3, [pc, #528]	@ (8002964 <HAL_RCC_OscConfig+0x4b8>)
 8002752:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002754:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_RCC_OscConfig+0x2b4>
 800275c:	2301      	movs	r3, #1
 800275e:	e000      	b.n	8002762 <HAL_RCC_OscConfig+0x2b6>
 8002760:	2300      	movs	r3, #0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00d      	beq.n	8002782 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002766:	4b7f      	ldr	r3, [pc, #508]	@ (8002964 <HAL_RCC_OscConfig+0x4b8>)
 8002768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800276a:	4a7e      	ldr	r2, [pc, #504]	@ (8002964 <HAL_RCC_OscConfig+0x4b8>)
 800276c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002770:	6593      	str	r3, [r2, #88]	@ 0x58
 8002772:	4b7c      	ldr	r3, [pc, #496]	@ (8002964 <HAL_RCC_OscConfig+0x4b8>)
 8002774:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002776:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800277e:	2301      	movs	r3, #1
 8002780:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002782:	4b79      	ldr	r3, [pc, #484]	@ (8002968 <HAL_RCC_OscConfig+0x4bc>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800278a:	2b00      	cmp	r3, #0
 800278c:	d118      	bne.n	80027c0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800278e:	4b76      	ldr	r3, [pc, #472]	@ (8002968 <HAL_RCC_OscConfig+0x4bc>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a75      	ldr	r2, [pc, #468]	@ (8002968 <HAL_RCC_OscConfig+0x4bc>)
 8002794:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002798:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800279a:	f7fe ffc7 	bl	800172c <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a2:	f7fe ffc3 	bl	800172c <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e183      	b.n	8002abc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027b4:	4b6c      	ldr	r3, [pc, #432]	@ (8002968 <HAL_RCC_OscConfig+0x4bc>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d0f0      	beq.n	80027a2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d108      	bne.n	80027da <HAL_RCC_OscConfig+0x32e>
 80027c8:	4b66      	ldr	r3, [pc, #408]	@ (8002964 <HAL_RCC_OscConfig+0x4b8>)
 80027ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027ce:	4a65      	ldr	r2, [pc, #404]	@ (8002964 <HAL_RCC_OscConfig+0x4b8>)
 80027d0:	f043 0301 	orr.w	r3, r3, #1
 80027d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027d8:	e024      	b.n	8002824 <HAL_RCC_OscConfig+0x378>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	2b05      	cmp	r3, #5
 80027e0:	d110      	bne.n	8002804 <HAL_RCC_OscConfig+0x358>
 80027e2:	4b60      	ldr	r3, [pc, #384]	@ (8002964 <HAL_RCC_OscConfig+0x4b8>)
 80027e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027e8:	4a5e      	ldr	r2, [pc, #376]	@ (8002964 <HAL_RCC_OscConfig+0x4b8>)
 80027ea:	f043 0304 	orr.w	r3, r3, #4
 80027ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80027f2:	4b5c      	ldr	r3, [pc, #368]	@ (8002964 <HAL_RCC_OscConfig+0x4b8>)
 80027f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f8:	4a5a      	ldr	r2, [pc, #360]	@ (8002964 <HAL_RCC_OscConfig+0x4b8>)
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002802:	e00f      	b.n	8002824 <HAL_RCC_OscConfig+0x378>
 8002804:	4b57      	ldr	r3, [pc, #348]	@ (8002964 <HAL_RCC_OscConfig+0x4b8>)
 8002806:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800280a:	4a56      	ldr	r2, [pc, #344]	@ (8002964 <HAL_RCC_OscConfig+0x4b8>)
 800280c:	f023 0301 	bic.w	r3, r3, #1
 8002810:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002814:	4b53      	ldr	r3, [pc, #332]	@ (8002964 <HAL_RCC_OscConfig+0x4b8>)
 8002816:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800281a:	4a52      	ldr	r2, [pc, #328]	@ (8002964 <HAL_RCC_OscConfig+0x4b8>)
 800281c:	f023 0304 	bic.w	r3, r3, #4
 8002820:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d016      	beq.n	800285a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800282c:	f7fe ff7e 	bl	800172c <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002832:	e00a      	b.n	800284a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002834:	f7fe ff7a 	bl	800172c <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002842:	4293      	cmp	r3, r2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e138      	b.n	8002abc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800284a:	4b46      	ldr	r3, [pc, #280]	@ (8002964 <HAL_RCC_OscConfig+0x4b8>)
 800284c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0ed      	beq.n	8002834 <HAL_RCC_OscConfig+0x388>
 8002858:	e015      	b.n	8002886 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285a:	f7fe ff67 	bl	800172c <HAL_GetTick>
 800285e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002860:	e00a      	b.n	8002878 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002862:	f7fe ff63 	bl	800172c <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002870:	4293      	cmp	r3, r2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e121      	b.n	8002abc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002878:	4b3a      	ldr	r3, [pc, #232]	@ (8002964 <HAL_RCC_OscConfig+0x4b8>)
 800287a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1ed      	bne.n	8002862 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002886:	7ffb      	ldrb	r3, [r7, #31]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d105      	bne.n	8002898 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800288c:	4b35      	ldr	r3, [pc, #212]	@ (8002964 <HAL_RCC_OscConfig+0x4b8>)
 800288e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002890:	4a34      	ldr	r2, [pc, #208]	@ (8002964 <HAL_RCC_OscConfig+0x4b8>)
 8002892:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002896:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0320 	and.w	r3, r3, #32
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d03c      	beq.n	800291e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d01c      	beq.n	80028e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028ac:	4b2d      	ldr	r3, [pc, #180]	@ (8002964 <HAL_RCC_OscConfig+0x4b8>)
 80028ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028b2:	4a2c      	ldr	r2, [pc, #176]	@ (8002964 <HAL_RCC_OscConfig+0x4b8>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028bc:	f7fe ff36 	bl	800172c <HAL_GetTick>
 80028c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028c2:	e008      	b.n	80028d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028c4:	f7fe ff32 	bl	800172c <HAL_GetTick>
 80028c8:	4602      	mov	r2, r0
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	2b02      	cmp	r3, #2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e0f2      	b.n	8002abc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028d6:	4b23      	ldr	r3, [pc, #140]	@ (8002964 <HAL_RCC_OscConfig+0x4b8>)
 80028d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0ef      	beq.n	80028c4 <HAL_RCC_OscConfig+0x418>
 80028e4:	e01b      	b.n	800291e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028e6:	4b1f      	ldr	r3, [pc, #124]	@ (8002964 <HAL_RCC_OscConfig+0x4b8>)
 80028e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028ec:	4a1d      	ldr	r2, [pc, #116]	@ (8002964 <HAL_RCC_OscConfig+0x4b8>)
 80028ee:	f023 0301 	bic.w	r3, r3, #1
 80028f2:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f6:	f7fe ff19 	bl	800172c <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80028fc:	e008      	b.n	8002910 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028fe:	f7fe ff15 	bl	800172c <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d901      	bls.n	8002910 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e0d5      	b.n	8002abc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002910:	4b14      	ldr	r3, [pc, #80]	@ (8002964 <HAL_RCC_OscConfig+0x4b8>)
 8002912:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1ef      	bne.n	80028fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	2b00      	cmp	r3, #0
 8002924:	f000 80c9 	beq.w	8002aba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002928:	4b0e      	ldr	r3, [pc, #56]	@ (8002964 <HAL_RCC_OscConfig+0x4b8>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	f003 030c 	and.w	r3, r3, #12
 8002930:	2b0c      	cmp	r3, #12
 8002932:	f000 8083 	beq.w	8002a3c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	2b02      	cmp	r3, #2
 800293c:	d15e      	bne.n	80029fc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800293e:	4b09      	ldr	r3, [pc, #36]	@ (8002964 <HAL_RCC_OscConfig+0x4b8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a08      	ldr	r2, [pc, #32]	@ (8002964 <HAL_RCC_OscConfig+0x4b8>)
 8002944:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294a:	f7fe feef 	bl	800172c <HAL_GetTick>
 800294e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002950:	e00c      	b.n	800296c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002952:	f7fe feeb 	bl	800172c <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d905      	bls.n	800296c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e0ab      	b.n	8002abc <HAL_RCC_OscConfig+0x610>
 8002964:	40021000 	.word	0x40021000
 8002968:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800296c:	4b55      	ldr	r3, [pc, #340]	@ (8002ac4 <HAL_RCC_OscConfig+0x618>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1ec      	bne.n	8002952 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002978:	4b52      	ldr	r3, [pc, #328]	@ (8002ac4 <HAL_RCC_OscConfig+0x618>)
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	4b52      	ldr	r3, [pc, #328]	@ (8002ac8 <HAL_RCC_OscConfig+0x61c>)
 800297e:	4013      	ands	r3, r2
 8002980:	687a      	ldr	r2, [r7, #4]
 8002982:	6a11      	ldr	r1, [r2, #32]
 8002984:	687a      	ldr	r2, [r7, #4]
 8002986:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002988:	3a01      	subs	r2, #1
 800298a:	0112      	lsls	r2, r2, #4
 800298c:	4311      	orrs	r1, r2
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002992:	0212      	lsls	r2, r2, #8
 8002994:	4311      	orrs	r1, r2
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800299a:	0852      	lsrs	r2, r2, #1
 800299c:	3a01      	subs	r2, #1
 800299e:	0552      	lsls	r2, r2, #21
 80029a0:	4311      	orrs	r1, r2
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80029a6:	0852      	lsrs	r2, r2, #1
 80029a8:	3a01      	subs	r2, #1
 80029aa:	0652      	lsls	r2, r2, #25
 80029ac:	4311      	orrs	r1, r2
 80029ae:	687a      	ldr	r2, [r7, #4]
 80029b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80029b2:	06d2      	lsls	r2, r2, #27
 80029b4:	430a      	orrs	r2, r1
 80029b6:	4943      	ldr	r1, [pc, #268]	@ (8002ac4 <HAL_RCC_OscConfig+0x618>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029bc:	4b41      	ldr	r3, [pc, #260]	@ (8002ac4 <HAL_RCC_OscConfig+0x618>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a40      	ldr	r2, [pc, #256]	@ (8002ac4 <HAL_RCC_OscConfig+0x618>)
 80029c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029c8:	4b3e      	ldr	r3, [pc, #248]	@ (8002ac4 <HAL_RCC_OscConfig+0x618>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	4a3d      	ldr	r2, [pc, #244]	@ (8002ac4 <HAL_RCC_OscConfig+0x618>)
 80029ce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d4:	f7fe feaa 	bl	800172c <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029dc:	f7fe fea6 	bl	800172c <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e066      	b.n	8002abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029ee:	4b35      	ldr	r3, [pc, #212]	@ (8002ac4 <HAL_RCC_OscConfig+0x618>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d0f0      	beq.n	80029dc <HAL_RCC_OscConfig+0x530>
 80029fa:	e05e      	b.n	8002aba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029fc:	4b31      	ldr	r3, [pc, #196]	@ (8002ac4 <HAL_RCC_OscConfig+0x618>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a30      	ldr	r2, [pc, #192]	@ (8002ac4 <HAL_RCC_OscConfig+0x618>)
 8002a02:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a08:	f7fe fe90 	bl	800172c <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a10:	f7fe fe8c 	bl	800172c <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e04c      	b.n	8002abc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a22:	4b28      	ldr	r3, [pc, #160]	@ (8002ac4 <HAL_RCC_OscConfig+0x618>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d1f0      	bne.n	8002a10 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002a2e:	4b25      	ldr	r3, [pc, #148]	@ (8002ac4 <HAL_RCC_OscConfig+0x618>)
 8002a30:	68da      	ldr	r2, [r3, #12]
 8002a32:	4924      	ldr	r1, [pc, #144]	@ (8002ac4 <HAL_RCC_OscConfig+0x618>)
 8002a34:	4b25      	ldr	r3, [pc, #148]	@ (8002acc <HAL_RCC_OscConfig+0x620>)
 8002a36:	4013      	ands	r3, r2
 8002a38:	60cb      	str	r3, [r1, #12]
 8002a3a:	e03e      	b.n	8002aba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d101      	bne.n	8002a48 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e039      	b.n	8002abc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002a48:	4b1e      	ldr	r3, [pc, #120]	@ (8002ac4 <HAL_RCC_OscConfig+0x618>)
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f003 0203 	and.w	r2, r3, #3
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	6a1b      	ldr	r3, [r3, #32]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d12c      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a66:	3b01      	subs	r3, #1
 8002a68:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a6a:	429a      	cmp	r2, r3
 8002a6c:	d123      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a78:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d11b      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a88:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d113      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a98:	085b      	lsrs	r3, r3, #1
 8002a9a:	3b01      	subs	r3, #1
 8002a9c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d109      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002aac:	085b      	lsrs	r3, r3, #1
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d001      	beq.n	8002aba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e000      	b.n	8002abc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3720      	adds	r7, #32
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	019f800c 	.word	0x019f800c
 8002acc:	feeefffc 	.word	0xfeeefffc

08002ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002ada:	2300      	movs	r3, #0
 8002adc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d101      	bne.n	8002ae8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	e11e      	b.n	8002d26 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae8:	4b91      	ldr	r3, [pc, #580]	@ (8002d30 <HAL_RCC_ClockConfig+0x260>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 030f 	and.w	r3, r3, #15
 8002af0:	683a      	ldr	r2, [r7, #0]
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d910      	bls.n	8002b18 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af6:	4b8e      	ldr	r3, [pc, #568]	@ (8002d30 <HAL_RCC_ClockConfig+0x260>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f023 020f 	bic.w	r2, r3, #15
 8002afe:	498c      	ldr	r1, [pc, #560]	@ (8002d30 <HAL_RCC_ClockConfig+0x260>)
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b06:	4b8a      	ldr	r3, [pc, #552]	@ (8002d30 <HAL_RCC_ClockConfig+0x260>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 030f 	and.w	r3, r3, #15
 8002b0e:	683a      	ldr	r2, [r7, #0]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d001      	beq.n	8002b18 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e106      	b.n	8002d26 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0301 	and.w	r3, r3, #1
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d073      	beq.n	8002c0c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b03      	cmp	r3, #3
 8002b2a:	d129      	bne.n	8002b80 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b2c:	4b81      	ldr	r3, [pc, #516]	@ (8002d34 <HAL_RCC_ClockConfig+0x264>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d101      	bne.n	8002b3c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e0f4      	b.n	8002d26 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002b3c:	f000 f99e 	bl	8002e7c <RCC_GetSysClockFreqFromPLLSource>
 8002b40:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	4a7c      	ldr	r2, [pc, #496]	@ (8002d38 <HAL_RCC_ClockConfig+0x268>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d93f      	bls.n	8002bca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002b4a:	4b7a      	ldr	r3, [pc, #488]	@ (8002d34 <HAL_RCC_ClockConfig+0x264>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d009      	beq.n	8002b6a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d033      	beq.n	8002bca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d12f      	bne.n	8002bca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b6a:	4b72      	ldr	r3, [pc, #456]	@ (8002d34 <HAL_RCC_ClockConfig+0x264>)
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b72:	4a70      	ldr	r2, [pc, #448]	@ (8002d34 <HAL_RCC_ClockConfig+0x264>)
 8002b74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b78:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b7a:	2380      	movs	r3, #128	@ 0x80
 8002b7c:	617b      	str	r3, [r7, #20]
 8002b7e:	e024      	b.n	8002bca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	2b02      	cmp	r3, #2
 8002b86:	d107      	bne.n	8002b98 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002b88:	4b6a      	ldr	r3, [pc, #424]	@ (8002d34 <HAL_RCC_ClockConfig+0x264>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d109      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e0c6      	b.n	8002d26 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002b98:	4b66      	ldr	r3, [pc, #408]	@ (8002d34 <HAL_RCC_ClockConfig+0x264>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d101      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e0be      	b.n	8002d26 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002ba8:	f000 f8ce 	bl	8002d48 <HAL_RCC_GetSysClockFreq>
 8002bac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4a61      	ldr	r2, [pc, #388]	@ (8002d38 <HAL_RCC_ClockConfig+0x268>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d909      	bls.n	8002bca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002bb6:	4b5f      	ldr	r3, [pc, #380]	@ (8002d34 <HAL_RCC_ClockConfig+0x264>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002bbe:	4a5d      	ldr	r2, [pc, #372]	@ (8002d34 <HAL_RCC_ClockConfig+0x264>)
 8002bc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bc4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002bc6:	2380      	movs	r3, #128	@ 0x80
 8002bc8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bca:	4b5a      	ldr	r3, [pc, #360]	@ (8002d34 <HAL_RCC_ClockConfig+0x264>)
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f023 0203 	bic.w	r2, r3, #3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	4957      	ldr	r1, [pc, #348]	@ (8002d34 <HAL_RCC_ClockConfig+0x264>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bdc:	f7fe fda6 	bl	800172c <HAL_GetTick>
 8002be0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002be2:	e00a      	b.n	8002bfa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002be4:	f7fe fda2 	bl	800172c <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e095      	b.n	8002d26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bfa:	4b4e      	ldr	r3, [pc, #312]	@ (8002d34 <HAL_RCC_ClockConfig+0x264>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 020c 	and.w	r2, r3, #12
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	009b      	lsls	r3, r3, #2
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d1eb      	bne.n	8002be4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d023      	beq.n	8002c60 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f003 0304 	and.w	r3, r3, #4
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d005      	beq.n	8002c30 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c24:	4b43      	ldr	r3, [pc, #268]	@ (8002d34 <HAL_RCC_ClockConfig+0x264>)
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	4a42      	ldr	r2, [pc, #264]	@ (8002d34 <HAL_RCC_ClockConfig+0x264>)
 8002c2a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c2e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f003 0308 	and.w	r3, r3, #8
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d007      	beq.n	8002c4c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002c3c:	4b3d      	ldr	r3, [pc, #244]	@ (8002d34 <HAL_RCC_ClockConfig+0x264>)
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002c44:	4a3b      	ldr	r2, [pc, #236]	@ (8002d34 <HAL_RCC_ClockConfig+0x264>)
 8002c46:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c4c:	4b39      	ldr	r3, [pc, #228]	@ (8002d34 <HAL_RCC_ClockConfig+0x264>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	4936      	ldr	r1, [pc, #216]	@ (8002d34 <HAL_RCC_ClockConfig+0x264>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	608b      	str	r3, [r1, #8]
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002c60:	697b      	ldr	r3, [r7, #20]
 8002c62:	2b80      	cmp	r3, #128	@ 0x80
 8002c64:	d105      	bne.n	8002c72 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002c66:	4b33      	ldr	r3, [pc, #204]	@ (8002d34 <HAL_RCC_ClockConfig+0x264>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	4a32      	ldr	r2, [pc, #200]	@ (8002d34 <HAL_RCC_ClockConfig+0x264>)
 8002c6c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c70:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c72:	4b2f      	ldr	r3, [pc, #188]	@ (8002d30 <HAL_RCC_ClockConfig+0x260>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d21d      	bcs.n	8002cbc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c80:	4b2b      	ldr	r3, [pc, #172]	@ (8002d30 <HAL_RCC_ClockConfig+0x260>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f023 020f 	bic.w	r2, r3, #15
 8002c88:	4929      	ldr	r1, [pc, #164]	@ (8002d30 <HAL_RCC_ClockConfig+0x260>)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002c90:	f7fe fd4c 	bl	800172c <HAL_GetTick>
 8002c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c96:	e00a      	b.n	8002cae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c98:	f7fe fd48 	bl	800172c <HAL_GetTick>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	1ad3      	subs	r3, r2, r3
 8002ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d901      	bls.n	8002cae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002caa:	2303      	movs	r3, #3
 8002cac:	e03b      	b.n	8002d26 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cae:	4b20      	ldr	r3, [pc, #128]	@ (8002d30 <HAL_RCC_ClockConfig+0x260>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d1ed      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d34 <HAL_RCC_ClockConfig+0x264>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	4917      	ldr	r1, [pc, #92]	@ (8002d34 <HAL_RCC_ClockConfig+0x264>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d009      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ce6:	4b13      	ldr	r3, [pc, #76]	@ (8002d34 <HAL_RCC_ClockConfig+0x264>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	490f      	ldr	r1, [pc, #60]	@ (8002d34 <HAL_RCC_ClockConfig+0x264>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002cfa:	f000 f825 	bl	8002d48 <HAL_RCC_GetSysClockFreq>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	4b0c      	ldr	r3, [pc, #48]	@ (8002d34 <HAL_RCC_ClockConfig+0x264>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	490c      	ldr	r1, [pc, #48]	@ (8002d3c <HAL_RCC_ClockConfig+0x26c>)
 8002d0c:	5ccb      	ldrb	r3, [r1, r3]
 8002d0e:	f003 031f 	and.w	r3, r3, #31
 8002d12:	fa22 f303 	lsr.w	r3, r2, r3
 8002d16:	4a0a      	ldr	r2, [pc, #40]	@ (8002d40 <HAL_RCC_ClockConfig+0x270>)
 8002d18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002d1a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d44 <HAL_RCC_ClockConfig+0x274>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fe fcb8 	bl	8001694 <HAL_InitTick>
 8002d24:	4603      	mov	r3, r0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40022000 	.word	0x40022000
 8002d34:	40021000 	.word	0x40021000
 8002d38:	04c4b400 	.word	0x04c4b400
 8002d3c:	080063f4 	.word	0x080063f4
 8002d40:	20000204 	.word	0x20000204
 8002d44:	20000208 	.word	0x20000208

08002d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d4e:	4b2c      	ldr	r3, [pc, #176]	@ (8002e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f003 030c 	and.w	r3, r3, #12
 8002d56:	2b04      	cmp	r3, #4
 8002d58:	d102      	bne.n	8002d60 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d5a:	4b2a      	ldr	r3, [pc, #168]	@ (8002e04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d5c:	613b      	str	r3, [r7, #16]
 8002d5e:	e047      	b.n	8002df0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002d60:	4b27      	ldr	r3, [pc, #156]	@ (8002e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 030c 	and.w	r3, r3, #12
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d102      	bne.n	8002d72 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d6c:	4b26      	ldr	r3, [pc, #152]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d6e:	613b      	str	r3, [r7, #16]
 8002d70:	e03e      	b.n	8002df0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002d72:	4b23      	ldr	r3, [pc, #140]	@ (8002e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	f003 030c 	and.w	r3, r3, #12
 8002d7a:	2b0c      	cmp	r3, #12
 8002d7c:	d136      	bne.n	8002dec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002d7e:	4b20      	ldr	r3, [pc, #128]	@ (8002e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d88:	4b1d      	ldr	r3, [pc, #116]	@ (8002e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	091b      	lsrs	r3, r3, #4
 8002d8e:	f003 030f 	and.w	r3, r3, #15
 8002d92:	3301      	adds	r3, #1
 8002d94:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2b03      	cmp	r3, #3
 8002d9a:	d10c      	bne.n	8002db6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002d9c:	4a1a      	ldr	r2, [pc, #104]	@ (8002e08 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da4:	4a16      	ldr	r2, [pc, #88]	@ (8002e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002da6:	68d2      	ldr	r2, [r2, #12]
 8002da8:	0a12      	lsrs	r2, r2, #8
 8002daa:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002dae:	fb02 f303 	mul.w	r3, r2, r3
 8002db2:	617b      	str	r3, [r7, #20]
      break;
 8002db4:	e00c      	b.n	8002dd0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002db6:	4a13      	ldr	r2, [pc, #76]	@ (8002e04 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dbe:	4a10      	ldr	r2, [pc, #64]	@ (8002e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dc0:	68d2      	ldr	r2, [r2, #12]
 8002dc2:	0a12      	lsrs	r2, r2, #8
 8002dc4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002dc8:	fb02 f303 	mul.w	r3, r2, r3
 8002dcc:	617b      	str	r3, [r7, #20]
      break;
 8002dce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8002e00 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	0e5b      	lsrs	r3, r3, #25
 8002dd6:	f003 0303 	and.w	r3, r3, #3
 8002dda:	3301      	adds	r3, #1
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002de0:	697a      	ldr	r2, [r7, #20]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de8:	613b      	str	r3, [r7, #16]
 8002dea:	e001      	b.n	8002df0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002dec:	2300      	movs	r3, #0
 8002dee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002df0:	693b      	ldr	r3, [r7, #16]
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	371c      	adds	r7, #28
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	40021000 	.word	0x40021000
 8002e04:	00f42400 	.word	0x00f42400
 8002e08:	016e3600 	.word	0x016e3600

08002e0c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e10:	4b03      	ldr	r3, [pc, #12]	@ (8002e20 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e12:	681b      	ldr	r3, [r3, #0]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	20000204 	.word	0x20000204

08002e24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e28:	f7ff fff0 	bl	8002e0c <HAL_RCC_GetHCLKFreq>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	4b06      	ldr	r3, [pc, #24]	@ (8002e48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	0a1b      	lsrs	r3, r3, #8
 8002e34:	f003 0307 	and.w	r3, r3, #7
 8002e38:	4904      	ldr	r1, [pc, #16]	@ (8002e4c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e3a:	5ccb      	ldrb	r3, [r1, r3]
 8002e3c:	f003 031f 	and.w	r3, r3, #31
 8002e40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	bd80      	pop	{r7, pc}
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	08006404 	.word	0x08006404

08002e50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e54:	f7ff ffda 	bl	8002e0c <HAL_RCC_GetHCLKFreq>
 8002e58:	4602      	mov	r2, r0
 8002e5a:	4b06      	ldr	r3, [pc, #24]	@ (8002e74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	0adb      	lsrs	r3, r3, #11
 8002e60:	f003 0307 	and.w	r3, r3, #7
 8002e64:	4904      	ldr	r1, [pc, #16]	@ (8002e78 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e66:	5ccb      	ldrb	r3, [r1, r3]
 8002e68:	f003 031f 	and.w	r3, r3, #31
 8002e6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	bd80      	pop	{r7, pc}
 8002e74:	40021000 	.word	0x40021000
 8002e78:	08006404 	.word	0x08006404

08002e7c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b087      	sub	sp, #28
 8002e80:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e82:	4b1e      	ldr	r3, [pc, #120]	@ (8002efc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f003 0303 	and.w	r3, r3, #3
 8002e8a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002efc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	091b      	lsrs	r3, r3, #4
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	3301      	adds	r3, #1
 8002e98:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d10c      	bne.n	8002eba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ea0:	4a17      	ldr	r2, [pc, #92]	@ (8002f00 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea8:	4a14      	ldr	r2, [pc, #80]	@ (8002efc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002eaa:	68d2      	ldr	r2, [r2, #12]
 8002eac:	0a12      	lsrs	r2, r2, #8
 8002eae:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002eb2:	fb02 f303 	mul.w	r3, r2, r3
 8002eb6:	617b      	str	r3, [r7, #20]
    break;
 8002eb8:	e00c      	b.n	8002ed4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002eba:	4a12      	ldr	r2, [pc, #72]	@ (8002f04 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec2:	4a0e      	ldr	r2, [pc, #56]	@ (8002efc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ec4:	68d2      	ldr	r2, [r2, #12]
 8002ec6:	0a12      	lsrs	r2, r2, #8
 8002ec8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ecc:	fb02 f303 	mul.w	r3, r2, r3
 8002ed0:	617b      	str	r3, [r7, #20]
    break;
 8002ed2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ed4:	4b09      	ldr	r3, [pc, #36]	@ (8002efc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	0e5b      	lsrs	r3, r3, #25
 8002eda:	f003 0303 	and.w	r3, r3, #3
 8002ede:	3301      	adds	r3, #1
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002ee4:	697a      	ldr	r2, [r7, #20]
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002eee:	687b      	ldr	r3, [r7, #4]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	371c      	adds	r7, #28
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	40021000 	.word	0x40021000
 8002f00:	016e3600 	.word	0x016e3600
 8002f04:	00f42400 	.word	0x00f42400

08002f08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f10:	2300      	movs	r3, #0
 8002f12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f14:	2300      	movs	r3, #0
 8002f16:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 8098 	beq.w	8003056 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f26:	2300      	movs	r3, #0
 8002f28:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f2a:	4b43      	ldr	r3, [pc, #268]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d10d      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f36:	4b40      	ldr	r3, [pc, #256]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f3a:	4a3f      	ldr	r2, [pc, #252]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f3c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f40:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f42:	4b3d      	ldr	r3, [pc, #244]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f4a:	60bb      	str	r3, [r7, #8]
 8002f4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f52:	4b3a      	ldr	r3, [pc, #232]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a39      	ldr	r2, [pc, #228]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002f58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f5e:	f7fe fbe5 	bl	800172c <HAL_GetTick>
 8002f62:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f64:	e009      	b.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f66:	f7fe fbe1 	bl	800172c <HAL_GetTick>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	1ad3      	subs	r3, r2, r3
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d902      	bls.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002f74:	2303      	movs	r3, #3
 8002f76:	74fb      	strb	r3, [r7, #19]
        break;
 8002f78:	e005      	b.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f7a:	4b30      	ldr	r3, [pc, #192]	@ (800303c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d0ef      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002f86:	7cfb      	ldrb	r3, [r7, #19]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d159      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f8c:	4b2a      	ldr	r3, [pc, #168]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002f92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f96:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d01e      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fa2:	697a      	ldr	r2, [r7, #20]
 8002fa4:	429a      	cmp	r2, r3
 8002fa6:	d019      	beq.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fa8:	4b23      	ldr	r3, [pc, #140]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fb2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fb4:	4b20      	ldr	r3, [pc, #128]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fba:	4a1f      	ldr	r2, [pc, #124]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fbc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fc4:	4b1c      	ldr	r3, [pc, #112]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fca:	4a1b      	ldr	r2, [pc, #108]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fcc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fd0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002fd4:	4a18      	ldr	r2, [pc, #96]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d016      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe6:	f7fe fba1 	bl	800172c <HAL_GetTick>
 8002fea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fec:	e00b      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fee:	f7fe fb9d 	bl	800172c <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d902      	bls.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	74fb      	strb	r3, [r7, #19]
            break;
 8003004:	e006      	b.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003006:	4b0c      	ldr	r3, [pc, #48]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800300c:	f003 0302 	and.w	r3, r3, #2
 8003010:	2b00      	cmp	r3, #0
 8003012:	d0ec      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003014:	7cfb      	ldrb	r3, [r7, #19]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10b      	bne.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800301a:	4b07      	ldr	r3, [pc, #28]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800301c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003020:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003028:	4903      	ldr	r1, [pc, #12]	@ (8003038 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800302a:	4313      	orrs	r3, r2
 800302c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003030:	e008      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003032:	7cfb      	ldrb	r3, [r7, #19]
 8003034:	74bb      	strb	r3, [r7, #18]
 8003036:	e005      	b.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003038:	40021000 	.word	0x40021000
 800303c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003040:	7cfb      	ldrb	r3, [r7, #19]
 8003042:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003044:	7c7b      	ldrb	r3, [r7, #17]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d105      	bne.n	8003056 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800304a:	4ba7      	ldr	r3, [pc, #668]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800304c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800304e:	4aa6      	ldr	r2, [pc, #664]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003050:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003054:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0301 	and.w	r3, r3, #1
 800305e:	2b00      	cmp	r3, #0
 8003060:	d00a      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003062:	4ba1      	ldr	r3, [pc, #644]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003064:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003068:	f023 0203 	bic.w	r2, r3, #3
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	499d      	ldr	r1, [pc, #628]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003072:	4313      	orrs	r3, r2
 8003074:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00a      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003084:	4b98      	ldr	r3, [pc, #608]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003086:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800308a:	f023 020c 	bic.w	r2, r3, #12
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	4995      	ldr	r1, [pc, #596]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003094:	4313      	orrs	r3, r2
 8003096:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00a      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030a6:	4b90      	ldr	r3, [pc, #576]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	498c      	ldr	r1, [pc, #560]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030b6:	4313      	orrs	r3, r2
 80030b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0308 	and.w	r3, r3, #8
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00a      	beq.n	80030de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030c8:	4b87      	ldr	r3, [pc, #540]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030ce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	691b      	ldr	r3, [r3, #16]
 80030d6:	4984      	ldr	r1, [pc, #528]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0310 	and.w	r3, r3, #16
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80030ea:	4b7f      	ldr	r3, [pc, #508]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	695b      	ldr	r3, [r3, #20]
 80030f8:	497b      	ldr	r1, [pc, #492]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030fa:	4313      	orrs	r3, r2
 80030fc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0320 	and.w	r3, r3, #32
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00a      	beq.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800310c:	4b76      	ldr	r3, [pc, #472]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800310e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003112:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	4973      	ldr	r1, [pc, #460]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800311c:	4313      	orrs	r3, r2
 800311e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00a      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800312e:	4b6e      	ldr	r3, [pc, #440]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003134:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	69db      	ldr	r3, [r3, #28]
 800313c:	496a      	ldr	r1, [pc, #424]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800313e:	4313      	orrs	r3, r2
 8003140:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800314c:	2b00      	cmp	r3, #0
 800314e:	d00a      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003150:	4b65      	ldr	r3, [pc, #404]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003152:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003156:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a1b      	ldr	r3, [r3, #32]
 800315e:	4962      	ldr	r1, [pc, #392]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003160:	4313      	orrs	r3, r2
 8003162:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00a      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003172:	4b5d      	ldr	r3, [pc, #372]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003178:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003180:	4959      	ldr	r1, [pc, #356]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003182:	4313      	orrs	r3, r2
 8003184:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00a      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003194:	4b54      	ldr	r3, [pc, #336]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003196:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800319a:	f023 0203 	bic.w	r2, r3, #3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031a2:	4951      	ldr	r1, [pc, #324]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00a      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031b6:	4b4c      	ldr	r3, [pc, #304]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031bc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c4:	4948      	ldr	r1, [pc, #288]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d015      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031d8:	4b43      	ldr	r3, [pc, #268]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031e6:	4940      	ldr	r1, [pc, #256]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031e8:	4313      	orrs	r3, r2
 80031ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80031f6:	d105      	bne.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031f8:	4b3b      	ldr	r3, [pc, #236]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	4a3a      	ldr	r2, [pc, #232]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003202:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800320c:	2b00      	cmp	r3, #0
 800320e:	d015      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003210:	4b35      	ldr	r3, [pc, #212]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003212:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003216:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800321e:	4932      	ldr	r1, [pc, #200]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003220:	4313      	orrs	r3, r2
 8003222:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800322a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800322e:	d105      	bne.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003230:	4b2d      	ldr	r3, [pc, #180]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	4a2c      	ldr	r2, [pc, #176]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003236:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800323a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d015      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003248:	4b27      	ldr	r3, [pc, #156]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800324a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800324e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003256:	4924      	ldr	r1, [pc, #144]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003258:	4313      	orrs	r3, r2
 800325a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003262:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003266:	d105      	bne.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003268:	4b1f      	ldr	r3, [pc, #124]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	4a1e      	ldr	r2, [pc, #120]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800326e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003272:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d015      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003280:	4b19      	ldr	r3, [pc, #100]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003282:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003286:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800328e:	4916      	ldr	r1, [pc, #88]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003290:	4313      	orrs	r3, r2
 8003292:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800329a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800329e:	d105      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032a0:	4b11      	ldr	r3, [pc, #68]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032a2:	68db      	ldr	r3, [r3, #12]
 80032a4:	4a10      	ldr	r2, [pc, #64]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032aa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d019      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032b8:	4b0b      	ldr	r3, [pc, #44]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032be:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c6:	4908      	ldr	r1, [pc, #32]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032d6:	d109      	bne.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032d8:	4b03      	ldr	r3, [pc, #12]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	4a02      	ldr	r2, [pc, #8]	@ (80032e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032de:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032e2:	60d3      	str	r3, [r2, #12]
 80032e4:	e002      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80032e6:	bf00      	nop
 80032e8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d015      	beq.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80032f8:	4b29      	ldr	r3, [pc, #164]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80032fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032fe:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003306:	4926      	ldr	r1, [pc, #152]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003308:	4313      	orrs	r3, r2
 800330a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003312:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003316:	d105      	bne.n	8003324 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003318:	4b21      	ldr	r3, [pc, #132]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	4a20      	ldr	r2, [pc, #128]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800331e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003322:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d015      	beq.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003330:	4b1b      	ldr	r3, [pc, #108]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003336:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800333e:	4918      	ldr	r1, [pc, #96]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003340:	4313      	orrs	r3, r2
 8003342:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800334a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800334e:	d105      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003350:	4b13      	ldr	r3, [pc, #76]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	4a12      	ldr	r2, [pc, #72]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003356:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800335a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d015      	beq.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003368:	4b0d      	ldr	r3, [pc, #52]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800336a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800336e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003376:	490a      	ldr	r1, [pc, #40]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003378:	4313      	orrs	r3, r2
 800337a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003382:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003386:	d105      	bne.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003388:	4b05      	ldr	r3, [pc, #20]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800338a:	68db      	ldr	r3, [r3, #12]
 800338c:	4a04      	ldr	r2, [pc, #16]	@ (80033a0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800338e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003392:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003394:	7cbb      	ldrb	r3, [r7, #18]
}
 8003396:	4618      	mov	r0, r3
 8003398:	3718      	adds	r7, #24
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	40021000 	.word	0x40021000

080033a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	b082      	sub	sp, #8
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d101      	bne.n	80033b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e054      	b.n	8003460 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033bc:	b2db      	uxtb	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d111      	bne.n	80033e6 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 ff7c 	bl	80042c8 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d102      	bne.n	80033de <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a23      	ldr	r2, [pc, #140]	@ (8003468 <HAL_TIM_Base_Init+0xc4>)
 80033dc:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2202      	movs	r2, #2
 80033ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681a      	ldr	r2, [r3, #0]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	3304      	adds	r3, #4
 80033f6:	4619      	mov	r1, r3
 80033f8:	4610      	mov	r0, r2
 80033fa:	f000 fdef 	bl	8003fdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2201      	movs	r2, #1
 8003402:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2201      	movs	r2, #1
 8003412:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2201      	movs	r2, #1
 800341a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2201      	movs	r2, #1
 8003422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	0800131d 	.word	0x0800131d

0800346c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800346c:	b480      	push	{r7}
 800346e:	b085      	sub	sp, #20
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800347a:	b2db      	uxtb	r3, r3
 800347c:	2b01      	cmp	r3, #1
 800347e:	d001      	beq.n	8003484 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003480:	2301      	movs	r3, #1
 8003482:	e054      	b.n	800352e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	68da      	ldr	r2, [r3, #12]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f042 0201 	orr.w	r2, r2, #1
 800349a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a26      	ldr	r2, [pc, #152]	@ (800353c <HAL_TIM_Base_Start_IT+0xd0>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d022      	beq.n	80034ec <HAL_TIM_Base_Start_IT+0x80>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034ae:	d01d      	beq.n	80034ec <HAL_TIM_Base_Start_IT+0x80>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4a22      	ldr	r2, [pc, #136]	@ (8003540 <HAL_TIM_Base_Start_IT+0xd4>)
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d018      	beq.n	80034ec <HAL_TIM_Base_Start_IT+0x80>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a21      	ldr	r2, [pc, #132]	@ (8003544 <HAL_TIM_Base_Start_IT+0xd8>)
 80034c0:	4293      	cmp	r3, r2
 80034c2:	d013      	beq.n	80034ec <HAL_TIM_Base_Start_IT+0x80>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a1f      	ldr	r2, [pc, #124]	@ (8003548 <HAL_TIM_Base_Start_IT+0xdc>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d00e      	beq.n	80034ec <HAL_TIM_Base_Start_IT+0x80>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4a1e      	ldr	r2, [pc, #120]	@ (800354c <HAL_TIM_Base_Start_IT+0xe0>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d009      	beq.n	80034ec <HAL_TIM_Base_Start_IT+0x80>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a1c      	ldr	r2, [pc, #112]	@ (8003550 <HAL_TIM_Base_Start_IT+0xe4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d004      	beq.n	80034ec <HAL_TIM_Base_Start_IT+0x80>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a1b      	ldr	r2, [pc, #108]	@ (8003554 <HAL_TIM_Base_Start_IT+0xe8>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d115      	bne.n	8003518 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	4b19      	ldr	r3, [pc, #100]	@ (8003558 <HAL_TIM_Base_Start_IT+0xec>)
 80034f4:	4013      	ands	r3, r2
 80034f6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2b06      	cmp	r3, #6
 80034fc:	d015      	beq.n	800352a <HAL_TIM_Base_Start_IT+0xbe>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003504:	d011      	beq.n	800352a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f042 0201 	orr.w	r2, r2, #1
 8003514:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003516:	e008      	b.n	800352a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f042 0201 	orr.w	r2, r2, #1
 8003526:	601a      	str	r2, [r3, #0]
 8003528:	e000      	b.n	800352c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800352a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800352c:	2300      	movs	r3, #0
}
 800352e:	4618      	mov	r0, r3
 8003530:	3714      	adds	r7, #20
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40012c00 	.word	0x40012c00
 8003540:	40000400 	.word	0x40000400
 8003544:	40000800 	.word	0x40000800
 8003548:	40000c00 	.word	0x40000c00
 800354c:	40013400 	.word	0x40013400
 8003550:	40014000 	.word	0x40014000
 8003554:	40015000 	.word	0x40015000
 8003558:	00010007 	.word	0x00010007

0800355c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e04c      	b.n	800360a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003576:	b2db      	uxtb	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	d111      	bne.n	80035a0 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2200      	movs	r2, #0
 8003580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f000 fe9f 	bl	80042c8 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800358e:	2b00      	cmp	r3, #0
 8003590:	d102      	bne.n	8003598 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a1f      	ldr	r2, [pc, #124]	@ (8003614 <HAL_TIM_OnePulse_Init+0xb8>)
 8003596:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2202      	movs	r2, #2
 80035a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	3304      	adds	r3, #4
 80035b0:	4619      	mov	r1, r3
 80035b2:	4610      	mov	r0, r2
 80035b4:	f000 fd12 	bl	8003fdc <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0208 	bic.w	r2, r2, #8
 80035c6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6819      	ldr	r1, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	683a      	ldr	r2, [r7, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2201      	movs	r2, #1
 80035ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2201      	movs	r2, #1
 80035f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003608:	2300      	movs	r3, #0
}
 800360a:	4618      	mov	r0, r3
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	08003619 	.word	0x08003619

08003618 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003618:	b480      	push	{r7}
 800361a:	b083      	sub	sp, #12
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003620:	bf00      	nop
 8003622:	370c      	adds	r7, #12
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr

0800362c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800363c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003644:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800364c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003654:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003656:	7bfb      	ldrb	r3, [r7, #15]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d108      	bne.n	800366e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800365c:	7bbb      	ldrb	r3, [r7, #14]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d105      	bne.n	800366e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003662:	7b7b      	ldrb	r3, [r7, #13]
 8003664:	2b01      	cmp	r3, #1
 8003666:	d102      	bne.n	800366e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003668:	7b3b      	ldrb	r3, [r7, #12]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d001      	beq.n	8003672 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e059      	b.n	8003726 <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2202      	movs	r2, #2
 8003676:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2202      	movs	r2, #2
 800367e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2202      	movs	r2, #2
 8003686:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2202      	movs	r2, #2
 800368e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68da      	ldr	r2, [r3, #12]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f042 0202 	orr.w	r2, r2, #2
 80036a0:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68da      	ldr	r2, [r3, #12]
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f042 0204 	orr.w	r2, r2, #4
 80036b0:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	2201      	movs	r2, #1
 80036b8:	2100      	movs	r1, #0
 80036ba:	4618      	mov	r0, r3
 80036bc:	f000 fdde 	bl	800427c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2201      	movs	r2, #1
 80036c6:	2104      	movs	r1, #4
 80036c8:	4618      	mov	r0, r3
 80036ca:	f000 fdd7 	bl	800427c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a17      	ldr	r2, [pc, #92]	@ (8003730 <HAL_TIM_OnePulse_Start_IT+0x104>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d018      	beq.n	800370a <HAL_TIM_OnePulse_Start_IT+0xde>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a15      	ldr	r2, [pc, #84]	@ (8003734 <HAL_TIM_OnePulse_Start_IT+0x108>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d013      	beq.n	800370a <HAL_TIM_OnePulse_Start_IT+0xde>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a14      	ldr	r2, [pc, #80]	@ (8003738 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d00e      	beq.n	800370a <HAL_TIM_OnePulse_Start_IT+0xde>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a12      	ldr	r2, [pc, #72]	@ (800373c <HAL_TIM_OnePulse_Start_IT+0x110>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d009      	beq.n	800370a <HAL_TIM_OnePulse_Start_IT+0xde>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a11      	ldr	r2, [pc, #68]	@ (8003740 <HAL_TIM_OnePulse_Start_IT+0x114>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d004      	beq.n	800370a <HAL_TIM_OnePulse_Start_IT+0xde>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a0f      	ldr	r2, [pc, #60]	@ (8003744 <HAL_TIM_OnePulse_Start_IT+0x118>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d101      	bne.n	800370e <HAL_TIM_OnePulse_Start_IT+0xe2>
 800370a:	2301      	movs	r3, #1
 800370c:	e000      	b.n	8003710 <HAL_TIM_OnePulse_Start_IT+0xe4>
 800370e:	2300      	movs	r3, #0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d007      	beq.n	8003724 <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003722:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	40012c00 	.word	0x40012c00
 8003734:	40013400 	.word	0x40013400
 8003738:	40014000 	.word	0x40014000
 800373c:	40014400 	.word	0x40014400
 8003740:	40014800 	.word	0x40014800
 8003744:	40015000 	.word	0x40015000

08003748 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68db      	ldr	r3, [r3, #12]
 8003756:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d026      	beq.n	80037b8 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d021      	beq.n	80037b8 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f06f 0202 	mvn.w	r2, #2
 800377c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2201      	movs	r2, #1
 8003782:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d005      	beq.n	800379e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	4798      	blx	r3
 800379c:	e009      	b.n	80037b2 <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2200      	movs	r2, #0
 80037b6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	f003 0304 	and.w	r3, r3, #4
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d026      	beq.n	8003810 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f003 0304 	and.w	r3, r3, #4
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d021      	beq.n	8003810 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f06f 0204 	mvn.w	r2, #4
 80037d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2202      	movs	r2, #2
 80037da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	699b      	ldr	r3, [r3, #24]
 80037e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d005      	beq.n	80037f6 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	4798      	blx	r3
 80037f4:	e009      	b.n	800380a <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2200      	movs	r2, #0
 800380e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f003 0308 	and.w	r3, r3, #8
 8003816:	2b00      	cmp	r3, #0
 8003818:	d026      	beq.n	8003868 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f003 0308 	and.w	r3, r3, #8
 8003820:	2b00      	cmp	r3, #0
 8003822:	d021      	beq.n	8003868 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f06f 0208 	mvn.w	r2, #8
 800382c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2204      	movs	r2, #4
 8003832:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f003 0303 	and.w	r3, r3, #3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d005      	beq.n	800384e <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003848:	6878      	ldr	r0, [r7, #4]
 800384a:	4798      	blx	r3
 800384c:	e009      	b.n	8003862 <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	f003 0310 	and.w	r3, r3, #16
 800386e:	2b00      	cmp	r3, #0
 8003870:	d026      	beq.n	80038c0 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f003 0310 	and.w	r3, r3, #16
 8003878:	2b00      	cmp	r3, #0
 800387a:	d021      	beq.n	80038c0 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f06f 0210 	mvn.w	r2, #16
 8003884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2208      	movs	r2, #8
 800388a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	69db      	ldr	r3, [r3, #28]
 8003892:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003896:	2b00      	cmp	r3, #0
 8003898:	d005      	beq.n	80038a6 <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	4798      	blx	r3
 80038a4:	e009      	b.n	80038ba <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00e      	beq.n	80038e8 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f003 0301 	and.w	r3, r3, #1
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d009      	beq.n	80038e8 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f06f 0201 	mvn.w	r2, #1
 80038dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d104      	bne.n	80038fc <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00e      	beq.n	800391a <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003902:	2b00      	cmp	r3, #0
 8003904:	d009      	beq.n	800391a <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800390e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00e      	beq.n	8003942 <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800392a:	2b00      	cmp	r3, #0
 800392c:	d009      	beq.n	8003942 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8003936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00e      	beq.n	800396a <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003952:	2b00      	cmp	r3, #0
 8003954:	d009      	beq.n	800396a <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800395e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	f003 0320 	and.w	r3, r3, #32
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00e      	beq.n	8003992 <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f003 0320 	and.w	r3, r3, #32
 800397a:	2b00      	cmp	r3, #0
 800397c:	d009      	beq.n	8003992 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f06f 0220 	mvn.w	r2, #32
 8003986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00e      	beq.n	80039ba <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d009      	beq.n	80039ba <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80039ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00e      	beq.n	80039e2 <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d009      	beq.n	80039e2 <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80039d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00e      	beq.n	8003a0a <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d009      	beq.n	8003a0a <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80039fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00e      	beq.n	8003a32 <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d009      	beq.n	8003a32 <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a32:	bf00      	nop
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}
	...

08003a3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
 8003a44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a46:	2300      	movs	r3, #0
 8003a48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d101      	bne.n	8003a58 <HAL_TIM_ConfigClockSource+0x1c>
 8003a54:	2302      	movs	r3, #2
 8003a56:	e0f6      	b.n	8003c46 <HAL_TIM_ConfigClockSource+0x20a>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003a76:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003a7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a6f      	ldr	r2, [pc, #444]	@ (8003c50 <HAL_TIM_ConfigClockSource+0x214>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	f000 80c1 	beq.w	8003c1a <HAL_TIM_ConfigClockSource+0x1de>
 8003a98:	4a6d      	ldr	r2, [pc, #436]	@ (8003c50 <HAL_TIM_ConfigClockSource+0x214>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	f200 80c6 	bhi.w	8003c2c <HAL_TIM_ConfigClockSource+0x1f0>
 8003aa0:	4a6c      	ldr	r2, [pc, #432]	@ (8003c54 <HAL_TIM_ConfigClockSource+0x218>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	f000 80b9 	beq.w	8003c1a <HAL_TIM_ConfigClockSource+0x1de>
 8003aa8:	4a6a      	ldr	r2, [pc, #424]	@ (8003c54 <HAL_TIM_ConfigClockSource+0x218>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	f200 80be 	bhi.w	8003c2c <HAL_TIM_ConfigClockSource+0x1f0>
 8003ab0:	4a69      	ldr	r2, [pc, #420]	@ (8003c58 <HAL_TIM_ConfigClockSource+0x21c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	f000 80b1 	beq.w	8003c1a <HAL_TIM_ConfigClockSource+0x1de>
 8003ab8:	4a67      	ldr	r2, [pc, #412]	@ (8003c58 <HAL_TIM_ConfigClockSource+0x21c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	f200 80b6 	bhi.w	8003c2c <HAL_TIM_ConfigClockSource+0x1f0>
 8003ac0:	4a66      	ldr	r2, [pc, #408]	@ (8003c5c <HAL_TIM_ConfigClockSource+0x220>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	f000 80a9 	beq.w	8003c1a <HAL_TIM_ConfigClockSource+0x1de>
 8003ac8:	4a64      	ldr	r2, [pc, #400]	@ (8003c5c <HAL_TIM_ConfigClockSource+0x220>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	f200 80ae 	bhi.w	8003c2c <HAL_TIM_ConfigClockSource+0x1f0>
 8003ad0:	4a63      	ldr	r2, [pc, #396]	@ (8003c60 <HAL_TIM_ConfigClockSource+0x224>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	f000 80a1 	beq.w	8003c1a <HAL_TIM_ConfigClockSource+0x1de>
 8003ad8:	4a61      	ldr	r2, [pc, #388]	@ (8003c60 <HAL_TIM_ConfigClockSource+0x224>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	f200 80a6 	bhi.w	8003c2c <HAL_TIM_ConfigClockSource+0x1f0>
 8003ae0:	4a60      	ldr	r2, [pc, #384]	@ (8003c64 <HAL_TIM_ConfigClockSource+0x228>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	f000 8099 	beq.w	8003c1a <HAL_TIM_ConfigClockSource+0x1de>
 8003ae8:	4a5e      	ldr	r2, [pc, #376]	@ (8003c64 <HAL_TIM_ConfigClockSource+0x228>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	f200 809e 	bhi.w	8003c2c <HAL_TIM_ConfigClockSource+0x1f0>
 8003af0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003af4:	f000 8091 	beq.w	8003c1a <HAL_TIM_ConfigClockSource+0x1de>
 8003af8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003afc:	f200 8096 	bhi.w	8003c2c <HAL_TIM_ConfigClockSource+0x1f0>
 8003b00:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b04:	f000 8089 	beq.w	8003c1a <HAL_TIM_ConfigClockSource+0x1de>
 8003b08:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b0c:	f200 808e 	bhi.w	8003c2c <HAL_TIM_ConfigClockSource+0x1f0>
 8003b10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b14:	d03e      	beq.n	8003b94 <HAL_TIM_ConfigClockSource+0x158>
 8003b16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b1a:	f200 8087 	bhi.w	8003c2c <HAL_TIM_ConfigClockSource+0x1f0>
 8003b1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b22:	f000 8086 	beq.w	8003c32 <HAL_TIM_ConfigClockSource+0x1f6>
 8003b26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b2a:	d87f      	bhi.n	8003c2c <HAL_TIM_ConfigClockSource+0x1f0>
 8003b2c:	2b70      	cmp	r3, #112	@ 0x70
 8003b2e:	d01a      	beq.n	8003b66 <HAL_TIM_ConfigClockSource+0x12a>
 8003b30:	2b70      	cmp	r3, #112	@ 0x70
 8003b32:	d87b      	bhi.n	8003c2c <HAL_TIM_ConfigClockSource+0x1f0>
 8003b34:	2b60      	cmp	r3, #96	@ 0x60
 8003b36:	d050      	beq.n	8003bda <HAL_TIM_ConfigClockSource+0x19e>
 8003b38:	2b60      	cmp	r3, #96	@ 0x60
 8003b3a:	d877      	bhi.n	8003c2c <HAL_TIM_ConfigClockSource+0x1f0>
 8003b3c:	2b50      	cmp	r3, #80	@ 0x50
 8003b3e:	d03c      	beq.n	8003bba <HAL_TIM_ConfigClockSource+0x17e>
 8003b40:	2b50      	cmp	r3, #80	@ 0x50
 8003b42:	d873      	bhi.n	8003c2c <HAL_TIM_ConfigClockSource+0x1f0>
 8003b44:	2b40      	cmp	r3, #64	@ 0x40
 8003b46:	d058      	beq.n	8003bfa <HAL_TIM_ConfigClockSource+0x1be>
 8003b48:	2b40      	cmp	r3, #64	@ 0x40
 8003b4a:	d86f      	bhi.n	8003c2c <HAL_TIM_ConfigClockSource+0x1f0>
 8003b4c:	2b30      	cmp	r3, #48	@ 0x30
 8003b4e:	d064      	beq.n	8003c1a <HAL_TIM_ConfigClockSource+0x1de>
 8003b50:	2b30      	cmp	r3, #48	@ 0x30
 8003b52:	d86b      	bhi.n	8003c2c <HAL_TIM_ConfigClockSource+0x1f0>
 8003b54:	2b20      	cmp	r3, #32
 8003b56:	d060      	beq.n	8003c1a <HAL_TIM_ConfigClockSource+0x1de>
 8003b58:	2b20      	cmp	r3, #32
 8003b5a:	d867      	bhi.n	8003c2c <HAL_TIM_ConfigClockSource+0x1f0>
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d05c      	beq.n	8003c1a <HAL_TIM_ConfigClockSource+0x1de>
 8003b60:	2b10      	cmp	r3, #16
 8003b62:	d05a      	beq.n	8003c1a <HAL_TIM_ConfigClockSource+0x1de>
 8003b64:	e062      	b.n	8003c2c <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b76:	f000 fb61 	bl	800423c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b88:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	609a      	str	r2, [r3, #8]
      break;
 8003b92:	e04f      	b.n	8003c34 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ba4:	f000 fb4a 	bl	800423c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689a      	ldr	r2, [r3, #8]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bb6:	609a      	str	r2, [r3, #8]
      break;
 8003bb8:	e03c      	b.n	8003c34 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bc6:	461a      	mov	r2, r3
 8003bc8:	f000 fabc 	bl	8004144 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	2150      	movs	r1, #80	@ 0x50
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 fb15 	bl	8004202 <TIM_ITRx_SetConfig>
      break;
 8003bd8:	e02c      	b.n	8003c34 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003be6:	461a      	mov	r2, r3
 8003be8:	f000 fadb 	bl	80041a2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2160      	movs	r1, #96	@ 0x60
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f000 fb05 	bl	8004202 <TIM_ITRx_SetConfig>
      break;
 8003bf8:	e01c      	b.n	8003c34 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c06:	461a      	mov	r2, r3
 8003c08:	f000 fa9c 	bl	8004144 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2140      	movs	r1, #64	@ 0x40
 8003c12:	4618      	mov	r0, r3
 8003c14:	f000 faf5 	bl	8004202 <TIM_ITRx_SetConfig>
      break;
 8003c18:	e00c      	b.n	8003c34 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4619      	mov	r1, r3
 8003c24:	4610      	mov	r0, r2
 8003c26:	f000 faec 	bl	8004202 <TIM_ITRx_SetConfig>
      break;
 8003c2a:	e003      	b.n	8003c34 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c30:	e000      	b.n	8003c34 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003c32:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c44:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3710      	adds	r7, #16
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	00100070 	.word	0x00100070
 8003c54:	00100060 	.word	0x00100060
 8003c58:	00100050 	.word	0x00100050
 8003c5c:	00100040 	.word	0x00100040
 8003c60:	00100030 	.word	0x00100030
 8003c64:	00100020 	.word	0x00100020

08003c68 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003c68:	b480      	push	{r7}
 8003c6a:	b083      	sub	sp, #12
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8003c70:	bf00      	nop
 8003c72:	370c      	adds	r7, #12
 8003c74:	46bd      	mov	sp, r7
 8003c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7a:	4770      	bx	lr

08003c7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b087      	sub	sp, #28
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	460b      	mov	r3, r1
 8003d26:	607a      	str	r2, [r7, #4]
 8003d28:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d101      	bne.n	8003d38 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e14a      	b.n	8003fce <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	f040 80dd 	bne.w	8003f00 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8003d46:	7afb      	ldrb	r3, [r7, #11]
 8003d48:	2b1f      	cmp	r3, #31
 8003d4a:	f200 80d6 	bhi.w	8003efa <HAL_TIM_RegisterCallback+0x1de>
 8003d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d54 <HAL_TIM_RegisterCallback+0x38>)
 8003d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d54:	08003dd5 	.word	0x08003dd5
 8003d58:	08003ddd 	.word	0x08003ddd
 8003d5c:	08003de5 	.word	0x08003de5
 8003d60:	08003ded 	.word	0x08003ded
 8003d64:	08003df5 	.word	0x08003df5
 8003d68:	08003dfd 	.word	0x08003dfd
 8003d6c:	08003e05 	.word	0x08003e05
 8003d70:	08003e0d 	.word	0x08003e0d
 8003d74:	08003e15 	.word	0x08003e15
 8003d78:	08003e1d 	.word	0x08003e1d
 8003d7c:	08003e25 	.word	0x08003e25
 8003d80:	08003e2d 	.word	0x08003e2d
 8003d84:	08003e35 	.word	0x08003e35
 8003d88:	08003e3d 	.word	0x08003e3d
 8003d8c:	08003e47 	.word	0x08003e47
 8003d90:	08003e51 	.word	0x08003e51
 8003d94:	08003e5b 	.word	0x08003e5b
 8003d98:	08003e65 	.word	0x08003e65
 8003d9c:	08003e6f 	.word	0x08003e6f
 8003da0:	08003e79 	.word	0x08003e79
 8003da4:	08003e83 	.word	0x08003e83
 8003da8:	08003e8d 	.word	0x08003e8d
 8003dac:	08003e97 	.word	0x08003e97
 8003db0:	08003ea1 	.word	0x08003ea1
 8003db4:	08003eab 	.word	0x08003eab
 8003db8:	08003eb5 	.word	0x08003eb5
 8003dbc:	08003ebf 	.word	0x08003ebf
 8003dc0:	08003ec9 	.word	0x08003ec9
 8003dc4:	08003ed3 	.word	0x08003ed3
 8003dc8:	08003edd 	.word	0x08003edd
 8003dcc:	08003ee7 	.word	0x08003ee7
 8003dd0:	08003ef1 	.word	0x08003ef1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8003dda:	e0f7      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	687a      	ldr	r2, [r7, #4]
 8003de0:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8003de2:	e0f3      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	687a      	ldr	r2, [r7, #4]
 8003de8:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8003dea:	e0ef      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8003df2:	e0eb      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8003dfa:	e0e7      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8003e02:	e0e3      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8003e0a:	e0df      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8003e12:	e0db      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8003e1a:	e0d7      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8003e22:	e0d3      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8003e2a:	e0cf      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8003e32:	e0cb      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8003e3a:	e0c7      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8003e44:	e0c2      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8003e4e:	e0bd      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8003e58:	e0b8      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8003e62:	e0b3      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8003e6c:	e0ae      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8003e76:	e0a9      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8003e80:	e0a4      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8003e8a:	e09f      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8003e94:	e09a      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8003e9e:	e095      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8003ea8:	e090      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8003eb2:	e08b      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8003ebc:	e086      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8003ec6:	e081      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8003ed0:	e07c      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8003eda:	e077      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8003ee4:	e072      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8003eee:	e06d      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8003ef8:	e068      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	75fb      	strb	r3, [r7, #23]
        break;
 8003efe:	e065      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d15d      	bne.n	8003fc8 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8003f0c:	7afb      	ldrb	r3, [r7, #11]
 8003f0e:	2b0d      	cmp	r3, #13
 8003f10:	d857      	bhi.n	8003fc2 <HAL_TIM_RegisterCallback+0x2a6>
 8003f12:	a201      	add	r2, pc, #4	@ (adr r2, 8003f18 <HAL_TIM_RegisterCallback+0x1fc>)
 8003f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f18:	08003f51 	.word	0x08003f51
 8003f1c:	08003f59 	.word	0x08003f59
 8003f20:	08003f61 	.word	0x08003f61
 8003f24:	08003f69 	.word	0x08003f69
 8003f28:	08003f71 	.word	0x08003f71
 8003f2c:	08003f79 	.word	0x08003f79
 8003f30:	08003f81 	.word	0x08003f81
 8003f34:	08003f89 	.word	0x08003f89
 8003f38:	08003f91 	.word	0x08003f91
 8003f3c:	08003f99 	.word	0x08003f99
 8003f40:	08003fa1 	.word	0x08003fa1
 8003f44:	08003fa9 	.word	0x08003fa9
 8003f48:	08003fb1 	.word	0x08003fb1
 8003f4c:	08003fb9 	.word	0x08003fb9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	687a      	ldr	r2, [r7, #4]
 8003f54:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8003f56:	e039      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	687a      	ldr	r2, [r7, #4]
 8003f5c:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8003f5e:	e035      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8003f66:	e031      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8003f6e:	e02d      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8003f76:	e029      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8003f7e:	e025      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8003f86:	e021      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8003f8e:	e01d      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8003f96:	e019      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8003f9e:	e015      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8003fa6:	e011      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8003fae:	e00d      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8003fb6:	e009      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8003fc0:	e004      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	75fb      	strb	r3, [r7, #23]
        break;
 8003fc6:	e001      	b.n	8003fcc <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	371c      	adds	r7, #28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop

08003fdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	b085      	sub	sp, #20
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	6078      	str	r0, [r7, #4]
 8003fe4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	4a4c      	ldr	r2, [pc, #304]	@ (8004120 <TIM_Base_SetConfig+0x144>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d017      	beq.n	8004024 <TIM_Base_SetConfig+0x48>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ffa:	d013      	beq.n	8004024 <TIM_Base_SetConfig+0x48>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	4a49      	ldr	r2, [pc, #292]	@ (8004124 <TIM_Base_SetConfig+0x148>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d00f      	beq.n	8004024 <TIM_Base_SetConfig+0x48>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a48      	ldr	r2, [pc, #288]	@ (8004128 <TIM_Base_SetConfig+0x14c>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d00b      	beq.n	8004024 <TIM_Base_SetConfig+0x48>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a47      	ldr	r2, [pc, #284]	@ (800412c <TIM_Base_SetConfig+0x150>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d007      	beq.n	8004024 <TIM_Base_SetConfig+0x48>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a46      	ldr	r2, [pc, #280]	@ (8004130 <TIM_Base_SetConfig+0x154>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d003      	beq.n	8004024 <TIM_Base_SetConfig+0x48>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a45      	ldr	r2, [pc, #276]	@ (8004134 <TIM_Base_SetConfig+0x158>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d108      	bne.n	8004036 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800402a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a39      	ldr	r2, [pc, #228]	@ (8004120 <TIM_Base_SetConfig+0x144>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d023      	beq.n	8004086 <TIM_Base_SetConfig+0xaa>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004044:	d01f      	beq.n	8004086 <TIM_Base_SetConfig+0xaa>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a36      	ldr	r2, [pc, #216]	@ (8004124 <TIM_Base_SetConfig+0x148>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d01b      	beq.n	8004086 <TIM_Base_SetConfig+0xaa>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a35      	ldr	r2, [pc, #212]	@ (8004128 <TIM_Base_SetConfig+0x14c>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d017      	beq.n	8004086 <TIM_Base_SetConfig+0xaa>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a34      	ldr	r2, [pc, #208]	@ (800412c <TIM_Base_SetConfig+0x150>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d013      	beq.n	8004086 <TIM_Base_SetConfig+0xaa>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a33      	ldr	r2, [pc, #204]	@ (8004130 <TIM_Base_SetConfig+0x154>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d00f      	beq.n	8004086 <TIM_Base_SetConfig+0xaa>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a33      	ldr	r2, [pc, #204]	@ (8004138 <TIM_Base_SetConfig+0x15c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d00b      	beq.n	8004086 <TIM_Base_SetConfig+0xaa>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a32      	ldr	r2, [pc, #200]	@ (800413c <TIM_Base_SetConfig+0x160>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d007      	beq.n	8004086 <TIM_Base_SetConfig+0xaa>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a31      	ldr	r2, [pc, #196]	@ (8004140 <TIM_Base_SetConfig+0x164>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d003      	beq.n	8004086 <TIM_Base_SetConfig+0xaa>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a2c      	ldr	r2, [pc, #176]	@ (8004134 <TIM_Base_SetConfig+0x158>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d108      	bne.n	8004098 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800408c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	4313      	orrs	r3, r2
 8004096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a18      	ldr	r2, [pc, #96]	@ (8004120 <TIM_Base_SetConfig+0x144>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d013      	beq.n	80040ec <TIM_Base_SetConfig+0x110>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a1a      	ldr	r2, [pc, #104]	@ (8004130 <TIM_Base_SetConfig+0x154>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d00f      	beq.n	80040ec <TIM_Base_SetConfig+0x110>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a1a      	ldr	r2, [pc, #104]	@ (8004138 <TIM_Base_SetConfig+0x15c>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d00b      	beq.n	80040ec <TIM_Base_SetConfig+0x110>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a19      	ldr	r2, [pc, #100]	@ (800413c <TIM_Base_SetConfig+0x160>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d007      	beq.n	80040ec <TIM_Base_SetConfig+0x110>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a18      	ldr	r2, [pc, #96]	@ (8004140 <TIM_Base_SetConfig+0x164>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d003      	beq.n	80040ec <TIM_Base_SetConfig+0x110>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a13      	ldr	r2, [pc, #76]	@ (8004134 <TIM_Base_SetConfig+0x158>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d103      	bne.n	80040f4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	691a      	ldr	r2, [r3, #16]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	691b      	ldr	r3, [r3, #16]
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b01      	cmp	r3, #1
 8004104:	d105      	bne.n	8004112 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f023 0201 	bic.w	r2, r3, #1
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	611a      	str	r2, [r3, #16]
  }
}
 8004112:	bf00      	nop
 8004114:	3714      	adds	r7, #20
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	40012c00 	.word	0x40012c00
 8004124:	40000400 	.word	0x40000400
 8004128:	40000800 	.word	0x40000800
 800412c:	40000c00 	.word	0x40000c00
 8004130:	40013400 	.word	0x40013400
 8004134:	40015000 	.word	0x40015000
 8004138:	40014000 	.word	0x40014000
 800413c:	40014400 	.word	0x40014400
 8004140:	40014800 	.word	0x40014800

08004144 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004144:	b480      	push	{r7}
 8004146:	b087      	sub	sp, #28
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	6a1b      	ldr	r3, [r3, #32]
 800415a:	f023 0201 	bic.w	r2, r3, #1
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800416e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	011b      	lsls	r3, r3, #4
 8004174:	693a      	ldr	r2, [r7, #16]
 8004176:	4313      	orrs	r3, r2
 8004178:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	f023 030a 	bic.w	r3, r3, #10
 8004180:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004182:	697a      	ldr	r2, [r7, #20]
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	4313      	orrs	r3, r2
 8004188:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	693a      	ldr	r2, [r7, #16]
 800418e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	621a      	str	r2, [r3, #32]
}
 8004196:	bf00      	nop
 8004198:	371c      	adds	r7, #28
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr

080041a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041a2:	b480      	push	{r7}
 80041a4:	b087      	sub	sp, #28
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	60f8      	str	r0, [r7, #12]
 80041aa:	60b9      	str	r1, [r7, #8]
 80041ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	f023 0210 	bic.w	r2, r3, #16
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	699b      	ldr	r3, [r3, #24]
 80041c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	031b      	lsls	r3, r3, #12
 80041d2:	693a      	ldr	r2, [r7, #16]
 80041d4:	4313      	orrs	r3, r2
 80041d6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041de:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	011b      	lsls	r3, r3, #4
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	621a      	str	r2, [r3, #32]
}
 80041f6:	bf00      	nop
 80041f8:	371c      	adds	r7, #28
 80041fa:	46bd      	mov	sp, r7
 80041fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004200:	4770      	bx	lr

08004202 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004202:	b480      	push	{r7}
 8004204:	b085      	sub	sp, #20
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
 800420a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004218:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800421c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800421e:	683a      	ldr	r2, [r7, #0]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	f043 0307 	orr.w	r3, r3, #7
 8004228:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	609a      	str	r2, [r3, #8]
}
 8004230:	bf00      	nop
 8004232:	3714      	adds	r7, #20
 8004234:	46bd      	mov	sp, r7
 8004236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800423a:	4770      	bx	lr

0800423c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
 8004248:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004256:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	021a      	lsls	r2, r3, #8
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	431a      	orrs	r2, r3
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	4313      	orrs	r3, r2
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4313      	orrs	r3, r2
 8004268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	609a      	str	r2, [r3, #8]
}
 8004270:	bf00      	nop
 8004272:	371c      	adds	r7, #28
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f003 031f 	and.w	r3, r3, #31
 800428e:	2201      	movs	r2, #1
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a1a      	ldr	r2, [r3, #32]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	43db      	mvns	r3, r3
 800429e:	401a      	ands	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a1a      	ldr	r2, [r3, #32]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f003 031f 	and.w	r3, r3, #31
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	fa01 f303 	lsl.w	r3, r1, r3
 80042b4:	431a      	orrs	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	621a      	str	r2, [r3, #32]
}
 80042ba:	bf00      	nop
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
	...

080042c8 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b083      	sub	sp, #12
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	4a26      	ldr	r2, [pc, #152]	@ (800436c <TIM_ResetCallback+0xa4>)
 80042d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	4a25      	ldr	r2, [pc, #148]	@ (8004370 <TIM_ResetCallback+0xa8>)
 80042dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	4a24      	ldr	r2, [pc, #144]	@ (8004374 <TIM_ResetCallback+0xac>)
 80042e4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	4a23      	ldr	r2, [pc, #140]	@ (8004378 <TIM_ResetCallback+0xb0>)
 80042ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a22      	ldr	r2, [pc, #136]	@ (800437c <TIM_ResetCallback+0xb4>)
 80042f4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a21      	ldr	r2, [pc, #132]	@ (8004380 <TIM_ResetCallback+0xb8>)
 80042fc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a20      	ldr	r2, [pc, #128]	@ (8004384 <TIM_ResetCallback+0xbc>)
 8004304:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a1f      	ldr	r2, [pc, #124]	@ (8004388 <TIM_ResetCallback+0xc0>)
 800430c:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a1e      	ldr	r2, [pc, #120]	@ (800438c <TIM_ResetCallback+0xc4>)
 8004314:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a1d      	ldr	r2, [pc, #116]	@ (8004390 <TIM_ResetCallback+0xc8>)
 800431c:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a1c      	ldr	r2, [pc, #112]	@ (8004394 <TIM_ResetCallback+0xcc>)
 8004324:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a1b      	ldr	r2, [pc, #108]	@ (8004398 <TIM_ResetCallback+0xd0>)
 800432c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a1a      	ldr	r2, [pc, #104]	@ (800439c <TIM_ResetCallback+0xd4>)
 8004334:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a19      	ldr	r2, [pc, #100]	@ (80043a0 <TIM_ResetCallback+0xd8>)
 800433c:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a18      	ldr	r2, [pc, #96]	@ (80043a4 <TIM_ResetCallback+0xdc>)
 8004344:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a17      	ldr	r2, [pc, #92]	@ (80043a8 <TIM_ResetCallback+0xe0>)
 800434c:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a16      	ldr	r2, [pc, #88]	@ (80043ac <TIM_ResetCallback+0xe4>)
 8004354:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a15      	ldr	r2, [pc, #84]	@ (80043b0 <TIM_ResetCallback+0xe8>)
 800435c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8004360:	bf00      	nop
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr
 800436c:	0800129d 	.word	0x0800129d
 8004370:	08003c69 	.word	0x08003c69
 8004374:	08003ce1 	.word	0x08003ce1
 8004378:	08003cf5 	.word	0x08003cf5
 800437c:	08003c91 	.word	0x08003c91
 8004380:	08003ca5 	.word	0x08003ca5
 8004384:	08003c7d 	.word	0x08003c7d
 8004388:	08003cb9 	.word	0x08003cb9
 800438c:	08003ccd 	.word	0x08003ccd
 8004390:	08003d09 	.word	0x08003d09
 8004394:	080044e1 	.word	0x080044e1
 8004398:	080044f5 	.word	0x080044f5
 800439c:	08004509 	.word	0x08004509
 80043a0:	0800451d 	.word	0x0800451d
 80043a4:	08004531 	.word	0x08004531
 80043a8:	08004545 	.word	0x08004545
 80043ac:	08004559 	.word	0x08004559
 80043b0:	0800456d 	.word	0x0800456d

080043b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d101      	bne.n	80043cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043c8:	2302      	movs	r3, #2
 80043ca:	e074      	b.n	80044b6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a34      	ldr	r2, [pc, #208]	@ (80044c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d009      	beq.n	800440a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a33      	ldr	r2, [pc, #204]	@ (80044c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d004      	beq.n	800440a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a31      	ldr	r2, [pc, #196]	@ (80044cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d108      	bne.n	800441c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004410:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	4313      	orrs	r3, r2
 800441a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8004422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004426:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68fa      	ldr	r2, [r7, #12]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68fa      	ldr	r2, [r7, #12]
 8004438:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a21      	ldr	r2, [pc, #132]	@ (80044c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d022      	beq.n	800448a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800444c:	d01d      	beq.n	800448a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a1f      	ldr	r2, [pc, #124]	@ (80044d0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d018      	beq.n	800448a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a1d      	ldr	r2, [pc, #116]	@ (80044d4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d013      	beq.n	800448a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a1c      	ldr	r2, [pc, #112]	@ (80044d8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d00e      	beq.n	800448a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a15      	ldr	r2, [pc, #84]	@ (80044c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d009      	beq.n	800448a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a18      	ldr	r2, [pc, #96]	@ (80044dc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d004      	beq.n	800448a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a11      	ldr	r2, [pc, #68]	@ (80044cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d10c      	bne.n	80044a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004490:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	68ba      	ldr	r2, [r7, #8]
 8004498:	4313      	orrs	r3, r2
 800449a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68ba      	ldr	r2, [r7, #8]
 80044a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2200      	movs	r2, #0
 80044b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80044b4:	2300      	movs	r3, #0
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr
 80044c2:	bf00      	nop
 80044c4:	40012c00 	.word	0x40012c00
 80044c8:	40013400 	.word	0x40013400
 80044cc:	40015000 	.word	0x40015000
 80044d0:	40000400 	.word	0x40000400
 80044d4:	40000800 	.word	0x40000800
 80044d8:	40000c00 	.word	0x40000c00
 80044dc:	40014000 	.word	0x40014000

080044e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b083      	sub	sp, #12
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044e8:	bf00      	nop
 80044ea:	370c      	adds	r7, #12
 80044ec:	46bd      	mov	sp, r7
 80044ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f2:	4770      	bx	lr

080044f4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80044f4:	b480      	push	{r7}
 80044f6:	b083      	sub	sp, #12
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 80044fc:	bf00      	nop
 80044fe:	370c      	adds	r7, #12
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr

08004508 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d101      	bne.n	8004592 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800458e:	2301      	movs	r3, #1
 8004590:	e050      	b.n	8004634 <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004598:	2b00      	cmp	r3, #0
 800459a:	d114      	bne.n	80045c6 <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 fdc5 	bl	8005134 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d103      	bne.n	80045bc <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a21      	ldr	r2, [pc, #132]	@ (800463c <HAL_UART_Init+0xbc>)
 80045b8:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2224      	movs	r2, #36	@ 0x24
 80045ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f022 0201 	bic.w	r2, r2, #1
 80045dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d002      	beq.n	80045ec <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f001 f8f2 	bl	80057d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 fdf3 	bl	80051d8 <UART_SetConfig>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d101      	bne.n	80045fc <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 80045f8:	2301      	movs	r3, #1
 80045fa:	e01b      	b.n	8004634 <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	685a      	ldr	r2, [r3, #4]
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800460a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800461a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f042 0201 	orr.w	r2, r2, #1
 800462a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	f001 f971 	bl	8005914 <UART_CheckIdleState>
 8004632:	4603      	mov	r3, r0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3708      	adds	r7, #8
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	080013a1 	.word	0x080013a1

08004640 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8004640:	b480      	push	{r7}
 8004642:	b087      	sub	sp, #28
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	460b      	mov	r3, r1
 800464a:	607a      	str	r2, [r7, #4]
 800464c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800464e:	2300      	movs	r3, #0
 8004650:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d109      	bne.n	800466c <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800465e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e09c      	b.n	80047a6 <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004672:	2b20      	cmp	r3, #32
 8004674:	d16c      	bne.n	8004750 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 8004676:	7afb      	ldrb	r3, [r7, #11]
 8004678:	2b0c      	cmp	r3, #12
 800467a:	d85e      	bhi.n	800473a <HAL_UART_RegisterCallback+0xfa>
 800467c:	a201      	add	r2, pc, #4	@ (adr r2, 8004684 <HAL_UART_RegisterCallback+0x44>)
 800467e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004682:	bf00      	nop
 8004684:	080046b9 	.word	0x080046b9
 8004688:	080046c3 	.word	0x080046c3
 800468c:	080046cd 	.word	0x080046cd
 8004690:	080046d7 	.word	0x080046d7
 8004694:	080046e1 	.word	0x080046e1
 8004698:	080046eb 	.word	0x080046eb
 800469c:	080046f5 	.word	0x080046f5
 80046a0:	080046ff 	.word	0x080046ff
 80046a4:	08004709 	.word	0x08004709
 80046a8:	08004713 	.word	0x08004713
 80046ac:	0800471d 	.word	0x0800471d
 80046b0:	08004727 	.word	0x08004727
 80046b4:	08004731 	.word	0x08004731
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80046c0:	e070      	b.n	80047a4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80046ca:	e06b      	b.n	80047a4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80046d4:	e066      	b.n	80047a4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 80046de:	e061      	b.n	80047a4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 80046e8:	e05c      	b.n	80047a4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 80046f2:	e057      	b.n	80047a4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 80046fc:	e052      	b.n	80047a4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8004706:	e04d      	b.n	80047a4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8004710:	e048      	b.n	80047a4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 800471a:	e043      	b.n	80047a4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8004724:	e03e      	b.n	80047a4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800472e:	e039      	b.n	80047a4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8004738:	e034      	b.n	80047a4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004740:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800474a:	2301      	movs	r3, #1
 800474c:	75fb      	strb	r3, [r7, #23]
        break;
 800474e:	e029      	b.n	80047a4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004756:	2b00      	cmp	r3, #0
 8004758:	d11a      	bne.n	8004790 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 800475a:	7afb      	ldrb	r3, [r7, #11]
 800475c:	2b0b      	cmp	r3, #11
 800475e:	d002      	beq.n	8004766 <HAL_UART_RegisterCallback+0x126>
 8004760:	2b0c      	cmp	r3, #12
 8004762:	d005      	beq.n	8004770 <HAL_UART_RegisterCallback+0x130>
 8004764:	e009      	b.n	800477a <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 800476e:	e019      	b.n	80047a4 <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	687a      	ldr	r2, [r7, #4]
 8004774:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8004778:	e014      	b.n	80047a4 <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004780:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	75fb      	strb	r3, [r7, #23]
        break;
 800478e:	e009      	b.n	80047a4 <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004796:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 80047a0:	2301      	movs	r3, #1
 80047a2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80047a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	371c      	adds	r7, #28
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop

080047b4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b08a      	sub	sp, #40	@ 0x28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	4613      	mov	r3, r2
 80047c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047c8:	2b20      	cmp	r3, #32
 80047ca:	d167      	bne.n	800489c <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d002      	beq.n	80047d8 <HAL_UART_Transmit_DMA+0x24>
 80047d2:	88fb      	ldrh	r3, [r7, #6]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d101      	bne.n	80047dc <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e060      	b.n	800489e <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	88fa      	ldrh	r2, [r7, #6]
 80047e6:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	88fa      	ldrh	r2, [r7, #6]
 80047ee:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2221      	movs	r2, #33	@ 0x21
 80047fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004806:	2b00      	cmp	r3, #0
 8004808:	d028      	beq.n	800485c <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800480e:	4a26      	ldr	r2, [pc, #152]	@ (80048a8 <HAL_UART_Transmit_DMA+0xf4>)
 8004810:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004816:	4a25      	ldr	r2, [pc, #148]	@ (80048ac <HAL_UART_Transmit_DMA+0xf8>)
 8004818:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800481e:	4a24      	ldr	r2, [pc, #144]	@ (80048b0 <HAL_UART_Transmit_DMA+0xfc>)
 8004820:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004826:	2200      	movs	r2, #0
 8004828:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004832:	4619      	mov	r1, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3328      	adds	r3, #40	@ 0x28
 800483a:	461a      	mov	r2, r3
 800483c:	88fb      	ldrh	r3, [r7, #6]
 800483e:	f7fd f939 	bl	8001ab4 <HAL_DMA_Start_IT>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d009      	beq.n	800485c <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2210      	movs	r2, #16
 800484c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2220      	movs	r2, #32
 8004854:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e020      	b.n	800489e <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2240      	movs	r2, #64	@ 0x40
 8004862:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3308      	adds	r3, #8
 800486a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	e853 3f00 	ldrex	r3, [r3]
 8004872:	613b      	str	r3, [r7, #16]
   return(result);
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800487a:	627b      	str	r3, [r7, #36]	@ 0x24
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3308      	adds	r3, #8
 8004882:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004884:	623a      	str	r2, [r7, #32]
 8004886:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004888:	69f9      	ldr	r1, [r7, #28]
 800488a:	6a3a      	ldr	r2, [r7, #32]
 800488c:	e841 2300 	strex	r3, r2, [r1]
 8004890:	61bb      	str	r3, [r7, #24]
   return(result);
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e5      	bne.n	8004864 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8004898:	2300      	movs	r3, #0
 800489a:	e000      	b.n	800489e <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800489c:	2302      	movs	r3, #2
  }
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3728      	adds	r7, #40	@ 0x28
 80048a2:	46bd      	mov	sp, r7
 80048a4:	bd80      	pop	{r7, pc}
 80048a6:	bf00      	nop
 80048a8:	08005ddf 	.word	0x08005ddf
 80048ac:	08005e7d 	.word	0x08005e7d
 80048b0:	08006017 	.word	0x08006017

080048b4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b08a      	sub	sp, #40	@ 0x28
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	60f8      	str	r0, [r7, #12]
 80048bc:	60b9      	str	r1, [r7, #8]
 80048be:	4613      	mov	r3, r2
 80048c0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048c8:	2b20      	cmp	r3, #32
 80048ca:	d137      	bne.n	800493c <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d002      	beq.n	80048d8 <HAL_UART_Receive_DMA+0x24>
 80048d2:	88fb      	ldrh	r3, [r7, #6]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80048d8:	2301      	movs	r3, #1
 80048da:	e030      	b.n	800493e <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	4a18      	ldr	r2, [pc, #96]	@ (8004948 <HAL_UART_Receive_DMA+0x94>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d01f      	beq.n	800492c <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	685b      	ldr	r3, [r3, #4]
 80048f2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d018      	beq.n	800492c <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	e853 3f00 	ldrex	r3, [r3]
 8004906:	613b      	str	r3, [r7, #16]
   return(result);
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800490e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	461a      	mov	r2, r3
 8004916:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004918:	623b      	str	r3, [r7, #32]
 800491a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800491c:	69f9      	ldr	r1, [r7, #28]
 800491e:	6a3a      	ldr	r2, [r7, #32]
 8004920:	e841 2300 	strex	r3, r2, [r1]
 8004924:	61bb      	str	r3, [r7, #24]
   return(result);
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1e6      	bne.n	80048fa <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800492c:	88fb      	ldrh	r3, [r7, #6]
 800492e:	461a      	mov	r2, r3
 8004930:	68b9      	ldr	r1, [r7, #8]
 8004932:	68f8      	ldr	r0, [r7, #12]
 8004934:	f001 f906 	bl	8005b44 <UART_Start_Receive_DMA>
 8004938:	4603      	mov	r3, r0
 800493a:	e000      	b.n	800493e <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800493c:	2302      	movs	r3, #2
  }
}
 800493e:	4618      	mov	r0, r3
 8004940:	3728      	adds	r7, #40	@ 0x28
 8004942:	46bd      	mov	sp, r7
 8004944:	bd80      	pop	{r7, pc}
 8004946:	bf00      	nop
 8004948:	40008000 	.word	0x40008000

0800494c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800494c:	b580      	push	{r7, lr}
 800494e:	b0ba      	sub	sp, #232	@ 0xe8
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	69db      	ldr	r3, [r3, #28]
 800495a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004972:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8004976:	f640 030f 	movw	r3, #2063	@ 0x80f
 800497a:	4013      	ands	r3, r2
 800497c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004980:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004984:	2b00      	cmp	r3, #0
 8004986:	d11b      	bne.n	80049c0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800498c:	f003 0320 	and.w	r3, r3, #32
 8004990:	2b00      	cmp	r3, #0
 8004992:	d015      	beq.n	80049c0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004998:	f003 0320 	and.w	r3, r3, #32
 800499c:	2b00      	cmp	r3, #0
 800499e:	d105      	bne.n	80049ac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80049a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d009      	beq.n	80049c0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 82f3 	beq.w	8004f9c <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049ba:	6878      	ldr	r0, [r7, #4]
 80049bc:	4798      	blx	r3
      }
      return;
 80049be:	e2ed      	b.n	8004f9c <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80049c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	f000 8129 	beq.w	8004c1c <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80049ca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80049ce:	4b90      	ldr	r3, [pc, #576]	@ (8004c10 <HAL_UART_IRQHandler+0x2c4>)
 80049d0:	4013      	ands	r3, r2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d106      	bne.n	80049e4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80049d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80049da:	4b8e      	ldr	r3, [pc, #568]	@ (8004c14 <HAL_UART_IRQHandler+0x2c8>)
 80049dc:	4013      	ands	r3, r2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f000 811c 	beq.w	8004c1c <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80049e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d011      	beq.n	8004a14 <HAL_UART_IRQHandler+0xc8>
 80049f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d00b      	beq.n	8004a14 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	2201      	movs	r2, #1
 8004a02:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a0a:	f043 0201 	orr.w	r2, r3, #1
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a18:	f003 0302 	and.w	r3, r3, #2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d011      	beq.n	8004a44 <HAL_UART_IRQHandler+0xf8>
 8004a20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00b      	beq.n	8004a44 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	2202      	movs	r2, #2
 8004a32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a3a:	f043 0204 	orr.w	r2, r3, #4
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a48:	f003 0304 	and.w	r3, r3, #4
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d011      	beq.n	8004a74 <HAL_UART_IRQHandler+0x128>
 8004a50:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a54:	f003 0301 	and.w	r3, r3, #1
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d00b      	beq.n	8004a74 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2204      	movs	r2, #4
 8004a62:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a6a:	f043 0202 	orr.w	r2, r3, #2
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a78:	f003 0308 	and.w	r3, r3, #8
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d017      	beq.n	8004ab0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a84:	f003 0320 	and.w	r3, r3, #32
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d105      	bne.n	8004a98 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004a8c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004a90:	4b5f      	ldr	r3, [pc, #380]	@ (8004c10 <HAL_UART_IRQHandler+0x2c4>)
 8004a92:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00b      	beq.n	8004ab0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2208      	movs	r2, #8
 8004a9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004aa6:	f043 0208 	orr.w	r2, r3, #8
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ab0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ab4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d012      	beq.n	8004ae2 <HAL_UART_IRQHandler+0x196>
 8004abc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ac0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00c      	beq.n	8004ae2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004ad0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ad8:	f043 0220 	orr.w	r2, r3, #32
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 8259 	beq.w	8004fa0 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004af2:	f003 0320 	and.w	r3, r3, #32
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d013      	beq.n	8004b22 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004afe:	f003 0320 	and.w	r3, r3, #32
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d105      	bne.n	8004b12 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004b06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d007      	beq.n	8004b22 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b28:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b36:	2b40      	cmp	r3, #64	@ 0x40
 8004b38:	d005      	beq.n	8004b46 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b3a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b3e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d058      	beq.n	8004bf8 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	f001 f8e3 	bl	8005d12 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b56:	2b40      	cmp	r3, #64	@ 0x40
 8004b58:	d148      	bne.n	8004bec <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	3308      	adds	r3, #8
 8004b60:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b64:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b68:	e853 3f00 	ldrex	r3, [r3]
 8004b6c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004b70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b78:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3308      	adds	r3, #8
 8004b82:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004b86:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004b8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004b92:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004b96:	e841 2300 	strex	r3, r2, [r1]
 8004b9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004b9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d1d9      	bne.n	8004b5a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d017      	beq.n	8004be0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bb6:	4a18      	ldr	r2, [pc, #96]	@ (8004c18 <HAL_UART_IRQHandler+0x2cc>)
 8004bb8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7fd f84b 	bl	8001c5c <HAL_DMA_Abort_IT>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d01f      	beq.n	8004c0c <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004bda:	4610      	mov	r0, r2
 8004bdc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bde:	e015      	b.n	8004c0c <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bea:	e00f      	b.n	8004c0c <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004bf6:	e009      	b.n	8004c0c <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004c0a:	e1c9      	b.n	8004fa0 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c0c:	bf00      	nop
    return;
 8004c0e:	e1c7      	b.n	8004fa0 <HAL_UART_IRQHandler+0x654>
 8004c10:	10000001 	.word	0x10000001
 8004c14:	04000120 	.word	0x04000120
 8004c18:	0800609b 	.word	0x0800609b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	f040 8157 	bne.w	8004ed4 <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c2a:	f003 0310 	and.w	r3, r3, #16
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 8150 	beq.w	8004ed4 <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c38:	f003 0310 	and.w	r3, r3, #16
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 8149 	beq.w	8004ed4 <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2210      	movs	r2, #16
 8004c48:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c54:	2b40      	cmp	r3, #64	@ 0x40
 8004c56:	f040 80bd 	bne.w	8004dd4 <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	f000 8199 	beq.w	8004fa4 <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004c78:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	f080 8191 	bcs.w	8004fa4 <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004c88:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0320 	and.w	r3, r3, #32
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	f040 8087 	bne.w	8004dae <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004cac:	e853 3f00 	ldrex	r3, [r3]
 8004cb0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004cb4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004cb8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004cca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004cce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cd2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004cd6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004cda:	e841 2300 	strex	r3, r2, [r1]
 8004cde:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004ce2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d1da      	bne.n	8004ca0 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	3308      	adds	r3, #8
 8004cf0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cf2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004cf4:	e853 3f00 	ldrex	r3, [r3]
 8004cf8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004cfa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004cfc:	f023 0301 	bic.w	r3, r3, #1
 8004d00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	3308      	adds	r3, #8
 8004d0a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d0e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004d12:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d14:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004d16:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004d1a:	e841 2300 	strex	r3, r2, [r1]
 8004d1e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004d20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d1e1      	bne.n	8004cea <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	3308      	adds	r3, #8
 8004d2c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d2e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d30:	e853 3f00 	ldrex	r3, [r3]
 8004d34:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004d36:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	3308      	adds	r3, #8
 8004d46:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004d4a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004d4c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004d50:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004d52:	e841 2300 	strex	r3, r2, [r1]
 8004d56:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004d58:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1e3      	bne.n	8004d26 <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2220      	movs	r2, #32
 8004d62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d74:	e853 3f00 	ldrex	r3, [r3]
 8004d78:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004d7a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004d7c:	f023 0310 	bic.w	r3, r3, #16
 8004d80:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	461a      	mov	r2, r3
 8004d8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004d8e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004d90:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d92:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004d94:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004d96:	e841 2300 	strex	r3, r2, [r1]
 8004d9a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004d9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1e4      	bne.n	8004d6c <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004da8:	4618      	mov	r0, r3
 8004daa:	f7fc fefe 	bl	8001baa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2202      	movs	r2, #2
 8004db2:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8004dc0:	687a      	ldr	r2, [r7, #4]
 8004dc2:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8004dc6:	b292      	uxth	r2, r2
 8004dc8:	1a8a      	subs	r2, r1, r2
 8004dca:	b292      	uxth	r2, r2
 8004dcc:	4611      	mov	r1, r2
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004dd2:	e0e7      	b.n	8004fa4 <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	1ad3      	subs	r3, r2, r3
 8004de4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	f000 80d9 	beq.w	8004fa8 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8004df6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	f000 80d4 	beq.w	8004fa8 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e08:	e853 3f00 	ldrex	r3, [r3]
 8004e0c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e0e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e10:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e14:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	461a      	mov	r2, r3
 8004e1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004e22:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e24:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e26:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e28:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e2a:	e841 2300 	strex	r3, r2, [r1]
 8004e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1e4      	bne.n	8004e00 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	3308      	adds	r3, #8
 8004e3c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e40:	e853 3f00 	ldrex	r3, [r3]
 8004e44:	623b      	str	r3, [r7, #32]
   return(result);
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e4c:	f023 0301 	bic.w	r3, r3, #1
 8004e50:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	3308      	adds	r3, #8
 8004e5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004e5e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e66:	e841 2300 	strex	r3, r2, [r1]
 8004e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d1e1      	bne.n	8004e36 <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2220      	movs	r2, #32
 8004e76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	e853 3f00 	ldrex	r3, [r3]
 8004e92:	60fb      	str	r3, [r7, #12]
   return(result);
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f023 0310 	bic.w	r3, r3, #16
 8004e9a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004ea8:	61fb      	str	r3, [r7, #28]
 8004eaa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eac:	69b9      	ldr	r1, [r7, #24]
 8004eae:	69fa      	ldr	r2, [r7, #28]
 8004eb0:	e841 2300 	strex	r3, r2, [r1]
 8004eb4:	617b      	str	r3, [r7, #20]
   return(result);
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d1e4      	bne.n	8004e86 <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004ec8:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8004ecc:	4611      	mov	r1, r2
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004ed2:	e069      	b.n	8004fa8 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004ed4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ed8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d010      	beq.n	8004f02 <HAL_UART_IRQHandler+0x5b6>
 8004ee0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ee4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00a      	beq.n	8004f02 <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004ef4:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f00:	e055      	b.n	8004fae <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d014      	beq.n	8004f38 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d105      	bne.n	8004f26 <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f1e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d008      	beq.n	8004f38 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d03e      	beq.n	8004fac <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	4798      	blx	r3
    }
    return;
 8004f36:	e039      	b.n	8004fac <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d009      	beq.n	8004f58 <HAL_UART_IRQHandler+0x60c>
 8004f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f001 f8ba 	bl	80060ca <UART_EndTransmit_IT>
    return;
 8004f56:	e02a      	b.n	8004fae <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f5c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00b      	beq.n	8004f7c <HAL_UART_IRQHandler+0x630>
 8004f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f68:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d005      	beq.n	8004f7c <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f7a:	e018      	b.n	8004fae <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004f7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d012      	beq.n	8004fae <HAL_UART_IRQHandler+0x662>
 8004f88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	da0e      	bge.n	8004fae <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f9a:	e008      	b.n	8004fae <HAL_UART_IRQHandler+0x662>
      return;
 8004f9c:	bf00      	nop
 8004f9e:	e006      	b.n	8004fae <HAL_UART_IRQHandler+0x662>
    return;
 8004fa0:	bf00      	nop
 8004fa2:	e004      	b.n	8004fae <HAL_UART_IRQHandler+0x662>
      return;
 8004fa4:	bf00      	nop
 8004fa6:	e002      	b.n	8004fae <HAL_UART_IRQHandler+0x662>
      return;
 8004fa8:	bf00      	nop
 8004faa:	e000      	b.n	8004fae <HAL_UART_IRQHandler+0x662>
    return;
 8004fac:	bf00      	nop
  }
}
 8004fae:	37e8      	adds	r7, #232	@ 0xe8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	460b      	mov	r3, r1
 800505e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005060:	bf00      	nop
 8005062:	370c      	adds	r7, #12
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr

0800506c <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	6078      	str	r0, [r7, #4]
 8005074:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4a09      	ldr	r2, [pc, #36]	@ (80050a0 <HAL_UART_ReceiverTimeout_Config+0x34>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d009      	beq.n	8005094 <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	683a      	ldr	r2, [r7, #0]
 8005090:	430a      	orrs	r2, r1
 8005092:	615a      	str	r2, [r3, #20]
  }
}
 8005094:	bf00      	nop
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr
 80050a0:	40008000 	.word	0x40008000

080050a4 <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a18      	ldr	r2, [pc, #96]	@ (8005114 <HAL_UART_EnableReceiverTimeout+0x70>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d027      	beq.n	8005106 <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050bc:	2b20      	cmp	r3, #32
 80050be:	d120      	bne.n	8005102 <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d101      	bne.n	80050ce <HAL_UART_EnableReceiverTimeout+0x2a>
 80050ca:	2302      	movs	r3, #2
 80050cc:	e01c      	b.n	8005108 <HAL_UART_EnableReceiverTimeout+0x64>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2224      	movs	r2, #36	@ 0x24
 80050da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80050ec:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 80050fe:	2300      	movs	r3, #0
 8005100:	e002      	b.n	8005108 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 8005102:	2302      	movs	r3, #2
 8005104:	e000      	b.n	8005108 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
  }
}
 8005108:	4618      	mov	r0, r3
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	40008000 	.word	0x40008000

08005118 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 8005126:	4618      	mov	r0, r3
 8005128:	370c      	adds	r7, #12
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr
	...

08005134 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a1a      	ldr	r2, [pc, #104]	@ (80051a8 <UART_InitCallbacksToDefault+0x74>)
 8005140:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a19      	ldr	r2, [pc, #100]	@ (80051ac <UART_InitCallbacksToDefault+0x78>)
 8005148:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a18      	ldr	r2, [pc, #96]	@ (80051b0 <UART_InitCallbacksToDefault+0x7c>)
 8005150:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a17      	ldr	r2, [pc, #92]	@ (80051b4 <UART_InitCallbacksToDefault+0x80>)
 8005158:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	4a16      	ldr	r2, [pc, #88]	@ (80051b8 <UART_InitCallbacksToDefault+0x84>)
 8005160:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a15      	ldr	r2, [pc, #84]	@ (80051bc <UART_InitCallbacksToDefault+0x88>)
 8005168:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a14      	ldr	r2, [pc, #80]	@ (80051c0 <UART_InitCallbacksToDefault+0x8c>)
 8005170:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a13      	ldr	r2, [pc, #76]	@ (80051c4 <UART_InitCallbacksToDefault+0x90>)
 8005178:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a12      	ldr	r2, [pc, #72]	@ (80051c8 <UART_InitCallbacksToDefault+0x94>)
 8005180:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a11      	ldr	r2, [pc, #68]	@ (80051cc <UART_InitCallbacksToDefault+0x98>)
 8005188:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a10      	ldr	r2, [pc, #64]	@ (80051d0 <UART_InitCallbacksToDefault+0x9c>)
 8005190:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a0f      	ldr	r2, [pc, #60]	@ (80051d4 <UART_InitCallbacksToDefault+0xa0>)
 8005198:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 800519c:	bf00      	nop
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	08004fc9 	.word	0x08004fc9
 80051ac:	08004fb5 	.word	0x08004fb5
 80051b0:	08004ff1 	.word	0x08004ff1
 80051b4:	08004fdd 	.word	0x08004fdd
 80051b8:	08005005 	.word	0x08005005
 80051bc:	08005019 	.word	0x08005019
 80051c0:	0800502d 	.word	0x0800502d
 80051c4:	08005041 	.word	0x08005041
 80051c8:	08006125 	.word	0x08006125
 80051cc:	08006139 	.word	0x08006139
 80051d0:	0800614d 	.word	0x0800614d
 80051d4:	08005055 	.word	0x08005055

080051d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051dc:	b08c      	sub	sp, #48	@ 0x30
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80051e2:	2300      	movs	r3, #0
 80051e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	689a      	ldr	r2, [r3, #8]
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	431a      	orrs	r2, r3
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	695b      	ldr	r3, [r3, #20]
 80051f6:	431a      	orrs	r2, r3
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	69db      	ldr	r3, [r3, #28]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	4baa      	ldr	r3, [pc, #680]	@ (80054b0 <UART_SetConfig+0x2d8>)
 8005208:	4013      	ands	r3, r2
 800520a:	697a      	ldr	r2, [r7, #20]
 800520c:	6812      	ldr	r2, [r2, #0]
 800520e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005210:	430b      	orrs	r3, r1
 8005212:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	68da      	ldr	r2, [r3, #12]
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	430a      	orrs	r2, r1
 8005228:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a9f      	ldr	r2, [pc, #636]	@ (80054b4 <UART_SetConfig+0x2dc>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d004      	beq.n	8005244 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	6a1b      	ldr	r3, [r3, #32]
 800523e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005240:	4313      	orrs	r3, r2
 8005242:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 800524e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	6812      	ldr	r2, [r2, #0]
 8005256:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005258:	430b      	orrs	r3, r1
 800525a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800525c:	697b      	ldr	r3, [r7, #20]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005262:	f023 010f 	bic.w	r1, r3, #15
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	430a      	orrs	r2, r1
 8005270:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a90      	ldr	r2, [pc, #576]	@ (80054b8 <UART_SetConfig+0x2e0>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d125      	bne.n	80052c8 <UART_SetConfig+0xf0>
 800527c:	4b8f      	ldr	r3, [pc, #572]	@ (80054bc <UART_SetConfig+0x2e4>)
 800527e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005282:	f003 0303 	and.w	r3, r3, #3
 8005286:	2b03      	cmp	r3, #3
 8005288:	d81a      	bhi.n	80052c0 <UART_SetConfig+0xe8>
 800528a:	a201      	add	r2, pc, #4	@ (adr r2, 8005290 <UART_SetConfig+0xb8>)
 800528c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005290:	080052a1 	.word	0x080052a1
 8005294:	080052b1 	.word	0x080052b1
 8005298:	080052a9 	.word	0x080052a9
 800529c:	080052b9 	.word	0x080052b9
 80052a0:	2301      	movs	r3, #1
 80052a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052a6:	e116      	b.n	80054d6 <UART_SetConfig+0x2fe>
 80052a8:	2302      	movs	r3, #2
 80052aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ae:	e112      	b.n	80054d6 <UART_SetConfig+0x2fe>
 80052b0:	2304      	movs	r3, #4
 80052b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052b6:	e10e      	b.n	80054d6 <UART_SetConfig+0x2fe>
 80052b8:	2308      	movs	r3, #8
 80052ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052be:	e10a      	b.n	80054d6 <UART_SetConfig+0x2fe>
 80052c0:	2310      	movs	r3, #16
 80052c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052c6:	e106      	b.n	80054d6 <UART_SetConfig+0x2fe>
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a7c      	ldr	r2, [pc, #496]	@ (80054c0 <UART_SetConfig+0x2e8>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d138      	bne.n	8005344 <UART_SetConfig+0x16c>
 80052d2:	4b7a      	ldr	r3, [pc, #488]	@ (80054bc <UART_SetConfig+0x2e4>)
 80052d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052d8:	f003 030c 	and.w	r3, r3, #12
 80052dc:	2b0c      	cmp	r3, #12
 80052de:	d82d      	bhi.n	800533c <UART_SetConfig+0x164>
 80052e0:	a201      	add	r2, pc, #4	@ (adr r2, 80052e8 <UART_SetConfig+0x110>)
 80052e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052e6:	bf00      	nop
 80052e8:	0800531d 	.word	0x0800531d
 80052ec:	0800533d 	.word	0x0800533d
 80052f0:	0800533d 	.word	0x0800533d
 80052f4:	0800533d 	.word	0x0800533d
 80052f8:	0800532d 	.word	0x0800532d
 80052fc:	0800533d 	.word	0x0800533d
 8005300:	0800533d 	.word	0x0800533d
 8005304:	0800533d 	.word	0x0800533d
 8005308:	08005325 	.word	0x08005325
 800530c:	0800533d 	.word	0x0800533d
 8005310:	0800533d 	.word	0x0800533d
 8005314:	0800533d 	.word	0x0800533d
 8005318:	08005335 	.word	0x08005335
 800531c:	2300      	movs	r3, #0
 800531e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005322:	e0d8      	b.n	80054d6 <UART_SetConfig+0x2fe>
 8005324:	2302      	movs	r3, #2
 8005326:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800532a:	e0d4      	b.n	80054d6 <UART_SetConfig+0x2fe>
 800532c:	2304      	movs	r3, #4
 800532e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005332:	e0d0      	b.n	80054d6 <UART_SetConfig+0x2fe>
 8005334:	2308      	movs	r3, #8
 8005336:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800533a:	e0cc      	b.n	80054d6 <UART_SetConfig+0x2fe>
 800533c:	2310      	movs	r3, #16
 800533e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005342:	e0c8      	b.n	80054d6 <UART_SetConfig+0x2fe>
 8005344:	697b      	ldr	r3, [r7, #20]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a5e      	ldr	r2, [pc, #376]	@ (80054c4 <UART_SetConfig+0x2ec>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d125      	bne.n	800539a <UART_SetConfig+0x1c2>
 800534e:	4b5b      	ldr	r3, [pc, #364]	@ (80054bc <UART_SetConfig+0x2e4>)
 8005350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005354:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005358:	2b30      	cmp	r3, #48	@ 0x30
 800535a:	d016      	beq.n	800538a <UART_SetConfig+0x1b2>
 800535c:	2b30      	cmp	r3, #48	@ 0x30
 800535e:	d818      	bhi.n	8005392 <UART_SetConfig+0x1ba>
 8005360:	2b20      	cmp	r3, #32
 8005362:	d00a      	beq.n	800537a <UART_SetConfig+0x1a2>
 8005364:	2b20      	cmp	r3, #32
 8005366:	d814      	bhi.n	8005392 <UART_SetConfig+0x1ba>
 8005368:	2b00      	cmp	r3, #0
 800536a:	d002      	beq.n	8005372 <UART_SetConfig+0x19a>
 800536c:	2b10      	cmp	r3, #16
 800536e:	d008      	beq.n	8005382 <UART_SetConfig+0x1aa>
 8005370:	e00f      	b.n	8005392 <UART_SetConfig+0x1ba>
 8005372:	2300      	movs	r3, #0
 8005374:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005378:	e0ad      	b.n	80054d6 <UART_SetConfig+0x2fe>
 800537a:	2302      	movs	r3, #2
 800537c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005380:	e0a9      	b.n	80054d6 <UART_SetConfig+0x2fe>
 8005382:	2304      	movs	r3, #4
 8005384:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005388:	e0a5      	b.n	80054d6 <UART_SetConfig+0x2fe>
 800538a:	2308      	movs	r3, #8
 800538c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005390:	e0a1      	b.n	80054d6 <UART_SetConfig+0x2fe>
 8005392:	2310      	movs	r3, #16
 8005394:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005398:	e09d      	b.n	80054d6 <UART_SetConfig+0x2fe>
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4a4a      	ldr	r2, [pc, #296]	@ (80054c8 <UART_SetConfig+0x2f0>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d125      	bne.n	80053f0 <UART_SetConfig+0x218>
 80053a4:	4b45      	ldr	r3, [pc, #276]	@ (80054bc <UART_SetConfig+0x2e4>)
 80053a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80053ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80053b0:	d016      	beq.n	80053e0 <UART_SetConfig+0x208>
 80053b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80053b4:	d818      	bhi.n	80053e8 <UART_SetConfig+0x210>
 80053b6:	2b80      	cmp	r3, #128	@ 0x80
 80053b8:	d00a      	beq.n	80053d0 <UART_SetConfig+0x1f8>
 80053ba:	2b80      	cmp	r3, #128	@ 0x80
 80053bc:	d814      	bhi.n	80053e8 <UART_SetConfig+0x210>
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d002      	beq.n	80053c8 <UART_SetConfig+0x1f0>
 80053c2:	2b40      	cmp	r3, #64	@ 0x40
 80053c4:	d008      	beq.n	80053d8 <UART_SetConfig+0x200>
 80053c6:	e00f      	b.n	80053e8 <UART_SetConfig+0x210>
 80053c8:	2300      	movs	r3, #0
 80053ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ce:	e082      	b.n	80054d6 <UART_SetConfig+0x2fe>
 80053d0:	2302      	movs	r3, #2
 80053d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053d6:	e07e      	b.n	80054d6 <UART_SetConfig+0x2fe>
 80053d8:	2304      	movs	r3, #4
 80053da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053de:	e07a      	b.n	80054d6 <UART_SetConfig+0x2fe>
 80053e0:	2308      	movs	r3, #8
 80053e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053e6:	e076      	b.n	80054d6 <UART_SetConfig+0x2fe>
 80053e8:	2310      	movs	r3, #16
 80053ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053ee:	e072      	b.n	80054d6 <UART_SetConfig+0x2fe>
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4a35      	ldr	r2, [pc, #212]	@ (80054cc <UART_SetConfig+0x2f4>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d12a      	bne.n	8005450 <UART_SetConfig+0x278>
 80053fa:	4b30      	ldr	r3, [pc, #192]	@ (80054bc <UART_SetConfig+0x2e4>)
 80053fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005400:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005404:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005408:	d01a      	beq.n	8005440 <UART_SetConfig+0x268>
 800540a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800540e:	d81b      	bhi.n	8005448 <UART_SetConfig+0x270>
 8005410:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005414:	d00c      	beq.n	8005430 <UART_SetConfig+0x258>
 8005416:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800541a:	d815      	bhi.n	8005448 <UART_SetConfig+0x270>
 800541c:	2b00      	cmp	r3, #0
 800541e:	d003      	beq.n	8005428 <UART_SetConfig+0x250>
 8005420:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005424:	d008      	beq.n	8005438 <UART_SetConfig+0x260>
 8005426:	e00f      	b.n	8005448 <UART_SetConfig+0x270>
 8005428:	2300      	movs	r3, #0
 800542a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800542e:	e052      	b.n	80054d6 <UART_SetConfig+0x2fe>
 8005430:	2302      	movs	r3, #2
 8005432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005436:	e04e      	b.n	80054d6 <UART_SetConfig+0x2fe>
 8005438:	2304      	movs	r3, #4
 800543a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800543e:	e04a      	b.n	80054d6 <UART_SetConfig+0x2fe>
 8005440:	2308      	movs	r3, #8
 8005442:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005446:	e046      	b.n	80054d6 <UART_SetConfig+0x2fe>
 8005448:	2310      	movs	r3, #16
 800544a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800544e:	e042      	b.n	80054d6 <UART_SetConfig+0x2fe>
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4a17      	ldr	r2, [pc, #92]	@ (80054b4 <UART_SetConfig+0x2dc>)
 8005456:	4293      	cmp	r3, r2
 8005458:	d13a      	bne.n	80054d0 <UART_SetConfig+0x2f8>
 800545a:	4b18      	ldr	r3, [pc, #96]	@ (80054bc <UART_SetConfig+0x2e4>)
 800545c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005460:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005464:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005468:	d01a      	beq.n	80054a0 <UART_SetConfig+0x2c8>
 800546a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800546e:	d81b      	bhi.n	80054a8 <UART_SetConfig+0x2d0>
 8005470:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005474:	d00c      	beq.n	8005490 <UART_SetConfig+0x2b8>
 8005476:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800547a:	d815      	bhi.n	80054a8 <UART_SetConfig+0x2d0>
 800547c:	2b00      	cmp	r3, #0
 800547e:	d003      	beq.n	8005488 <UART_SetConfig+0x2b0>
 8005480:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005484:	d008      	beq.n	8005498 <UART_SetConfig+0x2c0>
 8005486:	e00f      	b.n	80054a8 <UART_SetConfig+0x2d0>
 8005488:	2300      	movs	r3, #0
 800548a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800548e:	e022      	b.n	80054d6 <UART_SetConfig+0x2fe>
 8005490:	2302      	movs	r3, #2
 8005492:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005496:	e01e      	b.n	80054d6 <UART_SetConfig+0x2fe>
 8005498:	2304      	movs	r3, #4
 800549a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800549e:	e01a      	b.n	80054d6 <UART_SetConfig+0x2fe>
 80054a0:	2308      	movs	r3, #8
 80054a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054a6:	e016      	b.n	80054d6 <UART_SetConfig+0x2fe>
 80054a8:	2310      	movs	r3, #16
 80054aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ae:	e012      	b.n	80054d6 <UART_SetConfig+0x2fe>
 80054b0:	cfff69f3 	.word	0xcfff69f3
 80054b4:	40008000 	.word	0x40008000
 80054b8:	40013800 	.word	0x40013800
 80054bc:	40021000 	.word	0x40021000
 80054c0:	40004400 	.word	0x40004400
 80054c4:	40004800 	.word	0x40004800
 80054c8:	40004c00 	.word	0x40004c00
 80054cc:	40005000 	.word	0x40005000
 80054d0:	2310      	movs	r3, #16
 80054d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	4aae      	ldr	r2, [pc, #696]	@ (8005794 <UART_SetConfig+0x5bc>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	f040 8097 	bne.w	8005610 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80054e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80054e6:	2b08      	cmp	r3, #8
 80054e8:	d823      	bhi.n	8005532 <UART_SetConfig+0x35a>
 80054ea:	a201      	add	r2, pc, #4	@ (adr r2, 80054f0 <UART_SetConfig+0x318>)
 80054ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054f0:	08005515 	.word	0x08005515
 80054f4:	08005533 	.word	0x08005533
 80054f8:	0800551d 	.word	0x0800551d
 80054fc:	08005533 	.word	0x08005533
 8005500:	08005523 	.word	0x08005523
 8005504:	08005533 	.word	0x08005533
 8005508:	08005533 	.word	0x08005533
 800550c:	08005533 	.word	0x08005533
 8005510:	0800552b 	.word	0x0800552b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005514:	f7fd fc86 	bl	8002e24 <HAL_RCC_GetPCLK1Freq>
 8005518:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800551a:	e010      	b.n	800553e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800551c:	4b9e      	ldr	r3, [pc, #632]	@ (8005798 <UART_SetConfig+0x5c0>)
 800551e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005520:	e00d      	b.n	800553e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005522:	f7fd fc11 	bl	8002d48 <HAL_RCC_GetSysClockFreq>
 8005526:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005528:	e009      	b.n	800553e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800552a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800552e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005530:	e005      	b.n	800553e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005532:	2300      	movs	r3, #0
 8005534:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800553c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800553e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005540:	2b00      	cmp	r3, #0
 8005542:	f000 8130 	beq.w	80057a6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554a:	4a94      	ldr	r2, [pc, #592]	@ (800579c <UART_SetConfig+0x5c4>)
 800554c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005550:	461a      	mov	r2, r3
 8005552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005554:	fbb3 f3f2 	udiv	r3, r3, r2
 8005558:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800555a:	697b      	ldr	r3, [r7, #20]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	4613      	mov	r3, r2
 8005560:	005b      	lsls	r3, r3, #1
 8005562:	4413      	add	r3, r2
 8005564:	69ba      	ldr	r2, [r7, #24]
 8005566:	429a      	cmp	r2, r3
 8005568:	d305      	bcc.n	8005576 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	429a      	cmp	r2, r3
 8005574:	d903      	bls.n	800557e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005576:	2301      	movs	r3, #1
 8005578:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800557c:	e113      	b.n	80057a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800557e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005580:	2200      	movs	r2, #0
 8005582:	60bb      	str	r3, [r7, #8]
 8005584:	60fa      	str	r2, [r7, #12]
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800558a:	4a84      	ldr	r2, [pc, #528]	@ (800579c <UART_SetConfig+0x5c4>)
 800558c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005590:	b29b      	uxth	r3, r3
 8005592:	2200      	movs	r2, #0
 8005594:	603b      	str	r3, [r7, #0]
 8005596:	607a      	str	r2, [r7, #4]
 8005598:	e9d7 2300 	ldrd	r2, r3, [r7]
 800559c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055a0:	f7fa fe3a 	bl	8000218 <__aeabi_uldivmod>
 80055a4:	4602      	mov	r2, r0
 80055a6:	460b      	mov	r3, r1
 80055a8:	4610      	mov	r0, r2
 80055aa:	4619      	mov	r1, r3
 80055ac:	f04f 0200 	mov.w	r2, #0
 80055b0:	f04f 0300 	mov.w	r3, #0
 80055b4:	020b      	lsls	r3, r1, #8
 80055b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80055ba:	0202      	lsls	r2, r0, #8
 80055bc:	6979      	ldr	r1, [r7, #20]
 80055be:	6849      	ldr	r1, [r1, #4]
 80055c0:	0849      	lsrs	r1, r1, #1
 80055c2:	2000      	movs	r0, #0
 80055c4:	460c      	mov	r4, r1
 80055c6:	4605      	mov	r5, r0
 80055c8:	eb12 0804 	adds.w	r8, r2, r4
 80055cc:	eb43 0905 	adc.w	r9, r3, r5
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	469a      	mov	sl, r3
 80055d8:	4693      	mov	fp, r2
 80055da:	4652      	mov	r2, sl
 80055dc:	465b      	mov	r3, fp
 80055de:	4640      	mov	r0, r8
 80055e0:	4649      	mov	r1, r9
 80055e2:	f7fa fe19 	bl	8000218 <__aeabi_uldivmod>
 80055e6:	4602      	mov	r2, r0
 80055e8:	460b      	mov	r3, r1
 80055ea:	4613      	mov	r3, r2
 80055ec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80055ee:	6a3b      	ldr	r3, [r7, #32]
 80055f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80055f4:	d308      	bcc.n	8005608 <UART_SetConfig+0x430>
 80055f6:	6a3b      	ldr	r3, [r7, #32]
 80055f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80055fc:	d204      	bcs.n	8005608 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	6a3a      	ldr	r2, [r7, #32]
 8005604:	60da      	str	r2, [r3, #12]
 8005606:	e0ce      	b.n	80057a6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800560e:	e0ca      	b.n	80057a6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	69db      	ldr	r3, [r3, #28]
 8005614:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005618:	d166      	bne.n	80056e8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800561a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800561e:	2b08      	cmp	r3, #8
 8005620:	d827      	bhi.n	8005672 <UART_SetConfig+0x49a>
 8005622:	a201      	add	r2, pc, #4	@ (adr r2, 8005628 <UART_SetConfig+0x450>)
 8005624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005628:	0800564d 	.word	0x0800564d
 800562c:	08005655 	.word	0x08005655
 8005630:	0800565d 	.word	0x0800565d
 8005634:	08005673 	.word	0x08005673
 8005638:	08005663 	.word	0x08005663
 800563c:	08005673 	.word	0x08005673
 8005640:	08005673 	.word	0x08005673
 8005644:	08005673 	.word	0x08005673
 8005648:	0800566b 	.word	0x0800566b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800564c:	f7fd fbea 	bl	8002e24 <HAL_RCC_GetPCLK1Freq>
 8005650:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005652:	e014      	b.n	800567e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005654:	f7fd fbfc 	bl	8002e50 <HAL_RCC_GetPCLK2Freq>
 8005658:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800565a:	e010      	b.n	800567e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800565c:	4b4e      	ldr	r3, [pc, #312]	@ (8005798 <UART_SetConfig+0x5c0>)
 800565e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005660:	e00d      	b.n	800567e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005662:	f7fd fb71 	bl	8002d48 <HAL_RCC_GetSysClockFreq>
 8005666:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005668:	e009      	b.n	800567e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800566a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800566e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005670:	e005      	b.n	800567e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005672:	2300      	movs	r3, #0
 8005674:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800567c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800567e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 8090 	beq.w	80057a6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568a:	4a44      	ldr	r2, [pc, #272]	@ (800579c <UART_SetConfig+0x5c4>)
 800568c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005690:	461a      	mov	r2, r3
 8005692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005694:	fbb3 f3f2 	udiv	r3, r3, r2
 8005698:	005a      	lsls	r2, r3, #1
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	085b      	lsrs	r3, r3, #1
 80056a0:	441a      	add	r2, r3
 80056a2:	697b      	ldr	r3, [r7, #20]
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80056aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056ac:	6a3b      	ldr	r3, [r7, #32]
 80056ae:	2b0f      	cmp	r3, #15
 80056b0:	d916      	bls.n	80056e0 <UART_SetConfig+0x508>
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056b8:	d212      	bcs.n	80056e0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056ba:	6a3b      	ldr	r3, [r7, #32]
 80056bc:	b29b      	uxth	r3, r3
 80056be:	f023 030f 	bic.w	r3, r3, #15
 80056c2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	085b      	lsrs	r3, r3, #1
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	f003 0307 	and.w	r3, r3, #7
 80056ce:	b29a      	uxth	r2, r3
 80056d0:	8bfb      	ldrh	r3, [r7, #30]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	8bfa      	ldrh	r2, [r7, #30]
 80056dc:	60da      	str	r2, [r3, #12]
 80056de:	e062      	b.n	80057a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80056e0:	2301      	movs	r3, #1
 80056e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80056e6:	e05e      	b.n	80057a6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80056e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80056ec:	2b08      	cmp	r3, #8
 80056ee:	d828      	bhi.n	8005742 <UART_SetConfig+0x56a>
 80056f0:	a201      	add	r2, pc, #4	@ (adr r2, 80056f8 <UART_SetConfig+0x520>)
 80056f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056f6:	bf00      	nop
 80056f8:	0800571d 	.word	0x0800571d
 80056fc:	08005725 	.word	0x08005725
 8005700:	0800572d 	.word	0x0800572d
 8005704:	08005743 	.word	0x08005743
 8005708:	08005733 	.word	0x08005733
 800570c:	08005743 	.word	0x08005743
 8005710:	08005743 	.word	0x08005743
 8005714:	08005743 	.word	0x08005743
 8005718:	0800573b 	.word	0x0800573b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800571c:	f7fd fb82 	bl	8002e24 <HAL_RCC_GetPCLK1Freq>
 8005720:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005722:	e014      	b.n	800574e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005724:	f7fd fb94 	bl	8002e50 <HAL_RCC_GetPCLK2Freq>
 8005728:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800572a:	e010      	b.n	800574e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800572c:	4b1a      	ldr	r3, [pc, #104]	@ (8005798 <UART_SetConfig+0x5c0>)
 800572e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005730:	e00d      	b.n	800574e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005732:	f7fd fb09 	bl	8002d48 <HAL_RCC_GetSysClockFreq>
 8005736:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005738:	e009      	b.n	800574e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800573a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800573e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005740:	e005      	b.n	800574e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005742:	2300      	movs	r3, #0
 8005744:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005746:	2301      	movs	r3, #1
 8005748:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800574c:	bf00      	nop
    }

    if (pclk != 0U)
 800574e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005750:	2b00      	cmp	r3, #0
 8005752:	d028      	beq.n	80057a6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005758:	4a10      	ldr	r2, [pc, #64]	@ (800579c <UART_SetConfig+0x5c4>)
 800575a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800575e:	461a      	mov	r2, r3
 8005760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005762:	fbb3 f2f2 	udiv	r2, r3, r2
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	085b      	lsrs	r3, r3, #1
 800576c:	441a      	add	r2, r3
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	685b      	ldr	r3, [r3, #4]
 8005772:	fbb2 f3f3 	udiv	r3, r2, r3
 8005776:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005778:	6a3b      	ldr	r3, [r7, #32]
 800577a:	2b0f      	cmp	r3, #15
 800577c:	d910      	bls.n	80057a0 <UART_SetConfig+0x5c8>
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005784:	d20c      	bcs.n	80057a0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005786:	6a3b      	ldr	r3, [r7, #32]
 8005788:	b29a      	uxth	r2, r3
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	60da      	str	r2, [r3, #12]
 8005790:	e009      	b.n	80057a6 <UART_SetConfig+0x5ce>
 8005792:	bf00      	nop
 8005794:	40008000 	.word	0x40008000
 8005798:	00f42400 	.word	0x00f42400
 800579c:	0800640c 	.word	0x0800640c
      }
      else
      {
        ret = HAL_ERROR;
 80057a0:	2301      	movs	r3, #1
 80057a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	2201      	movs	r2, #1
 80057aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	2200      	movs	r2, #0
 80057ba:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	2200      	movs	r2, #0
 80057c0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80057c2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3730      	adds	r7, #48	@ 0x30
 80057ca:	46bd      	mov	sp, r7
 80057cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080057d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b083      	sub	sp, #12
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057dc:	f003 0308 	and.w	r3, r3, #8
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00a      	beq.n	80057fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	430a      	orrs	r2, r1
 80057f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d00a      	beq.n	800581c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	430a      	orrs	r2, r1
 800581a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005820:	f003 0302 	and.w	r3, r3, #2
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00a      	beq.n	800583e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005842:	f003 0304 	and.w	r3, r3, #4
 8005846:	2b00      	cmp	r3, #0
 8005848:	d00a      	beq.n	8005860 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	430a      	orrs	r2, r1
 800585e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005864:	f003 0310 	and.w	r3, r3, #16
 8005868:	2b00      	cmp	r3, #0
 800586a:	d00a      	beq.n	8005882 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	430a      	orrs	r2, r1
 8005880:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005886:	f003 0320 	and.w	r3, r3, #32
 800588a:	2b00      	cmp	r3, #0
 800588c:	d00a      	beq.n	80058a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	430a      	orrs	r2, r1
 80058a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d01a      	beq.n	80058e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058ce:	d10a      	bne.n	80058e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	430a      	orrs	r2, r1
 80058e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d00a      	beq.n	8005908 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	430a      	orrs	r2, r1
 8005906:	605a      	str	r2, [r3, #4]
  }
}
 8005908:	bf00      	nop
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr

08005914 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b098      	sub	sp, #96	@ 0x60
 8005918:	af02      	add	r7, sp, #8
 800591a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005924:	f7fb ff02 	bl	800172c <HAL_GetTick>
 8005928:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 0308 	and.w	r3, r3, #8
 8005934:	2b08      	cmp	r3, #8
 8005936:	d12f      	bne.n	8005998 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005938:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800593c:	9300      	str	r3, [sp, #0]
 800593e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005940:	2200      	movs	r2, #0
 8005942:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005946:	6878      	ldr	r0, [r7, #4]
 8005948:	f000 f88e 	bl	8005a68 <UART_WaitOnFlagUntilTimeout>
 800594c:	4603      	mov	r3, r0
 800594e:	2b00      	cmp	r3, #0
 8005950:	d022      	beq.n	8005998 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800595a:	e853 3f00 	ldrex	r3, [r3]
 800595e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005960:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005962:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005966:	653b      	str	r3, [r7, #80]	@ 0x50
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	461a      	mov	r2, r3
 800596e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005970:	647b      	str	r3, [r7, #68]	@ 0x44
 8005972:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005974:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005976:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005978:	e841 2300 	strex	r3, r2, [r1]
 800597c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800597e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005980:	2b00      	cmp	r3, #0
 8005982:	d1e6      	bne.n	8005952 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2220      	movs	r2, #32
 8005988:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2200      	movs	r2, #0
 8005990:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005994:	2303      	movs	r3, #3
 8005996:	e063      	b.n	8005a60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f003 0304 	and.w	r3, r3, #4
 80059a2:	2b04      	cmp	r3, #4
 80059a4:	d149      	bne.n	8005a3a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059a6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80059aa:	9300      	str	r3, [sp, #0]
 80059ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059ae:	2200      	movs	r2, #0
 80059b0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 f857 	bl	8005a68 <UART_WaitOnFlagUntilTimeout>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d03c      	beq.n	8005a3a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c8:	e853 3f00 	ldrex	r3, [r3]
 80059cc:	623b      	str	r3, [r7, #32]
   return(result);
 80059ce:	6a3b      	ldr	r3, [r7, #32]
 80059d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	461a      	mov	r2, r3
 80059dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059de:	633b      	str	r3, [r7, #48]	@ 0x30
 80059e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80059e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059e6:	e841 2300 	strex	r3, r2, [r1]
 80059ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80059ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1e6      	bne.n	80059c0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	3308      	adds	r3, #8
 80059f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fa:	693b      	ldr	r3, [r7, #16]
 80059fc:	e853 3f00 	ldrex	r3, [r3]
 8005a00:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f023 0301 	bic.w	r3, r3, #1
 8005a08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	3308      	adds	r3, #8
 8005a10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a12:	61fa      	str	r2, [r7, #28]
 8005a14:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a16:	69b9      	ldr	r1, [r7, #24]
 8005a18:	69fa      	ldr	r2, [r7, #28]
 8005a1a:	e841 2300 	strex	r3, r2, [r1]
 8005a1e:	617b      	str	r3, [r7, #20]
   return(result);
 8005a20:	697b      	ldr	r3, [r7, #20]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d1e5      	bne.n	80059f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2220      	movs	r2, #32
 8005a2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a36:	2303      	movs	r3, #3
 8005a38:	e012      	b.n	8005a60 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2220      	movs	r2, #32
 8005a3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2220      	movs	r2, #32
 8005a46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2200      	movs	r2, #0
 8005a54:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a5e:	2300      	movs	r3, #0
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3758      	adds	r7, #88	@ 0x58
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	603b      	str	r3, [r7, #0]
 8005a74:	4613      	mov	r3, r2
 8005a76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a78:	e04f      	b.n	8005b1a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a7a:	69bb      	ldr	r3, [r7, #24]
 8005a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a80:	d04b      	beq.n	8005b1a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a82:	f7fb fe53 	bl	800172c <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d302      	bcc.n	8005a98 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e04e      	b.n	8005b3a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0304 	and.w	r3, r3, #4
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d037      	beq.n	8005b1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2b80      	cmp	r3, #128	@ 0x80
 8005aae:	d034      	beq.n	8005b1a <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2b40      	cmp	r3, #64	@ 0x40
 8005ab4:	d031      	beq.n	8005b1a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	69db      	ldr	r3, [r3, #28]
 8005abc:	f003 0308 	and.w	r3, r3, #8
 8005ac0:	2b08      	cmp	r3, #8
 8005ac2:	d110      	bne.n	8005ae6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2208      	movs	r2, #8
 8005aca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f000 f920 	bl	8005d12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	2208      	movs	r2, #8
 8005ad6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	e029      	b.n	8005b3a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69db      	ldr	r3, [r3, #28]
 8005aec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005af0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005af4:	d111      	bne.n	8005b1a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005afe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b00:	68f8      	ldr	r0, [r7, #12]
 8005b02:	f000 f906 	bl	8005d12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2220      	movs	r2, #32
 8005b0a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e00f      	b.n	8005b3a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	69da      	ldr	r2, [r3, #28]
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	4013      	ands	r3, r2
 8005b24:	68ba      	ldr	r2, [r7, #8]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	bf0c      	ite	eq
 8005b2a:	2301      	moveq	r3, #1
 8005b2c:	2300      	movne	r3, #0
 8005b2e:	b2db      	uxtb	r3, r3
 8005b30:	461a      	mov	r2, r3
 8005b32:	79fb      	ldrb	r3, [r7, #7]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d0a0      	beq.n	8005a7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b38:	2300      	movs	r3, #0
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
	...

08005b44 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b096      	sub	sp, #88	@ 0x58
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	60f8      	str	r0, [r7, #12]
 8005b4c:	60b9      	str	r1, [r7, #8]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	88fa      	ldrh	r2, [r7, #6]
 8005b5c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2222      	movs	r2, #34	@ 0x22
 8005b6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d02d      	beq.n	8005bd6 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b80:	4a40      	ldr	r2, [pc, #256]	@ (8005c84 <UART_Start_Receive_DMA+0x140>)
 8005b82:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b8a:	4a3f      	ldr	r2, [pc, #252]	@ (8005c88 <UART_Start_Receive_DMA+0x144>)
 8005b8c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b94:	4a3d      	ldr	r2, [pc, #244]	@ (8005c8c <UART_Start_Receive_DMA+0x148>)
 8005b96:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3324      	adds	r3, #36	@ 0x24
 8005bae:	4619      	mov	r1, r3
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bb4:	461a      	mov	r2, r3
 8005bb6:	88fb      	ldrh	r3, [r7, #6]
 8005bb8:	f7fb ff7c 	bl	8001ab4 <HAL_DMA_Start_IT>
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d009      	beq.n	8005bd6 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	2210      	movs	r2, #16
 8005bc6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	2220      	movs	r2, #32
 8005bce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e051      	b.n	8005c7a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d018      	beq.n	8005c10 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005be6:	e853 3f00 	ldrex	r3, [r3]
 8005bea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bf2:	657b      	str	r3, [r7, #84]	@ 0x54
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005bfe:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c00:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005c02:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c04:	e841 2300 	strex	r3, r2, [r1]
 8005c08:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005c0a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d1e6      	bne.n	8005bde <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	3308      	adds	r3, #8
 8005c16:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c1a:	e853 3f00 	ldrex	r3, [r3]
 8005c1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c22:	f043 0301 	orr.w	r3, r3, #1
 8005c26:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	3308      	adds	r3, #8
 8005c2e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005c30:	637a      	str	r2, [r7, #52]	@ 0x34
 8005c32:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c34:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005c36:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c38:	e841 2300 	strex	r3, r2, [r1]
 8005c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d1e5      	bne.n	8005c10 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3308      	adds	r3, #8
 8005c4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	e853 3f00 	ldrex	r3, [r3]
 8005c52:	613b      	str	r3, [r7, #16]
   return(result);
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	3308      	adds	r3, #8
 8005c62:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c64:	623a      	str	r2, [r7, #32]
 8005c66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c68:	69f9      	ldr	r1, [r7, #28]
 8005c6a:	6a3a      	ldr	r2, [r7, #32]
 8005c6c:	e841 2300 	strex	r3, r2, [r1]
 8005c70:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1e5      	bne.n	8005c44 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005c78:	2300      	movs	r3, #0
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3758      	adds	r7, #88	@ 0x58
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}
 8005c82:	bf00      	nop
 8005c84:	08005e9d 	.word	0x08005e9d
 8005c88:	08005fd1 	.word	0x08005fd1
 8005c8c:	08006017 	.word	0x08006017

08005c90 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b08f      	sub	sp, #60	@ 0x3c
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c9e:	6a3b      	ldr	r3, [r7, #32]
 8005ca0:	e853 3f00 	ldrex	r3, [r3]
 8005ca4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ca6:	69fb      	ldr	r3, [r7, #28]
 8005ca8:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005cac:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cb6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005cb8:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005cbc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005cbe:	e841 2300 	strex	r3, r2, [r1]
 8005cc2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d1e6      	bne.n	8005c98 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	3308      	adds	r3, #8
 8005cd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	e853 3f00 	ldrex	r3, [r3]
 8005cd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cda:	68bb      	ldr	r3, [r7, #8]
 8005cdc:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005ce0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3308      	adds	r3, #8
 8005ce8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005cea:	61ba      	str	r2, [r7, #24]
 8005cec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cee:	6979      	ldr	r1, [r7, #20]
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	e841 2300 	strex	r3, r2, [r1]
 8005cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d1e5      	bne.n	8005cca <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2220      	movs	r2, #32
 8005d02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8005d06:	bf00      	nop
 8005d08:	373c      	adds	r7, #60	@ 0x3c
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d10:	4770      	bx	lr

08005d12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d12:	b480      	push	{r7}
 8005d14:	b095      	sub	sp, #84	@ 0x54
 8005d16:	af00      	add	r7, sp, #0
 8005d18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d22:	e853 3f00 	ldrex	r3, [r3]
 8005d26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	461a      	mov	r2, r3
 8005d36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d38:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d3a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d40:	e841 2300 	strex	r3, r2, [r1]
 8005d44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d1e6      	bne.n	8005d1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	3308      	adds	r3, #8
 8005d52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d54:	6a3b      	ldr	r3, [r7, #32]
 8005d56:	e853 3f00 	ldrex	r3, [r3]
 8005d5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d62:	f023 0301 	bic.w	r3, r3, #1
 8005d66:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	3308      	adds	r3, #8
 8005d6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d70:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d72:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d74:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005d78:	e841 2300 	strex	r3, r2, [r1]
 8005d7c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d1e3      	bne.n	8005d4c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d118      	bne.n	8005dbe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	e853 3f00 	ldrex	r3, [r3]
 8005d98:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	f023 0310 	bic.w	r3, r3, #16
 8005da0:	647b      	str	r3, [r7, #68]	@ 0x44
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	461a      	mov	r2, r3
 8005da8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005daa:	61bb      	str	r3, [r7, #24]
 8005dac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dae:	6979      	ldr	r1, [r7, #20]
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	e841 2300 	strex	r3, r2, [r1]
 8005db6:	613b      	str	r3, [r7, #16]
   return(result);
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d1e6      	bne.n	8005d8c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2220      	movs	r2, #32
 8005dc2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2200      	movs	r2, #0
 8005dca:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005dd2:	bf00      	nop
 8005dd4:	3754      	adds	r7, #84	@ 0x54
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b090      	sub	sp, #64	@ 0x40
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005dea:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0320 	and.w	r3, r3, #32
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d137      	bne.n	8005e6a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8005dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	3308      	adds	r3, #8
 8005e08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e0c:	e853 3f00 	ldrex	r3, [r3]
 8005e10:	623b      	str	r3, [r7, #32]
   return(result);
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	3308      	adds	r3, #8
 8005e20:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e22:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e2a:	e841 2300 	strex	r3, r2, [r1]
 8005e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1e5      	bne.n	8005e02 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	e853 3f00 	ldrex	r3, [r3]
 8005e42:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	461a      	mov	r2, r3
 8005e52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e54:	61fb      	str	r3, [r7, #28]
 8005e56:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e58:	69b9      	ldr	r1, [r7, #24]
 8005e5a:	69fa      	ldr	r2, [r7, #28]
 8005e5c:	e841 2300 	strex	r3, r2, [r1]
 8005e60:	617b      	str	r3, [r7, #20]
   return(result);
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1e6      	bne.n	8005e36 <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e68:	e004      	b.n	8005e74 <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 8005e6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e6c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e70:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005e72:	4798      	blx	r3
}
 8005e74:	bf00      	nop
 8005e76:	3740      	adds	r7, #64	@ 0x40
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e88:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005e90:	68f8      	ldr	r0, [r7, #12]
 8005e92:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e94:	bf00      	nop
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b09c      	sub	sp, #112	@ 0x70
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ea8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f003 0320 	and.w	r3, r3, #32
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d171      	bne.n	8005f9c <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005eb8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ec0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ec8:	e853 3f00 	ldrex	r3, [r3]
 8005ecc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ece:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ed0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005ed4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ed6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	461a      	mov	r2, r3
 8005edc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ede:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ee0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ee4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ee6:	e841 2300 	strex	r3, r2, [r1]
 8005eea:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005eec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1e6      	bne.n	8005ec0 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ef2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	3308      	adds	r3, #8
 8005ef8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005efc:	e853 3f00 	ldrex	r3, [r3]
 8005f00:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f04:	f023 0301 	bic.w	r3, r3, #1
 8005f08:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	3308      	adds	r3, #8
 8005f10:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005f12:	647a      	str	r2, [r7, #68]	@ 0x44
 8005f14:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f16:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f18:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f1a:	e841 2300 	strex	r3, r2, [r1]
 8005f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d1e5      	bne.n	8005ef2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f26:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	3308      	adds	r3, #8
 8005f2c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f30:	e853 3f00 	ldrex	r3, [r3]
 8005f34:	623b      	str	r3, [r7, #32]
   return(result);
 8005f36:	6a3b      	ldr	r3, [r7, #32]
 8005f38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f3c:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	3308      	adds	r3, #8
 8005f44:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005f46:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f4a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f4e:	e841 2300 	strex	r3, r2, [r1]
 8005f52:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d1e5      	bne.n	8005f26 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f5a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f5c:	2220      	movs	r2, #32
 8005f5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f62:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d118      	bne.n	8005f9c <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	e853 3f00 	ldrex	r3, [r3]
 8005f76:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	f023 0310 	bic.w	r3, r3, #16
 8005f7e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f80:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	461a      	mov	r2, r3
 8005f86:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005f88:	61fb      	str	r3, [r7, #28]
 8005f8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f8c:	69b9      	ldr	r1, [r7, #24]
 8005f8e:	69fa      	ldr	r2, [r7, #28]
 8005f90:	e841 2300 	strex	r3, r2, [r1]
 8005f94:	617b      	str	r3, [r7, #20]
   return(result);
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1e6      	bne.n	8005f6a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fa2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fa4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d109      	bne.n	8005fbe <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8005faa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fac:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005fb0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005fb2:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8005fb6:	4611      	mov	r1, r2
 8005fb8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005fba:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005fbc:	e004      	b.n	8005fc8 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 8005fbe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fc0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005fc4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005fc6:	4798      	blx	r3
}
 8005fc8:	bf00      	nop
 8005fca:	3770      	adds	r7, #112	@ 0x70
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fdc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fe8:	2b01      	cmp	r3, #1
 8005fea:	d10b      	bne.n	8006004 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8005ff8:	0852      	lsrs	r2, r2, #1
 8005ffa:	b292      	uxth	r2, r2
 8005ffc:	4611      	mov	r1, r2
 8005ffe:	68f8      	ldr	r0, [r7, #12]
 8006000:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006002:	e004      	b.n	800600e <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800600a:	68f8      	ldr	r0, [r7, #12]
 800600c:	4798      	blx	r3
}
 800600e:	bf00      	nop
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b086      	sub	sp, #24
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006022:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800602a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006032:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800603e:	2b80      	cmp	r3, #128	@ 0x80
 8006040:	d109      	bne.n	8006056 <UART_DMAError+0x40>
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	2b21      	cmp	r3, #33	@ 0x21
 8006046:	d106      	bne.n	8006056 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	2200      	movs	r2, #0
 800604c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006050:	6978      	ldr	r0, [r7, #20]
 8006052:	f7ff fe1d 	bl	8005c90 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	689b      	ldr	r3, [r3, #8]
 800605c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006060:	2b40      	cmp	r3, #64	@ 0x40
 8006062:	d109      	bne.n	8006078 <UART_DMAError+0x62>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	2b22      	cmp	r3, #34	@ 0x22
 8006068:	d106      	bne.n	8006078 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	2200      	movs	r2, #0
 800606e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006072:	6978      	ldr	r0, [r7, #20]
 8006074:	f7ff fe4d 	bl	8005d12 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800607e:	f043 0210 	orr.w	r2, r3, #16
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800608e:	6978      	ldr	r0, [r7, #20]
 8006090:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006092:	bf00      	nop
 8006094:	3718      	adds	r7, #24
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}

0800609a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b084      	sub	sp, #16
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80060be:	68f8      	ldr	r0, [r7, #12]
 80060c0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060c2:	bf00      	nop
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}

080060ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060ca:	b580      	push	{r7, lr}
 80060cc:	b088      	sub	sp, #32
 80060ce:	af00      	add	r7, sp, #0
 80060d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	e853 3f00 	ldrex	r3, [r3]
 80060de:	60bb      	str	r3, [r7, #8]
   return(result);
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060e6:	61fb      	str	r3, [r7, #28]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	461a      	mov	r2, r3
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	61bb      	str	r3, [r7, #24]
 80060f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f4:	6979      	ldr	r1, [r7, #20]
 80060f6:	69ba      	ldr	r2, [r7, #24]
 80060f8:	e841 2300 	strex	r3, r2, [r1]
 80060fc:	613b      	str	r3, [r7, #16]
   return(result);
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1e6      	bne.n	80060d2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2220      	movs	r2, #32
 8006108:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800611c:	bf00      	nop
 800611e:	3720      	adds	r7, #32
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006124:	b480      	push	{r7}
 8006126:	b083      	sub	sp, #12
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800612c:	bf00      	nop
 800612e:	370c      	adds	r7, #12
 8006130:	46bd      	mov	sp, r7
 8006132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006136:	4770      	bx	lr

08006138 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006140:	bf00      	nop
 8006142:	370c      	adds	r7, #12
 8006144:	46bd      	mov	sp, r7
 8006146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614a:	4770      	bx	lr

0800614c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800616e:	2b01      	cmp	r3, #1
 8006170:	d101      	bne.n	8006176 <HAL_UARTEx_DisableFifoMode+0x16>
 8006172:	2302      	movs	r3, #2
 8006174:	e027      	b.n	80061c6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2201      	movs	r2, #1
 800617a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2224      	movs	r2, #36	@ 0x24
 8006182:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	681a      	ldr	r2, [r3, #0]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f022 0201 	bic.w	r2, r2, #1
 800619c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80061a4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2200      	movs	r2, #0
 80061aa:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68fa      	ldr	r2, [r7, #12]
 80061b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2220      	movs	r2, #32
 80061b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d0:	4770      	bx	lr

080061d2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061d2:	b580      	push	{r7, lr}
 80061d4:	b084      	sub	sp, #16
 80061d6:	af00      	add	r7, sp, #0
 80061d8:	6078      	str	r0, [r7, #4]
 80061da:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80061e2:	2b01      	cmp	r3, #1
 80061e4:	d101      	bne.n	80061ea <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80061e6:	2302      	movs	r3, #2
 80061e8:	e02d      	b.n	8006246 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2201      	movs	r2, #1
 80061ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2224      	movs	r2, #36	@ 0x24
 80061f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f022 0201 	bic.w	r2, r2, #1
 8006210:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	683a      	ldr	r2, [r7, #0]
 8006222:	430a      	orrs	r2, r1
 8006224:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006226:	6878      	ldr	r0, [r7, #4]
 8006228:	f000 f850 	bl	80062cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	68fa      	ldr	r2, [r7, #12]
 8006232:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2220      	movs	r2, #32
 8006238:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006244:	2300      	movs	r3, #0
}
 8006246:	4618      	mov	r0, r3
 8006248:	3710      	adds	r7, #16
 800624a:	46bd      	mov	sp, r7
 800624c:	bd80      	pop	{r7, pc}

0800624e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b084      	sub	sp, #16
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
 8006256:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800625e:	2b01      	cmp	r3, #1
 8006260:	d101      	bne.n	8006266 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006262:	2302      	movs	r3, #2
 8006264:	e02d      	b.n	80062c2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2224      	movs	r2, #36	@ 0x24
 8006272:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 0201 	bic.w	r2, r2, #1
 800628c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f812 	bl	80062cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2220      	movs	r2, #32
 80062b4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
	...

080062cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b085      	sub	sp, #20
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d108      	bne.n	80062ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2201      	movs	r2, #1
 80062e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80062ec:	e031      	b.n	8006352 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80062ee:	2308      	movs	r3, #8
 80062f0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80062f2:	2308      	movs	r3, #8
 80062f4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	0e5b      	lsrs	r3, r3, #25
 80062fe:	b2db      	uxtb	r3, r3
 8006300:	f003 0307 	and.w	r3, r3, #7
 8006304:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	0f5b      	lsrs	r3, r3, #29
 800630e:	b2db      	uxtb	r3, r3
 8006310:	f003 0307 	and.w	r3, r3, #7
 8006314:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006316:	7bbb      	ldrb	r3, [r7, #14]
 8006318:	7b3a      	ldrb	r2, [r7, #12]
 800631a:	4911      	ldr	r1, [pc, #68]	@ (8006360 <UARTEx_SetNbDataToProcess+0x94>)
 800631c:	5c8a      	ldrb	r2, [r1, r2]
 800631e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006322:	7b3a      	ldrb	r2, [r7, #12]
 8006324:	490f      	ldr	r1, [pc, #60]	@ (8006364 <UARTEx_SetNbDataToProcess+0x98>)
 8006326:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006328:	fb93 f3f2 	sdiv	r3, r3, r2
 800632c:	b29a      	uxth	r2, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006334:	7bfb      	ldrb	r3, [r7, #15]
 8006336:	7b7a      	ldrb	r2, [r7, #13]
 8006338:	4909      	ldr	r1, [pc, #36]	@ (8006360 <UARTEx_SetNbDataToProcess+0x94>)
 800633a:	5c8a      	ldrb	r2, [r1, r2]
 800633c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006340:	7b7a      	ldrb	r2, [r7, #13]
 8006342:	4908      	ldr	r1, [pc, #32]	@ (8006364 <UARTEx_SetNbDataToProcess+0x98>)
 8006344:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006346:	fb93 f3f2 	sdiv	r3, r3, r2
 800634a:	b29a      	uxth	r2, r3
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006352:	bf00      	nop
 8006354:	3714      	adds	r7, #20
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
 800635e:	bf00      	nop
 8006360:	08006424 	.word	0x08006424
 8006364:	0800642c 	.word	0x0800642c

08006368 <memset>:
 8006368:	4402      	add	r2, r0
 800636a:	4603      	mov	r3, r0
 800636c:	4293      	cmp	r3, r2
 800636e:	d100      	bne.n	8006372 <memset+0xa>
 8006370:	4770      	bx	lr
 8006372:	f803 1b01 	strb.w	r1, [r3], #1
 8006376:	e7f9      	b.n	800636c <memset+0x4>

08006378 <__libc_init_array>:
 8006378:	b570      	push	{r4, r5, r6, lr}
 800637a:	4d0d      	ldr	r5, [pc, #52]	@ (80063b0 <__libc_init_array+0x38>)
 800637c:	4c0d      	ldr	r4, [pc, #52]	@ (80063b4 <__libc_init_array+0x3c>)
 800637e:	1b64      	subs	r4, r4, r5
 8006380:	10a4      	asrs	r4, r4, #2
 8006382:	2600      	movs	r6, #0
 8006384:	42a6      	cmp	r6, r4
 8006386:	d109      	bne.n	800639c <__libc_init_array+0x24>
 8006388:	4d0b      	ldr	r5, [pc, #44]	@ (80063b8 <__libc_init_array+0x40>)
 800638a:	4c0c      	ldr	r4, [pc, #48]	@ (80063bc <__libc_init_array+0x44>)
 800638c:	f000 f826 	bl	80063dc <_init>
 8006390:	1b64      	subs	r4, r4, r5
 8006392:	10a4      	asrs	r4, r4, #2
 8006394:	2600      	movs	r6, #0
 8006396:	42a6      	cmp	r6, r4
 8006398:	d105      	bne.n	80063a6 <__libc_init_array+0x2e>
 800639a:	bd70      	pop	{r4, r5, r6, pc}
 800639c:	f855 3b04 	ldr.w	r3, [r5], #4
 80063a0:	4798      	blx	r3
 80063a2:	3601      	adds	r6, #1
 80063a4:	e7ee      	b.n	8006384 <__libc_init_array+0xc>
 80063a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80063aa:	4798      	blx	r3
 80063ac:	3601      	adds	r6, #1
 80063ae:	e7f2      	b.n	8006396 <__libc_init_array+0x1e>
 80063b0:	0800643c 	.word	0x0800643c
 80063b4:	0800643c 	.word	0x0800643c
 80063b8:	0800643c 	.word	0x0800643c
 80063bc:	08006440 	.word	0x08006440

080063c0 <memcpy>:
 80063c0:	440a      	add	r2, r1
 80063c2:	4291      	cmp	r1, r2
 80063c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80063c8:	d100      	bne.n	80063cc <memcpy+0xc>
 80063ca:	4770      	bx	lr
 80063cc:	b510      	push	{r4, lr}
 80063ce:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063d2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063d6:	4291      	cmp	r1, r2
 80063d8:	d1f9      	bne.n	80063ce <memcpy+0xe>
 80063da:	bd10      	pop	{r4, pc}

080063dc <_init>:
 80063dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063de:	bf00      	nop
 80063e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063e2:	bc08      	pop	{r3}
 80063e4:	469e      	mov	lr, r3
 80063e6:	4770      	bx	lr

080063e8 <_fini>:
 80063e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ea:	bf00      	nop
 80063ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ee:	bc08      	pop	{r3}
 80063f0:	469e      	mov	lr, r3
 80063f2:	4770      	bx	lr
