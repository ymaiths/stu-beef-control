
MODBUS2024ALT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006244  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800641c  0800641c  0000741c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800645c  0800645c  00008210  2**0
                  CONTENTS
  4 .ARM          00000008  0800645c  0800645c  0000745c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006464  08006464  00008210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006464  08006464  00007464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006468  08006468  00007468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  0800646c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009f0  20000210  0800667c  00008210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c00  0800667c  00008c00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008210  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015651  00000000  00000000  00008240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002908  00000000  00000000  0001d891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  000201a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d7b  00000000  00000000  000212d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000263d1  00000000  00000000  0002204b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000147ea  00000000  00000000  0004841c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc17d  00000000  00000000  0005cc06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00158d83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000493c  00000000  00000000  00158dc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  0015d704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000210 	.word	0x20000210
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006404 	.word	0x08006404

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000214 	.word	0x20000214
 8000214:	08006404 	.word	0x08006404

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b96a 	b.w	8000504 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	460c      	mov	r4, r1
 8000250:	2b00      	cmp	r3, #0
 8000252:	d14e      	bne.n	80002f2 <__udivmoddi4+0xaa>
 8000254:	4694      	mov	ip, r2
 8000256:	458c      	cmp	ip, r1
 8000258:	4686      	mov	lr, r0
 800025a:	fab2 f282 	clz	r2, r2
 800025e:	d962      	bls.n	8000326 <__udivmoddi4+0xde>
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0320 	rsb	r3, r2, #32
 8000266:	4091      	lsls	r1, r2
 8000268:	fa20 f303 	lsr.w	r3, r0, r3
 800026c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000270:	4319      	orrs	r1, r3
 8000272:	fa00 fe02 	lsl.w	lr, r0, r2
 8000276:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800027a:	fa1f f68c 	uxth.w	r6, ip
 800027e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000282:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000286:	fb07 1114 	mls	r1, r7, r4, r1
 800028a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800028e:	fb04 f106 	mul.w	r1, r4, r6
 8000292:	4299      	cmp	r1, r3
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x64>
 8000296:	eb1c 0303 	adds.w	r3, ip, r3
 800029a:	f104 30ff 	add.w	r0, r4, #4294967295
 800029e:	f080 8112 	bcs.w	80004c6 <__udivmoddi4+0x27e>
 80002a2:	4299      	cmp	r1, r3
 80002a4:	f240 810f 	bls.w	80004c6 <__udivmoddi4+0x27e>
 80002a8:	3c02      	subs	r4, #2
 80002aa:	4463      	add	r3, ip
 80002ac:	1a59      	subs	r1, r3, r1
 80002ae:	fa1f f38e 	uxth.w	r3, lr
 80002b2:	fbb1 f0f7 	udiv	r0, r1, r7
 80002b6:	fb07 1110 	mls	r1, r7, r0, r1
 80002ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002be:	fb00 f606 	mul.w	r6, r0, r6
 80002c2:	429e      	cmp	r6, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x94>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f100 31ff 	add.w	r1, r0, #4294967295
 80002ce:	f080 80fc 	bcs.w	80004ca <__udivmoddi4+0x282>
 80002d2:	429e      	cmp	r6, r3
 80002d4:	f240 80f9 	bls.w	80004ca <__udivmoddi4+0x282>
 80002d8:	4463      	add	r3, ip
 80002da:	3802      	subs	r0, #2
 80002dc:	1b9b      	subs	r3, r3, r6
 80002de:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002e2:	2100      	movs	r1, #0
 80002e4:	b11d      	cbz	r5, 80002ee <__udivmoddi4+0xa6>
 80002e6:	40d3      	lsrs	r3, r2
 80002e8:	2200      	movs	r2, #0
 80002ea:	e9c5 3200 	strd	r3, r2, [r5]
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d905      	bls.n	8000302 <__udivmoddi4+0xba>
 80002f6:	b10d      	cbz	r5, 80002fc <__udivmoddi4+0xb4>
 80002f8:	e9c5 0100 	strd	r0, r1, [r5]
 80002fc:	2100      	movs	r1, #0
 80002fe:	4608      	mov	r0, r1
 8000300:	e7f5      	b.n	80002ee <__udivmoddi4+0xa6>
 8000302:	fab3 f183 	clz	r1, r3
 8000306:	2900      	cmp	r1, #0
 8000308:	d146      	bne.n	8000398 <__udivmoddi4+0x150>
 800030a:	42a3      	cmp	r3, r4
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xcc>
 800030e:	4290      	cmp	r0, r2
 8000310:	f0c0 80f0 	bcc.w	80004f4 <__udivmoddi4+0x2ac>
 8000314:	1a86      	subs	r6, r0, r2
 8000316:	eb64 0303 	sbc.w	r3, r4, r3
 800031a:	2001      	movs	r0, #1
 800031c:	2d00      	cmp	r5, #0
 800031e:	d0e6      	beq.n	80002ee <__udivmoddi4+0xa6>
 8000320:	e9c5 6300 	strd	r6, r3, [r5]
 8000324:	e7e3      	b.n	80002ee <__udivmoddi4+0xa6>
 8000326:	2a00      	cmp	r2, #0
 8000328:	f040 8090 	bne.w	800044c <__udivmoddi4+0x204>
 800032c:	eba1 040c 	sub.w	r4, r1, ip
 8000330:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000334:	fa1f f78c 	uxth.w	r7, ip
 8000338:	2101      	movs	r1, #1
 800033a:	fbb4 f6f8 	udiv	r6, r4, r8
 800033e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000342:	fb08 4416 	mls	r4, r8, r6, r4
 8000346:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800034a:	fb07 f006 	mul.w	r0, r7, r6
 800034e:	4298      	cmp	r0, r3
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x11c>
 8000352:	eb1c 0303 	adds.w	r3, ip, r3
 8000356:	f106 34ff 	add.w	r4, r6, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x11a>
 800035c:	4298      	cmp	r0, r3
 800035e:	f200 80cd 	bhi.w	80004fc <__udivmoddi4+0x2b4>
 8000362:	4626      	mov	r6, r4
 8000364:	1a1c      	subs	r4, r3, r0
 8000366:	fa1f f38e 	uxth.w	r3, lr
 800036a:	fbb4 f0f8 	udiv	r0, r4, r8
 800036e:	fb08 4410 	mls	r4, r8, r0, r4
 8000372:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000376:	fb00 f707 	mul.w	r7, r0, r7
 800037a:	429f      	cmp	r7, r3
 800037c:	d908      	bls.n	8000390 <__udivmoddi4+0x148>
 800037e:	eb1c 0303 	adds.w	r3, ip, r3
 8000382:	f100 34ff 	add.w	r4, r0, #4294967295
 8000386:	d202      	bcs.n	800038e <__udivmoddi4+0x146>
 8000388:	429f      	cmp	r7, r3
 800038a:	f200 80b0 	bhi.w	80004ee <__udivmoddi4+0x2a6>
 800038e:	4620      	mov	r0, r4
 8000390:	1bdb      	subs	r3, r3, r7
 8000392:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000396:	e7a5      	b.n	80002e4 <__udivmoddi4+0x9c>
 8000398:	f1c1 0620 	rsb	r6, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 f706 	lsr.w	r7, r2, r6
 80003a2:	431f      	orrs	r7, r3
 80003a4:	fa20 fc06 	lsr.w	ip, r0, r6
 80003a8:	fa04 f301 	lsl.w	r3, r4, r1
 80003ac:	ea43 030c 	orr.w	r3, r3, ip
 80003b0:	40f4      	lsrs	r4, r6
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	0c38      	lsrs	r0, r7, #16
 80003b8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80003bc:	fbb4 fef0 	udiv	lr, r4, r0
 80003c0:	fa1f fc87 	uxth.w	ip, r7
 80003c4:	fb00 441e 	mls	r4, r0, lr, r4
 80003c8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003cc:	fb0e f90c 	mul.w	r9, lr, ip
 80003d0:	45a1      	cmp	r9, r4
 80003d2:	fa02 f201 	lsl.w	r2, r2, r1
 80003d6:	d90a      	bls.n	80003ee <__udivmoddi4+0x1a6>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003de:	f080 8084 	bcs.w	80004ea <__udivmoddi4+0x2a2>
 80003e2:	45a1      	cmp	r9, r4
 80003e4:	f240 8081 	bls.w	80004ea <__udivmoddi4+0x2a2>
 80003e8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ec:	443c      	add	r4, r7
 80003ee:	eba4 0409 	sub.w	r4, r4, r9
 80003f2:	fa1f f983 	uxth.w	r9, r3
 80003f6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003fa:	fb00 4413 	mls	r4, r0, r3, r4
 80003fe:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000402:	fb03 fc0c 	mul.w	ip, r3, ip
 8000406:	45a4      	cmp	ip, r4
 8000408:	d907      	bls.n	800041a <__udivmoddi4+0x1d2>
 800040a:	193c      	adds	r4, r7, r4
 800040c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000410:	d267      	bcs.n	80004e2 <__udivmoddi4+0x29a>
 8000412:	45a4      	cmp	ip, r4
 8000414:	d965      	bls.n	80004e2 <__udivmoddi4+0x29a>
 8000416:	3b02      	subs	r3, #2
 8000418:	443c      	add	r4, r7
 800041a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800041e:	fba0 9302 	umull	r9, r3, r0, r2
 8000422:	eba4 040c 	sub.w	r4, r4, ip
 8000426:	429c      	cmp	r4, r3
 8000428:	46ce      	mov	lr, r9
 800042a:	469c      	mov	ip, r3
 800042c:	d351      	bcc.n	80004d2 <__udivmoddi4+0x28a>
 800042e:	d04e      	beq.n	80004ce <__udivmoddi4+0x286>
 8000430:	b155      	cbz	r5, 8000448 <__udivmoddi4+0x200>
 8000432:	ebb8 030e 	subs.w	r3, r8, lr
 8000436:	eb64 040c 	sbc.w	r4, r4, ip
 800043a:	fa04 f606 	lsl.w	r6, r4, r6
 800043e:	40cb      	lsrs	r3, r1
 8000440:	431e      	orrs	r6, r3
 8000442:	40cc      	lsrs	r4, r1
 8000444:	e9c5 6400 	strd	r6, r4, [r5]
 8000448:	2100      	movs	r1, #0
 800044a:	e750      	b.n	80002ee <__udivmoddi4+0xa6>
 800044c:	f1c2 0320 	rsb	r3, r2, #32
 8000450:	fa20 f103 	lsr.w	r1, r0, r3
 8000454:	fa0c fc02 	lsl.w	ip, ip, r2
 8000458:	fa24 f303 	lsr.w	r3, r4, r3
 800045c:	4094      	lsls	r4, r2
 800045e:	430c      	orrs	r4, r1
 8000460:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000464:	fa00 fe02 	lsl.w	lr, r0, r2
 8000468:	fa1f f78c 	uxth.w	r7, ip
 800046c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000470:	fb08 3110 	mls	r1, r8, r0, r3
 8000474:	0c23      	lsrs	r3, r4, #16
 8000476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800047a:	fb00 f107 	mul.w	r1, r0, r7
 800047e:	4299      	cmp	r1, r3
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x24c>
 8000482:	eb1c 0303 	adds.w	r3, ip, r3
 8000486:	f100 36ff 	add.w	r6, r0, #4294967295
 800048a:	d22c      	bcs.n	80004e6 <__udivmoddi4+0x29e>
 800048c:	4299      	cmp	r1, r3
 800048e:	d92a      	bls.n	80004e6 <__udivmoddi4+0x29e>
 8000490:	3802      	subs	r0, #2
 8000492:	4463      	add	r3, ip
 8000494:	1a5b      	subs	r3, r3, r1
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb3 f1f8 	udiv	r1, r3, r8
 800049c:	fb08 3311 	mls	r3, r8, r1, r3
 80004a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004a4:	fb01 f307 	mul.w	r3, r1, r7
 80004a8:	42a3      	cmp	r3, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x276>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f101 36ff 	add.w	r6, r1, #4294967295
 80004b4:	d213      	bcs.n	80004de <__udivmoddi4+0x296>
 80004b6:	42a3      	cmp	r3, r4
 80004b8:	d911      	bls.n	80004de <__udivmoddi4+0x296>
 80004ba:	3902      	subs	r1, #2
 80004bc:	4464      	add	r4, ip
 80004be:	1ae4      	subs	r4, r4, r3
 80004c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80004c4:	e739      	b.n	800033a <__udivmoddi4+0xf2>
 80004c6:	4604      	mov	r4, r0
 80004c8:	e6f0      	b.n	80002ac <__udivmoddi4+0x64>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e706      	b.n	80002dc <__udivmoddi4+0x94>
 80004ce:	45c8      	cmp	r8, r9
 80004d0:	d2ae      	bcs.n	8000430 <__udivmoddi4+0x1e8>
 80004d2:	ebb9 0e02 	subs.w	lr, r9, r2
 80004d6:	eb63 0c07 	sbc.w	ip, r3, r7
 80004da:	3801      	subs	r0, #1
 80004dc:	e7a8      	b.n	8000430 <__udivmoddi4+0x1e8>
 80004de:	4631      	mov	r1, r6
 80004e0:	e7ed      	b.n	80004be <__udivmoddi4+0x276>
 80004e2:	4603      	mov	r3, r0
 80004e4:	e799      	b.n	800041a <__udivmoddi4+0x1d2>
 80004e6:	4630      	mov	r0, r6
 80004e8:	e7d4      	b.n	8000494 <__udivmoddi4+0x24c>
 80004ea:	46d6      	mov	lr, sl
 80004ec:	e77f      	b.n	80003ee <__udivmoddi4+0x1a6>
 80004ee:	4463      	add	r3, ip
 80004f0:	3802      	subs	r0, #2
 80004f2:	e74d      	b.n	8000390 <__udivmoddi4+0x148>
 80004f4:	4606      	mov	r6, r0
 80004f6:	4623      	mov	r3, r4
 80004f8:	4608      	mov	r0, r1
 80004fa:	e70f      	b.n	800031c <__udivmoddi4+0xd4>
 80004fc:	3e02      	subs	r6, #2
 80004fe:	4463      	add	r3, ip
 8000500:	e730      	b.n	8000364 <__udivmoddi4+0x11c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <modbus_1t5_Timeout>:
void Modbus_frame_response();
void modbus_ErrorTimeout(UART_HandleTypeDef* huart);

// function for interrupt
void modbus_1t5_Timeout()
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 800050c:	4b0d      	ldr	r3, [pc, #52]	@ (8000544 <modbus_1t5_Timeout+0x3c>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2201      	movs	r2, #1
 8000512:	751a      	strb	r2, [r3, #20]
	//set 3t5 Timer
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000514:	4b0b      	ldr	r3, [pc, #44]	@ (8000544 <modbus_1t5_Timeout+0x3c>)
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	691b      	ldr	r3, [r3, #16]
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	2200      	movs	r2, #0
 800051e:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_ENABLE(hModbus->htim);
 8000520:	4b08      	ldr	r3, [pc, #32]	@ (8000544 <modbus_1t5_Timeout+0x3c>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	691b      	ldr	r3, [r3, #16]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	681a      	ldr	r2, [r3, #0]
 800052a:	4b06      	ldr	r3, [pc, #24]	@ (8000544 <modbus_1t5_Timeout+0x3c>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	691b      	ldr	r3, [r3, #16]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	f042 0201 	orr.w	r2, r2, #1
 8000536:	601a      	str	r2, [r3, #0]
}
 8000538:	bf00      	nop
 800053a:	46bd      	mov	sp, r7
 800053c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop
 8000544:	2000022c 	.word	0x2000022c

08000548 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000548:	b480      	push	{r7}
 800054a:	b083      	sub	sp, #12
 800054c:	af00      	add	r7, sp, #0
 800054e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000550:	4b04      	ldr	r3, [pc, #16]	@ (8000564 <modbus_3t5_Timeout+0x1c>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	2201      	movs	r2, #1
 8000556:	755a      	strb	r2, [r3, #21]

}
 8000558:	bf00      	nop
 800055a:	370c      	adds	r7, #12
 800055c:	46bd      	mov	sp, r7
 800055e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000562:	4770      	bx	lr
 8000564:	2000022c 	.word	0x2000022c

08000568 <modbus_ErrorTimeout>:

void modbus_ErrorTimeout(UART_HandleTypeDef* huart)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b082      	sub	sp, #8
 800056c:	af00      	add	r7, sp, #0
 800056e:	6078      	str	r0, [r7, #4]
	if(HAL_UART_GetError(huart)==HAL_UART_ERROR_RTO)
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f004 fde5 	bl	8005140 <HAL_UART_GetError>
 8000576:	4603      	mov	r3, r0
 8000578:	2b20      	cmp	r3, #32
 800057a:	d101      	bne.n	8000580 <modbus_ErrorTimeout+0x18>
	{
		modbus_1t5_Timeout();
 800057c:	f7ff ffc4 	bl	8000508 <modbus_1t5_Timeout>

	}
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <Modbus_init>:



void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000592:	4a25      	ldr	r2, [pc, #148]	@ (8000628 <Modbus_init+0xa0>)
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000598:	4b23      	ldr	r3, [pc, #140]	@ (8000628 <Modbus_init+0xa0>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	683a      	ldr	r2, [r7, #0]
 800059e:	605a      	str	r2, [r3, #4]

	//config timer interrupt

	HAL_TIM_RegisterCallback(hmodbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	691b      	ldr	r3, [r3, #16]
 80005a4:	4a21      	ldr	r2, [pc, #132]	@ (800062c <Modbus_init+0xa4>)
 80005a6:	210e      	movs	r1, #14
 80005a8:	4618      	mov	r0, r3
 80005aa:	f003 fbcb 	bl	8003d44 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_ReceiverTimeout_Config(hmodbus->huart, 16);
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	68db      	ldr	r3, [r3, #12]
 80005b2:	2110      	movs	r1, #16
 80005b4:	4618      	mov	r0, r3
 80005b6:	f004 fd6d 	bl	8005094 <HAL_UART_ReceiverTimeout_Config>
	HAL_UART_EnableReceiverTimeout(hmodbus->huart);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	4618      	mov	r0, r3
 80005c0:	f004 fd84 	bl	80050cc <HAL_UART_EnableReceiverTimeout>

	HAL_UART_RegisterCallback(hmodbus->huart, HAL_UART_ERROR_CB_ID, (void*)modbus_ErrorTimeout);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	4a19      	ldr	r2, [pc, #100]	@ (8000630 <Modbus_init+0xa8>)
 80005ca:	2104      	movs	r1, #4
 80005cc:	4618      	mov	r0, r3
 80005ce:	f004 f84b 	bl	8004668 <HAL_UART_RegisterCallback>
	//HAL_UART_RegisterCallback(hmodbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
	//start Receive
    HAL_UART_Receive_DMA(hModbus->huart,
 80005d2:	4b15      	ldr	r3, [pc, #84]	@ (8000628 <Modbus_init+0xa0>)
 80005d4:	681b      	ldr	r3, [r3, #0]
 80005d6:	68d8      	ldr	r0, [r3, #12]
    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 80005d8:	4b13      	ldr	r3, [pc, #76]	@ (8000628 <Modbus_init+0xa0>)
 80005da:	681a      	ldr	r2, [r3, #0]
 80005dc:	4b12      	ldr	r3, [pc, #72]	@ (8000628 <Modbus_init+0xa0>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
    HAL_UART_Receive_DMA(hModbus->huart,
 80005e4:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 80005e8:	4413      	add	r3, r2
 80005ea:	3302      	adds	r3, #2
 80005ec:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80005f0:	4619      	mov	r1, r3
 80005f2:	f004 f973 	bl	80048dc <HAL_UART_Receive_DMA>
			MODBUS_UART_BUFFER_SIZE );


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 80005f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000628 <Modbus_init+0xa0>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	691b      	ldr	r3, [r3, #16]
 80005fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000600:	b2db      	uxtb	r3, r3
 8000602:	2b01      	cmp	r3, #1
 8000604:	d10c      	bne.n	8000620 <Modbus_init+0x98>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000606:	4b08      	ldr	r3, [pc, #32]	@ (8000628 <Modbus_init+0xa0>)
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	691b      	ldr	r3, [r3, #16]
 800060c:	4618      	mov	r0, r3
 800060e:	f002 ff41 	bl	8003494 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000612:	4b05      	ldr	r3, [pc, #20]	@ (8000628 <Modbus_init+0xa0>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	691b      	ldr	r3, [r3, #16]
 8000618:	2100      	movs	r1, #0
 800061a:	4618      	mov	r0, r3
 800061c:	f003 f81a 	bl	8003654 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	2000022c 	.word	0x2000022c
 800062c:	08000549 	.word	0x08000549
 8000630:	08000569 	.word	0x08000569

08000634 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000640:	23ff      	movs	r3, #255	@ 0xff
 8000642:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000644:	23ff      	movs	r3, #255	@ 0xff
 8000646:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000648:	e013      	b.n	8000672 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	1c5a      	adds	r2, r3, #1
 800064e:	607a      	str	r2, [r7, #4]
 8000650:	781a      	ldrb	r2, [r3, #0]
 8000652:	7bbb      	ldrb	r3, [r7, #14]
 8000654:	4053      	eors	r3, r2
 8000656:	b2db      	uxtb	r3, r3
 8000658:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800065a:	4a0f      	ldr	r2, [pc, #60]	@ (8000698 <CRC16+0x64>)
 800065c:	68bb      	ldr	r3, [r7, #8]
 800065e:	4413      	add	r3, r2
 8000660:	781a      	ldrb	r2, [r3, #0]
 8000662:	7bfb      	ldrb	r3, [r7, #15]
 8000664:	4053      	eors	r3, r2
 8000666:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8000668:	4a0c      	ldr	r2, [pc, #48]	@ (800069c <CRC16+0x68>)
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	4413      	add	r3, r2
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8000672:	883b      	ldrh	r3, [r7, #0]
 8000674:	1e5a      	subs	r2, r3, #1
 8000676:	803a      	strh	r2, [r7, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d1e6      	bne.n	800064a <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	021b      	lsls	r3, r3, #8
 8000680:	b21a      	sxth	r2, r3
 8000682:	7bbb      	ldrb	r3, [r7, #14]
 8000684:	b21b      	sxth	r3, r3
 8000686:	4313      	orrs	r3, r2
 8000688:	b21b      	sxth	r3, r3
 800068a:	b29b      	uxth	r3, r3
}
 800068c:	4618      	mov	r0, r3
 800068e:	3714      	adds	r7, #20
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	20000100 	.word	0x20000100
 800069c:	20000000 	.word	0x20000000

080006a0 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80006a6:	4b7e      	ldr	r3, [pc, #504]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	7ddb      	ldrb	r3, [r3, #23]
 80006ac:	3b01      	subs	r3, #1
 80006ae:	2b03      	cmp	r3, #3
 80006b0:	d80a      	bhi.n	80006c8 <Modbus_Protocal_Worker+0x28>
 80006b2:	a201      	add	r2, pc, #4	@ (adr r2, 80006b8 <Modbus_Protocal_Worker+0x18>)
 80006b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b8:	080006d3 	.word	0x080006d3
 80006bc:	08000867 	.word	0x08000867
 80006c0:	0800075f 	.word	0x0800075f
 80006c4:	080007a3 	.word	0x080007a3
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80006c8:	4b75      	ldr	r3, [pc, #468]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2201      	movs	r2, #1
 80006ce:	75da      	strb	r2, [r3, #23]
		break;
 80006d0:	e0e1      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80006d2:	4b73      	ldr	r3, [pc, #460]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d006      	beq.n	80006ec <Modbus_Protocal_Worker+0x4c>
		{
			/*set state*/
			hModbus->Mstatus= Modbus_state_Emission;
 80006de:	4b70      	ldr	r3, [pc, #448]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	2202      	movs	r2, #2
 80006e4:	75da      	strb	r2, [r3, #23]
			Modbus_Emission();
 80006e6:	f000 f9cd 	bl	8000a84 <Modbus_Emission>
 80006ea:	e018      	b.n	800071e <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->huart->RxXferSize!=hModbus->huart->RxXferCount)
 80006ec:	4b6c      	ldr	r3, [pc, #432]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	68db      	ldr	r3, [r3, #12]
 80006f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80006f6:	4b6a      	ldr	r3, [pc, #424]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8000700:	b29b      	uxth	r3, r3
 8000702:	429a      	cmp	r2, r3
 8000704:	d00b      	beq.n	800071e <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8000706:	4b66      	ldr	r3, [pc, #408]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2200      	movs	r2, #0
 800070c:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800070e:	4b64      	ldr	r3, [pc, #400]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	2200      	movs	r2, #0
 8000714:	755a      	strb	r2, [r3, #21]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 8000716:	4b62      	ldr	r3, [pc, #392]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	2203      	movs	r2, #3
 800071c:	75da      	strb	r2, [r3, #23]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 800071e:	4b60      	ldr	r3, [pc, #384]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	68db      	ldr	r3, [r3, #12]
 8000724:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000728:	2b20      	cmp	r3, #32
 800072a:	f040 80ad 	bne.w	8000888 <Modbus_Protocal_Worker+0x1e8>
		{
			hModbus->modbusUartStructure.RxTail =0;
 800072e:	4b5c      	ldr	r3, [pc, #368]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	2200      	movs	r2, #0
 8000734:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 8000738:	4b59      	ldr	r3, [pc, #356]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	68d8      	ldr	r0, [r3, #12]
		    		&(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]),
 800073e:	4b58      	ldr	r3, [pc, #352]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000740:	681a      	ldr	r2, [r3, #0]
 8000742:	4b57      	ldr	r3, [pc, #348]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
		    HAL_UART_Receive_DMA(hModbus->huart,
 800074a:	f503 731c 	add.w	r3, r3, #624	@ 0x270
 800074e:	4413      	add	r3, r2
 8000750:	3302      	adds	r3, #2
 8000752:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8000756:	4619      	mov	r1, r3
 8000758:	f004 f8c0 	bl	80048dc <HAL_UART_Receive_DMA>
					MODBUS_UART_BUFFER_SIZE );


		}
		break;
 800075c:	e094      	b.n	8000888 <Modbus_Protocal_Worker+0x1e8>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800075e:	4b50      	ldr	r3, [pc, #320]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	7d1b      	ldrb	r3, [r3, #20]
 8000764:	2b00      	cmp	r3, #0
 8000766:	f000 8091 	beq.w	800088c <Modbus_Protocal_Worker+0x1ec>
		{
			/*reset recived flag*/
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 800076a:	4b4d      	ldr	r3, [pc, #308]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	22fe      	movs	r2, #254	@ 0xfe
 8000770:	759a      	strb	r2, [r3, #22]
			hModbus->modbusUartStructure.RxTail =
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8000772:	4b4b      	ldr	r3, [pc, #300]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	68db      	ldr	r3, [r3, #12]
 8000778:	f8b3 105c 	ldrh.w	r1, [r3, #92]	@ 0x5c
 800077c:	4b48      	ldr	r3, [pc, #288]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	68db      	ldr	r3, [r3, #12]
 8000782:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	685b      	ldr	r3, [r3, #4]
 800078a:	b29a      	uxth	r2, r3
			hModbus->modbusUartStructure.RxTail =
 800078c:	4b44      	ldr	r3, [pc, #272]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800078e:	681b      	ldr	r3, [r3, #0]
					hModbus->huart->RxXferSize - __HAL_DMA_GET_COUNTER(hModbus->huart->hdmarx); 			/*compute CRC and Slave address*/
 8000790:	1a8a      	subs	r2, r1, r2
 8000792:	b292      	uxth	r2, r2
			hModbus->modbusUartStructure.RxTail =
 8000794:	f8a3 23a2 	strh.w	r2, [r3, #930]	@ 0x3a2



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 8000798:	4b41      	ldr	r3, [pc, #260]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	2204      	movs	r2, #4
 800079e:	75da      	strb	r2, [r3, #23]
		}
		break;
 80007a0:	e074      	b.n	800088c <Modbus_Protocal_Worker+0x1ec>
	case Modbus_state_ControlAndWaiting:

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80007a2:	4b3f      	ldr	r3, [pc, #252]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	f993 3016 	ldrsb.w	r3, [r3, #22]
 80007aa:	f113 0f02 	cmn.w	r3, #2
 80007ae:	d150      	bne.n	8000852 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80007b0:	4b3b      	ldr	r3, [pc, #236]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	2200      	movs	r2, #0
 80007b6:	759a      	strb	r2, [r3, #22]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80007b8:	4b39      	ldr	r3, [pc, #228]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	f203 2272 	addw	r2, r3, #626	@ 0x272
 80007c0:	4b37      	ldr	r3, [pc, #220]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80007c8:	3b02      	subs	r3, #2
 80007ca:	4619      	mov	r1, r3
 80007cc:	4610      	mov	r0, r2
 80007ce:	f7ff ff31 	bl	8000634 <CRC16>
 80007d2:	4603      	mov	r3, r0
 80007d4:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80007d6:	793a      	ldrb	r2, [r7, #4]
 80007d8:	4b31      	ldr	r3, [pc, #196]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007da:	6819      	ldr	r1, [r3, #0]
 80007dc:	4b30      	ldr	r3, [pc, #192]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80007e4:	3b02      	subs	r3, #2
 80007e6:	440b      	add	r3, r1
 80007e8:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
 80007ec:	429a      	cmp	r2, r3
 80007ee:	d10c      	bne.n	800080a <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80007f0:	797a      	ldrb	r2, [r7, #5]
 80007f2:	4b2b      	ldr	r3, [pc, #172]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007f4:	6819      	ldr	r1, [r3, #0]
 80007f6:	4b2a      	ldr	r3, [pc, #168]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 80007fe:	3b01      	subs	r3, #1
 8000800:	440b      	add	r3, r1
 8000802:	f893 3272 	ldrb.w	r3, [r3, #626]	@ 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8000806:	429a      	cmp	r2, r3
 8000808:	d004      	beq.n	8000814 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800080a:	4b25      	ldr	r3, [pc, #148]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	22ff      	movs	r2, #255	@ 0xff
 8000810:	759a      	strb	r2, [r3, #22]
				break;
 8000812:	e040      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8000814:	4b22      	ldr	r3, [pc, #136]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f893 2272 	ldrb.w	r2, [r3, #626]	@ 0x272
 800081c:	4b20      	ldr	r3, [pc, #128]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	429a      	cmp	r2, r3
 8000824:	d113      	bne.n	800084e <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 8000826:	4b1e      	ldr	r3, [pc, #120]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f103 0018 	add.w	r0, r3, #24
					hModbus->modbusUartStructure.MessageBufferRx+1,
 800082e:	4b1c      	ldr	r3, [pc, #112]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f203 2372 	addw	r3, r3, #626	@ 0x272
			memcpy(hModbus->Rxframe,
 8000836:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 8000838:	4b19      	ldr	r3, [pc, #100]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	@ 0x3a2
 8000840:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8000842:	461a      	mov	r2, r3
 8000844:	f005 fdd0 	bl	80063e8 <memcpy>

			//execute command
			Modbus_frame_response();
 8000848:	f000 f904 	bl	8000a54 <Modbus_frame_response>
 800084c:	e001      	b.n	8000852 <Modbus_Protocal_Worker+0x1b2>
				break;
 800084e:	bf00      	nop
					}
		break;


	}
}
 8000850:	e021      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
		if(hModbus->Flag_T35TimeOut)
 8000852:	4b13      	ldr	r3, [pc, #76]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	7d5b      	ldrb	r3, [r3, #21]
 8000858:	2b00      	cmp	r3, #0
 800085a:	d019      	beq.n	8000890 <Modbus_Protocal_Worker+0x1f0>
			hModbus->Mstatus = Modbus_state_Idle;
 800085c:	4b10      	ldr	r3, [pc, #64]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	2201      	movs	r2, #1
 8000862:	75da      	strb	r2, [r3, #23]
		break;
 8000864:	e014      	b.n	8000890 <Modbus_Protocal_Worker+0x1f0>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000866:	4b0e      	ldr	r3, [pc, #56]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	68db      	ldr	r3, [r3, #12]
 800086c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000870:	2b20      	cmp	r3, #32
 8000872:	d10f      	bne.n	8000894 <Modbus_Protocal_Worker+0x1f4>
			hModbus->TxCount=0;
 8000874:	4b0a      	ldr	r3, [pc, #40]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	2200      	movs	r2, #0
 800087a:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
			hModbus->Mstatus = Modbus_state_Idle;
 800087e:	4b08      	ldr	r3, [pc, #32]	@ (80008a0 <Modbus_Protocal_Worker+0x200>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2201      	movs	r2, #1
 8000884:	75da      	strb	r2, [r3, #23]
		break;
 8000886:	e005      	b.n	8000894 <Modbus_Protocal_Worker+0x1f4>
		break;
 8000888:	bf00      	nop
 800088a:	e004      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
		break;
 800088c:	bf00      	nop
 800088e:	e002      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
		break;
 8000890:	bf00      	nop
 8000892:	e000      	b.n	8000896 <Modbus_Protocal_Worker+0x1f6>
		break;
 8000894:	bf00      	nop
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	2000022c 	.word	0x2000022c

080008a4 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80008aa:	4b1d      	ldr	r3, [pc, #116]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	7e5b      	ldrb	r3, [r3, #25]
 80008b0:	021b      	lsls	r3, r3, #8
 80008b2:	b29b      	uxth	r3, r3
 80008b4:	4a1a      	ldr	r2, [pc, #104]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008b6:	6812      	ldr	r2, [r2, #0]
 80008b8:	7e92      	ldrb	r2, [r2, #26]
 80008ba:	4413      	add	r3, r2
 80008bc:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80008be:	88fa      	ldrh	r2, [r7, #6]
 80008c0:	4b17      	ldr	r3, [pc, #92]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	429a      	cmp	r2, r3
 80008c8:	d903      	bls.n	80008d2 <modbusWrite1Register+0x2e>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80008ca:	2002      	movs	r0, #2
 80008cc:	f000 f8a0 	bl	8000a10 <ModbusErrorReply>
			 return;
 80008d0:	e023      	b.n	800091a <modbusWrite1Register+0x76>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 80008d2:	4b13      	ldr	r3, [pc, #76]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	4b12      	ldr	r3, [pc, #72]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	6859      	ldr	r1, [r3, #4]
 80008dc:	88fb      	ldrh	r3, [r7, #6]
 80008de:	005b      	lsls	r3, r3, #1
 80008e0:	440b      	add	r3, r1
 80008e2:	7ed2      	ldrb	r2, [r2, #27]
 80008e4:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80008e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	4b0d      	ldr	r3, [pc, #52]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	6859      	ldr	r1, [r3, #4]
 80008f0:	88fb      	ldrh	r3, [r7, #6]
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	440b      	add	r3, r1
 80008f6:	7f12      	ldrb	r2, [r2, #28]
 80008f8:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <modbusWrite1Register+0x7c>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f503 70a2 	add.w	r0, r3, #324	@ 0x144
			hModbus->Rxframe,
 8000902:	4b07      	ldr	r3, [pc, #28]	@ (8000920 <modbusWrite1Register+0x7c>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	3318      	adds	r3, #24
	memcpy(hModbus->Txframe,
 8000908:	2208      	movs	r2, #8
 800090a:	4619      	mov	r1, r3
 800090c:	f005 fd6c 	bl	80063e8 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8000910:	4b03      	ldr	r3, [pc, #12]	@ (8000920 <modbusWrite1Register+0x7c>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2205      	movs	r2, #5
 8000916:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270



}
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	2000022c 	.word	0x2000022c

08000924 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8000924:	b590      	push	{r4, r7, lr}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800092a:	4b38      	ldr	r3, [pc, #224]	@ (8000a0c <modbusRead1Register+0xe8>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	7edb      	ldrb	r3, [r3, #27]
 8000930:	021b      	lsls	r3, r3, #8
 8000932:	b29b      	uxth	r3, r3
 8000934:	4a35      	ldr	r2, [pc, #212]	@ (8000a0c <modbusRead1Register+0xe8>)
 8000936:	6812      	ldr	r2, [r2, #0]
 8000938:	7f12      	ldrb	r2, [r2, #28]
 800093a:	4413      	add	r3, r2
 800093c:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 800093e:	4b33      	ldr	r3, [pc, #204]	@ (8000a0c <modbusRead1Register+0xe8>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	7e5b      	ldrb	r3, [r3, #25]
 8000944:	021b      	lsls	r3, r3, #8
 8000946:	b29b      	uxth	r3, r3
 8000948:	4a30      	ldr	r2, [pc, #192]	@ (8000a0c <modbusRead1Register+0xe8>)
 800094a:	6812      	ldr	r2, [r2, #0]
 800094c:	7e92      	ldrb	r2, [r2, #26]
 800094e:	4413      	add	r3, r2
 8000950:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 8000952:	88fb      	ldrh	r3, [r7, #6]
 8000954:	2b00      	cmp	r3, #0
 8000956:	d002      	beq.n	800095e <modbusRead1Register+0x3a>
 8000958:	88fb      	ldrh	r3, [r7, #6]
 800095a:	2b7d      	cmp	r3, #125	@ 0x7d
 800095c:	d903      	bls.n	8000966 <modbusRead1Register+0x42>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800095e:	2003      	movs	r0, #3
 8000960:	f000 f856 	bl	8000a10 <ModbusErrorReply>
		 return;
 8000964:	e04e      	b.n	8000a04 <modbusRead1Register+0xe0>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 8000966:	88ba      	ldrh	r2, [r7, #4]
 8000968:	4b28      	ldr	r3, [pc, #160]	@ (8000a0c <modbusRead1Register+0xe8>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	689b      	ldr	r3, [r3, #8]
 800096e:	429a      	cmp	r2, r3
 8000970:	d808      	bhi.n	8000984 <modbusRead1Register+0x60>
 8000972:	88ba      	ldrh	r2, [r7, #4]
 8000974:	88fb      	ldrh	r3, [r7, #6]
 8000976:	4413      	add	r3, r2
 8000978:	461a      	mov	r2, r3
 800097a:	4b24      	ldr	r3, [pc, #144]	@ (8000a0c <modbusRead1Register+0xe8>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	429a      	cmp	r2, r3
 8000982:	d903      	bls.n	800098c <modbusRead1Register+0x68>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 8000984:	2002      	movs	r0, #2
 8000986:	f000 f843 	bl	8000a10 <ModbusErrorReply>
		 return;
 800098a:	e03b      	b.n	8000a04 <modbusRead1Register+0xe0>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 800098c:	4b1f      	ldr	r3, [pc, #124]	@ (8000a0c <modbusRead1Register+0xe8>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	2203      	movs	r2, #3
 8000992:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 8000996:	88fb      	ldrh	r3, [r7, #6]
 8000998:	b2da      	uxtb	r2, r3
 800099a:	4b1c      	ldr	r3, [pc, #112]	@ (8000a0c <modbusRead1Register+0xe8>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	0052      	lsls	r2, r2, #1
 80009a0:	b2d2      	uxtb	r2, r2
 80009a2:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80009a6:	2400      	movs	r4, #0
 80009a8:	e020      	b.n	80009ec <modbusRead1Register+0xc8>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80009aa:	4b18      	ldr	r3, [pc, #96]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	685a      	ldr	r2, [r3, #4]
 80009b0:	88bb      	ldrh	r3, [r7, #4]
 80009b2:	4423      	add	r3, r4
 80009b4:	005b      	lsls	r3, r3, #1
 80009b6:	18d1      	adds	r1, r2, r3
 80009b8:	4b14      	ldr	r3, [pc, #80]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009ba:	681a      	ldr	r2, [r3, #0]
 80009bc:	1c63      	adds	r3, r4, #1
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	7849      	ldrb	r1, [r1, #1]
 80009c2:	4413      	add	r3, r2
 80009c4:	460a      	mov	r2, r1
 80009c6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 80009ca:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	685a      	ldr	r2, [r3, #4]
 80009d0:	88bb      	ldrh	r3, [r7, #4]
 80009d2:	4423      	add	r3, r4
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	18d1      	adds	r1, r2, r3
 80009d8:	4b0c      	ldr	r3, [pc, #48]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009da:	681a      	ldr	r2, [r3, #0]
 80009dc:	0063      	lsls	r3, r4, #1
 80009de:	3303      	adds	r3, #3
 80009e0:	7809      	ldrb	r1, [r1, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	460a      	mov	r2, r1
 80009e6:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	for(i=0; i<numberOfDataToRead;i++)
 80009ea:	3401      	adds	r4, #1
 80009ec:	88fb      	ldrh	r3, [r7, #6]
 80009ee:	429c      	cmp	r4, r3
 80009f0:	dbdb      	blt.n	80009aa <modbusRead1Register+0x86>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80009f2:	88fb      	ldrh	r3, [r7, #6]
 80009f4:	3301      	adds	r3, #1
 80009f6:	b2da      	uxtb	r2, r3
 80009f8:	4b04      	ldr	r3, [pc, #16]	@ (8000a0c <modbusRead1Register+0xe8>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	0052      	lsls	r2, r2, #1
 80009fe:	b2d2      	uxtb	r2, r2
 8000a00:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270

}
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd90      	pop	{r4, r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	2000022c 	.word	0x2000022c

08000a10 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = hModbus->Rxframe[0] | 0x80;
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a50 <ModbusErrorReply+0x40>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	7e1a      	ldrb	r2, [r3, #24]
 8000a20:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <ModbusErrorReply+0x40>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8000a28:	b2d2      	uxtb	r2, r2
 8000a2a:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
	hModbus->Txframe[1] = Errorcode;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <ModbusErrorReply+0x40>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	79fa      	ldrb	r2, [r7, #7]
 8000a34:	f883 2145 	strb.w	r2, [r3, #325]	@ 0x145
	hModbus->TxCount = 2;
 8000a38:	4b05      	ldr	r3, [pc, #20]	@ (8000a50 <ModbusErrorReply+0x40>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	2202      	movs	r2, #2
 8000a3e:	f883 2270 	strb.w	r2, [r3, #624]	@ 0x270
}
 8000a42:	bf00      	nop
 8000a44:	370c      	adds	r7, #12
 8000a46:	46bd      	mov	sp, r7
 8000a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4c:	4770      	bx	lr
 8000a4e:	bf00      	nop
 8000a50:	2000022c 	.word	0x2000022c

08000a54 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8000a58:	4b09      	ldr	r3, [pc, #36]	@ (8000a80 <Modbus_frame_response+0x2c>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	7e1b      	ldrb	r3, [r3, #24]
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	d004      	beq.n	8000a6c <Modbus_frame_response+0x18>
 8000a62:	2b06      	cmp	r3, #6
 8000a64:	d105      	bne.n	8000a72 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8000a66:	f7ff ff1d 	bl	80008a4 <modbusWrite1Register>
		break;
 8000a6a:	e006      	b.n	8000a7a <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8000a6c:	f7ff ff5a 	bl	8000924 <modbusRead1Register>
		break;
 8000a70:	e003      	b.n	8000a7a <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 8000a72:	2001      	movs	r0, #1
 8000a74:	f7ff ffcc 	bl	8000a10 <ModbusErrorReply>
		break;
 8000a78:	bf00      	nop

	}
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	2000022c 	.word	0x2000022c

08000a84 <Modbus_Emission>:

void Modbus_Emission()
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b082      	sub	sp, #8
 8000a88:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000a8a:	4b38      	ldr	r3, [pc, #224]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a94:	2b20      	cmp	r3, #32
 8000a96:	d15d      	bne.n	8000b54 <Modbus_Emission+0xd0>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8000a98:	4b34      	ldr	r3, [pc, #208]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000a9a:	681a      	ldr	r2, [r3, #0]
 8000a9c:	4b33      	ldr	r3, [pc, #204]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	7812      	ldrb	r2, [r2, #0]
 8000aa2:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8000aa6:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f503 7369 	add.w	r3, r3, #932	@ 0x3a4
		memcpy
 8000aae:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	f503 71a2 	add.w	r1, r3, #324	@ 0x144
				hModbus->TxCount
 8000ab8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
		memcpy
 8000ac0:	461a      	mov	r2, r3
 8000ac2:	f005 fc91 	bl	80063e8 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8000ac6:	4b29      	ldr	r3, [pc, #164]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f893 3270 	ldrb.w	r3, [r3, #624]	@ 0x270
 8000ace:	461a      	mov	r2, r3
 8000ad0:	4b26      	ldr	r3, [pc, #152]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	3203      	adds	r2, #3
 8000ad6:	b292      	uxth	r2, r2
 8000ad8:	f8a3 24d4 	strh.w	r2, [r3, #1236]	@ 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000adc:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	f503 7269 	add.w	r2, r3, #932	@ 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 8000aec:	3b02      	subs	r3, #2
 8000aee:	4619      	mov	r1, r3
 8000af0:	4610      	mov	r0, r2
 8000af2:	f7ff fd9f 	bl	8000634 <CRC16>
 8000af6:	4603      	mov	r3, r0
 8000af8:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 8000afa:	4b1c      	ldr	r3, [pc, #112]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000b06:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 8000b08:	7939      	ldrb	r1, [r7, #4]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	460a      	mov	r2, r1
 8000b0e:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8000b12:	4b16      	ldr	r3, [pc, #88]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000b1e:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8000b20:	7979      	ldrb	r1, [r7, #5]
 8000b22:	4413      	add	r3, r2
 8000b24:	460a      	mov	r2, r1
 8000b26:	f883 23a4 	strb.w	r2, [r3, #932]	@ 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8000b2a:	4b10      	ldr	r3, [pc, #64]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b34:	2b20      	cmp	r3, #32
 8000b36:	d10d      	bne.n	8000b54 <Modbus_Emission+0xd0>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 8000b38:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8000b3e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f503 7169 	add.w	r1, r3, #932	@ 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8000b46:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b48:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 8000b4a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	@ 0x4d4
 8000b4e:	461a      	mov	r2, r3
 8000b50:	f003 fe44 	bl	80047dc <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8000b54:	4b05      	ldr	r3, [pc, #20]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8000b5c:	4b03      	ldr	r3, [pc, #12]	@ (8000b6c <Modbus_Emission+0xe8>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2200      	movs	r2, #0
 8000b62:	755a      	strb	r2, [r3, #21]

}
 8000b64:	bf00      	nop
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	2000022c 	.word	0x2000022c

08000b70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b74:	f000 fd67 	bl	8001646 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b78:	f000 f930 	bl	8000ddc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7c:	f000 fa78 	bl	8001070 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b80:	f000 fa44 	bl	800100c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000b84:	f000 f9f4 	bl	8000f70 <MX_USART2_UART_Init>
  MX_TIM16_Init();
 8000b88:	f000 f9c2 	bl	8000f10 <MX_TIM16_Init>
  MX_TIM5_Init();
 8000b8c:	f000 f972 	bl	8000e74 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  hmodbus.huart = &huart2;
 8000b90:	4b82      	ldr	r3, [pc, #520]	@ (8000d9c <main+0x22c>)
 8000b92:	4a83      	ldr	r2, [pc, #524]	@ (8000da0 <main+0x230>)
 8000b94:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim16;
 8000b96:	4b81      	ldr	r3, [pc, #516]	@ (8000d9c <main+0x22c>)
 8000b98:	4a82      	ldr	r2, [pc, #520]	@ (8000da4 <main+0x234>)
 8000b9a:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 8000b9c:	4b7f      	ldr	r3, [pc, #508]	@ (8000d9c <main+0x22c>)
 8000b9e:	2215      	movs	r2, #21
 8000ba0:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize =200;
 8000ba2:	4b7e      	ldr	r3, [pc, #504]	@ (8000d9c <main+0x22c>)
 8000ba4:	22c8      	movs	r2, #200	@ 0xc8
 8000ba6:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8000ba8:	497f      	ldr	r1, [pc, #508]	@ (8000da8 <main+0x238>)
 8000baa:	487c      	ldr	r0, [pc, #496]	@ (8000d9c <main+0x22c>)
 8000bac:	f7ff fcec 	bl	8000588 <Modbus_init>

  HAL_TIM_Base_Start_IT(&htim5);
 8000bb0:	487e      	ldr	r0, [pc, #504]	@ (8000dac <main+0x23c>)
 8000bb2:	f002 fc6f 	bl	8003494 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	Modbus_Protocal_Worker();
 8000bb6:	f7ff fd73 	bl	80006a0 <Modbus_Protocal_Worker>

	ShelvePos[0] = 1;
 8000bba:	4b7d      	ldr	r3, [pc, #500]	@ (8000db0 <main+0x240>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	801a      	strh	r2, [r3, #0]
	ShelvePos[1] = 2;
 8000bc0:	4b7b      	ldr	r3, [pc, #492]	@ (8000db0 <main+0x240>)
 8000bc2:	2202      	movs	r2, #2
 8000bc4:	805a      	strh	r2, [r3, #2]
	ShelvePos[2] = 3;
 8000bc6:	4b7a      	ldr	r3, [pc, #488]	@ (8000db0 <main+0x240>)
 8000bc8:	2203      	movs	r2, #3
 8000bca:	809a      	strh	r2, [r3, #4]
	ShelvePos[3] = 4;
 8000bcc:	4b78      	ldr	r3, [pc, #480]	@ (8000db0 <main+0x240>)
 8000bce:	2204      	movs	r2, #4
 8000bd0:	80da      	strh	r2, [r3, #6]
	ShelvePos[4] = 5;
 8000bd2:	4b77      	ldr	r3, [pc, #476]	@ (8000db0 <main+0x240>)
 8000bd4:	2205      	movs	r2, #5
 8000bd6:	811a      	strh	r2, [r3, #8]
//	Z[0] = 1;  //ZPos
//	Z[1] = 2;  //ZSpeed
//	Z[2] = 3;  //ZAccel
//	Z[3] = 4;  //XPos

	Vacuum = registerFrame[2].U16; // 0 = off , 1 = on
 8000bd8:	4b73      	ldr	r3, [pc, #460]	@ (8000da8 <main+0x238>)
 8000bda:	889b      	ldrh	r3, [r3, #4]
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	4b75      	ldr	r3, [pc, #468]	@ (8000db4 <main+0x244>)
 8000be0:	701a      	strb	r2, [r3, #0]
	Gripper = registerFrame[3].U16; // 0 = Backward , 1 = Forward
 8000be2:	4b71      	ldr	r3, [pc, #452]	@ (8000da8 <main+0x238>)
 8000be4:	88db      	ldrh	r3, [r3, #6]
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	4b73      	ldr	r3, [pc, #460]	@ (8000db8 <main+0x248>)
 8000bea:	701a      	strb	r2, [r3, #0]
	registerFrame[0x11].U16 =Z[0];
 8000bec:	4b73      	ldr	r3, [pc, #460]	@ (8000dbc <main+0x24c>)
 8000bee:	881a      	ldrh	r2, [r3, #0]
 8000bf0:	4b6d      	ldr	r3, [pc, #436]	@ (8000da8 <main+0x238>)
 8000bf2:	845a      	strh	r2, [r3, #34]	@ 0x22
	registerFrame[0x12].U16 =Z[1];
 8000bf4:	4b71      	ldr	r3, [pc, #452]	@ (8000dbc <main+0x24c>)
 8000bf6:	885a      	ldrh	r2, [r3, #2]
 8000bf8:	4b6b      	ldr	r3, [pc, #428]	@ (8000da8 <main+0x238>)
 8000bfa:	849a      	strh	r2, [r3, #36]	@ 0x24
	registerFrame[0x13].U16 =Z[2];
 8000bfc:	4b6f      	ldr	r3, [pc, #444]	@ (8000dbc <main+0x24c>)
 8000bfe:	889a      	ldrh	r2, [r3, #4]
 8000c00:	4b69      	ldr	r3, [pc, #420]	@ (8000da8 <main+0x238>)
 8000c02:	84da      	strh	r2, [r3, #38]	@ 0x26
	registerFrame[0x40].U16 =Z[3];
 8000c04:	4b6d      	ldr	r3, [pc, #436]	@ (8000dbc <main+0x24c>)
 8000c06:	88da      	ldrh	r2, [r3, #6]
 8000c08:	4b67      	ldr	r3, [pc, #412]	@ (8000da8 <main+0x238>)
 8000c0a:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80


	//Set Shelves
	if (registerFrame[0x01].U16 == 1){
 8000c0e:	4b66      	ldr	r3, [pc, #408]	@ (8000da8 <main+0x238>)
 8000c10:	885b      	ldrh	r3, [r3, #2]
 8000c12:	2b01      	cmp	r3, #1
 8000c14:	d121      	bne.n	8000c5a <main+0xea>
		registerFrame[0x01].U16 = 0;
 8000c16:	4b64      	ldr	r3, [pc, #400]	@ (8000da8 <main+0x238>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 1;
 8000c1c:	4b62      	ldr	r3, [pc, #392]	@ (8000da8 <main+0x238>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	841a      	strh	r2, [r3, #32]
		registerFrame[0x23].U16 = ShelvePos[0];
 8000c22:	4b63      	ldr	r3, [pc, #396]	@ (8000db0 <main+0x240>)
 8000c24:	881a      	ldrh	r2, [r3, #0]
 8000c26:	4b60      	ldr	r3, [pc, #384]	@ (8000da8 <main+0x238>)
 8000c28:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
		registerFrame[0x24].U16 = ShelvePos[1];
 8000c2c:	4b60      	ldr	r3, [pc, #384]	@ (8000db0 <main+0x240>)
 8000c2e:	885a      	ldrh	r2, [r3, #2]
 8000c30:	4b5d      	ldr	r3, [pc, #372]	@ (8000da8 <main+0x238>)
 8000c32:	f8a3 2048 	strh.w	r2, [r3, #72]	@ 0x48
		registerFrame[0x25].U16 = ShelvePos[2];
 8000c36:	4b5e      	ldr	r3, [pc, #376]	@ (8000db0 <main+0x240>)
 8000c38:	889a      	ldrh	r2, [r3, #4]
 8000c3a:	4b5b      	ldr	r3, [pc, #364]	@ (8000da8 <main+0x238>)
 8000c3c:	f8a3 204a 	strh.w	r2, [r3, #74]	@ 0x4a
		registerFrame[0x26].U16 = ShelvePos[3];
 8000c40:	4b5b      	ldr	r3, [pc, #364]	@ (8000db0 <main+0x240>)
 8000c42:	88da      	ldrh	r2, [r3, #6]
 8000c44:	4b58      	ldr	r3, [pc, #352]	@ (8000da8 <main+0x238>)
 8000c46:	f8a3 204c 	strh.w	r2, [r3, #76]	@ 0x4c
		registerFrame[0x27].U16 = ShelvePos[4];
 8000c4a:	4b59      	ldr	r3, [pc, #356]	@ (8000db0 <main+0x240>)
 8000c4c:	891a      	ldrh	r2, [r3, #8]
 8000c4e:	4b56      	ldr	r3, [pc, #344]	@ (8000da8 <main+0x238>)
 8000c50:	f8a3 204e 	strh.w	r2, [r3, #78]	@ 0x4e
		registerFrame[0x10].U16 = 0;
 8000c54:	4b54      	ldr	r3, [pc, #336]	@ (8000da8 <main+0x238>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	841a      	strh	r2, [r3, #32]
	}

	//Set Home
	if(registerFrame[0x01].U16 == 2){
 8000c5a:	4b53      	ldr	r3, [pc, #332]	@ (8000da8 <main+0x238>)
 8000c5c:	885b      	ldrh	r3, [r3, #2]
 8000c5e:	2b02      	cmp	r3, #2
 8000c60:	d107      	bne.n	8000c72 <main+0x102>
		registerFrame[0x01].U16 = 0;
 8000c62:	4b51      	ldr	r3, [pc, #324]	@ (8000da8 <main+0x238>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 2;
 8000c68:	4b4f      	ldr	r3, [pc, #316]	@ (8000da8 <main+0x238>)
 8000c6a:	2202      	movs	r2, #2
 8000c6c:	841a      	strh	r2, [r3, #32]
		HomeGoTo();
 8000c6e:	f000 fa6d 	bl	800114c <HomeGoTo>
	}

	//Run Jog Mode
	if(registerFrame[0x01].U16 == 4){
 8000c72:	4b4d      	ldr	r3, [pc, #308]	@ (8000da8 <main+0x238>)
 8000c74:	885b      	ldrh	r3, [r3, #2]
 8000c76:	2b04      	cmp	r3, #4
 8000c78:	d116      	bne.n	8000ca8 <main+0x138>
		PickOrder = convert_to_string(registerFrame[0x21].U16);
 8000c7a:	4b4b      	ldr	r3, [pc, #300]	@ (8000da8 <main+0x238>)
 8000c7c:	f8b3 3042 	ldrh.w	r3, [r3, #66]	@ 0x42
 8000c80:	4618      	mov	r0, r3
 8000c82:	f000 fac7 	bl	8001214 <convert_to_string>
 8000c86:	4603      	mov	r3, r0
 8000c88:	4a4d      	ldr	r2, [pc, #308]	@ (8000dc0 <main+0x250>)
 8000c8a:	6013      	str	r3, [r2, #0]
		PlaceOrder = convert_to_string(registerFrame[0x22].U16);
 8000c8c:	4b46      	ldr	r3, [pc, #280]	@ (8000da8 <main+0x238>)
 8000c8e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000c92:	4618      	mov	r0, r3
 8000c94:	f000 fabe 	bl	8001214 <convert_to_string>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	4a4a      	ldr	r2, [pc, #296]	@ (8000dc4 <main+0x254>)
 8000c9c:	6013      	str	r3, [r2, #0]

		registerFrame[0x01].U16 = 0;
 8000c9e:	4b42      	ldr	r3, [pc, #264]	@ (8000da8 <main+0x238>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	805a      	strh	r2, [r3, #2]
		JogModeGoTo();
 8000ca4:	f000 fa62 	bl	800116c <JogModeGoTo>
	}

	//Run Point Mode
	if(registerFrame[0x01].U16 == 8){
 8000ca8:	4b3f      	ldr	r3, [pc, #252]	@ (8000da8 <main+0x238>)
 8000caa:	885b      	ldrh	r3, [r3, #2]
 8000cac:	2b08      	cmp	r3, #8
 8000cae:	d107      	bne.n	8000cc0 <main+0x150>
		registerFrame[0x01].U16 = 0;
 8000cb0:	4b3d      	ldr	r3, [pc, #244]	@ (8000da8 <main+0x238>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	805a      	strh	r2, [r3, #2]
		registerFrame[0x10].U16 = 16;
 8000cb6:	4b3c      	ldr	r3, [pc, #240]	@ (8000da8 <main+0x238>)
 8000cb8:	2210      	movs	r2, #16
 8000cba:	841a      	strh	r2, [r3, #32]
		PointModeGoTo();
 8000cbc:	f000 fa9a 	bl	80011f4 <PointModeGoTo>
	}

	if(Z[0] == Goal && registerFrame[0x10].U16 != 4){
 8000cc0:	4b3e      	ldr	r3, [pc, #248]	@ (8000dbc <main+0x24c>)
 8000cc2:	881a      	ldrh	r2, [r3, #0]
 8000cc4:	4b40      	ldr	r3, [pc, #256]	@ (8000dc8 <main+0x258>)
 8000cc6:	881b      	ldrh	r3, [r3, #0]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	d106      	bne.n	8000cda <main+0x16a>
 8000ccc:	4b36      	ldr	r3, [pc, #216]	@ (8000da8 <main+0x238>)
 8000cce:	8c1b      	ldrh	r3, [r3, #32]
 8000cd0:	2b04      	cmp	r3, #4
 8000cd2:	d002      	beq.n	8000cda <main+0x16a>
		registerFrame[0x10].U16 = 0;
 8000cd4:	4b34      	ldr	r3, [pc, #208]	@ (8000da8 <main+0x238>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	841a      	strh	r2, [r3, #32]
	}

	if(registerFrame[0x10].U16 == 4){
 8000cda:	4b33      	ldr	r3, [pc, #204]	@ (8000da8 <main+0x238>)
 8000cdc:	8c1b      	ldrh	r3, [r3, #32]
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	f47f af69 	bne.w	8000bb6 <main+0x46>

		if (j < 5 && PStatue == 1){
 8000ce4:	4b39      	ldr	r3, [pc, #228]	@ (8000dcc <main+0x25c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b04      	cmp	r3, #4
 8000cea:	dc1f      	bgt.n	8000d2c <main+0x1bc>
 8000cec:	4b38      	ldr	r3, [pc, #224]	@ (8000dd0 <main+0x260>)
 8000cee:	781b      	ldrb	r3, [r3, #0]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d11b      	bne.n	8000d2c <main+0x1bc>
			Goal = GoalPick[j];
 8000cf4:	4b35      	ldr	r3, [pc, #212]	@ (8000dcc <main+0x25c>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a36      	ldr	r2, [pc, #216]	@ (8000dd4 <main+0x264>)
 8000cfa:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000cfe:	4b32      	ldr	r3, [pc, #200]	@ (8000dc8 <main+0x258>)
 8000d00:	801a      	strh	r2, [r3, #0]
			if(Z[0] == Goal && Gripper == 1 && Vacuum == 1){
 8000d02:	4b2e      	ldr	r3, [pc, #184]	@ (8000dbc <main+0x24c>)
 8000d04:	881a      	ldrh	r2, [r3, #0]
 8000d06:	4b30      	ldr	r3, [pc, #192]	@ (8000dc8 <main+0x258>)
 8000d08:	881b      	ldrh	r3, [r3, #0]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d13b      	bne.n	8000d86 <main+0x216>
 8000d0e:	4b2a      	ldr	r3, [pc, #168]	@ (8000db8 <main+0x248>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	2b01      	cmp	r3, #1
 8000d14:	d137      	bne.n	8000d86 <main+0x216>
 8000d16:	4b27      	ldr	r3, [pc, #156]	@ (8000db4 <main+0x244>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b01      	cmp	r3, #1
 8000d1c:	d133      	bne.n	8000d86 <main+0x216>
				HAL_Delay(10);	//Vacuum and Gripper Operation Time
 8000d1e:	200a      	movs	r0, #10
 8000d20:	f000 fd02 	bl	8001728 <HAL_Delay>
				PStatue = 2;
 8000d24:	4b2a      	ldr	r3, [pc, #168]	@ (8000dd0 <main+0x260>)
 8000d26:	2202      	movs	r2, #2
 8000d28:	701a      	strb	r2, [r3, #0]
			if(Z[0] == Goal && Gripper == 1 && Vacuum == 1){
 8000d2a:	e02c      	b.n	8000d86 <main+0x216>
			}
		}else if(j < 5 && PStatue == 2){
 8000d2c:	4b27      	ldr	r3, [pc, #156]	@ (8000dcc <main+0x25c>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b04      	cmp	r3, #4
 8000d32:	dc29      	bgt.n	8000d88 <main+0x218>
 8000d34:	4b26      	ldr	r3, [pc, #152]	@ (8000dd0 <main+0x260>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d125      	bne.n	8000d88 <main+0x218>
			if(Gripper == 0){
 8000d3c:	4b1e      	ldr	r3, [pc, #120]	@ (8000db8 <main+0x248>)
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d106      	bne.n	8000d52 <main+0x1e2>
				Goal = GoalPlace[j];
 8000d44:	4b21      	ldr	r3, [pc, #132]	@ (8000dcc <main+0x25c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a23      	ldr	r2, [pc, #140]	@ (8000dd8 <main+0x268>)
 8000d4a:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000dc8 <main+0x258>)
 8000d50:	801a      	strh	r2, [r3, #0]
			}
			if(Z[0] == Goal && Gripper == 1 && Vacuum == 0){
 8000d52:	4b1a      	ldr	r3, [pc, #104]	@ (8000dbc <main+0x24c>)
 8000d54:	881a      	ldrh	r2, [r3, #0]
 8000d56:	4b1c      	ldr	r3, [pc, #112]	@ (8000dc8 <main+0x258>)
 8000d58:	881b      	ldrh	r3, [r3, #0]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d114      	bne.n	8000d88 <main+0x218>
 8000d5e:	4b16      	ldr	r3, [pc, #88]	@ (8000db8 <main+0x248>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d110      	bne.n	8000d88 <main+0x218>
 8000d66:	4b13      	ldr	r3, [pc, #76]	@ (8000db4 <main+0x244>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d10c      	bne.n	8000d88 <main+0x218>
				HAL_Delay(10);  //Vacuum and Gripper Operation Time
 8000d6e:	200a      	movs	r0, #10
 8000d70:	f000 fcda 	bl	8001728 <HAL_Delay>
				PStatue = 1;
 8000d74:	4b16      	ldr	r3, [pc, #88]	@ (8000dd0 <main+0x260>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	701a      	strb	r2, [r3, #0]
				j += 1;
 8000d7a:	4b14      	ldr	r3, [pc, #80]	@ (8000dcc <main+0x25c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	4a12      	ldr	r2, [pc, #72]	@ (8000dcc <main+0x25c>)
 8000d82:	6013      	str	r3, [r2, #0]
 8000d84:	e000      	b.n	8000d88 <main+0x218>
			if(Z[0] == Goal && Gripper == 1 && Vacuum == 1){
 8000d86:	bf00      	nop
			}
		}

		if(j==5){
 8000d88:	4b10      	ldr	r3, [pc, #64]	@ (8000dcc <main+0x25c>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	2b05      	cmp	r3, #5
 8000d8e:	f47f af12 	bne.w	8000bb6 <main+0x46>
			registerFrame[0x10].U16 = 0;
 8000d92:	4b05      	ldr	r3, [pc, #20]	@ (8000da8 <main+0x238>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	841a      	strh	r2, [r3, #32]
	Modbus_Protocal_Worker();
 8000d98:	e70d      	b.n	8000bb6 <main+0x46>
 8000d9a:	bf00      	nop
 8000d9c:	20000554 	.word	0x20000554
 8000da0:	200003c8 	.word	0x200003c8
 8000da4:	200002fc 	.word	0x200002fc
 8000da8:	20000a2c 	.word	0x20000a2c
 8000dac:	20000230 	.word	0x20000230
 8000db0:	20000bbc 	.word	0x20000bbc
 8000db4:	20000bd0 	.word	0x20000bd0
 8000db8:	20000bd1 	.word	0x20000bd1
 8000dbc:	20000bc8 	.word	0x20000bc8
 8000dc0:	20000bd4 	.word	0x20000bd4
 8000dc4:	20000bd8 	.word	0x20000bd8
 8000dc8:	20000bf2 	.word	0x20000bf2
 8000dcc:	20000bf4 	.word	0x20000bf4
 8000dd0:	20000bf8 	.word	0x20000bf8
 8000dd4:	20000bdc 	.word	0x20000bdc
 8000dd8:	20000be8 	.word	0x20000be8

08000ddc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b094      	sub	sp, #80	@ 0x50
 8000de0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000de2:	f107 0318 	add.w	r3, r7, #24
 8000de6:	2238      	movs	r2, #56	@ 0x38
 8000de8:	2100      	movs	r1, #0
 8000dea:	4618      	mov	r0, r3
 8000dec:	f005 fad0 	bl	8006390 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	2200      	movs	r2, #0
 8000df4:	601a      	str	r2, [r3, #0]
 8000df6:	605a      	str	r2, [r3, #4]
 8000df8:	609a      	str	r2, [r3, #8]
 8000dfa:	60da      	str	r2, [r3, #12]
 8000dfc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f001 fab4 	bl	800236c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e04:	2302      	movs	r3, #2
 8000e06:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e0e:	2340      	movs	r3, #64	@ 0x40
 8000e10:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e12:	2302      	movs	r3, #2
 8000e14:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e16:	2302      	movs	r3, #2
 8000e18:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000e1e:	2355      	movs	r3, #85	@ 0x55
 8000e20:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e22:	2302      	movs	r3, #2
 8000e24:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e26:	2302      	movs	r3, #2
 8000e28:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e2e:	f107 0318 	add.w	r3, r7, #24
 8000e32:	4618      	mov	r0, r3
 8000e34:	f001 fb4e 	bl	80024d4 <HAL_RCC_OscConfig>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e3e:	f000 fa35 	bl	80012ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e42:	230f      	movs	r3, #15
 8000e44:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e46:	2303      	movs	r3, #3
 8000e48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	2104      	movs	r1, #4
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f001 fe4c 	bl	8002af8 <HAL_RCC_ClockConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000e66:	f000 fa21 	bl	80012ac <Error_Handler>
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	3750      	adds	r7, #80	@ 0x50
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b088      	sub	sp, #32
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e7a:	f107 0310 	add.w	r3, r7, #16
 8000e7e:	2200      	movs	r2, #0
 8000e80:	601a      	str	r2, [r3, #0]
 8000e82:	605a      	str	r2, [r3, #4]
 8000e84:	609a      	str	r2, [r3, #8]
 8000e86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e92:	4b1d      	ldr	r3, [pc, #116]	@ (8000f08 <MX_TIM5_Init+0x94>)
 8000e94:	4a1d      	ldr	r2, [pc, #116]	@ (8000f0c <MX_TIM5_Init+0x98>)
 8000e96:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 8000e98:	4b1b      	ldr	r3, [pc, #108]	@ (8000f08 <MX_TIM5_Init+0x94>)
 8000e9a:	22a9      	movs	r2, #169	@ 0xa9
 8000e9c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f08 <MX_TIM5_Init+0x94>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4999;
 8000ea4:	4b18      	ldr	r3, [pc, #96]	@ (8000f08 <MX_TIM5_Init+0x94>)
 8000ea6:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000eaa:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eac:	4b16      	ldr	r3, [pc, #88]	@ (8000f08 <MX_TIM5_Init+0x94>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb2:	4b15      	ldr	r3, [pc, #84]	@ (8000f08 <MX_TIM5_Init+0x94>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000eb8:	4813      	ldr	r0, [pc, #76]	@ (8000f08 <MX_TIM5_Init+0x94>)
 8000eba:	f002 fa87 	bl	80033cc <HAL_TIM_Base_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8000ec4:	f000 f9f2 	bl	80012ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ecc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000ece:	f107 0310 	add.w	r3, r7, #16
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	480c      	ldr	r0, [pc, #48]	@ (8000f08 <MX_TIM5_Init+0x94>)
 8000ed6:	f002 fdc5 	bl	8003a64 <HAL_TIM_ConfigClockSource>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8000ee0:	f000 f9e4 	bl	80012ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	4619      	mov	r1, r3
 8000ef0:	4805      	ldr	r0, [pc, #20]	@ (8000f08 <MX_TIM5_Init+0x94>)
 8000ef2:	f003 fa73 	bl	80043dc <HAL_TIMEx_MasterConfigSynchronization>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d001      	beq.n	8000f00 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8000efc:	f000 f9d6 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000f00:	bf00      	nop
 8000f02:	3720      	adds	r7, #32
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20000230 	.word	0x20000230
 8000f0c:	40000c00 	.word	0x40000c00

08000f10 <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000f14:	4b14      	ldr	r3, [pc, #80]	@ (8000f68 <MX_TIM16_Init+0x58>)
 8000f16:	4a15      	ldr	r2, [pc, #84]	@ (8000f6c <MX_TIM16_Init+0x5c>)
 8000f18:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 169;
 8000f1a:	4b13      	ldr	r3, [pc, #76]	@ (8000f68 <MX_TIM16_Init+0x58>)
 8000f1c:	22a9      	movs	r2, #169	@ 0xa9
 8000f1e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f20:	4b11      	ldr	r3, [pc, #68]	@ (8000f68 <MX_TIM16_Init+0x58>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1145;
 8000f26:	4b10      	ldr	r3, [pc, #64]	@ (8000f68 <MX_TIM16_Init+0x58>)
 8000f28:	f240 4279 	movw	r2, #1145	@ 0x479
 8000f2c:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000f68 <MX_TIM16_Init+0x58>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8000f34:	4b0c      	ldr	r3, [pc, #48]	@ (8000f68 <MX_TIM16_Init+0x58>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8000f68 <MX_TIM16_Init+0x58>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8000f40:	4809      	ldr	r0, [pc, #36]	@ (8000f68 <MX_TIM16_Init+0x58>)
 8000f42:	f002 fa43 	bl	80033cc <HAL_TIM_Base_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8000f4c:	f000 f9ae 	bl	80012ac <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim16, TIM_OPMODE_SINGLE) != HAL_OK)
 8000f50:	2108      	movs	r1, #8
 8000f52:	4805      	ldr	r0, [pc, #20]	@ (8000f68 <MX_TIM16_Init+0x58>)
 8000f54:	f002 fb16 	bl	8003584 <HAL_TIM_OnePulse_Init>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM16_Init+0x52>
  {
    Error_Handler();
 8000f5e:	f000 f9a5 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8000f62:	bf00      	nop
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	200002fc 	.word	0x200002fc
 8000f6c:	40014400 	.word	0x40014400

08000f70 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f74:	4b23      	ldr	r3, [pc, #140]	@ (8001004 <MX_USART2_UART_Init+0x94>)
 8000f76:	4a24      	ldr	r2, [pc, #144]	@ (8001008 <MX_USART2_UART_Init+0x98>)
 8000f78:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8000f7a:	4b22      	ldr	r3, [pc, #136]	@ (8001004 <MX_USART2_UART_Init+0x94>)
 8000f7c:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 8000f80:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8000f82:	4b20      	ldr	r3, [pc, #128]	@ (8001004 <MX_USART2_UART_Init+0x94>)
 8000f84:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000f88:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001004 <MX_USART2_UART_Init+0x94>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8000f90:	4b1c      	ldr	r3, [pc, #112]	@ (8001004 <MX_USART2_UART_Init+0x94>)
 8000f92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f98:	4b1a      	ldr	r3, [pc, #104]	@ (8001004 <MX_USART2_UART_Init+0x94>)
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9e:	4b19      	ldr	r3, [pc, #100]	@ (8001004 <MX_USART2_UART_Init+0x94>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa4:	4b17      	ldr	r3, [pc, #92]	@ (8001004 <MX_USART2_UART_Init+0x94>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000faa:	4b16      	ldr	r3, [pc, #88]	@ (8001004 <MX_USART2_UART_Init+0x94>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000fb0:	4b14      	ldr	r3, [pc, #80]	@ (8001004 <MX_USART2_UART_Init+0x94>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fb6:	4b13      	ldr	r3, [pc, #76]	@ (8001004 <MX_USART2_UART_Init+0x94>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fbc:	4811      	ldr	r0, [pc, #68]	@ (8001004 <MX_USART2_UART_Init+0x94>)
 8000fbe:	f003 faf3 	bl	80045a8 <HAL_UART_Init>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_USART2_UART_Init+0x5c>
  {
    Error_Handler();
 8000fc8:	f000 f970 	bl	80012ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fcc:	2100      	movs	r1, #0
 8000fce:	480d      	ldr	r0, [pc, #52]	@ (8001004 <MX_USART2_UART_Init+0x94>)
 8000fd0:	f005 f913 	bl	80061fa <HAL_UARTEx_SetTxFifoThreshold>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_USART2_UART_Init+0x6e>
  {
    Error_Handler();
 8000fda:	f000 f967 	bl	80012ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4808      	ldr	r0, [pc, #32]	@ (8001004 <MX_USART2_UART_Init+0x94>)
 8000fe2:	f005 f948 	bl	8006276 <HAL_UARTEx_SetRxFifoThreshold>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_USART2_UART_Init+0x80>
  {
    Error_Handler();
 8000fec:	f000 f95e 	bl	80012ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000ff0:	4804      	ldr	r0, [pc, #16]	@ (8001004 <MX_USART2_UART_Init+0x94>)
 8000ff2:	f005 f8c9 	bl	8006188 <HAL_UARTEx_DisableFifoMode>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_USART2_UART_Init+0x90>
  {
    Error_Handler();
 8000ffc:	f000 f956 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001000:	bf00      	nop
 8001002:	bd80      	pop	{r7, pc}
 8001004:	200003c8 	.word	0x200003c8
 8001008:	40004400 	.word	0x40004400

0800100c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001012:	4b16      	ldr	r3, [pc, #88]	@ (800106c <MX_DMA_Init+0x60>)
 8001014:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001016:	4a15      	ldr	r2, [pc, #84]	@ (800106c <MX_DMA_Init+0x60>)
 8001018:	f043 0304 	orr.w	r3, r3, #4
 800101c:	6493      	str	r3, [r2, #72]	@ 0x48
 800101e:	4b13      	ldr	r3, [pc, #76]	@ (800106c <MX_DMA_Init+0x60>)
 8001020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001022:	f003 0304 	and.w	r3, r3, #4
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800102a:	4b10      	ldr	r3, [pc, #64]	@ (800106c <MX_DMA_Init+0x60>)
 800102c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800102e:	4a0f      	ldr	r2, [pc, #60]	@ (800106c <MX_DMA_Init+0x60>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	6493      	str	r3, [r2, #72]	@ 0x48
 8001036:	4b0d      	ldr	r3, [pc, #52]	@ (800106c <MX_DMA_Init+0x60>)
 8001038:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	603b      	str	r3, [r7, #0]
 8001040:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001042:	2200      	movs	r2, #0
 8001044:	2100      	movs	r1, #0
 8001046:	200b      	movs	r0, #11
 8001048:	f000 fc6b 	bl	8001922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800104c:	200b      	movs	r0, #11
 800104e:	f000 fc82 	bl	8001956 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001052:	2200      	movs	r2, #0
 8001054:	2100      	movs	r1, #0
 8001056:	200c      	movs	r0, #12
 8001058:	f000 fc63 	bl	8001922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800105c:	200c      	movs	r0, #12
 800105e:	f000 fc7a 	bl	8001956 <HAL_NVIC_EnableIRQ>

}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	40021000 	.word	0x40021000

08001070 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	@ 0x28
 8001074:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001076:	f107 0314 	add.w	r3, r7, #20
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]
 8001080:	609a      	str	r2, [r3, #8]
 8001082:	60da      	str	r2, [r3, #12]
 8001084:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001086:	4b2f      	ldr	r3, [pc, #188]	@ (8001144 <MX_GPIO_Init+0xd4>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800108a:	4a2e      	ldr	r2, [pc, #184]	@ (8001144 <MX_GPIO_Init+0xd4>)
 800108c:	f043 0304 	orr.w	r3, r3, #4
 8001090:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001092:	4b2c      	ldr	r3, [pc, #176]	@ (8001144 <MX_GPIO_Init+0xd4>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001096:	f003 0304 	and.w	r3, r3, #4
 800109a:	613b      	str	r3, [r7, #16]
 800109c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800109e:	4b29      	ldr	r3, [pc, #164]	@ (8001144 <MX_GPIO_Init+0xd4>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010a2:	4a28      	ldr	r2, [pc, #160]	@ (8001144 <MX_GPIO_Init+0xd4>)
 80010a4:	f043 0320 	orr.w	r3, r3, #32
 80010a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010aa:	4b26      	ldr	r3, [pc, #152]	@ (8001144 <MX_GPIO_Init+0xd4>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ae:	f003 0320 	and.w	r3, r3, #32
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b6:	4b23      	ldr	r3, [pc, #140]	@ (8001144 <MX_GPIO_Init+0xd4>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ba:	4a22      	ldr	r2, [pc, #136]	@ (8001144 <MX_GPIO_Init+0xd4>)
 80010bc:	f043 0301 	orr.w	r3, r3, #1
 80010c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010c2:	4b20      	ldr	r3, [pc, #128]	@ (8001144 <MX_GPIO_Init+0xd4>)
 80010c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c6:	f003 0301 	and.w	r3, r3, #1
 80010ca:	60bb      	str	r3, [r7, #8]
 80010cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ce:	4b1d      	ldr	r3, [pc, #116]	@ (8001144 <MX_GPIO_Init+0xd4>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010d2:	4a1c      	ldr	r2, [pc, #112]	@ (8001144 <MX_GPIO_Init+0xd4>)
 80010d4:	f043 0302 	orr.w	r3, r3, #2
 80010d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010da:	4b1a      	ldr	r3, [pc, #104]	@ (8001144 <MX_GPIO_Init+0xd4>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010de:	f003 0302 	and.w	r3, r3, #2
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80010e6:	2200      	movs	r2, #0
 80010e8:	2120      	movs	r1, #32
 80010ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010ee:	f001 f901 	bl	80022f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010f2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010f8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	480f      	ldr	r0, [pc, #60]	@ (8001148 <MX_GPIO_Init+0xd8>)
 800110a:	f000 ff71 	bl	8001ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800110e:	2320      	movs	r3, #32
 8001110:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001112:	2301      	movs	r3, #1
 8001114:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111a:	2300      	movs	r3, #0
 800111c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800111e:	f107 0314 	add.w	r3, r7, #20
 8001122:	4619      	mov	r1, r3
 8001124:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001128:	f000 ff62 	bl	8001ff0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800112c:	2200      	movs	r2, #0
 800112e:	2100      	movs	r1, #0
 8001130:	2028      	movs	r0, #40	@ 0x28
 8001132:	f000 fbf6 	bl	8001922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001136:	2028      	movs	r0, #40	@ 0x28
 8001138:	f000 fc0d 	bl	8001956 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800113c:	bf00      	nop
 800113e:	3728      	adds	r7, #40	@ 0x28
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40021000 	.word	0x40021000
 8001148:	48000800 	.word	0x48000800

0800114c <HomeGoTo>:

/* USER CODE BEGIN 4 */

void HomeGoTo(){
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
	//Code Here
	Goal = HomePos;
 8001150:	4b04      	ldr	r3, [pc, #16]	@ (8001164 <HomeGoTo+0x18>)
 8001152:	881a      	ldrh	r2, [r3, #0]
 8001154:	4b04      	ldr	r3, [pc, #16]	@ (8001168 <HomeGoTo+0x1c>)
 8001156:	801a      	strh	r2, [r3, #0]
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	20000200 	.word	0x20000200
 8001168:	20000bf2 	.word	0x20000bf2

0800116c <JogModeGoTo>:


void JogModeGoTo(){
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
	registerFrame[0x10].U16 = 4; //Pick
 8001172:	4b1a      	ldr	r3, [pc, #104]	@ (80011dc <JogModeGoTo+0x70>)
 8001174:	2204      	movs	r2, #4
 8001176:	841a      	strh	r2, [r3, #32]
	registerFrame[0x10].U16 = 8; //Place
 8001178:	4b18      	ldr	r3, [pc, #96]	@ (80011dc <JogModeGoTo+0x70>)
 800117a:	2208      	movs	r2, #8
 800117c:	841a      	strh	r2, [r3, #32]
	for(int i = 0;i<=4;i++){
 800117e:	2300      	movs	r3, #0
 8001180:	607b      	str	r3, [r7, #4]
 8001182:	e020      	b.n	80011c6 <JogModeGoTo+0x5a>
		GoalPick[i] = ShelvePos[PickOrder[4-i]-'0'-1];
 8001184:	4b16      	ldr	r3, [pc, #88]	@ (80011e0 <JogModeGoTo+0x74>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	f1c2 0204 	rsb	r2, r2, #4
 800118e:	4413      	add	r3, r2
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	3b31      	subs	r3, #49	@ 0x31
 8001194:	4a13      	ldr	r2, [pc, #76]	@ (80011e4 <JogModeGoTo+0x78>)
 8001196:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800119a:	4a13      	ldr	r2, [pc, #76]	@ (80011e8 <JogModeGoTo+0x7c>)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		GoalPlace[i] = ShelvePos[PlaceOrder[4-i]-'0'-1];
 80011a2:	4b12      	ldr	r3, [pc, #72]	@ (80011ec <JogModeGoTo+0x80>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	f1c2 0204 	rsb	r2, r2, #4
 80011ac:	4413      	add	r3, r2
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	3b31      	subs	r3, #49	@ 0x31
 80011b2:	4a0c      	ldr	r2, [pc, #48]	@ (80011e4 <JogModeGoTo+0x78>)
 80011b4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 80011b8:	4a0d      	ldr	r2, [pc, #52]	@ (80011f0 <JogModeGoTo+0x84>)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(int i = 0;i<=4;i++){
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3301      	adds	r3, #1
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b04      	cmp	r3, #4
 80011ca:	dddb      	ble.n	8001184 <JogModeGoTo+0x18>
		}
}
 80011cc:	bf00      	nop
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000a2c 	.word	0x20000a2c
 80011e0:	20000bd4 	.word	0x20000bd4
 80011e4:	20000bbc 	.word	0x20000bbc
 80011e8:	20000bdc 	.word	0x20000bdc
 80011ec:	20000bd8 	.word	0x20000bd8
 80011f0:	20000be8 	.word	0x20000be8

080011f4 <PointModeGoTo>:


void PointModeGoTo(){
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
	//registerFrame[48].U16 is GoalPos in 10e-4(meter) unit
	//Code Here
	Goal = registerFrame[48].U16;
 80011f8:	4b04      	ldr	r3, [pc, #16]	@ (800120c <PointModeGoTo+0x18>)
 80011fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	@ 0x60
 80011fe:	4b04      	ldr	r3, [pc, #16]	@ (8001210 <PointModeGoTo+0x1c>)
 8001200:	801a      	strh	r2, [r3, #0]


}
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	20000a2c 	.word	0x20000a2c
 8001210:	20000bf2 	.word	0x20000bf2

08001214 <convert_to_string>:


char* convert_to_string(uint16_t number) {
 8001214:	b480      	push	{r7}
 8001216:	b087      	sub	sp, #28
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	80fb      	strh	r3, [r7, #6]
  char buffer[10]; // Static array for persistence (avoid stack overflow)
  int index = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]

  do {
    uint8_t digit = number % 10;
 8001222:	88fa      	ldrh	r2, [r7, #6]
 8001224:	4b15      	ldr	r3, [pc, #84]	@ (800127c <convert_to_string+0x68>)
 8001226:	fba3 1302 	umull	r1, r3, r3, r2
 800122a:	08d9      	lsrs	r1, r3, #3
 800122c:	460b      	mov	r3, r1
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	440b      	add	r3, r1
 8001232:	005b      	lsls	r3, r3, #1
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	b29b      	uxth	r3, r3
 8001238:	74fb      	strb	r3, [r7, #19]
    buffer[index++] = digit + '0'; // Convert digit to character
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	1c5a      	adds	r2, r3, #1
 800123e:	617a      	str	r2, [r7, #20]
 8001240:	7cfa      	ldrb	r2, [r7, #19]
 8001242:	3230      	adds	r2, #48	@ 0x30
 8001244:	b2d2      	uxtb	r2, r2
 8001246:	3318      	adds	r3, #24
 8001248:	443b      	add	r3, r7
 800124a:	f803 2c10 	strb.w	r2, [r3, #-16]
    number /= 10;
 800124e:	88fb      	ldrh	r3, [r7, #6]
 8001250:	4a0a      	ldr	r2, [pc, #40]	@ (800127c <convert_to_string+0x68>)
 8001252:	fba2 2303 	umull	r2, r3, r2, r3
 8001256:	08db      	lsrs	r3, r3, #3
 8001258:	80fb      	strh	r3, [r7, #6]
  } while (number > 0);
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1e0      	bne.n	8001222 <convert_to_string+0xe>

  buffer[index] = '\0'; // Add null terminator
 8001260:	f107 0208 	add.w	r2, r7, #8
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	4413      	add	r3, r2
 8001268:	2200      	movs	r2, #0
 800126a:	701a      	strb	r2, [r3, #0]

  return buffer; // Return the pointer to the string (be cautious with memory management)
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	371c      	adds	r7, #28
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	cccccccd 	.word	0xcccccccd

08001280 <HAL_TIM_PeriodElapsedCallback>:



void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	if(htim == &htim5)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a06      	ldr	r2, [pc, #24]	@ (80012a4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d103      	bne.n	8001298 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		registerFrame[0].U16 = 22881;
 8001290:	4b05      	ldr	r3, [pc, #20]	@ (80012a8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001292:	f645 1261 	movw	r2, #22881	@ 0x5961
 8001296:	801a      	strh	r2, [r3, #0]

		//registerFrame[10].U16 =
		}
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	20000230 	.word	0x20000230
 80012a8:	20000a2c 	.word	0x20000a2c

080012ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b0:	b672      	cpsid	i
}
 80012b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <Error_Handler+0x8>

080012b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012be:	4b0f      	ldr	r3, [pc, #60]	@ (80012fc <HAL_MspInit+0x44>)
 80012c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012c2:	4a0e      	ldr	r2, [pc, #56]	@ (80012fc <HAL_MspInit+0x44>)
 80012c4:	f043 0301 	orr.w	r3, r3, #1
 80012c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80012ca:	4b0c      	ldr	r3, [pc, #48]	@ (80012fc <HAL_MspInit+0x44>)
 80012cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012ce:	f003 0301 	and.w	r3, r3, #1
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012d6:	4b09      	ldr	r3, [pc, #36]	@ (80012fc <HAL_MspInit+0x44>)
 80012d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012da:	4a08      	ldr	r2, [pc, #32]	@ (80012fc <HAL_MspInit+0x44>)
 80012dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80012e2:	4b06      	ldr	r3, [pc, #24]	@ (80012fc <HAL_MspInit+0x44>)
 80012e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80012e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ea:	603b      	str	r3, [r7, #0]
 80012ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80012ee:	f001 f8e1 	bl	80024b4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40021000 	.word	0x40021000

08001300 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a1a      	ldr	r2, [pc, #104]	@ (8001378 <HAL_TIM_Base_MspInit+0x78>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d114      	bne.n	800133c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001312:	4b1a      	ldr	r3, [pc, #104]	@ (800137c <HAL_TIM_Base_MspInit+0x7c>)
 8001314:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001316:	4a19      	ldr	r2, [pc, #100]	@ (800137c <HAL_TIM_Base_MspInit+0x7c>)
 8001318:	f043 0308 	orr.w	r3, r3, #8
 800131c:	6593      	str	r3, [r2, #88]	@ 0x58
 800131e:	4b17      	ldr	r3, [pc, #92]	@ (800137c <HAL_TIM_Base_MspInit+0x7c>)
 8001320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001322:	f003 0308 	and.w	r3, r3, #8
 8001326:	60fb      	str	r3, [r7, #12]
 8001328:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800132a:	2200      	movs	r2, #0
 800132c:	2100      	movs	r1, #0
 800132e:	2032      	movs	r0, #50	@ 0x32
 8001330:	f000 faf7 	bl	8001922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001334:	2032      	movs	r0, #50	@ 0x32
 8001336:	f000 fb0e 	bl	8001956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 800133a:	e018      	b.n	800136e <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM16)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a0f      	ldr	r2, [pc, #60]	@ (8001380 <HAL_TIM_Base_MspInit+0x80>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d113      	bne.n	800136e <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001346:	4b0d      	ldr	r3, [pc, #52]	@ (800137c <HAL_TIM_Base_MspInit+0x7c>)
 8001348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800134a:	4a0c      	ldr	r2, [pc, #48]	@ (800137c <HAL_TIM_Base_MspInit+0x7c>)
 800134c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001350:	6613      	str	r3, [r2, #96]	@ 0x60
 8001352:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <HAL_TIM_Base_MspInit+0x7c>)
 8001354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001356:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800135a:	60bb      	str	r3, [r7, #8]
 800135c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2100      	movs	r1, #0
 8001362:	2019      	movs	r0, #25
 8001364:	f000 fadd 	bl	8001922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001368:	2019      	movs	r0, #25
 800136a:	f000 faf4 	bl	8001956 <HAL_NVIC_EnableIRQ>
}
 800136e:	bf00      	nop
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40000c00 	.word	0x40000c00
 800137c:	40021000 	.word	0x40021000
 8001380:	40014400 	.word	0x40014400

08001384 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b09e      	sub	sp, #120	@ 0x78
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
 800139a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800139c:	f107 0310 	add.w	r3, r7, #16
 80013a0:	2254      	movs	r2, #84	@ 0x54
 80013a2:	2100      	movs	r1, #0
 80013a4:	4618      	mov	r0, r3
 80013a6:	f004 fff3 	bl	8006390 <memset>
  if(huart->Instance==USART2)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	4a4d      	ldr	r2, [pc, #308]	@ (80014e4 <HAL_UART_MspInit+0x160>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	f040 8092 	bne.w	80014da <HAL_UART_MspInit+0x156>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80013b6:	2302      	movs	r3, #2
 80013b8:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013be:	f107 0310 	add.w	r3, r7, #16
 80013c2:	4618      	mov	r0, r3
 80013c4:	f001 fdb4 	bl	8002f30 <HAL_RCCEx_PeriphCLKConfig>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80013ce:	f7ff ff6d 	bl	80012ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80013d2:	4b45      	ldr	r3, [pc, #276]	@ (80014e8 <HAL_UART_MspInit+0x164>)
 80013d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013d6:	4a44      	ldr	r2, [pc, #272]	@ (80014e8 <HAL_UART_MspInit+0x164>)
 80013d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013dc:	6593      	str	r3, [r2, #88]	@ 0x58
 80013de:	4b42      	ldr	r3, [pc, #264]	@ (80014e8 <HAL_UART_MspInit+0x164>)
 80013e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	4b3f      	ldr	r3, [pc, #252]	@ (80014e8 <HAL_UART_MspInit+0x164>)
 80013ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013ee:	4a3e      	ldr	r2, [pc, #248]	@ (80014e8 <HAL_UART_MspInit+0x164>)
 80013f0:	f043 0301 	orr.w	r3, r3, #1
 80013f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80013f6:	4b3c      	ldr	r3, [pc, #240]	@ (80014e8 <HAL_UART_MspInit+0x164>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	60bb      	str	r3, [r7, #8]
 8001400:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001402:	230c      	movs	r3, #12
 8001404:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001406:	2302      	movs	r3, #2
 8001408:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140a:	2300      	movs	r3, #0
 800140c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140e:	2300      	movs	r3, #0
 8001410:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001412:	2307      	movs	r3, #7
 8001414:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001416:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800141a:	4619      	mov	r1, r3
 800141c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001420:	f000 fde6 	bl	8001ff0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel1;
 8001424:	4b31      	ldr	r3, [pc, #196]	@ (80014ec <HAL_UART_MspInit+0x168>)
 8001426:	4a32      	ldr	r2, [pc, #200]	@ (80014f0 <HAL_UART_MspInit+0x16c>)
 8001428:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_USART2_TX;
 800142a:	4b30      	ldr	r3, [pc, #192]	@ (80014ec <HAL_UART_MspInit+0x168>)
 800142c:	221b      	movs	r2, #27
 800142e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001430:	4b2e      	ldr	r3, [pc, #184]	@ (80014ec <HAL_UART_MspInit+0x168>)
 8001432:	2210      	movs	r2, #16
 8001434:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001436:	4b2d      	ldr	r3, [pc, #180]	@ (80014ec <HAL_UART_MspInit+0x168>)
 8001438:	2200      	movs	r2, #0
 800143a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800143c:	4b2b      	ldr	r3, [pc, #172]	@ (80014ec <HAL_UART_MspInit+0x168>)
 800143e:	2280      	movs	r2, #128	@ 0x80
 8001440:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001442:	4b2a      	ldr	r3, [pc, #168]	@ (80014ec <HAL_UART_MspInit+0x168>)
 8001444:	2200      	movs	r2, #0
 8001446:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001448:	4b28      	ldr	r3, [pc, #160]	@ (80014ec <HAL_UART_MspInit+0x168>)
 800144a:	2200      	movs	r2, #0
 800144c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800144e:	4b27      	ldr	r3, [pc, #156]	@ (80014ec <HAL_UART_MspInit+0x168>)
 8001450:	2200      	movs	r2, #0
 8001452:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001454:	4b25      	ldr	r3, [pc, #148]	@ (80014ec <HAL_UART_MspInit+0x168>)
 8001456:	2200      	movs	r2, #0
 8001458:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800145a:	4824      	ldr	r0, [pc, #144]	@ (80014ec <HAL_UART_MspInit+0x168>)
 800145c:	f000 fa96 	bl	800198c <HAL_DMA_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_UART_MspInit+0xe6>
    {
      Error_Handler();
 8001466:	f7ff ff21 	bl	80012ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4a1f      	ldr	r2, [pc, #124]	@ (80014ec <HAL_UART_MspInit+0x168>)
 800146e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001470:	4a1e      	ldr	r2, [pc, #120]	@ (80014ec <HAL_UART_MspInit+0x168>)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel2;
 8001476:	4b1f      	ldr	r3, [pc, #124]	@ (80014f4 <HAL_UART_MspInit+0x170>)
 8001478:	4a1f      	ldr	r2, [pc, #124]	@ (80014f8 <HAL_UART_MspInit+0x174>)
 800147a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_USART2_RX;
 800147c:	4b1d      	ldr	r3, [pc, #116]	@ (80014f4 <HAL_UART_MspInit+0x170>)
 800147e:	221a      	movs	r2, #26
 8001480:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001482:	4b1c      	ldr	r3, [pc, #112]	@ (80014f4 <HAL_UART_MspInit+0x170>)
 8001484:	2200      	movs	r2, #0
 8001486:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001488:	4b1a      	ldr	r3, [pc, #104]	@ (80014f4 <HAL_UART_MspInit+0x170>)
 800148a:	2200      	movs	r2, #0
 800148c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800148e:	4b19      	ldr	r3, [pc, #100]	@ (80014f4 <HAL_UART_MspInit+0x170>)
 8001490:	2280      	movs	r2, #128	@ 0x80
 8001492:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001494:	4b17      	ldr	r3, [pc, #92]	@ (80014f4 <HAL_UART_MspInit+0x170>)
 8001496:	2200      	movs	r2, #0
 8001498:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800149a:	4b16      	ldr	r3, [pc, #88]	@ (80014f4 <HAL_UART_MspInit+0x170>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80014a0:	4b14      	ldr	r3, [pc, #80]	@ (80014f4 <HAL_UART_MspInit+0x170>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014a6:	4b13      	ldr	r3, [pc, #76]	@ (80014f4 <HAL_UART_MspInit+0x170>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80014ac:	4811      	ldr	r0, [pc, #68]	@ (80014f4 <HAL_UART_MspInit+0x170>)
 80014ae:	f000 fa6d 	bl	800198c <HAL_DMA_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <HAL_UART_MspInit+0x138>
    {
      Error_Handler();
 80014b8:	f7ff fef8 	bl	80012ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a0d      	ldr	r2, [pc, #52]	@ (80014f4 <HAL_UART_MspInit+0x170>)
 80014c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80014c4:	4a0b      	ldr	r2, [pc, #44]	@ (80014f4 <HAL_UART_MspInit+0x170>)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	2100      	movs	r1, #0
 80014ce:	2026      	movs	r0, #38	@ 0x26
 80014d0:	f000 fa27 	bl	8001922 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014d4:	2026      	movs	r0, #38	@ 0x26
 80014d6:	f000 fa3e 	bl	8001956 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014da:	bf00      	nop
 80014dc:	3778      	adds	r7, #120	@ 0x78
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	40004400 	.word	0x40004400
 80014e8:	40021000 	.word	0x40021000
 80014ec:	20000494 	.word	0x20000494
 80014f0:	40020008 	.word	0x40020008
 80014f4:	200004f4 	.word	0x200004f4
 80014f8:	4002001c 	.word	0x4002001c

080014fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <NMI_Handler+0x4>

08001504 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <HardFault_Handler+0x4>

0800150c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <MemManage_Handler+0x4>

08001514 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <BusFault_Handler+0x4>

0800151c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001520:	bf00      	nop
 8001522:	e7fd      	b.n	8001520 <UsageFault_Handler+0x4>

08001524 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001532:	b480      	push	{r7}
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001536:	bf00      	nop
 8001538:	46bd      	mov	sp, r7
 800153a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153e:	4770      	bx	lr

08001540 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001552:	f000 f8cb 	bl	80016ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001556:	bf00      	nop
 8001558:	bd80      	pop	{r7, pc}
	...

0800155c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001560:	4802      	ldr	r0, [pc, #8]	@ (800156c <DMA1_Channel1_IRQHandler+0x10>)
 8001562:	f000 fbf6 	bl	8001d52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000494 	.word	0x20000494

08001570 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001574:	4802      	ldr	r0, [pc, #8]	@ (8001580 <DMA1_Channel2_IRQHandler+0x10>)
 8001576:	f000 fbec 	bl	8001d52 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	200004f4 	.word	0x200004f4

08001584 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001588:	4802      	ldr	r0, [pc, #8]	@ (8001594 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800158a:	f002 f8f1 	bl	8003770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	200002fc 	.word	0x200002fc

08001598 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800159c:	4802      	ldr	r0, [pc, #8]	@ (80015a8 <USART2_IRQHandler+0x10>)
 800159e:	f003 f9e9 	bl	8004974 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80015a2:	bf00      	nop
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200003c8 	.word	0x200003c8

080015ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80015b0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80015b4:	f000 feb6 	bl	8002324 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015b8:	bf00      	nop
 80015ba:	bd80      	pop	{r7, pc}

080015bc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80015c0:	4802      	ldr	r0, [pc, #8]	@ (80015cc <TIM5_IRQHandler+0x10>)
 80015c2:	f002 f8d5 	bl	8003770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000230 	.word	0x20000230

080015d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80015d4:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <SystemInit+0x20>)
 80015d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015da:	4a05      	ldr	r2, [pc, #20]	@ (80015f0 <SystemInit+0x20>)
 80015dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80015e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ec:	4770      	bx	lr
 80015ee:	bf00      	nop
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80015f4:	480d      	ldr	r0, [pc, #52]	@ (800162c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80015f6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80015f8:	f7ff ffea 	bl	80015d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015fc:	480c      	ldr	r0, [pc, #48]	@ (8001630 <LoopForever+0x6>)
  ldr r1, =_edata
 80015fe:	490d      	ldr	r1, [pc, #52]	@ (8001634 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001600:	4a0d      	ldr	r2, [pc, #52]	@ (8001638 <LoopForever+0xe>)
  movs r3, #0
 8001602:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001604:	e002      	b.n	800160c <LoopCopyDataInit>

08001606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800160a:	3304      	adds	r3, #4

0800160c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800160c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800160e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001610:	d3f9      	bcc.n	8001606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001612:	4a0a      	ldr	r2, [pc, #40]	@ (800163c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001614:	4c0a      	ldr	r4, [pc, #40]	@ (8001640 <LoopForever+0x16>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001618:	e001      	b.n	800161e <LoopFillZerobss>

0800161a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800161a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800161c:	3204      	adds	r2, #4

0800161e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800161e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001620:	d3fb      	bcc.n	800161a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001622:	f004 febd 	bl	80063a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001626:	f7ff faa3 	bl	8000b70 <main>

0800162a <LoopForever>:

LoopForever:
    b LoopForever
 800162a:	e7fe      	b.n	800162a <LoopForever>
  ldr   r0, =_estack
 800162c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001634:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 8001638:	0800646c 	.word	0x0800646c
  ldr r2, =_sbss
 800163c:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 8001640:	20000c00 	.word	0x20000c00

08001644 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001644:	e7fe      	b.n	8001644 <ADC1_2_IRQHandler>

08001646 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800164c:	2300      	movs	r3, #0
 800164e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001650:	2003      	movs	r0, #3
 8001652:	f000 f95b 	bl	800190c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001656:	2000      	movs	r0, #0
 8001658:	f000 f80e 	bl	8001678 <HAL_InitTick>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d002      	beq.n	8001668 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001662:	2301      	movs	r3, #1
 8001664:	71fb      	strb	r3, [r7, #7]
 8001666:	e001      	b.n	800166c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001668:	f7ff fe26 	bl	80012b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800166c:	79fb      	ldrb	r3, [r7, #7]

}
 800166e:	4618      	mov	r0, r3
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001680:	2300      	movs	r3, #0
 8001682:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001684:	4b16      	ldr	r3, [pc, #88]	@ (80016e0 <HAL_InitTick+0x68>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d022      	beq.n	80016d2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800168c:	4b15      	ldr	r3, [pc, #84]	@ (80016e4 <HAL_InitTick+0x6c>)
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b13      	ldr	r3, [pc, #76]	@ (80016e0 <HAL_InitTick+0x68>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001698:	fbb1 f3f3 	udiv	r3, r1, r3
 800169c:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a0:	4618      	mov	r0, r3
 80016a2:	f000 f966 	bl	8001972 <HAL_SYSTICK_Config>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d10f      	bne.n	80016cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2b0f      	cmp	r3, #15
 80016b0:	d809      	bhi.n	80016c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016b2:	2200      	movs	r2, #0
 80016b4:	6879      	ldr	r1, [r7, #4]
 80016b6:	f04f 30ff 	mov.w	r0, #4294967295
 80016ba:	f000 f932 	bl	8001922 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80016be:	4a0a      	ldr	r2, [pc, #40]	@ (80016e8 <HAL_InitTick+0x70>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6013      	str	r3, [r2, #0]
 80016c4:	e007      	b.n	80016d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	73fb      	strb	r3, [r7, #15]
 80016ca:	e004      	b.n	80016d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	73fb      	strb	r3, [r7, #15]
 80016d0:	e001      	b.n	80016d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80016d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3710      	adds	r7, #16
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	2000020c 	.word	0x2000020c
 80016e4:	20000204 	.word	0x20000204
 80016e8:	20000208 	.word	0x20000208

080016ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016f0:	4b05      	ldr	r3, [pc, #20]	@ (8001708 <HAL_IncTick+0x1c>)
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	4b05      	ldr	r3, [pc, #20]	@ (800170c <HAL_IncTick+0x20>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4413      	add	r3, r2
 80016fa:	4a03      	ldr	r2, [pc, #12]	@ (8001708 <HAL_IncTick+0x1c>)
 80016fc:	6013      	str	r3, [r2, #0]
}
 80016fe:	bf00      	nop
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	20000bfc 	.word	0x20000bfc
 800170c:	2000020c 	.word	0x2000020c

08001710 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return uwTick;
 8001714:	4b03      	ldr	r3, [pc, #12]	@ (8001724 <HAL_GetTick+0x14>)
 8001716:	681b      	ldr	r3, [r3, #0]
}
 8001718:	4618      	mov	r0, r3
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	20000bfc 	.word	0x20000bfc

08001728 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001730:	f7ff ffee 	bl	8001710 <HAL_GetTick>
 8001734:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001740:	d004      	beq.n	800174c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001742:	4b09      	ldr	r3, [pc, #36]	@ (8001768 <HAL_Delay+0x40>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68fa      	ldr	r2, [r7, #12]
 8001748:	4413      	add	r3, r2
 800174a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800174c:	bf00      	nop
 800174e:	f7ff ffdf 	bl	8001710 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	429a      	cmp	r2, r3
 800175c:	d8f7      	bhi.n	800174e <HAL_Delay+0x26>
  {
  }
}
 800175e:	bf00      	nop
 8001760:	bf00      	nop
 8001762:	3710      	adds	r7, #16
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	2000020c 	.word	0x2000020c

0800176c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800176c:	b480      	push	{r7}
 800176e:	b085      	sub	sp, #20
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	f003 0307 	and.w	r3, r3, #7
 800177a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800177c:	4b0c      	ldr	r3, [pc, #48]	@ (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001788:	4013      	ands	r3, r2
 800178a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001794:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001798:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800179c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179e:	4a04      	ldr	r2, [pc, #16]	@ (80017b0 <__NVIC_SetPriorityGrouping+0x44>)
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	60d3      	str	r3, [r2, #12]
}
 80017a4:	bf00      	nop
 80017a6:	3714      	adds	r7, #20
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr
 80017b0:	e000ed00 	.word	0xe000ed00

080017b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b8:	4b04      	ldr	r3, [pc, #16]	@ (80017cc <__NVIC_GetPriorityGrouping+0x18>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	0a1b      	lsrs	r3, r3, #8
 80017be:	f003 0307 	and.w	r3, r3, #7
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000ed00 	.word	0xe000ed00

080017d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	db0b      	blt.n	80017fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	f003 021f 	and.w	r2, r3, #31
 80017e8:	4907      	ldr	r1, [pc, #28]	@ (8001808 <__NVIC_EnableIRQ+0x38>)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	095b      	lsrs	r3, r3, #5
 80017f0:	2001      	movs	r0, #1
 80017f2:	fa00 f202 	lsl.w	r2, r0, r2
 80017f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80017fa:	bf00      	nop
 80017fc:	370c      	adds	r7, #12
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	e000e100 	.word	0xe000e100

0800180c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	6039      	str	r1, [r7, #0]
 8001816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181c:	2b00      	cmp	r3, #0
 800181e:	db0a      	blt.n	8001836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	b2da      	uxtb	r2, r3
 8001824:	490c      	ldr	r1, [pc, #48]	@ (8001858 <__NVIC_SetPriority+0x4c>)
 8001826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800182a:	0112      	lsls	r2, r2, #4
 800182c:	b2d2      	uxtb	r2, r2
 800182e:	440b      	add	r3, r1
 8001830:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001834:	e00a      	b.n	800184c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	b2da      	uxtb	r2, r3
 800183a:	4908      	ldr	r1, [pc, #32]	@ (800185c <__NVIC_SetPriority+0x50>)
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	3b04      	subs	r3, #4
 8001844:	0112      	lsls	r2, r2, #4
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	440b      	add	r3, r1
 800184a:	761a      	strb	r2, [r3, #24]
}
 800184c:	bf00      	nop
 800184e:	370c      	adds	r7, #12
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000e100 	.word	0xe000e100
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001860:	b480      	push	{r7}
 8001862:	b089      	sub	sp, #36	@ 0x24
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f003 0307 	and.w	r3, r3, #7
 8001872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001874:	69fb      	ldr	r3, [r7, #28]
 8001876:	f1c3 0307 	rsb	r3, r3, #7
 800187a:	2b04      	cmp	r3, #4
 800187c:	bf28      	it	cs
 800187e:	2304      	movcs	r3, #4
 8001880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3304      	adds	r3, #4
 8001886:	2b06      	cmp	r3, #6
 8001888:	d902      	bls.n	8001890 <NVIC_EncodePriority+0x30>
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	3b03      	subs	r3, #3
 800188e:	e000      	b.n	8001892 <NVIC_EncodePriority+0x32>
 8001890:	2300      	movs	r3, #0
 8001892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001894:	f04f 32ff 	mov.w	r2, #4294967295
 8001898:	69bb      	ldr	r3, [r7, #24]
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43da      	mvns	r2, r3
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	401a      	ands	r2, r3
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a8:	f04f 31ff 	mov.w	r1, #4294967295
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	fa01 f303 	lsl.w	r3, r1, r3
 80018b2:	43d9      	mvns	r1, r3
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b8:	4313      	orrs	r3, r2
         );
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	3724      	adds	r7, #36	@ 0x24
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
	...

080018c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	3b01      	subs	r3, #1
 80018d4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80018d8:	d301      	bcc.n	80018de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018da:	2301      	movs	r3, #1
 80018dc:	e00f      	b.n	80018fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018de:	4a0a      	ldr	r2, [pc, #40]	@ (8001908 <SysTick_Config+0x40>)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	3b01      	subs	r3, #1
 80018e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018e6:	210f      	movs	r1, #15
 80018e8:	f04f 30ff 	mov.w	r0, #4294967295
 80018ec:	f7ff ff8e 	bl	800180c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018f0:	4b05      	ldr	r3, [pc, #20]	@ (8001908 <SysTick_Config+0x40>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018f6:	4b04      	ldr	r3, [pc, #16]	@ (8001908 <SysTick_Config+0x40>)
 80018f8:	2207      	movs	r2, #7
 80018fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	e000e010 	.word	0xe000e010

0800190c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b082      	sub	sp, #8
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f7ff ff29 	bl	800176c <__NVIC_SetPriorityGrouping>
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}

08001922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b086      	sub	sp, #24
 8001926:	af00      	add	r7, sp, #0
 8001928:	4603      	mov	r3, r0
 800192a:	60b9      	str	r1, [r7, #8]
 800192c:	607a      	str	r2, [r7, #4]
 800192e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001930:	f7ff ff40 	bl	80017b4 <__NVIC_GetPriorityGrouping>
 8001934:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	68b9      	ldr	r1, [r7, #8]
 800193a:	6978      	ldr	r0, [r7, #20]
 800193c:	f7ff ff90 	bl	8001860 <NVIC_EncodePriority>
 8001940:	4602      	mov	r2, r0
 8001942:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001946:	4611      	mov	r1, r2
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff5f 	bl	800180c <__NVIC_SetPriority>
}
 800194e:	bf00      	nop
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001956:	b580      	push	{r7, lr}
 8001958:	b082      	sub	sp, #8
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff ff33 	bl	80017d0 <__NVIC_EnableIRQ>
}
 800196a:	bf00      	nop
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}

08001972 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001972:	b580      	push	{r7, lr}
 8001974:	b082      	sub	sp, #8
 8001976:	af00      	add	r7, sp, #0
 8001978:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f7ff ffa4 	bl	80018c8 <SysTick_Config>
 8001980:	4603      	mov	r3, r0
}
 8001982:	4618      	mov	r0, r3
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
	...

0800198c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d101      	bne.n	800199e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e08d      	b.n	8001aba <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	4b47      	ldr	r3, [pc, #284]	@ (8001ac4 <HAL_DMA_Init+0x138>)
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d80f      	bhi.n	80019ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	4b45      	ldr	r3, [pc, #276]	@ (8001ac8 <HAL_DMA_Init+0x13c>)
 80019b2:	4413      	add	r3, r2
 80019b4:	4a45      	ldr	r2, [pc, #276]	@ (8001acc <HAL_DMA_Init+0x140>)
 80019b6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ba:	091b      	lsrs	r3, r3, #4
 80019bc:	009a      	lsls	r2, r3, #2
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	4a42      	ldr	r2, [pc, #264]	@ (8001ad0 <HAL_DMA_Init+0x144>)
 80019c6:	641a      	str	r2, [r3, #64]	@ 0x40
 80019c8:	e00e      	b.n	80019e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	461a      	mov	r2, r3
 80019d0:	4b40      	ldr	r3, [pc, #256]	@ (8001ad4 <HAL_DMA_Init+0x148>)
 80019d2:	4413      	add	r3, r2
 80019d4:	4a3d      	ldr	r2, [pc, #244]	@ (8001acc <HAL_DMA_Init+0x140>)
 80019d6:	fba2 2303 	umull	r2, r3, r2, r3
 80019da:	091b      	lsrs	r3, r3, #4
 80019dc:	009a      	lsls	r2, r3, #2
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a3c      	ldr	r2, [pc, #240]	@ (8001ad8 <HAL_DMA_Init+0x14c>)
 80019e6:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2202      	movs	r2, #2
 80019ec:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80019fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001a02:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001a0c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a18:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	699b      	ldr	r3, [r3, #24]
 8001a1e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a24:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6a1b      	ldr	r3, [r3, #32]
 8001a2a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	4313      	orrs	r3, r2
 8001a30:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	f000 fa76 	bl	8001f2c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	689b      	ldr	r3, [r3, #8]
 8001a44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001a48:	d102      	bne.n	8001a50 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a58:	b2d2      	uxtb	r2, r2
 8001a5a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001a64:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d010      	beq.n	8001a90 <HAL_DMA_Init+0x104>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	d80c      	bhi.n	8001a90 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f000 fa96 	bl	8001fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a88:	687a      	ldr	r2, [r7, #4]
 8001a8a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001a8c:	605a      	str	r2, [r3, #4]
 8001a8e:	e008      	b.n	8001aa2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2201      	movs	r2, #1
 8001aac:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3710      	adds	r7, #16
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40020407 	.word	0x40020407
 8001ac8:	bffdfff8 	.word	0xbffdfff8
 8001acc:	cccccccd 	.word	0xcccccccd
 8001ad0:	40020000 	.word	0x40020000
 8001ad4:	bffdfbf8 	.word	0xbffdfbf8
 8001ad8:	40020400 	.word	0x40020400

08001adc <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
 8001ae8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d101      	bne.n	8001afc <HAL_DMA_Start_IT+0x20>
 8001af8:	2302      	movs	r3, #2
 8001afa:	e066      	b.n	8001bca <HAL_DMA_Start_IT+0xee>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	2201      	movs	r2, #1
 8001b00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d155      	bne.n	8001bbc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	2202      	movs	r2, #2
 8001b14:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f022 0201 	bic.w	r2, r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	68b9      	ldr	r1, [r7, #8]
 8001b34:	68f8      	ldr	r0, [r7, #12]
 8001b36:	f000 f9bb 	bl	8001eb0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d008      	beq.n	8001b54 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f042 020e 	orr.w	r2, r2, #14
 8001b50:	601a      	str	r2, [r3, #0]
 8001b52:	e00f      	b.n	8001b74 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681a      	ldr	r2, [r3, #0]
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f022 0204 	bic.w	r2, r2, #4
 8001b62:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f042 020a 	orr.w	r2, r2, #10
 8001b72:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d007      	beq.n	8001b92 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001b8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001b90:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d007      	beq.n	8001baa <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ba4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001ba8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f042 0201 	orr.w	r2, r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	e005      	b.n	8001bc8 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001bc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3718      	adds	r7, #24
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b085      	sub	sp, #20
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	2b02      	cmp	r3, #2
 8001be8:	d005      	beq.n	8001bf6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2204      	movs	r2, #4
 8001bee:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	73fb      	strb	r3, [r7, #15]
 8001bf4:	e037      	b.n	8001c66 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 020e 	bic.w	r2, r2, #14
 8001c04:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001c10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c14:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	681a      	ldr	r2, [r3, #0]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f022 0201 	bic.w	r2, r2, #1
 8001c24:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c2a:	f003 021f 	and.w	r2, r3, #31
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c32:	2101      	movs	r1, #1
 8001c34:	fa01 f202 	lsl.w	r2, r1, r2
 8001c38:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c3e:	687a      	ldr	r2, [r7, #4]
 8001c40:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001c42:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d00c      	beq.n	8001c66 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001c56:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c5a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001c64:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2201      	movs	r2, #1
 8001c6a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8001c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3714      	adds	r7, #20
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c82:	4770      	bx	lr

08001c84 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d00d      	beq.n	8001cb8 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2204      	movs	r2, #4
 8001ca0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2200      	movs	r2, #0
 8001cae:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	73fb      	strb	r3, [r7, #15]
 8001cb6:	e047      	b.n	8001d48 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f022 020e 	bic.w	r2, r2, #14
 8001cc6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f022 0201 	bic.w	r2, r2, #1
 8001cd6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ce2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001ce6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cec:	f003 021f 	and.w	r2, r3, #31
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8001cfa:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001d04:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00c      	beq.n	8001d28 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d12:	681a      	ldr	r2, [r3, #0]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001d18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d1c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d22:	687a      	ldr	r2, [r7, #4]
 8001d24:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001d26:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d003      	beq.n	8001d48 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	4798      	blx	r3
    }
  }
  return status;
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b084      	sub	sp, #16
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d6e:	f003 031f 	and.w	r3, r3, #31
 8001d72:	2204      	movs	r2, #4
 8001d74:	409a      	lsls	r2, r3
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d026      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x7a>
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	f003 0304 	and.w	r3, r3, #4
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d021      	beq.n	8001dcc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0320 	and.w	r3, r3, #32
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d107      	bne.n	8001da6 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0204 	bic.w	r2, r2, #4
 8001da4:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001daa:	f003 021f 	and.w	r2, r3, #31
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db2:	2104      	movs	r1, #4
 8001db4:	fa01 f202 	lsl.w	r2, r1, r2
 8001db8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d071      	beq.n	8001ea6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001dca:	e06c      	b.n	8001ea6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd0:	f003 031f 	and.w	r3, r3, #31
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	409a      	lsls	r2, r3
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d02e      	beq.n	8001e3e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	f003 0302 	and.w	r3, r3, #2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d029      	beq.n	8001e3e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0320 	and.w	r3, r3, #32
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d10b      	bne.n	8001e10 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 020a 	bic.w	r2, r2, #10
 8001e06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e14:	f003 021f 	and.w	r2, r3, #31
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1c:	2102      	movs	r1, #2
 8001e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e22:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d038      	beq.n	8001ea6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001e3c:	e033      	b.n	8001ea6 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e42:	f003 031f 	and.w	r3, r3, #31
 8001e46:	2208      	movs	r2, #8
 8001e48:	409a      	lsls	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d02a      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	f003 0308 	and.w	r3, r3, #8
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d025      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 020e 	bic.w	r2, r2, #14
 8001e6a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e70:	f003 021f 	and.w	r2, r3, #31
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e78:	2101      	movs	r1, #1
 8001e7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e7e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2201      	movs	r2, #1
 8001e8a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d004      	beq.n	8001ea8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ea6:	bf00      	nop
 8001ea8:	bf00      	nop
}
 8001eaa:	3710      	adds	r7, #16
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec2:	68fa      	ldr	r2, [r7, #12]
 8001ec4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001ec6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d004      	beq.n	8001eda <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ed4:	68fa      	ldr	r2, [r7, #12]
 8001ed6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001ed8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ede:	f003 021f 	and.w	r2, r3, #31
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	fa01 f202 	lsl.w	r2, r1, r2
 8001eec:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2b10      	cmp	r3, #16
 8001efc:	d108      	bne.n	8001f10 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	687a      	ldr	r2, [r7, #4]
 8001f04:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68ba      	ldr	r2, [r7, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001f0e:	e007      	b.n	8001f20 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	68ba      	ldr	r2, [r7, #8]
 8001f16:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	687a      	ldr	r2, [r7, #4]
 8001f1e:	60da      	str	r2, [r3, #12]
}
 8001f20:	bf00      	nop
 8001f22:	3714      	adds	r7, #20
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b087      	sub	sp, #28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4b16      	ldr	r3, [pc, #88]	@ (8001f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d802      	bhi.n	8001f46 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001f40:	4b15      	ldr	r3, [pc, #84]	@ (8001f98 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001f42:	617b      	str	r3, [r7, #20]
 8001f44:	e001      	b.n	8001f4a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8001f46:	4b15      	ldr	r3, [pc, #84]	@ (8001f9c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001f48:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	3b08      	subs	r3, #8
 8001f56:	4a12      	ldr	r2, [pc, #72]	@ (8001fa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001f58:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5c:	091b      	lsrs	r3, r3, #4
 8001f5e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f64:	089b      	lsrs	r3, r3, #2
 8001f66:	009a      	lsls	r2, r3, #2
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a0b      	ldr	r2, [pc, #44]	@ (8001fa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001f76:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f003 031f 	and.w	r3, r3, #31
 8001f7e:	2201      	movs	r2, #1
 8001f80:	409a      	lsls	r2, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8001f86:	bf00      	nop
 8001f88:	371c      	adds	r7, #28
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr
 8001f92:	bf00      	nop
 8001f94:	40020407 	.word	0x40020407
 8001f98:	40020800 	.word	0x40020800
 8001f9c:	40020820 	.word	0x40020820
 8001fa0:	cccccccd 	.word	0xcccccccd
 8001fa4:	40020880 	.word	0x40020880

08001fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b085      	sub	sp, #20
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001fb8:	68fa      	ldr	r2, [r7, #12]
 8001fba:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001fbc:	4413      	add	r3, r2
 8001fbe:	009b      	lsls	r3, r3, #2
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a08      	ldr	r2, [pc, #32]	@ (8001fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001fca:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	3b01      	subs	r3, #1
 8001fd0:	f003 031f 	and.w	r3, r3, #31
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	409a      	lsls	r2, r3
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8001fdc:	bf00      	nop
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe6:	4770      	bx	lr
 8001fe8:	1000823f 	.word	0x1000823f
 8001fec:	40020940 	.word	0x40020940

08001ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b087      	sub	sp, #28
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001ffe:	e15a      	b.n	80022b6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	2101      	movs	r1, #1
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	fa01 f303 	lsl.w	r3, r1, r3
 800200c:	4013      	ands	r3, r2
 800200e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2b00      	cmp	r3, #0
 8002014:	f000 814c 	beq.w	80022b0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	f003 0303 	and.w	r3, r3, #3
 8002020:	2b01      	cmp	r3, #1
 8002022:	d005      	beq.n	8002030 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800202c:	2b02      	cmp	r3, #2
 800202e:	d130      	bne.n	8002092 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	2203      	movs	r2, #3
 800203c:	fa02 f303 	lsl.w	r3, r2, r3
 8002040:	43db      	mvns	r3, r3
 8002042:	693a      	ldr	r2, [r7, #16]
 8002044:	4013      	ands	r3, r2
 8002046:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	68da      	ldr	r2, [r3, #12]
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	693a      	ldr	r2, [r7, #16]
 8002056:	4313      	orrs	r3, r2
 8002058:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	693a      	ldr	r2, [r7, #16]
 800205e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002066:	2201      	movs	r2, #1
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	fa02 f303 	lsl.w	r3, r2, r3
 800206e:	43db      	mvns	r3, r3
 8002070:	693a      	ldr	r2, [r7, #16]
 8002072:	4013      	ands	r3, r2
 8002074:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	091b      	lsrs	r3, r3, #4
 800207c:	f003 0201 	and.w	r2, r3, #1
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	4313      	orrs	r3, r2
 800208a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	f003 0303 	and.w	r3, r3, #3
 800209a:	2b03      	cmp	r3, #3
 800209c:	d017      	beq.n	80020ce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	005b      	lsls	r3, r3, #1
 80020a8:	2203      	movs	r2, #3
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	693a      	ldr	r2, [r7, #16]
 80020b2:	4013      	ands	r3, r2
 80020b4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	689a      	ldr	r2, [r3, #8]
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	693a      	ldr	r2, [r7, #16]
 80020cc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f003 0303 	and.w	r3, r3, #3
 80020d6:	2b02      	cmp	r3, #2
 80020d8:	d123      	bne.n	8002122 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	08da      	lsrs	r2, r3, #3
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	3208      	adds	r2, #8
 80020e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020e6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	220f      	movs	r2, #15
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	693a      	ldr	r2, [r7, #16]
 80020fa:	4013      	ands	r3, r2
 80020fc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	691a      	ldr	r2, [r3, #16]
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	693a      	ldr	r2, [r7, #16]
 8002110:	4313      	orrs	r3, r2
 8002112:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	08da      	lsrs	r2, r3, #3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	3208      	adds	r2, #8
 800211c:	6939      	ldr	r1, [r7, #16]
 800211e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	2203      	movs	r2, #3
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43db      	mvns	r3, r3
 8002134:	693a      	ldr	r2, [r7, #16]
 8002136:	4013      	ands	r3, r2
 8002138:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f003 0203 	and.w	r2, r3, #3
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	005b      	lsls	r3, r3, #1
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	693a      	ldr	r2, [r7, #16]
 800214c:	4313      	orrs	r3, r2
 800214e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	693a      	ldr	r2, [r7, #16]
 8002154:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800215e:	2b00      	cmp	r3, #0
 8002160:	f000 80a6 	beq.w	80022b0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002164:	4b5b      	ldr	r3, [pc, #364]	@ (80022d4 <HAL_GPIO_Init+0x2e4>)
 8002166:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002168:	4a5a      	ldr	r2, [pc, #360]	@ (80022d4 <HAL_GPIO_Init+0x2e4>)
 800216a:	f043 0301 	orr.w	r3, r3, #1
 800216e:	6613      	str	r3, [r2, #96]	@ 0x60
 8002170:	4b58      	ldr	r3, [pc, #352]	@ (80022d4 <HAL_GPIO_Init+0x2e4>)
 8002172:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002174:	f003 0301 	and.w	r3, r3, #1
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800217c:	4a56      	ldr	r2, [pc, #344]	@ (80022d8 <HAL_GPIO_Init+0x2e8>)
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	089b      	lsrs	r3, r3, #2
 8002182:	3302      	adds	r3, #2
 8002184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002188:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	f003 0303 	and.w	r3, r3, #3
 8002190:	009b      	lsls	r3, r3, #2
 8002192:	220f      	movs	r2, #15
 8002194:	fa02 f303 	lsl.w	r3, r2, r3
 8002198:	43db      	mvns	r3, r3
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4013      	ands	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80021a6:	d01f      	beq.n	80021e8 <HAL_GPIO_Init+0x1f8>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a4c      	ldr	r2, [pc, #304]	@ (80022dc <HAL_GPIO_Init+0x2ec>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d019      	beq.n	80021e4 <HAL_GPIO_Init+0x1f4>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a4b      	ldr	r2, [pc, #300]	@ (80022e0 <HAL_GPIO_Init+0x2f0>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d013      	beq.n	80021e0 <HAL_GPIO_Init+0x1f0>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	4a4a      	ldr	r2, [pc, #296]	@ (80022e4 <HAL_GPIO_Init+0x2f4>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d00d      	beq.n	80021dc <HAL_GPIO_Init+0x1ec>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	4a49      	ldr	r2, [pc, #292]	@ (80022e8 <HAL_GPIO_Init+0x2f8>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d007      	beq.n	80021d8 <HAL_GPIO_Init+0x1e8>
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	4a48      	ldr	r2, [pc, #288]	@ (80022ec <HAL_GPIO_Init+0x2fc>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d101      	bne.n	80021d4 <HAL_GPIO_Init+0x1e4>
 80021d0:	2305      	movs	r3, #5
 80021d2:	e00a      	b.n	80021ea <HAL_GPIO_Init+0x1fa>
 80021d4:	2306      	movs	r3, #6
 80021d6:	e008      	b.n	80021ea <HAL_GPIO_Init+0x1fa>
 80021d8:	2304      	movs	r3, #4
 80021da:	e006      	b.n	80021ea <HAL_GPIO_Init+0x1fa>
 80021dc:	2303      	movs	r3, #3
 80021de:	e004      	b.n	80021ea <HAL_GPIO_Init+0x1fa>
 80021e0:	2302      	movs	r3, #2
 80021e2:	e002      	b.n	80021ea <HAL_GPIO_Init+0x1fa>
 80021e4:	2301      	movs	r3, #1
 80021e6:	e000      	b.n	80021ea <HAL_GPIO_Init+0x1fa>
 80021e8:	2300      	movs	r3, #0
 80021ea:	697a      	ldr	r2, [r7, #20]
 80021ec:	f002 0203 	and.w	r2, r2, #3
 80021f0:	0092      	lsls	r2, r2, #2
 80021f2:	4093      	lsls	r3, r2
 80021f4:	693a      	ldr	r2, [r7, #16]
 80021f6:	4313      	orrs	r3, r2
 80021f8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021fa:	4937      	ldr	r1, [pc, #220]	@ (80022d8 <HAL_GPIO_Init+0x2e8>)
 80021fc:	697b      	ldr	r3, [r7, #20]
 80021fe:	089b      	lsrs	r3, r3, #2
 8002200:	3302      	adds	r3, #2
 8002202:	693a      	ldr	r2, [r7, #16]
 8002204:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002208:	4b39      	ldr	r3, [pc, #228]	@ (80022f0 <HAL_GPIO_Init+0x300>)
 800220a:	689b      	ldr	r3, [r3, #8]
 800220c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	43db      	mvns	r3, r3
 8002212:	693a      	ldr	r2, [r7, #16]
 8002214:	4013      	ands	r3, r2
 8002216:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	4313      	orrs	r3, r2
 800222a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800222c:	4a30      	ldr	r2, [pc, #192]	@ (80022f0 <HAL_GPIO_Init+0x300>)
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002232:	4b2f      	ldr	r3, [pc, #188]	@ (80022f0 <HAL_GPIO_Init+0x300>)
 8002234:	68db      	ldr	r3, [r3, #12]
 8002236:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	43db      	mvns	r3, r3
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	4013      	ands	r3, r2
 8002240:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d003      	beq.n	8002256 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800224e:	693a      	ldr	r2, [r7, #16]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	4313      	orrs	r3, r2
 8002254:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002256:	4a26      	ldr	r2, [pc, #152]	@ (80022f0 <HAL_GPIO_Init+0x300>)
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800225c:	4b24      	ldr	r3, [pc, #144]	@ (80022f0 <HAL_GPIO_Init+0x300>)
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	43db      	mvns	r3, r3
 8002266:	693a      	ldr	r2, [r7, #16]
 8002268:	4013      	ands	r3, r2
 800226a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	685b      	ldr	r3, [r3, #4]
 8002270:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d003      	beq.n	8002280 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4313      	orrs	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002280:	4a1b      	ldr	r2, [pc, #108]	@ (80022f0 <HAL_GPIO_Init+0x300>)
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002286:	4b1a      	ldr	r3, [pc, #104]	@ (80022f0 <HAL_GPIO_Init+0x300>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	43db      	mvns	r3, r3
 8002290:	693a      	ldr	r2, [r7, #16]
 8002292:	4013      	ands	r3, r2
 8002294:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d003      	beq.n	80022aa <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022aa:	4a11      	ldr	r2, [pc, #68]	@ (80022f0 <HAL_GPIO_Init+0x300>)
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022b0:	697b      	ldr	r3, [r7, #20]
 80022b2:	3301      	adds	r3, #1
 80022b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	fa22 f303 	lsr.w	r3, r2, r3
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	f47f ae9d 	bne.w	8002000 <HAL_GPIO_Init+0x10>
  }
}
 80022c6:	bf00      	nop
 80022c8:	bf00      	nop
 80022ca:	371c      	adds	r7, #28
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	40021000 	.word	0x40021000
 80022d8:	40010000 	.word	0x40010000
 80022dc:	48000400 	.word	0x48000400
 80022e0:	48000800 	.word	0x48000800
 80022e4:	48000c00 	.word	0x48000c00
 80022e8:	48001000 	.word	0x48001000
 80022ec:	48001400 	.word	0x48001400
 80022f0:	40010400 	.word	0x40010400

080022f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	807b      	strh	r3, [r7, #2]
 8002300:	4613      	mov	r3, r2
 8002302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002304:	787b      	ldrb	r3, [r7, #1]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800230a:	887a      	ldrh	r2, [r7, #2]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002310:	e002      	b.n	8002318 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002312:	887a      	ldrh	r2, [r7, #2]
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b082      	sub	sp, #8
 8002328:	af00      	add	r7, sp, #0
 800232a:	4603      	mov	r3, r0
 800232c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800232e:	4b08      	ldr	r3, [pc, #32]	@ (8002350 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002330:	695a      	ldr	r2, [r3, #20]
 8002332:	88fb      	ldrh	r3, [r7, #6]
 8002334:	4013      	ands	r3, r2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d006      	beq.n	8002348 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800233a:	4a05      	ldr	r2, [pc, #20]	@ (8002350 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800233c:	88fb      	ldrh	r3, [r7, #6]
 800233e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002340:	88fb      	ldrh	r3, [r7, #6]
 8002342:	4618      	mov	r0, r3
 8002344:	f000 f806 	bl	8002354 <HAL_GPIO_EXTI_Callback>
  }
}
 8002348:	bf00      	nop
 800234a:	3708      	adds	r7, #8
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40010400 	.word	0x40010400

08002354 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002354:	b480      	push	{r7}
 8002356:	b083      	sub	sp, #12
 8002358:	af00      	add	r7, sp, #0
 800235a:	4603      	mov	r3, r0
 800235c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800235e:	bf00      	nop
 8002360:	370c      	adds	r7, #12
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d141      	bne.n	80023fe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800237a:	4b4b      	ldr	r3, [pc, #300]	@ (80024a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002382:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002386:	d131      	bne.n	80023ec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002388:	4b47      	ldr	r3, [pc, #284]	@ (80024a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800238a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800238e:	4a46      	ldr	r2, [pc, #280]	@ (80024a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002390:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002394:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002398:	4b43      	ldr	r3, [pc, #268]	@ (80024a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023a0:	4a41      	ldr	r2, [pc, #260]	@ (80024a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80023a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023a8:	4b40      	ldr	r3, [pc, #256]	@ (80024ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2232      	movs	r2, #50	@ 0x32
 80023ae:	fb02 f303 	mul.w	r3, r2, r3
 80023b2:	4a3f      	ldr	r2, [pc, #252]	@ (80024b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023b4:	fba2 2303 	umull	r2, r3, r2, r3
 80023b8:	0c9b      	lsrs	r3, r3, #18
 80023ba:	3301      	adds	r3, #1
 80023bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023be:	e002      	b.n	80023c6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023c6:	4b38      	ldr	r3, [pc, #224]	@ (80024a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023d2:	d102      	bne.n	80023da <HAL_PWREx_ControlVoltageScaling+0x6e>
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f2      	bne.n	80023c0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023da:	4b33      	ldr	r3, [pc, #204]	@ (80024a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023e6:	d158      	bne.n	800249a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e057      	b.n	800249c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023ec:	4b2e      	ldr	r3, [pc, #184]	@ (80024a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80023f2:	4a2d      	ldr	r2, [pc, #180]	@ (80024a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80023f8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80023fc:	e04d      	b.n	800249a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002404:	d141      	bne.n	800248a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002406:	4b28      	ldr	r3, [pc, #160]	@ (80024a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800240e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002412:	d131      	bne.n	8002478 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002414:	4b24      	ldr	r3, [pc, #144]	@ (80024a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002416:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800241a:	4a23      	ldr	r2, [pc, #140]	@ (80024a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800241c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002420:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002424:	4b20      	ldr	r3, [pc, #128]	@ (80024a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800242c:	4a1e      	ldr	r2, [pc, #120]	@ (80024a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800242e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002432:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002434:	4b1d      	ldr	r3, [pc, #116]	@ (80024ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2232      	movs	r2, #50	@ 0x32
 800243a:	fb02 f303 	mul.w	r3, r2, r3
 800243e:	4a1c      	ldr	r2, [pc, #112]	@ (80024b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002440:	fba2 2303 	umull	r2, r3, r2, r3
 8002444:	0c9b      	lsrs	r3, r3, #18
 8002446:	3301      	adds	r3, #1
 8002448:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800244a:	e002      	b.n	8002452 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	3b01      	subs	r3, #1
 8002450:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002452:	4b15      	ldr	r3, [pc, #84]	@ (80024a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800245a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800245e:	d102      	bne.n	8002466 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d1f2      	bne.n	800244c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002466:	4b10      	ldr	r3, [pc, #64]	@ (80024a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002468:	695b      	ldr	r3, [r3, #20]
 800246a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800246e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002472:	d112      	bne.n	800249a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e011      	b.n	800249c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002478:	4b0b      	ldr	r3, [pc, #44]	@ (80024a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800247a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800247e:	4a0a      	ldr	r2, [pc, #40]	@ (80024a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002480:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002484:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002488:	e007      	b.n	800249a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800248a:	4b07      	ldr	r3, [pc, #28]	@ (80024a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002492:	4a05      	ldr	r2, [pc, #20]	@ (80024a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002494:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002498:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	3714      	adds	r7, #20
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr
 80024a8:	40007000 	.word	0x40007000
 80024ac:	20000204 	.word	0x20000204
 80024b0:	431bde83 	.word	0x431bde83

080024b4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80024b8:	4b05      	ldr	r3, [pc, #20]	@ (80024d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	4a04      	ldr	r2, [pc, #16]	@ (80024d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80024be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024c2:	6093      	str	r3, [r2, #8]
}
 80024c4:	bf00      	nop
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr
 80024ce:	bf00      	nop
 80024d0:	40007000 	.word	0x40007000

080024d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b088      	sub	sp, #32
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d101      	bne.n	80024e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e2fe      	b.n	8002ae4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d075      	beq.n	80025de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024f2:	4b97      	ldr	r3, [pc, #604]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024fc:	4b94      	ldr	r3, [pc, #592]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	2b0c      	cmp	r3, #12
 800250a:	d102      	bne.n	8002512 <HAL_RCC_OscConfig+0x3e>
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	2b03      	cmp	r3, #3
 8002510:	d002      	beq.n	8002518 <HAL_RCC_OscConfig+0x44>
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	2b08      	cmp	r3, #8
 8002516:	d10b      	bne.n	8002530 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002518:	4b8d      	ldr	r3, [pc, #564]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d05b      	beq.n	80025dc <HAL_RCC_OscConfig+0x108>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d157      	bne.n	80025dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800252c:	2301      	movs	r3, #1
 800252e:	e2d9      	b.n	8002ae4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002538:	d106      	bne.n	8002548 <HAL_RCC_OscConfig+0x74>
 800253a:	4b85      	ldr	r3, [pc, #532]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a84      	ldr	r2, [pc, #528]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 8002540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	e01d      	b.n	8002584 <HAL_RCC_OscConfig+0xb0>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002550:	d10c      	bne.n	800256c <HAL_RCC_OscConfig+0x98>
 8002552:	4b7f      	ldr	r3, [pc, #508]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a7e      	ldr	r2, [pc, #504]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 8002558:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	4b7c      	ldr	r3, [pc, #496]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a7b      	ldr	r2, [pc, #492]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 8002564:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	e00b      	b.n	8002584 <HAL_RCC_OscConfig+0xb0>
 800256c:	4b78      	ldr	r3, [pc, #480]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a77      	ldr	r2, [pc, #476]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 8002572:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	4b75      	ldr	r3, [pc, #468]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a74      	ldr	r2, [pc, #464]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 800257e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002582:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d013      	beq.n	80025b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7ff f8c0 	bl	8001710 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002594:	f7ff f8bc 	bl	8001710 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b64      	cmp	r3, #100	@ 0x64
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e29e      	b.n	8002ae4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d0f0      	beq.n	8002594 <HAL_RCC_OscConfig+0xc0>
 80025b2:	e014      	b.n	80025de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7ff f8ac 	bl	8001710 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025bc:	f7ff f8a8 	bl	8001710 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b64      	cmp	r3, #100	@ 0x64
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e28a      	b.n	8002ae4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025ce:	4b60      	ldr	r3, [pc, #384]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0xe8>
 80025da:	e000      	b.n	80025de <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d075      	beq.n	80026d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ea:	4b59      	ldr	r3, [pc, #356]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f003 030c 	and.w	r3, r3, #12
 80025f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025f4:	4b56      	ldr	r3, [pc, #344]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f003 0303 	and.w	r3, r3, #3
 80025fc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	2b0c      	cmp	r3, #12
 8002602:	d102      	bne.n	800260a <HAL_RCC_OscConfig+0x136>
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	2b02      	cmp	r3, #2
 8002608:	d002      	beq.n	8002610 <HAL_RCC_OscConfig+0x13c>
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	2b04      	cmp	r3, #4
 800260e:	d11f      	bne.n	8002650 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002610:	4b4f      	ldr	r3, [pc, #316]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_RCC_OscConfig+0x154>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d101      	bne.n	8002628 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002624:	2301      	movs	r3, #1
 8002626:	e25d      	b.n	8002ae4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002628:	4b49      	ldr	r3, [pc, #292]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 800262a:	685b      	ldr	r3, [r3, #4]
 800262c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	061b      	lsls	r3, r3, #24
 8002636:	4946      	ldr	r1, [pc, #280]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 8002638:	4313      	orrs	r3, r2
 800263a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800263c:	4b45      	ldr	r3, [pc, #276]	@ (8002754 <HAL_RCC_OscConfig+0x280>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4618      	mov	r0, r3
 8002642:	f7ff f819 	bl	8001678 <HAL_InitTick>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	d043      	beq.n	80026d4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	e249      	b.n	8002ae4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d023      	beq.n	80026a0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002658:	4b3d      	ldr	r3, [pc, #244]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a3c      	ldr	r2, [pc, #240]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 800265e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002662:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002664:	f7ff f854 	bl	8001710 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800266c:	f7ff f850 	bl	8001710 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e232      	b.n	8002ae4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800267e:	4b34      	ldr	r3, [pc, #208]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0f0      	beq.n	800266c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800268a:	4b31      	ldr	r3, [pc, #196]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	061b      	lsls	r3, r3, #24
 8002698:	492d      	ldr	r1, [pc, #180]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 800269a:	4313      	orrs	r3, r2
 800269c:	604b      	str	r3, [r1, #4]
 800269e:	e01a      	b.n	80026d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a2a      	ldr	r2, [pc, #168]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 80026a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ac:	f7ff f830 	bl	8001710 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b4:	f7ff f82c 	bl	8001710 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e20e      	b.n	8002ae4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80026c6:	4b22      	ldr	r3, [pc, #136]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d1f0      	bne.n	80026b4 <HAL_RCC_OscConfig+0x1e0>
 80026d2:	e000      	b.n	80026d6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0308 	and.w	r3, r3, #8
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d041      	beq.n	8002766 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d01c      	beq.n	8002724 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026ea:	4b19      	ldr	r3, [pc, #100]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 80026ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026f0:	4a17      	ldr	r2, [pc, #92]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 80026f2:	f043 0301 	orr.w	r3, r3, #1
 80026f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fa:	f7ff f809 	bl	8001710 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002702:	f7ff f805 	bl	8001710 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e1e7      	b.n	8002ae4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002714:	4b0e      	ldr	r3, [pc, #56]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 8002716:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0ef      	beq.n	8002702 <HAL_RCC_OscConfig+0x22e>
 8002722:	e020      	b.n	8002766 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002724:	4b0a      	ldr	r3, [pc, #40]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 8002726:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800272a:	4a09      	ldr	r2, [pc, #36]	@ (8002750 <HAL_RCC_OscConfig+0x27c>)
 800272c:	f023 0301 	bic.w	r3, r3, #1
 8002730:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002734:	f7fe ffec 	bl	8001710 <HAL_GetTick>
 8002738:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800273a:	e00d      	b.n	8002758 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800273c:	f7fe ffe8 	bl	8001710 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d906      	bls.n	8002758 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e1ca      	b.n	8002ae4 <HAL_RCC_OscConfig+0x610>
 800274e:	bf00      	nop
 8002750:	40021000 	.word	0x40021000
 8002754:	20000208 	.word	0x20000208
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002758:	4b8c      	ldr	r3, [pc, #560]	@ (800298c <HAL_RCC_OscConfig+0x4b8>)
 800275a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1ea      	bne.n	800273c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0304 	and.w	r3, r3, #4
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 80a6 	beq.w	80028c0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002774:	2300      	movs	r3, #0
 8002776:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002778:	4b84      	ldr	r3, [pc, #528]	@ (800298c <HAL_RCC_OscConfig+0x4b8>)
 800277a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800277c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002780:	2b00      	cmp	r3, #0
 8002782:	d101      	bne.n	8002788 <HAL_RCC_OscConfig+0x2b4>
 8002784:	2301      	movs	r3, #1
 8002786:	e000      	b.n	800278a <HAL_RCC_OscConfig+0x2b6>
 8002788:	2300      	movs	r3, #0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00d      	beq.n	80027aa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800278e:	4b7f      	ldr	r3, [pc, #508]	@ (800298c <HAL_RCC_OscConfig+0x4b8>)
 8002790:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002792:	4a7e      	ldr	r2, [pc, #504]	@ (800298c <HAL_RCC_OscConfig+0x4b8>)
 8002794:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002798:	6593      	str	r3, [r2, #88]	@ 0x58
 800279a:	4b7c      	ldr	r3, [pc, #496]	@ (800298c <HAL_RCC_OscConfig+0x4b8>)
 800279c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80027a2:	60fb      	str	r3, [r7, #12]
 80027a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80027a6:	2301      	movs	r3, #1
 80027a8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027aa:	4b79      	ldr	r3, [pc, #484]	@ (8002990 <HAL_RCC_OscConfig+0x4bc>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d118      	bne.n	80027e8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027b6:	4b76      	ldr	r3, [pc, #472]	@ (8002990 <HAL_RCC_OscConfig+0x4bc>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a75      	ldr	r2, [pc, #468]	@ (8002990 <HAL_RCC_OscConfig+0x4bc>)
 80027bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c2:	f7fe ffa5 	bl	8001710 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ca:	f7fe ffa1 	bl	8001710 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e183      	b.n	8002ae4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027dc:	4b6c      	ldr	r3, [pc, #432]	@ (8002990 <HAL_RCC_OscConfig+0x4bc>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d0f0      	beq.n	80027ca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d108      	bne.n	8002802 <HAL_RCC_OscConfig+0x32e>
 80027f0:	4b66      	ldr	r3, [pc, #408]	@ (800298c <HAL_RCC_OscConfig+0x4b8>)
 80027f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80027f6:	4a65      	ldr	r2, [pc, #404]	@ (800298c <HAL_RCC_OscConfig+0x4b8>)
 80027f8:	f043 0301 	orr.w	r3, r3, #1
 80027fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002800:	e024      	b.n	800284c <HAL_RCC_OscConfig+0x378>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	2b05      	cmp	r3, #5
 8002808:	d110      	bne.n	800282c <HAL_RCC_OscConfig+0x358>
 800280a:	4b60      	ldr	r3, [pc, #384]	@ (800298c <HAL_RCC_OscConfig+0x4b8>)
 800280c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002810:	4a5e      	ldr	r2, [pc, #376]	@ (800298c <HAL_RCC_OscConfig+0x4b8>)
 8002812:	f043 0304 	orr.w	r3, r3, #4
 8002816:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800281a:	4b5c      	ldr	r3, [pc, #368]	@ (800298c <HAL_RCC_OscConfig+0x4b8>)
 800281c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002820:	4a5a      	ldr	r2, [pc, #360]	@ (800298c <HAL_RCC_OscConfig+0x4b8>)
 8002822:	f043 0301 	orr.w	r3, r3, #1
 8002826:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800282a:	e00f      	b.n	800284c <HAL_RCC_OscConfig+0x378>
 800282c:	4b57      	ldr	r3, [pc, #348]	@ (800298c <HAL_RCC_OscConfig+0x4b8>)
 800282e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002832:	4a56      	ldr	r2, [pc, #344]	@ (800298c <HAL_RCC_OscConfig+0x4b8>)
 8002834:	f023 0301 	bic.w	r3, r3, #1
 8002838:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800283c:	4b53      	ldr	r3, [pc, #332]	@ (800298c <HAL_RCC_OscConfig+0x4b8>)
 800283e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002842:	4a52      	ldr	r2, [pc, #328]	@ (800298c <HAL_RCC_OscConfig+0x4b8>)
 8002844:	f023 0304 	bic.w	r3, r3, #4
 8002848:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d016      	beq.n	8002882 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002854:	f7fe ff5c 	bl	8001710 <HAL_GetTick>
 8002858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800285a:	e00a      	b.n	8002872 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800285c:	f7fe ff58 	bl	8001710 <HAL_GetTick>
 8002860:	4602      	mov	r2, r0
 8002862:	693b      	ldr	r3, [r7, #16]
 8002864:	1ad3      	subs	r3, r2, r3
 8002866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800286a:	4293      	cmp	r3, r2
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e138      	b.n	8002ae4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002872:	4b46      	ldr	r3, [pc, #280]	@ (800298c <HAL_RCC_OscConfig+0x4b8>)
 8002874:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d0ed      	beq.n	800285c <HAL_RCC_OscConfig+0x388>
 8002880:	e015      	b.n	80028ae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002882:	f7fe ff45 	bl	8001710 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002888:	e00a      	b.n	80028a0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800288a:	f7fe ff41 	bl	8001710 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002898:	4293      	cmp	r3, r2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e121      	b.n	8002ae4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80028a0:	4b3a      	ldr	r3, [pc, #232]	@ (800298c <HAL_RCC_OscConfig+0x4b8>)
 80028a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028a6:	f003 0302 	and.w	r3, r3, #2
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1ed      	bne.n	800288a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80028ae:	7ffb      	ldrb	r3, [r7, #31]
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d105      	bne.n	80028c0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028b4:	4b35      	ldr	r3, [pc, #212]	@ (800298c <HAL_RCC_OscConfig+0x4b8>)
 80028b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80028b8:	4a34      	ldr	r2, [pc, #208]	@ (800298c <HAL_RCC_OscConfig+0x4b8>)
 80028ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80028be:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0320 	and.w	r3, r3, #32
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d03c      	beq.n	8002946 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d01c      	beq.n	800290e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028d4:	4b2d      	ldr	r3, [pc, #180]	@ (800298c <HAL_RCC_OscConfig+0x4b8>)
 80028d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80028da:	4a2c      	ldr	r2, [pc, #176]	@ (800298c <HAL_RCC_OscConfig+0x4b8>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028e4:	f7fe ff14 	bl	8001710 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028ec:	f7fe ff10 	bl	8001710 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e0f2      	b.n	8002ae4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80028fe:	4b23      	ldr	r3, [pc, #140]	@ (800298c <HAL_RCC_OscConfig+0x4b8>)
 8002900:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0ef      	beq.n	80028ec <HAL_RCC_OscConfig+0x418>
 800290c:	e01b      	b.n	8002946 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800290e:	4b1f      	ldr	r3, [pc, #124]	@ (800298c <HAL_RCC_OscConfig+0x4b8>)
 8002910:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002914:	4a1d      	ldr	r2, [pc, #116]	@ (800298c <HAL_RCC_OscConfig+0x4b8>)
 8002916:	f023 0301 	bic.w	r3, r3, #1
 800291a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800291e:	f7fe fef7 	bl	8001710 <HAL_GetTick>
 8002922:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002924:	e008      	b.n	8002938 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002926:	f7fe fef3 	bl	8001710 <HAL_GetTick>
 800292a:	4602      	mov	r2, r0
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	1ad3      	subs	r3, r2, r3
 8002930:	2b02      	cmp	r3, #2
 8002932:	d901      	bls.n	8002938 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002934:	2303      	movs	r3, #3
 8002936:	e0d5      	b.n	8002ae4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002938:	4b14      	ldr	r3, [pc, #80]	@ (800298c <HAL_RCC_OscConfig+0x4b8>)
 800293a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800293e:	f003 0302 	and.w	r3, r3, #2
 8002942:	2b00      	cmp	r3, #0
 8002944:	d1ef      	bne.n	8002926 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	69db      	ldr	r3, [r3, #28]
 800294a:	2b00      	cmp	r3, #0
 800294c:	f000 80c9 	beq.w	8002ae2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002950:	4b0e      	ldr	r3, [pc, #56]	@ (800298c <HAL_RCC_OscConfig+0x4b8>)
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f003 030c 	and.w	r3, r3, #12
 8002958:	2b0c      	cmp	r3, #12
 800295a:	f000 8083 	beq.w	8002a64 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	2b02      	cmp	r3, #2
 8002964:	d15e      	bne.n	8002a24 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002966:	4b09      	ldr	r3, [pc, #36]	@ (800298c <HAL_RCC_OscConfig+0x4b8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a08      	ldr	r2, [pc, #32]	@ (800298c <HAL_RCC_OscConfig+0x4b8>)
 800296c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002970:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002972:	f7fe fecd 	bl	8001710 <HAL_GetTick>
 8002976:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002978:	e00c      	b.n	8002994 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800297a:	f7fe fec9 	bl	8001710 <HAL_GetTick>
 800297e:	4602      	mov	r2, r0
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	1ad3      	subs	r3, r2, r3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d905      	bls.n	8002994 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e0ab      	b.n	8002ae4 <HAL_RCC_OscConfig+0x610>
 800298c:	40021000 	.word	0x40021000
 8002990:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002994:	4b55      	ldr	r3, [pc, #340]	@ (8002aec <HAL_RCC_OscConfig+0x618>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d1ec      	bne.n	800297a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029a0:	4b52      	ldr	r3, [pc, #328]	@ (8002aec <HAL_RCC_OscConfig+0x618>)
 80029a2:	68da      	ldr	r2, [r3, #12]
 80029a4:	4b52      	ldr	r3, [pc, #328]	@ (8002af0 <HAL_RCC_OscConfig+0x61c>)
 80029a6:	4013      	ands	r3, r2
 80029a8:	687a      	ldr	r2, [r7, #4]
 80029aa:	6a11      	ldr	r1, [r2, #32]
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80029b0:	3a01      	subs	r2, #1
 80029b2:	0112      	lsls	r2, r2, #4
 80029b4:	4311      	orrs	r1, r2
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80029ba:	0212      	lsls	r2, r2, #8
 80029bc:	4311      	orrs	r1, r2
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80029c2:	0852      	lsrs	r2, r2, #1
 80029c4:	3a01      	subs	r2, #1
 80029c6:	0552      	lsls	r2, r2, #21
 80029c8:	4311      	orrs	r1, r2
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80029ce:	0852      	lsrs	r2, r2, #1
 80029d0:	3a01      	subs	r2, #1
 80029d2:	0652      	lsls	r2, r2, #25
 80029d4:	4311      	orrs	r1, r2
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80029da:	06d2      	lsls	r2, r2, #27
 80029dc:	430a      	orrs	r2, r1
 80029de:	4943      	ldr	r1, [pc, #268]	@ (8002aec <HAL_RCC_OscConfig+0x618>)
 80029e0:	4313      	orrs	r3, r2
 80029e2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029e4:	4b41      	ldr	r3, [pc, #260]	@ (8002aec <HAL_RCC_OscConfig+0x618>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a40      	ldr	r2, [pc, #256]	@ (8002aec <HAL_RCC_OscConfig+0x618>)
 80029ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029ee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029f0:	4b3e      	ldr	r3, [pc, #248]	@ (8002aec <HAL_RCC_OscConfig+0x618>)
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	4a3d      	ldr	r2, [pc, #244]	@ (8002aec <HAL_RCC_OscConfig+0x618>)
 80029f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80029fa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029fc:	f7fe fe88 	bl	8001710 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a04:	f7fe fe84 	bl	8001710 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e066      	b.n	8002ae4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a16:	4b35      	ldr	r3, [pc, #212]	@ (8002aec <HAL_RCC_OscConfig+0x618>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCC_OscConfig+0x530>
 8002a22:	e05e      	b.n	8002ae2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a24:	4b31      	ldr	r3, [pc, #196]	@ (8002aec <HAL_RCC_OscConfig+0x618>)
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a30      	ldr	r2, [pc, #192]	@ (8002aec <HAL_RCC_OscConfig+0x618>)
 8002a2a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a30:	f7fe fe6e 	bl	8001710 <HAL_GetTick>
 8002a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a36:	e008      	b.n	8002a4a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a38:	f7fe fe6a 	bl	8001710 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d901      	bls.n	8002a4a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002a46:	2303      	movs	r3, #3
 8002a48:	e04c      	b.n	8002ae4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a4a:	4b28      	ldr	r3, [pc, #160]	@ (8002aec <HAL_RCC_OscConfig+0x618>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d1f0      	bne.n	8002a38 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002a56:	4b25      	ldr	r3, [pc, #148]	@ (8002aec <HAL_RCC_OscConfig+0x618>)
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	4924      	ldr	r1, [pc, #144]	@ (8002aec <HAL_RCC_OscConfig+0x618>)
 8002a5c:	4b25      	ldr	r3, [pc, #148]	@ (8002af4 <HAL_RCC_OscConfig+0x620>)
 8002a5e:	4013      	ands	r3, r2
 8002a60:	60cb      	str	r3, [r1, #12]
 8002a62:	e03e      	b.n	8002ae2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69db      	ldr	r3, [r3, #28]
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d101      	bne.n	8002a70 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e039      	b.n	8002ae4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002a70:	4b1e      	ldr	r3, [pc, #120]	@ (8002aec <HAL_RCC_OscConfig+0x618>)
 8002a72:	68db      	ldr	r3, [r3, #12]
 8002a74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f003 0203 	and.w	r2, r3, #3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d12c      	bne.n	8002ade <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a92:	429a      	cmp	r2, r3
 8002a94:	d123      	bne.n	8002ade <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aa0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d11b      	bne.n	8002ade <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ab2:	429a      	cmp	r2, r3
 8002ab4:	d113      	bne.n	8002ade <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac0:	085b      	lsrs	r3, r3, #1
 8002ac2:	3b01      	subs	r3, #1
 8002ac4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d109      	bne.n	8002ade <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ad4:	085b      	lsrs	r3, r3, #1
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d001      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e000      	b.n	8002ae4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3720      	adds	r7, #32
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40021000 	.word	0x40021000
 8002af0:	019f800c 	.word	0x019f800c
 8002af4:	feeefffc 	.word	0xfeeefffc

08002af8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
 8002b00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002b02:	2300      	movs	r3, #0
 8002b04:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e11e      	b.n	8002d4e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b10:	4b91      	ldr	r3, [pc, #580]	@ (8002d58 <HAL_RCC_ClockConfig+0x260>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 030f 	and.w	r3, r3, #15
 8002b18:	683a      	ldr	r2, [r7, #0]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d910      	bls.n	8002b40 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b1e:	4b8e      	ldr	r3, [pc, #568]	@ (8002d58 <HAL_RCC_ClockConfig+0x260>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f023 020f 	bic.w	r2, r3, #15
 8002b26:	498c      	ldr	r1, [pc, #560]	@ (8002d58 <HAL_RCC_ClockConfig+0x260>)
 8002b28:	683b      	ldr	r3, [r7, #0]
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b2e:	4b8a      	ldr	r3, [pc, #552]	@ (8002d58 <HAL_RCC_ClockConfig+0x260>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f003 030f 	and.w	r3, r3, #15
 8002b36:	683a      	ldr	r2, [r7, #0]
 8002b38:	429a      	cmp	r2, r3
 8002b3a:	d001      	beq.n	8002b40 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e106      	b.n	8002d4e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d073      	beq.n	8002c34 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	d129      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b54:	4b81      	ldr	r3, [pc, #516]	@ (8002d5c <HAL_RCC_ClockConfig+0x264>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d101      	bne.n	8002b64 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e0f4      	b.n	8002d4e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002b64:	f000 f99e 	bl	8002ea4 <RCC_GetSysClockFreqFromPLLSource>
 8002b68:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	4a7c      	ldr	r2, [pc, #496]	@ (8002d60 <HAL_RCC_ClockConfig+0x268>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d93f      	bls.n	8002bf2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002b72:	4b7a      	ldr	r3, [pc, #488]	@ (8002d5c <HAL_RCC_ClockConfig+0x264>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d009      	beq.n	8002b92 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d033      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d12f      	bne.n	8002bf2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b92:	4b72      	ldr	r3, [pc, #456]	@ (8002d5c <HAL_RCC_ClockConfig+0x264>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002b9a:	4a70      	ldr	r2, [pc, #448]	@ (8002d5c <HAL_RCC_ClockConfig+0x264>)
 8002b9c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ba0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002ba2:	2380      	movs	r3, #128	@ 0x80
 8002ba4:	617b      	str	r3, [r7, #20]
 8002ba6:	e024      	b.n	8002bf2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d107      	bne.n	8002bc0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002bb0:	4b6a      	ldr	r3, [pc, #424]	@ (8002d5c <HAL_RCC_ClockConfig+0x264>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d109      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e0c6      	b.n	8002d4e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002bc0:	4b66      	ldr	r3, [pc, #408]	@ (8002d5c <HAL_RCC_ClockConfig+0x264>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d101      	bne.n	8002bd0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e0be      	b.n	8002d4e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002bd0:	f000 f8ce 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 8002bd4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	4a61      	ldr	r2, [pc, #388]	@ (8002d60 <HAL_RCC_ClockConfig+0x268>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d909      	bls.n	8002bf2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002bde:	4b5f      	ldr	r3, [pc, #380]	@ (8002d5c <HAL_RCC_ClockConfig+0x264>)
 8002be0:	689b      	ldr	r3, [r3, #8]
 8002be2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002be6:	4a5d      	ldr	r2, [pc, #372]	@ (8002d5c <HAL_RCC_ClockConfig+0x264>)
 8002be8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002bec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002bee:	2380      	movs	r3, #128	@ 0x80
 8002bf0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002bf2:	4b5a      	ldr	r3, [pc, #360]	@ (8002d5c <HAL_RCC_ClockConfig+0x264>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f023 0203 	bic.w	r2, r3, #3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	4957      	ldr	r1, [pc, #348]	@ (8002d5c <HAL_RCC_ClockConfig+0x264>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c04:	f7fe fd84 	bl	8001710 <HAL_GetTick>
 8002c08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c0a:	e00a      	b.n	8002c22 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c0c:	f7fe fd80 	bl	8001710 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d901      	bls.n	8002c22 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002c1e:	2303      	movs	r3, #3
 8002c20:	e095      	b.n	8002d4e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c22:	4b4e      	ldr	r3, [pc, #312]	@ (8002d5c <HAL_RCC_ClockConfig+0x264>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 020c 	and.w	r2, r3, #12
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d1eb      	bne.n	8002c0c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 0302 	and.w	r3, r3, #2
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d023      	beq.n	8002c88 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0304 	and.w	r3, r3, #4
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d005      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c4c:	4b43      	ldr	r3, [pc, #268]	@ (8002d5c <HAL_RCC_ClockConfig+0x264>)
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	4a42      	ldr	r2, [pc, #264]	@ (8002d5c <HAL_RCC_ClockConfig+0x264>)
 8002c52:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c56:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f003 0308 	and.w	r3, r3, #8
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d007      	beq.n	8002c74 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002c64:	4b3d      	ldr	r3, [pc, #244]	@ (8002d5c <HAL_RCC_ClockConfig+0x264>)
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002c6c:	4a3b      	ldr	r2, [pc, #236]	@ (8002d5c <HAL_RCC_ClockConfig+0x264>)
 8002c6e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002c72:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c74:	4b39      	ldr	r3, [pc, #228]	@ (8002d5c <HAL_RCC_ClockConfig+0x264>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	4936      	ldr	r1, [pc, #216]	@ (8002d5c <HAL_RCC_ClockConfig+0x264>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	608b      	str	r3, [r1, #8]
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	2b80      	cmp	r3, #128	@ 0x80
 8002c8c:	d105      	bne.n	8002c9a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002c8e:	4b33      	ldr	r3, [pc, #204]	@ (8002d5c <HAL_RCC_ClockConfig+0x264>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	4a32      	ldr	r2, [pc, #200]	@ (8002d5c <HAL_RCC_ClockConfig+0x264>)
 8002c94:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002c98:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c9a:	4b2f      	ldr	r3, [pc, #188]	@ (8002d58 <HAL_RCC_ClockConfig+0x260>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	683a      	ldr	r2, [r7, #0]
 8002ca4:	429a      	cmp	r2, r3
 8002ca6:	d21d      	bcs.n	8002ce4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca8:	4b2b      	ldr	r3, [pc, #172]	@ (8002d58 <HAL_RCC_ClockConfig+0x260>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f023 020f 	bic.w	r2, r3, #15
 8002cb0:	4929      	ldr	r1, [pc, #164]	@ (8002d58 <HAL_RCC_ClockConfig+0x260>)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002cb8:	f7fe fd2a 	bl	8001710 <HAL_GetTick>
 8002cbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cbe:	e00a      	b.n	8002cd6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cc0:	f7fe fd26 	bl	8001710 <HAL_GetTick>
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	1ad3      	subs	r3, r2, r3
 8002cca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d901      	bls.n	8002cd6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002cd2:	2303      	movs	r3, #3
 8002cd4:	e03b      	b.n	8002d4e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cd6:	4b20      	ldr	r3, [pc, #128]	@ (8002d58 <HAL_RCC_ClockConfig+0x260>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f003 030f 	and.w	r3, r3, #15
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d1ed      	bne.n	8002cc0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0304 	and.w	r3, r3, #4
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d008      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8002d5c <HAL_RCC_ClockConfig+0x264>)
 8002cf2:	689b      	ldr	r3, [r3, #8]
 8002cf4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	68db      	ldr	r3, [r3, #12]
 8002cfc:	4917      	ldr	r1, [pc, #92]	@ (8002d5c <HAL_RCC_ClockConfig+0x264>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d009      	beq.n	8002d22 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d0e:	4b13      	ldr	r3, [pc, #76]	@ (8002d5c <HAL_RCC_ClockConfig+0x264>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691b      	ldr	r3, [r3, #16]
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	490f      	ldr	r1, [pc, #60]	@ (8002d5c <HAL_RCC_ClockConfig+0x264>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d22:	f000 f825 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 8002d26:	4602      	mov	r2, r0
 8002d28:	4b0c      	ldr	r3, [pc, #48]	@ (8002d5c <HAL_RCC_ClockConfig+0x264>)
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	091b      	lsrs	r3, r3, #4
 8002d2e:	f003 030f 	and.w	r3, r3, #15
 8002d32:	490c      	ldr	r1, [pc, #48]	@ (8002d64 <HAL_RCC_ClockConfig+0x26c>)
 8002d34:	5ccb      	ldrb	r3, [r1, r3]
 8002d36:	f003 031f 	and.w	r3, r3, #31
 8002d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d68 <HAL_RCC_ClockConfig+0x270>)
 8002d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002d42:	4b0a      	ldr	r3, [pc, #40]	@ (8002d6c <HAL_RCC_ClockConfig+0x274>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7fe fc96 	bl	8001678 <HAL_InitTick>
 8002d4c:	4603      	mov	r3, r0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3718      	adds	r7, #24
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	40022000 	.word	0x40022000
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	04c4b400 	.word	0x04c4b400
 8002d64:	0800641c 	.word	0x0800641c
 8002d68:	20000204 	.word	0x20000204
 8002d6c:	20000208 	.word	0x20000208

08002d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b087      	sub	sp, #28
 8002d74:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002d76:	4b2c      	ldr	r3, [pc, #176]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 030c 	and.w	r3, r3, #12
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	d102      	bne.n	8002d88 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002d82:	4b2a      	ldr	r3, [pc, #168]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	e047      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002d88:	4b27      	ldr	r3, [pc, #156]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	f003 030c 	and.w	r3, r3, #12
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d102      	bne.n	8002d9a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002d94:	4b26      	ldr	r3, [pc, #152]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	e03e      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002d9a:	4b23      	ldr	r3, [pc, #140]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	f003 030c 	and.w	r3, r3, #12
 8002da2:	2b0c      	cmp	r3, #12
 8002da4:	d136      	bne.n	8002e14 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002da6:	4b20      	ldr	r3, [pc, #128]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002da8:	68db      	ldr	r3, [r3, #12]
 8002daa:	f003 0303 	and.w	r3, r3, #3
 8002dae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002db0:	4b1d      	ldr	r3, [pc, #116]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	091b      	lsrs	r3, r3, #4
 8002db6:	f003 030f 	and.w	r3, r3, #15
 8002dba:	3301      	adds	r3, #1
 8002dbc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2b03      	cmp	r3, #3
 8002dc2:	d10c      	bne.n	8002dde <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002dc4:	4a1a      	ldr	r2, [pc, #104]	@ (8002e30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dcc:	4a16      	ldr	r2, [pc, #88]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dce:	68d2      	ldr	r2, [r2, #12]
 8002dd0:	0a12      	lsrs	r2, r2, #8
 8002dd2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002dd6:	fb02 f303 	mul.w	r3, r2, r3
 8002dda:	617b      	str	r3, [r7, #20]
      break;
 8002ddc:	e00c      	b.n	8002df8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002dde:	4a13      	ldr	r2, [pc, #76]	@ (8002e2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de6:	4a10      	ldr	r2, [pc, #64]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002de8:	68d2      	ldr	r2, [r2, #12]
 8002dea:	0a12      	lsrs	r2, r2, #8
 8002dec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002df0:	fb02 f303 	mul.w	r3, r2, r3
 8002df4:	617b      	str	r3, [r7, #20]
      break;
 8002df6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002df8:	4b0b      	ldr	r3, [pc, #44]	@ (8002e28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	0e5b      	lsrs	r3, r3, #25
 8002dfe:	f003 0303 	and.w	r3, r3, #3
 8002e02:	3301      	adds	r3, #1
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e10:	613b      	str	r3, [r7, #16]
 8002e12:	e001      	b.n	8002e18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002e18:	693b      	ldr	r3, [r7, #16]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	371c      	adds	r7, #28
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	00f42400 	.word	0x00f42400
 8002e30:	016e3600 	.word	0x016e3600

08002e34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e34:	b480      	push	{r7}
 8002e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e38:	4b03      	ldr	r3, [pc, #12]	@ (8002e48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr
 8002e46:	bf00      	nop
 8002e48:	20000204 	.word	0x20000204

08002e4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002e50:	f7ff fff0 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8002e54:	4602      	mov	r2, r0
 8002e56:	4b06      	ldr	r3, [pc, #24]	@ (8002e70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e58:	689b      	ldr	r3, [r3, #8]
 8002e5a:	0a1b      	lsrs	r3, r3, #8
 8002e5c:	f003 0307 	and.w	r3, r3, #7
 8002e60:	4904      	ldr	r1, [pc, #16]	@ (8002e74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002e62:	5ccb      	ldrb	r3, [r1, r3]
 8002e64:	f003 031f 	and.w	r3, r3, #31
 8002e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	bd80      	pop	{r7, pc}
 8002e70:	40021000 	.word	0x40021000
 8002e74:	0800642c 	.word	0x0800642c

08002e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002e7c:	f7ff ffda 	bl	8002e34 <HAL_RCC_GetHCLKFreq>
 8002e80:	4602      	mov	r2, r0
 8002e82:	4b06      	ldr	r3, [pc, #24]	@ (8002e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	0adb      	lsrs	r3, r3, #11
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	4904      	ldr	r1, [pc, #16]	@ (8002ea0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002e8e:	5ccb      	ldrb	r3, [r1, r3]
 8002e90:	f003 031f 	and.w	r3, r3, #31
 8002e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	0800642c 	.word	0x0800642c

08002ea4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b087      	sub	sp, #28
 8002ea8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8002f24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	f003 0303 	and.w	r3, r3, #3
 8002eb2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	091b      	lsrs	r3, r3, #4
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	3301      	adds	r3, #1
 8002ec0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	2b03      	cmp	r3, #3
 8002ec6:	d10c      	bne.n	8002ee2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ec8:	4a17      	ldr	r2, [pc, #92]	@ (8002f28 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ed0:	4a14      	ldr	r2, [pc, #80]	@ (8002f24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ed2:	68d2      	ldr	r2, [r2, #12]
 8002ed4:	0a12      	lsrs	r2, r2, #8
 8002ed6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002eda:	fb02 f303 	mul.w	r3, r2, r3
 8002ede:	617b      	str	r3, [r7, #20]
    break;
 8002ee0:	e00c      	b.n	8002efc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ee2:	4a12      	ldr	r2, [pc, #72]	@ (8002f2c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eea:	4a0e      	ldr	r2, [pc, #56]	@ (8002f24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002eec:	68d2      	ldr	r2, [r2, #12]
 8002eee:	0a12      	lsrs	r2, r2, #8
 8002ef0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ef4:	fb02 f303 	mul.w	r3, r2, r3
 8002ef8:	617b      	str	r3, [r7, #20]
    break;
 8002efa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002efc:	4b09      	ldr	r3, [pc, #36]	@ (8002f24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	0e5b      	lsrs	r3, r3, #25
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	3301      	adds	r3, #1
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002f0c:	697a      	ldr	r2, [r7, #20]
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f14:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002f16:	687b      	ldr	r3, [r7, #4]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	371c      	adds	r7, #28
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr
 8002f24:	40021000 	.word	0x40021000
 8002f28:	016e3600 	.word	0x016e3600
 8002f2c:	00f42400 	.word	0x00f42400

08002f30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b086      	sub	sp, #24
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f38:	2300      	movs	r3, #0
 8002f3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 8098 	beq.w	800307e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f52:	4b43      	ldr	r3, [pc, #268]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10d      	bne.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f5e:	4b40      	ldr	r3, [pc, #256]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f62:	4a3f      	ldr	r2, [pc, #252]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f68:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f6a:	4b3d      	ldr	r3, [pc, #244]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002f6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f72:	60bb      	str	r3, [r7, #8]
 8002f74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f76:	2301      	movs	r3, #1
 8002f78:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f7a:	4b3a      	ldr	r3, [pc, #232]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a39      	ldr	r2, [pc, #228]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002f80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f86:	f7fe fbc3 	bl	8001710 <HAL_GetTick>
 8002f8a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f8c:	e009      	b.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f8e:	f7fe fbbf 	bl	8001710 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d902      	bls.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	74fb      	strb	r3, [r7, #19]
        break;
 8002fa0:	e005      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002fa2:	4b30      	ldr	r3, [pc, #192]	@ (8003064 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d0ef      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002fae:	7cfb      	ldrb	r3, [r7, #19]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d159      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fb4:	4b2a      	ldr	r3, [pc, #168]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002fbe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d01e      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d019      	beq.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fd0:	4b23      	ldr	r3, [pc, #140]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002fda:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fdc:	4b20      	ldr	r3, [pc, #128]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002fe2:	4a1f      	ldr	r2, [pc, #124]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fe4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fe8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fec:	4b1c      	ldr	r3, [pc, #112]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002fee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ff2:	4a1b      	ldr	r2, [pc, #108]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ff4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ff8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ffc:	4a18      	ldr	r2, [pc, #96]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d016      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800300e:	f7fe fb7f 	bl	8001710 <HAL_GetTick>
 8003012:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003014:	e00b      	b.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003016:	f7fe fb7b 	bl	8001710 <HAL_GetTick>
 800301a:	4602      	mov	r2, r0
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	1ad3      	subs	r3, r2, r3
 8003020:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003024:	4293      	cmp	r3, r2
 8003026:	d902      	bls.n	800302e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003028:	2303      	movs	r3, #3
 800302a:	74fb      	strb	r3, [r7, #19]
            break;
 800302c:	e006      	b.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800302e:	4b0c      	ldr	r3, [pc, #48]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003030:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b00      	cmp	r3, #0
 800303a:	d0ec      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800303c:	7cfb      	ldrb	r3, [r7, #19]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10b      	bne.n	800305a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003042:	4b07      	ldr	r3, [pc, #28]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003048:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003050:	4903      	ldr	r1, [pc, #12]	@ (8003060 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003052:	4313      	orrs	r3, r2
 8003054:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003058:	e008      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800305a:	7cfb      	ldrb	r3, [r7, #19]
 800305c:	74bb      	strb	r3, [r7, #18]
 800305e:	e005      	b.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003060:	40021000 	.word	0x40021000
 8003064:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003068:	7cfb      	ldrb	r3, [r7, #19]
 800306a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800306c:	7c7b      	ldrb	r3, [r7, #17]
 800306e:	2b01      	cmp	r3, #1
 8003070:	d105      	bne.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003072:	4ba7      	ldr	r3, [pc, #668]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003074:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003076:	4aa6      	ldr	r2, [pc, #664]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003078:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800307c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00a      	beq.n	80030a0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800308a:	4ba1      	ldr	r3, [pc, #644]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800308c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003090:	f023 0203 	bic.w	r2, r3, #3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	499d      	ldr	r1, [pc, #628]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800309a:	4313      	orrs	r3, r2
 800309c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d00a      	beq.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030ac:	4b98      	ldr	r3, [pc, #608]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b2:	f023 020c 	bic.w	r2, r3, #12
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	4995      	ldr	r1, [pc, #596]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030bc:	4313      	orrs	r3, r2
 80030be:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0304 	and.w	r3, r3, #4
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00a      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030ce:	4b90      	ldr	r3, [pc, #576]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030d4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	68db      	ldr	r3, [r3, #12]
 80030dc:	498c      	ldr	r1, [pc, #560]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030de:	4313      	orrs	r3, r2
 80030e0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0308 	and.w	r3, r3, #8
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d00a      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80030f0:	4b87      	ldr	r3, [pc, #540]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80030f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030f6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	691b      	ldr	r3, [r3, #16]
 80030fe:	4984      	ldr	r1, [pc, #528]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003100:	4313      	orrs	r3, r2
 8003102:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0310 	and.w	r3, r3, #16
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00a      	beq.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003112:	4b7f      	ldr	r3, [pc, #508]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003114:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003118:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	695b      	ldr	r3, [r3, #20]
 8003120:	497b      	ldr	r1, [pc, #492]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003122:	4313      	orrs	r3, r2
 8003124:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0320 	and.w	r3, r3, #32
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00a      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003134:	4b76      	ldr	r3, [pc, #472]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003136:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800313a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	699b      	ldr	r3, [r3, #24]
 8003142:	4973      	ldr	r1, [pc, #460]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003144:	4313      	orrs	r3, r2
 8003146:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003152:	2b00      	cmp	r3, #0
 8003154:	d00a      	beq.n	800316c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003156:	4b6e      	ldr	r3, [pc, #440]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003158:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800315c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	69db      	ldr	r3, [r3, #28]
 8003164:	496a      	ldr	r1, [pc, #424]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003166:	4313      	orrs	r3, r2
 8003168:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003174:	2b00      	cmp	r3, #0
 8003176:	d00a      	beq.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003178:	4b65      	ldr	r3, [pc, #404]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800317a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800317e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a1b      	ldr	r3, [r3, #32]
 8003186:	4962      	ldr	r1, [pc, #392]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003188:	4313      	orrs	r3, r2
 800318a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00a      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800319a:	4b5d      	ldr	r3, [pc, #372]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800319c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031a0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a8:	4959      	ldr	r1, [pc, #356]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00a      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80031bc:	4b54      	ldr	r3, [pc, #336]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031be:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80031c2:	f023 0203 	bic.w	r2, r3, #3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ca:	4951      	ldr	r1, [pc, #324]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80031de:	4b4c      	ldr	r3, [pc, #304]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031e4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ec:	4948      	ldr	r1, [pc, #288]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d015      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003200:	4b43      	ldr	r3, [pc, #268]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003202:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003206:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800320e:	4940      	ldr	r1, [pc, #256]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003210:	4313      	orrs	r3, r2
 8003212:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800321e:	d105      	bne.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003220:	4b3b      	ldr	r3, [pc, #236]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	4a3a      	ldr	r2, [pc, #232]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003226:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800322a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003234:	2b00      	cmp	r3, #0
 8003236:	d015      	beq.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003238:	4b35      	ldr	r3, [pc, #212]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800323a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800323e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003246:	4932      	ldr	r1, [pc, #200]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003248:	4313      	orrs	r3, r2
 800324a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003252:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003256:	d105      	bne.n	8003264 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003258:	4b2d      	ldr	r3, [pc, #180]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	4a2c      	ldr	r2, [pc, #176]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800325e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003262:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d015      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003270:	4b27      	ldr	r3, [pc, #156]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003272:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003276:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800327e:	4924      	ldr	r1, [pc, #144]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003280:	4313      	orrs	r3, r2
 8003282:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800328a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800328e:	d105      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003290:	4b1f      	ldr	r3, [pc, #124]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003292:	68db      	ldr	r3, [r3, #12]
 8003294:	4a1e      	ldr	r2, [pc, #120]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003296:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800329a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d015      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032a8:	4b19      	ldr	r3, [pc, #100]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032ae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b6:	4916      	ldr	r1, [pc, #88]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032c2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032c6:	d105      	bne.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032c8:	4b11      	ldr	r3, [pc, #68]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	4a10      	ldr	r2, [pc, #64]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80032d2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d019      	beq.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	4908      	ldr	r1, [pc, #32]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032fe:	d109      	bne.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003300:	4b03      	ldr	r3, [pc, #12]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	4a02      	ldr	r2, [pc, #8]	@ (8003310 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003306:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800330a:	60d3      	str	r3, [r2, #12]
 800330c:	e002      	b.n	8003314 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800330e:	bf00      	nop
 8003310:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800331c:	2b00      	cmp	r3, #0
 800331e:	d015      	beq.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003320:	4b29      	ldr	r3, [pc, #164]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003322:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003326:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800332e:	4926      	ldr	r1, [pc, #152]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003330:	4313      	orrs	r3, r2
 8003332:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800333a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800333e:	d105      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003340:	4b21      	ldr	r3, [pc, #132]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003342:	68db      	ldr	r3, [r3, #12]
 8003344:	4a20      	ldr	r2, [pc, #128]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003346:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800334a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d015      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003358:	4b1b      	ldr	r3, [pc, #108]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800335a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800335e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003366:	4918      	ldr	r1, [pc, #96]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003368:	4313      	orrs	r3, r2
 800336a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003372:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003376:	d105      	bne.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003378:	4b13      	ldr	r3, [pc, #76]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	4a12      	ldr	r2, [pc, #72]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800337e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003382:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d015      	beq.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003390:	4b0d      	ldr	r3, [pc, #52]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003392:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003396:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800339e:	490a      	ldr	r1, [pc, #40]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033ae:	d105      	bne.n	80033bc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033b0:	4b05      	ldr	r3, [pc, #20]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	4a04      	ldr	r2, [pc, #16]	@ (80033c8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80033b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80033ba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80033bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3718      	adds	r7, #24
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40021000 	.word	0x40021000

080033cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d101      	bne.n	80033de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e054      	b.n	8003488 <HAL_TIM_Base_Init+0xbc>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d111      	bne.n	800340e <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 ff7c 	bl	80042f0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d102      	bne.n	8003406 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	4a23      	ldr	r2, [pc, #140]	@ (8003490 <HAL_TIM_Base_Init+0xc4>)
 8003404:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2202      	movs	r2, #2
 8003412:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681a      	ldr	r2, [r3, #0]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3304      	adds	r3, #4
 800341e:	4619      	mov	r1, r3
 8003420:	4610      	mov	r0, r2
 8003422:	f000 fdef 	bl	8004004 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2201      	movs	r2, #1
 800343a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2201      	movs	r2, #1
 8003442:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2201      	movs	r2, #1
 8003452:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2201      	movs	r2, #1
 800345a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2201      	movs	r2, #1
 8003462:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2201      	movs	r2, #1
 800346a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2201      	movs	r2, #1
 800347a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003486:	2300      	movs	r3, #0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3708      	adds	r7, #8
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}
 8003490:	08001301 	.word	0x08001301

08003494 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d001      	beq.n	80034ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e054      	b.n	8003556 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68da      	ldr	r2, [r3, #12]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f042 0201 	orr.w	r2, r2, #1
 80034c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a26      	ldr	r2, [pc, #152]	@ (8003564 <HAL_TIM_Base_Start_IT+0xd0>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d022      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034d6:	d01d      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a22      	ldr	r2, [pc, #136]	@ (8003568 <HAL_TIM_Base_Start_IT+0xd4>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d018      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a21      	ldr	r2, [pc, #132]	@ (800356c <HAL_TIM_Base_Start_IT+0xd8>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d013      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a1f      	ldr	r2, [pc, #124]	@ (8003570 <HAL_TIM_Base_Start_IT+0xdc>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d00e      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a1e      	ldr	r2, [pc, #120]	@ (8003574 <HAL_TIM_Base_Start_IT+0xe0>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d009      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a1c      	ldr	r2, [pc, #112]	@ (8003578 <HAL_TIM_Base_Start_IT+0xe4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d004      	beq.n	8003514 <HAL_TIM_Base_Start_IT+0x80>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a1b      	ldr	r2, [pc, #108]	@ (800357c <HAL_TIM_Base_Start_IT+0xe8>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d115      	bne.n	8003540 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	4b19      	ldr	r3, [pc, #100]	@ (8003580 <HAL_TIM_Base_Start_IT+0xec>)
 800351c:	4013      	ands	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2b06      	cmp	r3, #6
 8003524:	d015      	beq.n	8003552 <HAL_TIM_Base_Start_IT+0xbe>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800352c:	d011      	beq.n	8003552 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f042 0201 	orr.w	r2, r2, #1
 800353c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800353e:	e008      	b.n	8003552 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	e000      	b.n	8003554 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003552:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	40012c00 	.word	0x40012c00
 8003568:	40000400 	.word	0x40000400
 800356c:	40000800 	.word	0x40000800
 8003570:	40000c00 	.word	0x40000c00
 8003574:	40013400 	.word	0x40013400
 8003578:	40014000 	.word	0x40014000
 800357c:	40015000 	.word	0x40015000
 8003580:	00010007 	.word	0x00010007

08003584 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e04c      	b.n	8003632 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d111      	bne.n	80035c8 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 fe9f 	bl	80042f0 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d102      	bne.n	80035c0 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a1f      	ldr	r2, [pc, #124]	@ (800363c <HAL_TIM_OnePulse_Init+0xb8>)
 80035be:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80035c4:	6878      	ldr	r0, [r7, #4]
 80035c6:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2202      	movs	r2, #2
 80035cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681a      	ldr	r2, [r3, #0]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	3304      	adds	r3, #4
 80035d8:	4619      	mov	r1, r3
 80035da:	4610      	mov	r0, r2
 80035dc:	f000 fd12 	bl	8004004 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f022 0208 	bic.w	r2, r2, #8
 80035ee:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6819      	ldr	r1, [r3, #0]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2201      	movs	r2, #1
 8003604:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2201      	movs	r2, #1
 8003614:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2201      	movs	r2, #1
 800361c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2201      	movs	r2, #1
 8003624:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3708      	adds	r7, #8
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	08003641 	.word	0x08003641

08003640 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8003648:	bf00      	nop
 800364a:	370c      	adds	r7, #12
 800364c:	46bd      	mov	sp, r7
 800364e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003652:	4770      	bx	lr

08003654 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b084      	sub	sp, #16
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
 800365c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003664:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800366c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003674:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800367c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d108      	bne.n	8003696 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003684:	7bbb      	ldrb	r3, [r7, #14]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d105      	bne.n	8003696 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800368a:	7b7b      	ldrb	r3, [r7, #13]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d102      	bne.n	8003696 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003690:	7b3b      	ldrb	r3, [r7, #12]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d001      	beq.n	800369a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e059      	b.n	800374e <HAL_TIM_OnePulse_Start_IT+0xfa>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2202      	movs	r2, #2
 800369e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2202      	movs	r2, #2
 80036a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2202      	movs	r2, #2
 80036ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2202      	movs	r2, #2
 80036b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68da      	ldr	r2, [r3, #12]
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f042 0202 	orr.w	r2, r2, #2
 80036c8:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68da      	ldr	r2, [r3, #12]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f042 0204 	orr.w	r2, r2, #4
 80036d8:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2201      	movs	r2, #1
 80036e0:	2100      	movs	r1, #0
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 fdde 	bl	80042a4 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2201      	movs	r2, #1
 80036ee:	2104      	movs	r1, #4
 80036f0:	4618      	mov	r0, r3
 80036f2:	f000 fdd7 	bl	80042a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a17      	ldr	r2, [pc, #92]	@ (8003758 <HAL_TIM_OnePulse_Start_IT+0x104>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d018      	beq.n	8003732 <HAL_TIM_OnePulse_Start_IT+0xde>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a15      	ldr	r2, [pc, #84]	@ (800375c <HAL_TIM_OnePulse_Start_IT+0x108>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d013      	beq.n	8003732 <HAL_TIM_OnePulse_Start_IT+0xde>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a14      	ldr	r2, [pc, #80]	@ (8003760 <HAL_TIM_OnePulse_Start_IT+0x10c>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d00e      	beq.n	8003732 <HAL_TIM_OnePulse_Start_IT+0xde>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a12      	ldr	r2, [pc, #72]	@ (8003764 <HAL_TIM_OnePulse_Start_IT+0x110>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d009      	beq.n	8003732 <HAL_TIM_OnePulse_Start_IT+0xde>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a11      	ldr	r2, [pc, #68]	@ (8003768 <HAL_TIM_OnePulse_Start_IT+0x114>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d004      	beq.n	8003732 <HAL_TIM_OnePulse_Start_IT+0xde>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a0f      	ldr	r2, [pc, #60]	@ (800376c <HAL_TIM_OnePulse_Start_IT+0x118>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d101      	bne.n	8003736 <HAL_TIM_OnePulse_Start_IT+0xe2>
 8003732:	2301      	movs	r3, #1
 8003734:	e000      	b.n	8003738 <HAL_TIM_OnePulse_Start_IT+0xe4>
 8003736:	2300      	movs	r3, #0
 8003738:	2b00      	cmp	r3, #0
 800373a:	d007      	beq.n	800374c <HAL_TIM_OnePulse_Start_IT+0xf8>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800374a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3710      	adds	r7, #16
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40012c00 	.word	0x40012c00
 800375c:	40013400 	.word	0x40013400
 8003760:	40014000 	.word	0x40014000
 8003764:	40014400 	.word	0x40014400
 8003768:	40014800 	.word	0x40014800
 800376c:	40015000 	.word	0x40015000

08003770 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b084      	sub	sp, #16
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	f003 0302 	and.w	r3, r3, #2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d026      	beq.n	80037e0 <HAL_TIM_IRQHandler+0x70>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f003 0302 	and.w	r3, r3, #2
 8003798:	2b00      	cmp	r3, #0
 800379a:	d021      	beq.n	80037e0 <HAL_TIM_IRQHandler+0x70>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f06f 0202 	mvn.w	r2, #2
 80037a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	699b      	ldr	r3, [r3, #24]
 80037b2:	f003 0303 	and.w	r3, r3, #3
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d005      	beq.n	80037c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	4798      	blx	r3
 80037c4:	e009      	b.n	80037da <HAL_TIM_IRQHandler+0x6a>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	f003 0304 	and.w	r3, r3, #4
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d026      	beq.n	8003838 <HAL_TIM_IRQHandler+0xc8>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f003 0304 	and.w	r3, r3, #4
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d021      	beq.n	8003838 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f06f 0204 	mvn.w	r2, #4
 80037fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2202      	movs	r2, #2
 8003802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	699b      	ldr	r3, [r3, #24]
 800380a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800380e:	2b00      	cmp	r3, #0
 8003810:	d005      	beq.n	800381e <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	4798      	blx	r3
 800381c:	e009      	b.n	8003832 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b00      	cmp	r3, #0
 8003840:	d026      	beq.n	8003890 <HAL_TIM_IRQHandler+0x120>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f003 0308 	and.w	r3, r3, #8
 8003848:	2b00      	cmp	r3, #0
 800384a:	d021      	beq.n	8003890 <HAL_TIM_IRQHandler+0x120>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f06f 0208 	mvn.w	r2, #8
 8003854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2204      	movs	r2, #4
 800385a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d005      	beq.n	8003876 <HAL_TIM_IRQHandler+0x106>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	4798      	blx	r3
 8003874:	e009      	b.n	800388a <HAL_TIM_IRQHandler+0x11a>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003886:	6878      	ldr	r0, [r7, #4]
 8003888:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2200      	movs	r2, #0
 800388e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	f003 0310 	and.w	r3, r3, #16
 8003896:	2b00      	cmp	r3, #0
 8003898:	d026      	beq.n	80038e8 <HAL_TIM_IRQHandler+0x178>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d021      	beq.n	80038e8 <HAL_TIM_IRQHandler+0x178>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f06f 0210 	mvn.w	r2, #16
 80038ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2208      	movs	r2, #8
 80038b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	69db      	ldr	r3, [r3, #28]
 80038ba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d005      	beq.n	80038ce <HAL_TIM_IRQHandler+0x15e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	4798      	blx	r3
 80038cc:	e009      	b.n	80038e2 <HAL_TIM_IRQHandler+0x172>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00e      	beq.n	8003910 <HAL_TIM_IRQHandler+0x1a0>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f003 0301 	and.w	r3, r3, #1
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d009      	beq.n	8003910 <HAL_TIM_IRQHandler+0x1a0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0201 	mvn.w	r2, #1
 8003904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003916:	2b00      	cmp	r3, #0
 8003918:	d104      	bne.n	8003924 <HAL_TIM_IRQHandler+0x1b4>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800391a:	68bb      	ldr	r3, [r7, #8]
 800391c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00e      	beq.n	8003942 <HAL_TIM_IRQHandler+0x1d2>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800392a:	2b00      	cmp	r3, #0
 800392c:	d009      	beq.n	8003942 <HAL_TIM_IRQHandler+0x1d2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8003936:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800393e:	6878      	ldr	r0, [r7, #4]
 8003940:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003948:	2b00      	cmp	r3, #0
 800394a:	d00e      	beq.n	800396a <HAL_TIM_IRQHandler+0x1fa>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003952:	2b00      	cmp	r3, #0
 8003954:	d009      	beq.n	800396a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800395e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003970:	2b00      	cmp	r3, #0
 8003972:	d00e      	beq.n	8003992 <HAL_TIM_IRQHandler+0x222>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800397a:	2b00      	cmp	r3, #0
 800397c:	d009      	beq.n	8003992 <HAL_TIM_IRQHandler+0x222>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003986:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	f003 0320 	and.w	r3, r3, #32
 8003998:	2b00      	cmp	r3, #0
 800399a:	d00e      	beq.n	80039ba <HAL_TIM_IRQHandler+0x24a>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f003 0320 	and.w	r3, r3, #32
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d009      	beq.n	80039ba <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f06f 0220 	mvn.w	r2, #32
 80039ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	4798      	blx	r3
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00e      	beq.n	80039e2 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d009      	beq.n	80039e2 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80039d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	4798      	blx	r3
      HAL_TIMEx_EncoderIndexCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00e      	beq.n	8003a0a <HAL_TIM_IRQHandler+0x29a>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d009      	beq.n	8003a0a <HAL_TIM_IRQHandler+0x29a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80039fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	4798      	blx	r3
      HAL_TIMEx_DirectionChangeCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00e      	beq.n	8003a32 <HAL_TIM_IRQHandler+0x2c2>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d009      	beq.n	8003a32 <HAL_TIM_IRQHandler+0x2c2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8003a26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	4798      	blx	r3
      HAL_TIMEx_IndexErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00e      	beq.n	8003a5a <HAL_TIM_IRQHandler+0x2ea>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d009      	beq.n	8003a5a <HAL_TIM_IRQHandler+0x2ea>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8003a4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	4798      	blx	r3
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a5a:	bf00      	nop
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d101      	bne.n	8003a80 <HAL_TIM_ConfigClockSource+0x1c>
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	e0f6      	b.n	8003c6e <HAL_TIM_ConfigClockSource+0x20a>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2202      	movs	r2, #2
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8003a9e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003aa2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aa4:	68bb      	ldr	r3, [r7, #8]
 8003aa6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003aaa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a6f      	ldr	r2, [pc, #444]	@ (8003c78 <HAL_TIM_ConfigClockSource+0x214>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	f000 80c1 	beq.w	8003c42 <HAL_TIM_ConfigClockSource+0x1de>
 8003ac0:	4a6d      	ldr	r2, [pc, #436]	@ (8003c78 <HAL_TIM_ConfigClockSource+0x214>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	f200 80c6 	bhi.w	8003c54 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ac8:	4a6c      	ldr	r2, [pc, #432]	@ (8003c7c <HAL_TIM_ConfigClockSource+0x218>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	f000 80b9 	beq.w	8003c42 <HAL_TIM_ConfigClockSource+0x1de>
 8003ad0:	4a6a      	ldr	r2, [pc, #424]	@ (8003c7c <HAL_TIM_ConfigClockSource+0x218>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	f200 80be 	bhi.w	8003c54 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ad8:	4a69      	ldr	r2, [pc, #420]	@ (8003c80 <HAL_TIM_ConfigClockSource+0x21c>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	f000 80b1 	beq.w	8003c42 <HAL_TIM_ConfigClockSource+0x1de>
 8003ae0:	4a67      	ldr	r2, [pc, #412]	@ (8003c80 <HAL_TIM_ConfigClockSource+0x21c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	f200 80b6 	bhi.w	8003c54 <HAL_TIM_ConfigClockSource+0x1f0>
 8003ae8:	4a66      	ldr	r2, [pc, #408]	@ (8003c84 <HAL_TIM_ConfigClockSource+0x220>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	f000 80a9 	beq.w	8003c42 <HAL_TIM_ConfigClockSource+0x1de>
 8003af0:	4a64      	ldr	r2, [pc, #400]	@ (8003c84 <HAL_TIM_ConfigClockSource+0x220>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	f200 80ae 	bhi.w	8003c54 <HAL_TIM_ConfigClockSource+0x1f0>
 8003af8:	4a63      	ldr	r2, [pc, #396]	@ (8003c88 <HAL_TIM_ConfigClockSource+0x224>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	f000 80a1 	beq.w	8003c42 <HAL_TIM_ConfigClockSource+0x1de>
 8003b00:	4a61      	ldr	r2, [pc, #388]	@ (8003c88 <HAL_TIM_ConfigClockSource+0x224>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	f200 80a6 	bhi.w	8003c54 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b08:	4a60      	ldr	r2, [pc, #384]	@ (8003c8c <HAL_TIM_ConfigClockSource+0x228>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	f000 8099 	beq.w	8003c42 <HAL_TIM_ConfigClockSource+0x1de>
 8003b10:	4a5e      	ldr	r2, [pc, #376]	@ (8003c8c <HAL_TIM_ConfigClockSource+0x228>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	f200 809e 	bhi.w	8003c54 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b18:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003b1c:	f000 8091 	beq.w	8003c42 <HAL_TIM_ConfigClockSource+0x1de>
 8003b20:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003b24:	f200 8096 	bhi.w	8003c54 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b28:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b2c:	f000 8089 	beq.w	8003c42 <HAL_TIM_ConfigClockSource+0x1de>
 8003b30:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b34:	f200 808e 	bhi.w	8003c54 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b3c:	d03e      	beq.n	8003bbc <HAL_TIM_ConfigClockSource+0x158>
 8003b3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b42:	f200 8087 	bhi.w	8003c54 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b4a:	f000 8086 	beq.w	8003c5a <HAL_TIM_ConfigClockSource+0x1f6>
 8003b4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b52:	d87f      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b54:	2b70      	cmp	r3, #112	@ 0x70
 8003b56:	d01a      	beq.n	8003b8e <HAL_TIM_ConfigClockSource+0x12a>
 8003b58:	2b70      	cmp	r3, #112	@ 0x70
 8003b5a:	d87b      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b5c:	2b60      	cmp	r3, #96	@ 0x60
 8003b5e:	d050      	beq.n	8003c02 <HAL_TIM_ConfigClockSource+0x19e>
 8003b60:	2b60      	cmp	r3, #96	@ 0x60
 8003b62:	d877      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b64:	2b50      	cmp	r3, #80	@ 0x50
 8003b66:	d03c      	beq.n	8003be2 <HAL_TIM_ConfigClockSource+0x17e>
 8003b68:	2b50      	cmp	r3, #80	@ 0x50
 8003b6a:	d873      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b6c:	2b40      	cmp	r3, #64	@ 0x40
 8003b6e:	d058      	beq.n	8003c22 <HAL_TIM_ConfigClockSource+0x1be>
 8003b70:	2b40      	cmp	r3, #64	@ 0x40
 8003b72:	d86f      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b74:	2b30      	cmp	r3, #48	@ 0x30
 8003b76:	d064      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x1de>
 8003b78:	2b30      	cmp	r3, #48	@ 0x30
 8003b7a:	d86b      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b7c:	2b20      	cmp	r3, #32
 8003b7e:	d060      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x1de>
 8003b80:	2b20      	cmp	r3, #32
 8003b82:	d867      	bhi.n	8003c54 <HAL_TIM_ConfigClockSource+0x1f0>
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d05c      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x1de>
 8003b88:	2b10      	cmp	r3, #16
 8003b8a:	d05a      	beq.n	8003c42 <HAL_TIM_ConfigClockSource+0x1de>
 8003b8c:	e062      	b.n	8003c54 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b9e:	f000 fb61 	bl	8004264 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	689b      	ldr	r3, [r3, #8]
 8003ba8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003bb0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68ba      	ldr	r2, [r7, #8]
 8003bb8:	609a      	str	r2, [r3, #8]
      break;
 8003bba:	e04f      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003bcc:	f000 fb4a 	bl	8004264 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003bde:	609a      	str	r2, [r3, #8]
      break;
 8003be0:	e03c      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bee:	461a      	mov	r2, r3
 8003bf0:	f000 fabc 	bl	800416c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2150      	movs	r1, #80	@ 0x50
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fb15 	bl	800422a <TIM_ITRx_SetConfig>
      break;
 8003c00:	e02c      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c0e:	461a      	mov	r2, r3
 8003c10:	f000 fadb 	bl	80041ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2160      	movs	r1, #96	@ 0x60
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 fb05 	bl	800422a <TIM_ITRx_SetConfig>
      break;
 8003c20:	e01c      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f000 fa9c 	bl	800416c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	2140      	movs	r1, #64	@ 0x40
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f000 faf5 	bl	800422a <TIM_ITRx_SetConfig>
      break;
 8003c40:	e00c      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	4610      	mov	r0, r2
 8003c4e:	f000 faec 	bl	800422a <TIM_ITRx_SetConfig>
      break;
 8003c52:	e003      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	73fb      	strb	r3, [r7, #15]
      break;
 8003c58:	e000      	b.n	8003c5c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8003c5a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	00100070 	.word	0x00100070
 8003c7c:	00100060 	.word	0x00100060
 8003c80:	00100050 	.word	0x00100050
 8003c84:	00100040 	.word	0x00100040
 8003c88:	00100030 	.word	0x00100030
 8003c8c:	00100020 	.word	0x00100020

08003c90 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003cac:	bf00      	nop
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b083      	sub	sp, #12
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cc0:	bf00      	nop
 8003cc2:	370c      	adds	r7, #12
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr

08003ccc <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b083      	sub	sp, #12
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr

08003ce0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b083      	sub	sp, #12
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ce8:	bf00      	nop
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003cfc:	bf00      	nop
 8003cfe:	370c      	adds	r7, #12
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr

08003d08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	b083      	sub	sp, #12
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8003d24:	bf00      	nop
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003d38:	bf00      	nop
 8003d3a:	370c      	adds	r7, #12
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr

08003d44 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b087      	sub	sp, #28
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	460b      	mov	r3, r1
 8003d4e:	607a      	str	r2, [r7, #4]
 8003d50:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8003d52:	2300      	movs	r3, #0
 8003d54:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d101      	bne.n	8003d60 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e14a      	b.n	8003ff6 <HAL_TIM_RegisterCallback+0x2b2>
  }

  if (htim->State == HAL_TIM_STATE_READY)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	f040 80dd 	bne.w	8003f28 <HAL_TIM_RegisterCallback+0x1e4>
  {
    switch (CallbackID)
 8003d6e:	7afb      	ldrb	r3, [r7, #11]
 8003d70:	2b1f      	cmp	r3, #31
 8003d72:	f200 80d6 	bhi.w	8003f22 <HAL_TIM_RegisterCallback+0x1de>
 8003d76:	a201      	add	r2, pc, #4	@ (adr r2, 8003d7c <HAL_TIM_RegisterCallback+0x38>)
 8003d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7c:	08003dfd 	.word	0x08003dfd
 8003d80:	08003e05 	.word	0x08003e05
 8003d84:	08003e0d 	.word	0x08003e0d
 8003d88:	08003e15 	.word	0x08003e15
 8003d8c:	08003e1d 	.word	0x08003e1d
 8003d90:	08003e25 	.word	0x08003e25
 8003d94:	08003e2d 	.word	0x08003e2d
 8003d98:	08003e35 	.word	0x08003e35
 8003d9c:	08003e3d 	.word	0x08003e3d
 8003da0:	08003e45 	.word	0x08003e45
 8003da4:	08003e4d 	.word	0x08003e4d
 8003da8:	08003e55 	.word	0x08003e55
 8003dac:	08003e5d 	.word	0x08003e5d
 8003db0:	08003e65 	.word	0x08003e65
 8003db4:	08003e6f 	.word	0x08003e6f
 8003db8:	08003e79 	.word	0x08003e79
 8003dbc:	08003e83 	.word	0x08003e83
 8003dc0:	08003e8d 	.word	0x08003e8d
 8003dc4:	08003e97 	.word	0x08003e97
 8003dc8:	08003ea1 	.word	0x08003ea1
 8003dcc:	08003eab 	.word	0x08003eab
 8003dd0:	08003eb5 	.word	0x08003eb5
 8003dd4:	08003ebf 	.word	0x08003ebf
 8003dd8:	08003ec9 	.word	0x08003ec9
 8003ddc:	08003ed3 	.word	0x08003ed3
 8003de0:	08003edd 	.word	0x08003edd
 8003de4:	08003ee7 	.word	0x08003ee7
 8003de8:	08003ef1 	.word	0x08003ef1
 8003dec:	08003efb 	.word	0x08003efb
 8003df0:	08003f05 	.word	0x08003f05
 8003df4:	08003f0f 	.word	0x08003f0f
 8003df8:	08003f19 	.word	0x08003f19
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	687a      	ldr	r2, [r7, #4]
 8003e00:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8003e02:	e0f7      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8003e0a:	e0f3      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8003e12:	e0ef      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8003e1a:	e0eb      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8003e22:	e0e7      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8003e2a:	e0e3      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8003e32:	e0df      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8003e3a:	e0db      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8003e42:	e0d7      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8003e4a:	e0d3      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	687a      	ldr	r2, [r7, #4]
 8003e50:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8003e52:	e0cf      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	687a      	ldr	r2, [r7, #4]
 8003e58:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8003e5a:	e0cb      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	687a      	ldr	r2, [r7, #4]
 8003e60:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8003e62:	e0c7      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	687a      	ldr	r2, [r7, #4]
 8003e68:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8003e6c:	e0c2      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	687a      	ldr	r2, [r7, #4]
 8003e72:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        break;
 8003e76:	e0bd      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        break;
 8003e80:	e0b8      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        break;
 8003e8a:	e0b3      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        break;
 8003e94:	e0ae      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 8003e9e:	e0a9      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	687a      	ldr	r2, [r7, #4]
 8003ea4:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 8003ea8:	e0a4      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 8003eb2:	e09f      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	687a      	ldr	r2, [r7, #4]
 8003eb8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8003ebc:	e09a      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8003ec6:	e095      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 8003ed0:	e090      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8003eda:	e08b      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	687a      	ldr	r2, [r7, #4]
 8003ee0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 8003ee4:	e086      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8003eee:	e081      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BREAK2_CB_ID :
        htim->Break2Callback                       = pCallback;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	687a      	ldr	r2, [r7, #4]
 8003ef4:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8003ef8:	e07c      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_INDEX_CB_ID :
        htim->EncoderIndexCallback                 = pCallback;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 8003f02:	e077      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_DIRECTION_CHANGE_CB_ID :
        htim->DirectionChangeCallback              = pCallback;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	687a      	ldr	r2, [r7, #4]
 8003f08:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
        break;
 8003f0c:	e072      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_INDEX_ERROR_CB_ID :
        htim->IndexErrorCallback                   = pCallback;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8003f16:	e06d      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_TRANSITION_ERROR_CB_ID :
        htim->TransitionErrorCallback              = pCallback;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8003f20:	e068      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	75fb      	strb	r3, [r7, #23]
        break;
 8003f26:	e065      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d15d      	bne.n	8003ff0 <HAL_TIM_RegisterCallback+0x2ac>
  {
    switch (CallbackID)
 8003f34:	7afb      	ldrb	r3, [r7, #11]
 8003f36:	2b0d      	cmp	r3, #13
 8003f38:	d857      	bhi.n	8003fea <HAL_TIM_RegisterCallback+0x2a6>
 8003f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8003f40 <HAL_TIM_RegisterCallback+0x1fc>)
 8003f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f40:	08003f79 	.word	0x08003f79
 8003f44:	08003f81 	.word	0x08003f81
 8003f48:	08003f89 	.word	0x08003f89
 8003f4c:	08003f91 	.word	0x08003f91
 8003f50:	08003f99 	.word	0x08003f99
 8003f54:	08003fa1 	.word	0x08003fa1
 8003f58:	08003fa9 	.word	0x08003fa9
 8003f5c:	08003fb1 	.word	0x08003fb1
 8003f60:	08003fb9 	.word	0x08003fb9
 8003f64:	08003fc1 	.word	0x08003fc1
 8003f68:	08003fc9 	.word	0x08003fc9
 8003f6c:	08003fd1 	.word	0x08003fd1
 8003f70:	08003fd9 	.word	0x08003fd9
 8003f74:	08003fe1 	.word	0x08003fe1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	64da      	str	r2, [r3, #76]	@ 0x4c
        break;
 8003f7e:	e039      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	651a      	str	r2, [r3, #80]	@ 0x50
        break;
 8003f86:	e035      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	655a      	str	r2, [r3, #84]	@ 0x54
        break;
 8003f8e:	e031      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	687a      	ldr	r2, [r7, #4]
 8003f94:	659a      	str	r2, [r3, #88]	@ 0x58
        break;
 8003f96:	e02d      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	65da      	str	r2, [r3, #92]	@ 0x5c
        break;
 8003f9e:	e029      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	661a      	str	r2, [r3, #96]	@ 0x60
        break;
 8003fa6:	e025      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	687a      	ldr	r2, [r7, #4]
 8003fac:	665a      	str	r2, [r3, #100]	@ 0x64
        break;
 8003fae:	e021      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	687a      	ldr	r2, [r7, #4]
 8003fb4:	669a      	str	r2, [r3, #104]	@ 0x68
        break;
 8003fb6:	e01d      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	66da      	str	r2, [r3, #108]	@ 0x6c
        break;
 8003fbe:	e019      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	671a      	str	r2, [r3, #112]	@ 0x70
        break;
 8003fc6:	e015      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	675a      	str	r2, [r3, #116]	@ 0x74
        break;
 8003fce:	e011      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	687a      	ldr	r2, [r7, #4]
 8003fd4:	679a      	str	r2, [r3, #120]	@ 0x78
        break;
 8003fd6:	e00d      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	687a      	ldr	r2, [r7, #4]
 8003fdc:	67da      	str	r2, [r3, #124]	@ 0x7c
        break;
 8003fde:	e009      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	687a      	ldr	r2, [r7, #4]
 8003fe4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        break;
 8003fe8:	e004      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>

      default :
        /* Return error status */
        status = HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	75fb      	strb	r3, [r7, #23]
        break;
 8003fee:	e001      	b.n	8003ff4 <HAL_TIM_RegisterCallback+0x2b0>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8003ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	371c      	adds	r7, #28
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004000:	4770      	bx	lr
 8004002:	bf00      	nop

08004004 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004004:	b480      	push	{r7}
 8004006:	b085      	sub	sp, #20
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	4a4c      	ldr	r2, [pc, #304]	@ (8004148 <TIM_Base_SetConfig+0x144>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d017      	beq.n	800404c <TIM_Base_SetConfig+0x48>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004022:	d013      	beq.n	800404c <TIM_Base_SetConfig+0x48>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	4a49      	ldr	r2, [pc, #292]	@ (800414c <TIM_Base_SetConfig+0x148>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d00f      	beq.n	800404c <TIM_Base_SetConfig+0x48>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a48      	ldr	r2, [pc, #288]	@ (8004150 <TIM_Base_SetConfig+0x14c>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d00b      	beq.n	800404c <TIM_Base_SetConfig+0x48>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a47      	ldr	r2, [pc, #284]	@ (8004154 <TIM_Base_SetConfig+0x150>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d007      	beq.n	800404c <TIM_Base_SetConfig+0x48>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a46      	ldr	r2, [pc, #280]	@ (8004158 <TIM_Base_SetConfig+0x154>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d003      	beq.n	800404c <TIM_Base_SetConfig+0x48>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a45      	ldr	r2, [pc, #276]	@ (800415c <TIM_Base_SetConfig+0x158>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d108      	bne.n	800405e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a39      	ldr	r2, [pc, #228]	@ (8004148 <TIM_Base_SetConfig+0x144>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d023      	beq.n	80040ae <TIM_Base_SetConfig+0xaa>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800406c:	d01f      	beq.n	80040ae <TIM_Base_SetConfig+0xaa>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a36      	ldr	r2, [pc, #216]	@ (800414c <TIM_Base_SetConfig+0x148>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d01b      	beq.n	80040ae <TIM_Base_SetConfig+0xaa>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a35      	ldr	r2, [pc, #212]	@ (8004150 <TIM_Base_SetConfig+0x14c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d017      	beq.n	80040ae <TIM_Base_SetConfig+0xaa>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a34      	ldr	r2, [pc, #208]	@ (8004154 <TIM_Base_SetConfig+0x150>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d013      	beq.n	80040ae <TIM_Base_SetConfig+0xaa>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a33      	ldr	r2, [pc, #204]	@ (8004158 <TIM_Base_SetConfig+0x154>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00f      	beq.n	80040ae <TIM_Base_SetConfig+0xaa>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a33      	ldr	r2, [pc, #204]	@ (8004160 <TIM_Base_SetConfig+0x15c>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d00b      	beq.n	80040ae <TIM_Base_SetConfig+0xaa>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a32      	ldr	r2, [pc, #200]	@ (8004164 <TIM_Base_SetConfig+0x160>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d007      	beq.n	80040ae <TIM_Base_SetConfig+0xaa>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a31      	ldr	r2, [pc, #196]	@ (8004168 <TIM_Base_SetConfig+0x164>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d003      	beq.n	80040ae <TIM_Base_SetConfig+0xaa>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a2c      	ldr	r2, [pc, #176]	@ (800415c <TIM_Base_SetConfig+0x158>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d108      	bne.n	80040c0 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	68db      	ldr	r3, [r3, #12]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	4313      	orrs	r3, r2
 80040be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	4313      	orrs	r3, r2
 80040cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	689a      	ldr	r2, [r3, #8]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a18      	ldr	r2, [pc, #96]	@ (8004148 <TIM_Base_SetConfig+0x144>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d013      	beq.n	8004114 <TIM_Base_SetConfig+0x110>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a1a      	ldr	r2, [pc, #104]	@ (8004158 <TIM_Base_SetConfig+0x154>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d00f      	beq.n	8004114 <TIM_Base_SetConfig+0x110>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a1a      	ldr	r2, [pc, #104]	@ (8004160 <TIM_Base_SetConfig+0x15c>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d00b      	beq.n	8004114 <TIM_Base_SetConfig+0x110>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a19      	ldr	r2, [pc, #100]	@ (8004164 <TIM_Base_SetConfig+0x160>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d007      	beq.n	8004114 <TIM_Base_SetConfig+0x110>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a18      	ldr	r2, [pc, #96]	@ (8004168 <TIM_Base_SetConfig+0x164>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d003      	beq.n	8004114 <TIM_Base_SetConfig+0x110>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a13      	ldr	r2, [pc, #76]	@ (800415c <TIM_Base_SetConfig+0x158>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d103      	bne.n	800411c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	691b      	ldr	r3, [r3, #16]
 8004126:	f003 0301 	and.w	r3, r3, #1
 800412a:	2b01      	cmp	r3, #1
 800412c:	d105      	bne.n	800413a <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	691b      	ldr	r3, [r3, #16]
 8004132:	f023 0201 	bic.w	r2, r3, #1
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	611a      	str	r2, [r3, #16]
  }
}
 800413a:	bf00      	nop
 800413c:	3714      	adds	r7, #20
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	40012c00 	.word	0x40012c00
 800414c:	40000400 	.word	0x40000400
 8004150:	40000800 	.word	0x40000800
 8004154:	40000c00 	.word	0x40000c00
 8004158:	40013400 	.word	0x40013400
 800415c:	40015000 	.word	0x40015000
 8004160:	40014000 	.word	0x40014000
 8004164:	40014400 	.word	0x40014400
 8004168:	40014800 	.word	0x40014800

0800416c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800416c:	b480      	push	{r7}
 800416e:	b087      	sub	sp, #28
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6a1b      	ldr	r3, [r3, #32]
 800417c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	f023 0201 	bic.w	r2, r3, #1
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	011b      	lsls	r3, r3, #4
 800419c:	693a      	ldr	r2, [r7, #16]
 800419e:	4313      	orrs	r3, r2
 80041a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	f023 030a 	bic.w	r3, r3, #10
 80041a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	621a      	str	r2, [r3, #32]
}
 80041be:	bf00      	nop
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr

080041ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b087      	sub	sp, #28
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	60f8      	str	r0, [r7, #12]
 80041d2:	60b9      	str	r1, [r7, #8]
 80041d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	6a1b      	ldr	r3, [r3, #32]
 80041e0:	f023 0210 	bic.w	r2, r3, #16
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	699b      	ldr	r3, [r3, #24]
 80041ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	031b      	lsls	r3, r3, #12
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004206:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	697a      	ldr	r2, [r7, #20]
 800420e:	4313      	orrs	r3, r2
 8004210:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	693a      	ldr	r2, [r7, #16]
 8004216:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	621a      	str	r2, [r3, #32]
}
 800421e:	bf00      	nop
 8004220:	371c      	adds	r7, #28
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr

0800422a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800422a:	b480      	push	{r7}
 800422c:	b085      	sub	sp, #20
 800422e:	af00      	add	r7, sp, #0
 8004230:	6078      	str	r0, [r7, #4]
 8004232:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8004240:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004244:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004246:	683a      	ldr	r2, [r7, #0]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4313      	orrs	r3, r2
 800424c:	f043 0307 	orr.w	r3, r3, #7
 8004250:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	68fa      	ldr	r2, [r7, #12]
 8004256:	609a      	str	r2, [r3, #8]
}
 8004258:	bf00      	nop
 800425a:	3714      	adds	r7, #20
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004264:	b480      	push	{r7}
 8004266:	b087      	sub	sp, #28
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
 8004270:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800427e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	021a      	lsls	r2, r3, #8
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	431a      	orrs	r2, r3
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	4313      	orrs	r3, r2
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	4313      	orrs	r3, r2
 8004290:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	609a      	str	r2, [r3, #8]
}
 8004298:	bf00      	nop
 800429a:	371c      	adds	r7, #28
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	2201      	movs	r2, #1
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6a1a      	ldr	r2, [r3, #32]
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	43db      	mvns	r3, r3
 80042c6:	401a      	ands	r2, r3
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	6a1a      	ldr	r2, [r3, #32]
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	f003 031f 	and.w	r3, r3, #31
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	fa01 f303 	lsl.w	r3, r1, r3
 80042dc:	431a      	orrs	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	621a      	str	r2, [r3, #32]
}
 80042e2:	bf00      	nop
 80042e4:	371c      	adds	r7, #28
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
	...

080042f0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	4a26      	ldr	r2, [pc, #152]	@ (8004394 <TIM_ResetCallback+0xa4>)
 80042fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a25      	ldr	r2, [pc, #148]	@ (8004398 <TIM_ResetCallback+0xa8>)
 8004304:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a24      	ldr	r2, [pc, #144]	@ (800439c <TIM_ResetCallback+0xac>)
 800430c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a23      	ldr	r2, [pc, #140]	@ (80043a0 <TIM_ResetCallback+0xb0>)
 8004314:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a22      	ldr	r2, [pc, #136]	@ (80043a4 <TIM_ResetCallback+0xb4>)
 800431c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a21      	ldr	r2, [pc, #132]	@ (80043a8 <TIM_ResetCallback+0xb8>)
 8004324:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a20      	ldr	r2, [pc, #128]	@ (80043ac <TIM_ResetCallback+0xbc>)
 800432c:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a1f      	ldr	r2, [pc, #124]	@ (80043b0 <TIM_ResetCallback+0xc0>)
 8004334:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a1e      	ldr	r2, [pc, #120]	@ (80043b4 <TIM_ResetCallback+0xc4>)
 800433c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a1d      	ldr	r2, [pc, #116]	@ (80043b8 <TIM_ResetCallback+0xc8>)
 8004344:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a1c      	ldr	r2, [pc, #112]	@ (80043bc <TIM_ResetCallback+0xcc>)
 800434c:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a1b      	ldr	r2, [pc, #108]	@ (80043c0 <TIM_ResetCallback+0xd0>)
 8004354:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a1a      	ldr	r2, [pc, #104]	@ (80043c4 <TIM_ResetCallback+0xd4>)
 800435c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  htim->Break2Callback                    = HAL_TIMEx_Break2Callback;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a19      	ldr	r2, [pc, #100]	@ (80043c8 <TIM_ResetCallback+0xd8>)
 8004364:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  htim->EncoderIndexCallback              = HAL_TIMEx_EncoderIndexCallback;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a18      	ldr	r2, [pc, #96]	@ (80043cc <TIM_ResetCallback+0xdc>)
 800436c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  htim->DirectionChangeCallback           = HAL_TIMEx_DirectionChangeCallback;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a17      	ldr	r2, [pc, #92]	@ (80043d0 <TIM_ResetCallback+0xe0>)
 8004374:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  htim->IndexErrorCallback                = HAL_TIMEx_IndexErrorCallback;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	4a16      	ldr	r2, [pc, #88]	@ (80043d4 <TIM_ResetCallback+0xe4>)
 800437c:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  htim->TransitionErrorCallback           = HAL_TIMEx_TransitionErrorCallback;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	4a15      	ldr	r2, [pc, #84]	@ (80043d8 <TIM_ResetCallback+0xe8>)
 8004384:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	08001281 	.word	0x08001281
 8004398:	08003c91 	.word	0x08003c91
 800439c:	08003d09 	.word	0x08003d09
 80043a0:	08003d1d 	.word	0x08003d1d
 80043a4:	08003cb9 	.word	0x08003cb9
 80043a8:	08003ccd 	.word	0x08003ccd
 80043ac:	08003ca5 	.word	0x08003ca5
 80043b0:	08003ce1 	.word	0x08003ce1
 80043b4:	08003cf5 	.word	0x08003cf5
 80043b8:	08003d31 	.word	0x08003d31
 80043bc:	08004509 	.word	0x08004509
 80043c0:	0800451d 	.word	0x0800451d
 80043c4:	08004531 	.word	0x08004531
 80043c8:	08004545 	.word	0x08004545
 80043cc:	08004559 	.word	0x08004559
 80043d0:	0800456d 	.word	0x0800456d
 80043d4:	08004581 	.word	0x08004581
 80043d8:	08004595 	.word	0x08004595

080043dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d101      	bne.n	80043f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043f0:	2302      	movs	r3, #2
 80043f2:	e074      	b.n	80044de <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2202      	movs	r2, #2
 8004400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a34      	ldr	r2, [pc, #208]	@ (80044ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d009      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a33      	ldr	r2, [pc, #204]	@ (80044f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d004      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a31      	ldr	r2, [pc, #196]	@ (80044f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d108      	bne.n	8004444 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004438:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	4313      	orrs	r3, r2
 8004442:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800444a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800444e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68fa      	ldr	r2, [r7, #12]
 8004460:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a21      	ldr	r2, [pc, #132]	@ (80044ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d022      	beq.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004474:	d01d      	beq.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a1f      	ldr	r2, [pc, #124]	@ (80044f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d018      	beq.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a1d      	ldr	r2, [pc, #116]	@ (80044fc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d013      	beq.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a1c      	ldr	r2, [pc, #112]	@ (8004500 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d00e      	beq.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a15      	ldr	r2, [pc, #84]	@ (80044f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d009      	beq.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a18      	ldr	r2, [pc, #96]	@ (8004504 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d004      	beq.n	80044b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a11      	ldr	r2, [pc, #68]	@ (80044f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d10c      	bne.n	80044cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	68ba      	ldr	r2, [r7, #8]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68ba      	ldr	r2, [r7, #8]
 80044ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3714      	adds	r7, #20
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr
 80044ea:	bf00      	nop
 80044ec:	40012c00 	.word	0x40012c00
 80044f0:	40013400 	.word	0x40013400
 80044f4:	40015000 	.word	0x40015000
 80044f8:	40000400 	.word	0x40000400
 80044fc:	40000800 	.word	0x40000800
 8004500:	40000c00 	.word	0x40000c00
 8004504:	40014000 	.word	0x40014000

08004508 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004508:	b480      	push	{r7}
 800450a:	b083      	sub	sp, #12
 800450c:	af00      	add	r7, sp, #0
 800450e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004510:	bf00      	nop
 8004512:	370c      	adds	r7, #12
 8004514:	46bd      	mov	sp, r7
 8004516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451a:	4770      	bx	lr

0800451c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Commutation half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800451c:	b480      	push	{r7}
 800451e:	b083      	sub	sp, #12
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 8004524:	bf00      	nop
 8004526:	370c      	adds	r7, #12
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr

08004530 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004544:	b480      	push	{r7}
 8004546:	b083      	sub	sp, #12
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800454c:	bf00      	nop
 800454e:	370c      	adds	r7, #12
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr

08004558 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004558:	b480      	push	{r7}
 800455a:	b083      	sub	sp, #12
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004560:	bf00      	nop
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800456c:	b480      	push	{r7}
 800456e:	b083      	sub	sp, #12
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8004574:	bf00      	nop
 8004576:	370c      	adds	r7, #12
 8004578:	46bd      	mov	sp, r7
 800457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800457e:	4770      	bx	lr

08004580 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800459c:	bf00      	nop
 800459e:	370c      	adds	r7, #12
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e050      	b.n	800465c <HAL_UART_Init+0xb4>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d114      	bne.n	80045ee <HAL_UART_Init+0x46>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80045cc:	6878      	ldr	r0, [r7, #4]
 80045ce:	f000 fdc5 	bl	800515c <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d103      	bne.n	80045e4 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	4a21      	ldr	r2, [pc, #132]	@ (8004664 <HAL_UART_Init+0xbc>)
 80045e0:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2224      	movs	r2, #36	@ 0x24
 80045f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	681a      	ldr	r2, [r3, #0]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f022 0201 	bic.w	r2, r2, #1
 8004604:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <HAL_UART_Init+0x6c>
  {
    UART_AdvFeatureConfig(huart);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f001 f8f2 	bl	80057f8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004614:	6878      	ldr	r0, [r7, #4]
 8004616:	f000 fdf3 	bl	8005200 <UART_SetConfig>
 800461a:	4603      	mov	r3, r0
 800461c:	2b01      	cmp	r3, #1
 800461e:	d101      	bne.n	8004624 <HAL_UART_Init+0x7c>
  {
    return HAL_ERROR;
 8004620:	2301      	movs	r3, #1
 8004622:	e01b      	b.n	800465c <HAL_UART_Init+0xb4>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	685a      	ldr	r2, [r3, #4]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004632:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	689a      	ldr	r2, [r3, #8]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004642:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f042 0201 	orr.w	r2, r2, #1
 8004652:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f001 f971 	bl	800593c <UART_CheckIdleState>
 800465a:	4603      	mov	r3, r0
}
 800465c:	4618      	mov	r0, r3
 800465e:	3708      	adds	r7, #8
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}
 8004664:	08001385 	.word	0x08001385

08004668 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 8004668:	b480      	push	{r7}
 800466a:	b087      	sub	sp, #28
 800466c:	af00      	add	r7, sp, #0
 800466e:	60f8      	str	r0, [r7, #12]
 8004670:	460b      	mov	r3, r1
 8004672:	607a      	str	r2, [r7, #4]
 8004674:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8004676:	2300      	movs	r3, #0
 8004678:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d109      	bne.n	8004694 <HAL_UART_RegisterCallback+0x2c>
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004686:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e09c      	b.n	80047ce <HAL_UART_RegisterCallback+0x166>
  }

  if (huart->gState == HAL_UART_STATE_READY)
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800469a:	2b20      	cmp	r3, #32
 800469c:	d16c      	bne.n	8004778 <HAL_UART_RegisterCallback+0x110>
  {
    switch (CallbackID)
 800469e:	7afb      	ldrb	r3, [r7, #11]
 80046a0:	2b0c      	cmp	r3, #12
 80046a2:	d85e      	bhi.n	8004762 <HAL_UART_RegisterCallback+0xfa>
 80046a4:	a201      	add	r2, pc, #4	@ (adr r2, 80046ac <HAL_UART_RegisterCallback+0x44>)
 80046a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046aa:	bf00      	nop
 80046ac:	080046e1 	.word	0x080046e1
 80046b0:	080046eb 	.word	0x080046eb
 80046b4:	080046f5 	.word	0x080046f5
 80046b8:	080046ff 	.word	0x080046ff
 80046bc:	08004709 	.word	0x08004709
 80046c0:	08004713 	.word	0x08004713
 80046c4:	0800471d 	.word	0x0800471d
 80046c8:	08004727 	.word	0x08004727
 80046cc:	08004731 	.word	0x08004731
 80046d0:	0800473b 	.word	0x0800473b
 80046d4:	08004745 	.word	0x08004745
 80046d8:	0800474f 	.word	0x0800474f
 80046dc:	08004759 	.word	0x08004759
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        break;
 80046e8:	e070      	b.n	80047cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        break;
 80046f2:	e06b      	b.n	80047cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
        break;
 80046fc:	e066      	b.n	80047cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
        break;
 8004706:	e061      	b.n	80047cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	687a      	ldr	r2, [r7, #4]
 800470c:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
        break;
 8004710:	e05c      	b.n	80047cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
        break;
 800471a:	e057      	b.n	80047cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
        break;
 8004724:	e052      	b.n	80047cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
        break;
 800472e:	e04d      	b.n	80047cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_WAKEUP_CB_ID :
        huart->WakeupCallback = pCallback;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
        break;
 8004738:	e048      	b.n	80047cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_RX_FIFO_FULL_CB_ID :
        huart->RxFifoFullCallback = pCallback;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
        break;
 8004742:	e043      	b.n	80047cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_TX_FIFO_EMPTY_CB_ID :
        huart->TxFifoEmptyCallback = pCallback;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
        break;
 800474c:	e03e      	b.n	80047cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8004756:	e039      	b.n	80047cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 8004760:	e034      	b.n	80047cc <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004768:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	75fb      	strb	r3, [r7, #23]
        break;
 8004776:	e029      	b.n	80047cc <HAL_UART_RegisterCallback+0x164>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800477e:	2b00      	cmp	r3, #0
 8004780:	d11a      	bne.n	80047b8 <HAL_UART_RegisterCallback+0x150>
  {
    switch (CallbackID)
 8004782:	7afb      	ldrb	r3, [r7, #11]
 8004784:	2b0b      	cmp	r3, #11
 8004786:	d002      	beq.n	800478e <HAL_UART_RegisterCallback+0x126>
 8004788:	2b0c      	cmp	r3, #12
 800478a:	d005      	beq.n	8004798 <HAL_UART_RegisterCallback+0x130>
 800478c:	e009      	b.n	80047a2 <HAL_UART_RegisterCallback+0x13a>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
        break;
 8004796:	e019      	b.n	80047cc <HAL_UART_RegisterCallback+0x164>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
        break;
 80047a0:	e014      	b.n	80047cc <HAL_UART_RegisterCallback+0x164>

      default :
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047a8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        status =  HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	75fb      	strb	r3, [r7, #23]
        break;
 80047b6:	e009      	b.n	80047cc <HAL_UART_RegisterCallback+0x164>
    }
  }
  else
  {
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047be:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

    status =  HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80047cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	371c      	adds	r7, #28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop

080047dc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08a      	sub	sp, #40	@ 0x28
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	4613      	mov	r3, r2
 80047e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047f0:	2b20      	cmp	r3, #32
 80047f2:	d167      	bne.n	80048c4 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d002      	beq.n	8004800 <HAL_UART_Transmit_DMA+0x24>
 80047fa:	88fb      	ldrh	r3, [r7, #6]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d101      	bne.n	8004804 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e060      	b.n	80048c6 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	68ba      	ldr	r2, [r7, #8]
 8004808:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	88fa      	ldrh	r2, [r7, #6]
 800480e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	88fa      	ldrh	r2, [r7, #6]
 8004816:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2221      	movs	r2, #33	@ 0x21
 8004826:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800482e:	2b00      	cmp	r3, #0
 8004830:	d028      	beq.n	8004884 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004836:	4a26      	ldr	r2, [pc, #152]	@ (80048d0 <HAL_UART_Transmit_DMA+0xf4>)
 8004838:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800483e:	4a25      	ldr	r2, [pc, #148]	@ (80048d4 <HAL_UART_Transmit_DMA+0xf8>)
 8004840:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004846:	4a24      	ldr	r2, [pc, #144]	@ (80048d8 <HAL_UART_Transmit_DMA+0xfc>)
 8004848:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800484e:	2200      	movs	r2, #0
 8004850:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800485a:	4619      	mov	r1, r3
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3328      	adds	r3, #40	@ 0x28
 8004862:	461a      	mov	r2, r3
 8004864:	88fb      	ldrh	r3, [r7, #6]
 8004866:	f7fd f939 	bl	8001adc <HAL_DMA_Start_IT>
 800486a:	4603      	mov	r3, r0
 800486c:	2b00      	cmp	r3, #0
 800486e:	d009      	beq.n	8004884 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2210      	movs	r2, #16
 8004874:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2220      	movs	r2, #32
 800487c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e020      	b.n	80048c6 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2240      	movs	r2, #64	@ 0x40
 800488a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	3308      	adds	r3, #8
 8004892:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004894:	697b      	ldr	r3, [r7, #20]
 8004896:	e853 3f00 	ldrex	r3, [r3]
 800489a:	613b      	str	r3, [r7, #16]
   return(result);
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80048a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	3308      	adds	r3, #8
 80048aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ac:	623a      	str	r2, [r7, #32]
 80048ae:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048b0:	69f9      	ldr	r1, [r7, #28]
 80048b2:	6a3a      	ldr	r2, [r7, #32]
 80048b4:	e841 2300 	strex	r3, r2, [r1]
 80048b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80048ba:	69bb      	ldr	r3, [r7, #24]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1e5      	bne.n	800488c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 80048c0:	2300      	movs	r3, #0
 80048c2:	e000      	b.n	80048c6 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 80048c4:	2302      	movs	r3, #2
  }
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3728      	adds	r7, #40	@ 0x28
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	08005e07 	.word	0x08005e07
 80048d4:	08005ea5 	.word	0x08005ea5
 80048d8:	0800603f 	.word	0x0800603f

080048dc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048dc:	b580      	push	{r7, lr}
 80048de:	b08a      	sub	sp, #40	@ 0x28
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	60f8      	str	r0, [r7, #12]
 80048e4:	60b9      	str	r1, [r7, #8]
 80048e6:	4613      	mov	r3, r2
 80048e8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048f0:	2b20      	cmp	r3, #32
 80048f2:	d137      	bne.n	8004964 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d002      	beq.n	8004900 <HAL_UART_Receive_DMA+0x24>
 80048fa:	88fb      	ldrh	r3, [r7, #6]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d101      	bne.n	8004904 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e030      	b.n	8004966 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2200      	movs	r2, #0
 8004908:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a18      	ldr	r2, [pc, #96]	@ (8004970 <HAL_UART_Receive_DMA+0x94>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d01f      	beq.n	8004954 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d018      	beq.n	8004954 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	e853 3f00 	ldrex	r3, [r3]
 800492e:	613b      	str	r3, [r7, #16]
   return(result);
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004936:	627b      	str	r3, [r7, #36]	@ 0x24
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	461a      	mov	r2, r3
 800493e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004940:	623b      	str	r3, [r7, #32]
 8004942:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004944:	69f9      	ldr	r1, [r7, #28]
 8004946:	6a3a      	ldr	r2, [r7, #32]
 8004948:	e841 2300 	strex	r3, r2, [r1]
 800494c:	61bb      	str	r3, [r7, #24]
   return(result);
 800494e:	69bb      	ldr	r3, [r7, #24]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1e6      	bne.n	8004922 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8004954:	88fb      	ldrh	r3, [r7, #6]
 8004956:	461a      	mov	r2, r3
 8004958:	68b9      	ldr	r1, [r7, #8]
 800495a:	68f8      	ldr	r0, [r7, #12]
 800495c:	f001 f906 	bl	8005b6c <UART_Start_Receive_DMA>
 8004960:	4603      	mov	r3, r0
 8004962:	e000      	b.n	8004966 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004964:	2302      	movs	r3, #2
  }
}
 8004966:	4618      	mov	r0, r3
 8004968:	3728      	adds	r7, #40	@ 0x28
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	40008000 	.word	0x40008000

08004974 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b0ba      	sub	sp, #232	@ 0xe8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800499a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800499e:	f640 030f 	movw	r3, #2063	@ 0x80f
 80049a2:	4013      	ands	r3, r2
 80049a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80049a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d11b      	bne.n	80049e8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80049b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049b4:	f003 0320 	and.w	r3, r3, #32
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d015      	beq.n	80049e8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80049bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049c0:	f003 0320 	and.w	r3, r3, #32
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d105      	bne.n	80049d4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80049c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80049cc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d009      	beq.n	80049e8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 82f3 	beq.w	8004fc4 <HAL_UART_IRQHandler+0x650>
      {
        huart->RxISR(huart);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	4798      	blx	r3
      }
      return;
 80049e6:	e2ed      	b.n	8004fc4 <HAL_UART_IRQHandler+0x650>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80049e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	f000 8129 	beq.w	8004c44 <HAL_UART_IRQHandler+0x2d0>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80049f2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80049f6:	4b90      	ldr	r3, [pc, #576]	@ (8004c38 <HAL_UART_IRQHandler+0x2c4>)
 80049f8:	4013      	ands	r3, r2
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d106      	bne.n	8004a0c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80049fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8004a02:	4b8e      	ldr	r3, [pc, #568]	@ (8004c3c <HAL_UART_IRQHandler+0x2c8>)
 8004a04:	4013      	ands	r3, r2
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	f000 811c 	beq.w	8004c44 <HAL_UART_IRQHandler+0x2d0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004a0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a10:	f003 0301 	and.w	r3, r3, #1
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d011      	beq.n	8004a3c <HAL_UART_IRQHandler+0xc8>
 8004a18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d00b      	beq.n	8004a3c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2201      	movs	r2, #1
 8004a2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a32:	f043 0201 	orr.w	r2, r3, #1
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d011      	beq.n	8004a6c <HAL_UART_IRQHandler+0xf8>
 8004a48:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a4c:	f003 0301 	and.w	r3, r3, #1
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d00b      	beq.n	8004a6c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2202      	movs	r2, #2
 8004a5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a62:	f043 0204 	orr.w	r2, r3, #4
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a70:	f003 0304 	and.w	r3, r3, #4
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d011      	beq.n	8004a9c <HAL_UART_IRQHandler+0x128>
 8004a78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a7c:	f003 0301 	and.w	r3, r3, #1
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d00b      	beq.n	8004a9c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	2204      	movs	r2, #4
 8004a8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a92:	f043 0202 	orr.w	r2, r3, #2
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aa0:	f003 0308 	and.w	r3, r3, #8
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d017      	beq.n	8004ad8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aac:	f003 0320 	and.w	r3, r3, #32
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d105      	bne.n	8004ac0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004ab4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004ab8:	4b5f      	ldr	r3, [pc, #380]	@ (8004c38 <HAL_UART_IRQHandler+0x2c4>)
 8004aba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d00b      	beq.n	8004ad8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	2208      	movs	r2, #8
 8004ac6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ace:	f043 0208 	orr.w	r2, r3, #8
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004ad8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004adc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d012      	beq.n	8004b0a <HAL_UART_IRQHandler+0x196>
 8004ae4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ae8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00c      	beq.n	8004b0a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004af8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b00:	f043 0220 	orr.w	r2, r3, #32
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 8259 	beq.w	8004fc8 <HAL_UART_IRQHandler+0x654>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004b16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b1a:	f003 0320 	and.w	r3, r3, #32
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d013      	beq.n	8004b4a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004b22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b26:	f003 0320 	and.w	r3, r3, #32
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d105      	bne.n	8004b3a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004b2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d007      	beq.n	8004b4a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d003      	beq.n	8004b4a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b46:	6878      	ldr	r0, [r7, #4]
 8004b48:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004b50:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b5e:	2b40      	cmp	r3, #64	@ 0x40
 8004b60:	d005      	beq.n	8004b6e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004b62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b66:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d058      	beq.n	8004c20 <HAL_UART_IRQHandler+0x2ac>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f001 f8e3 	bl	8005d3a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b7e:	2b40      	cmp	r3, #64	@ 0x40
 8004b80:	d148      	bne.n	8004c14 <HAL_UART_IRQHandler+0x2a0>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3308      	adds	r3, #8
 8004b88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b90:	e853 3f00 	ldrex	r3, [r3]
 8004b94:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004b98:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004b9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ba0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3308      	adds	r3, #8
 8004baa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004bae:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004bb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004bba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004bbe:	e841 2300 	strex	r3, r2, [r1]
 8004bc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004bc6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1d9      	bne.n	8004b82 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d017      	beq.n	8004c08 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bde:	4a18      	ldr	r2, [pc, #96]	@ (8004c40 <HAL_UART_IRQHandler+0x2cc>)
 8004be0:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7fd f84b 	bl	8001c84 <HAL_DMA_Abort_IT>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d01f      	beq.n	8004c34 <HAL_UART_IRQHandler+0x2c0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8004c02:	4610      	mov	r0, r2
 8004c04:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c06:	e015      	b.n	8004c34 <HAL_UART_IRQHandler+0x2c0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c12:	e00f      	b.n	8004c34 <HAL_UART_IRQHandler+0x2c0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c1e:	e009      	b.n	8004c34 <HAL_UART_IRQHandler+0x2c0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8004c32:	e1c9      	b.n	8004fc8 <HAL_UART_IRQHandler+0x654>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c34:	bf00      	nop
    return;
 8004c36:	e1c7      	b.n	8004fc8 <HAL_UART_IRQHandler+0x654>
 8004c38:	10000001 	.word	0x10000001
 8004c3c:	04000120 	.word	0x04000120
 8004c40:	080060c3 	.word	0x080060c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	f040 8157 	bne.w	8004efc <HAL_UART_IRQHandler+0x588>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c52:	f003 0310 	and.w	r3, r3, #16
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f000 8150 	beq.w	8004efc <HAL_UART_IRQHandler+0x588>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c60:	f003 0310 	and.w	r3, r3, #16
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	f000 8149 	beq.w	8004efc <HAL_UART_IRQHandler+0x588>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2210      	movs	r2, #16
 8004c70:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c7c:	2b40      	cmp	r3, #64	@ 0x40
 8004c7e:	f040 80bd 	bne.w	8004dfc <HAL_UART_IRQHandler+0x488>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004c90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f000 8199 	beq.w	8004fcc <HAL_UART_IRQHandler+0x658>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004ca0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	f080 8191 	bcs.w	8004fcc <HAL_UART_IRQHandler+0x658>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004cb0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f003 0320 	and.w	r3, r3, #32
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f040 8087 	bne.w	8004dd6 <HAL_UART_IRQHandler+0x462>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004cd4:	e853 3f00 	ldrex	r3, [r3]
 8004cd8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004cdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ce0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ce4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	461a      	mov	r2, r3
 8004cee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004cf2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004cf6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004cfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004d02:	e841 2300 	strex	r3, r2, [r1]
 8004d06:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004d0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1da      	bne.n	8004cc8 <HAL_UART_IRQHandler+0x354>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	3308      	adds	r3, #8
 8004d18:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d1a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d1c:	e853 3f00 	ldrex	r3, [r3]
 8004d20:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004d22:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d24:	f023 0301 	bic.w	r3, r3, #1
 8004d28:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	3308      	adds	r3, #8
 8004d32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d36:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004d3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d3c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004d3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004d42:	e841 2300 	strex	r3, r2, [r1]
 8004d46:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004d48:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d1e1      	bne.n	8004d12 <HAL_UART_IRQHandler+0x39e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	3308      	adds	r3, #8
 8004d54:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d58:	e853 3f00 	ldrex	r3, [r3]
 8004d5c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004d5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3308      	adds	r3, #8
 8004d6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004d72:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004d74:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d76:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004d78:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004d7a:	e841 2300 	strex	r3, r2, [r1]
 8004d7e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004d80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1e3      	bne.n	8004d4e <HAL_UART_IRQHandler+0x3da>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2220      	movs	r2, #32
 8004d8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004d9c:	e853 3f00 	ldrex	r3, [r3]
 8004da0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004da2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004da4:	f023 0310 	bic.w	r3, r3, #16
 8004da8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	461a      	mov	r2, r3
 8004db2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004db6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004db8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004dbc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004dbe:	e841 2300 	strex	r3, r2, [r1]
 8004dc2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004dc4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1e4      	bne.n	8004d94 <HAL_UART_IRQHandler+0x420>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f7fc fefe 	bl	8001bd2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2202      	movs	r2, #2
 8004dda:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	f8b2 105c 	ldrh.w	r1, [r2, #92]	@ 0x5c
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	f8b2 205e 	ldrh.w	r2, [r2, #94]	@ 0x5e
 8004dee:	b292      	uxth	r2, r2
 8004df0:	1a8a      	subs	r2, r1, r2
 8004df2:	b292      	uxth	r2, r2
 8004df4:	4611      	mov	r1, r2
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004dfa:	e0e7      	b.n	8004fcc <HAL_UART_IRQHandler+0x658>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	f000 80d9 	beq.w	8004fd0 <HAL_UART_IRQHandler+0x65c>
          && (nb_rx_data > 0U))
 8004e1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	f000 80d4 	beq.w	8004fd0 <HAL_UART_IRQHandler+0x65c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e30:	e853 3f00 	ldrex	r3, [r3]
 8004e34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	461a      	mov	r2, r3
 8004e46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004e4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e4c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e52:	e841 2300 	strex	r3, r2, [r1]
 8004e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1e4      	bne.n	8004e28 <HAL_UART_IRQHandler+0x4b4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3308      	adds	r3, #8
 8004e64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e68:	e853 3f00 	ldrex	r3, [r3]
 8004e6c:	623b      	str	r3, [r7, #32]
   return(result);
 8004e6e:	6a3b      	ldr	r3, [r7, #32]
 8004e70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e74:	f023 0301 	bic.w	r3, r3, #1
 8004e78:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	3308      	adds	r3, #8
 8004e82:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004e86:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e88:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e8e:	e841 2300 	strex	r3, r2, [r1]
 8004e92:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1e1      	bne.n	8004e5e <HAL_UART_IRQHandler+0x4ea>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2220      	movs	r2, #32
 8004e9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	e853 3f00 	ldrex	r3, [r3]
 8004eba:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f023 0310 	bic.w	r3, r3, #16
 8004ec2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	461a      	mov	r2, r3
 8004ecc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004ed0:	61fb      	str	r3, [r7, #28]
 8004ed2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed4:	69b9      	ldr	r1, [r7, #24]
 8004ed6:	69fa      	ldr	r2, [r7, #28]
 8004ed8:	e841 2300 	strex	r3, r2, [r1]
 8004edc:	617b      	str	r3, [r7, #20]
   return(result);
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1e4      	bne.n	8004eae <HAL_UART_IRQHandler+0x53a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	671a      	str	r2, [r3, #112]	@ 0x70

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8004ef0:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	@ 0xce
 8004ef4:	4611      	mov	r1, r2
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004efa:	e069      	b.n	8004fd0 <HAL_UART_IRQHandler+0x65c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004efc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d010      	beq.n	8004f2a <HAL_UART_IRQHandler+0x5b6>
 8004f08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d00a      	beq.n	8004f2a <HAL_UART_IRQHandler+0x5b6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004f1c:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004f28:	e055      	b.n	8004fd6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d014      	beq.n	8004f60 <HAL_UART_IRQHandler+0x5ec>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d105      	bne.n	8004f4e <HAL_UART_IRQHandler+0x5da>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004f42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004f46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d008      	beq.n	8004f60 <HAL_UART_IRQHandler+0x5ec>
  {
    if (huart->TxISR != NULL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d03e      	beq.n	8004fd4 <HAL_UART_IRQHandler+0x660>
    {
      huart->TxISR(huart);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	4798      	blx	r3
    }
    return;
 8004f5e:	e039      	b.n	8004fd4 <HAL_UART_IRQHandler+0x660>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d009      	beq.n	8004f80 <HAL_UART_IRQHandler+0x60c>
 8004f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d003      	beq.n	8004f80 <HAL_UART_IRQHandler+0x60c>
  {
    UART_EndTransmit_IT(huart);
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f001 f8ba 	bl	80060f2 <UART_EndTransmit_IT>
    return;
 8004f7e:	e02a      	b.n	8004fd6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f84:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00b      	beq.n	8004fa4 <HAL_UART_IRQHandler+0x630>
 8004f8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f90:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d005      	beq.n	8004fa4 <HAL_UART_IRQHandler+0x630>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	4798      	blx	r3
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004fa2:	e018      	b.n	8004fd6 <HAL_UART_IRQHandler+0x662>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fa8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d012      	beq.n	8004fd6 <HAL_UART_IRQHandler+0x662>
 8004fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	da0e      	bge.n	8004fd6 <HAL_UART_IRQHandler+0x662>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004fbe:	6878      	ldr	r0, [r7, #4]
 8004fc0:	4798      	blx	r3
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004fc2:	e008      	b.n	8004fd6 <HAL_UART_IRQHandler+0x662>
      return;
 8004fc4:	bf00      	nop
 8004fc6:	e006      	b.n	8004fd6 <HAL_UART_IRQHandler+0x662>
    return;
 8004fc8:	bf00      	nop
 8004fca:	e004      	b.n	8004fd6 <HAL_UART_IRQHandler+0x662>
      return;
 8004fcc:	bf00      	nop
 8004fce:	e002      	b.n	8004fd6 <HAL_UART_IRQHandler+0x662>
      return;
 8004fd0:	bf00      	nop
 8004fd2:	e000      	b.n	8004fd6 <HAL_UART_IRQHandler+0x662>
    return;
 8004fd4:	bf00      	nop
  }
}
 8004fd6:	37e8      	adds	r7, #232	@ 0xe8
 8004fd8:	46bd      	mov	sp, r7
 8004fda:	bd80      	pop	{r7, pc}

08004fdc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004fe4:	bf00      	nop
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8004ff8:	bf00      	nop
 8004ffa:	370c      	adds	r7, #12
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr

08005004 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005004:	b480      	push	{r7}
 8005006:	b083      	sub	sp, #12
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800500c:	bf00      	nop
 800500e:	370c      	adds	r7, #12
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr

0800502c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005034:	bf00      	nop
 8005036:	370c      	adds	r7, #12
 8005038:	46bd      	mov	sp, r7
 800503a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503e:	4770      	bx	lr

08005040 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8005040:	b480      	push	{r7}
 8005042:	b083      	sub	sp, #12
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8005054:	b480      	push	{r7}
 8005056:	b083      	sub	sp, #12
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800505c:	bf00      	nop
 800505e:	370c      	adds	r7, #12
 8005060:	46bd      	mov	sp, r7
 8005062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005066:	4770      	bx	lr

08005068 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8005070:	bf00      	nop
 8005072:	370c      	adds	r7, #12
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr

0800507c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
 8005084:	460b      	mov	r3, r1
 8005086:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr

08005094 <HAL_UART_ReceiverTimeout_Config>:
  * @param  TimeoutValue receiver timeout value in number of baud blocks. The timeout
  *                     value must be less or equal to 0x0FFFFFFFF.
  * @retval None
  */
void HAL_UART_ReceiverTimeout_Config(UART_HandleTypeDef *huart, uint32_t TimeoutValue)
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4a09      	ldr	r2, [pc, #36]	@ (80050c8 <HAL_UART_ReceiverTimeout_Config+0x34>)
 80050a4:	4293      	cmp	r3, r2
 80050a6:	d009      	beq.n	80050bc <HAL_UART_ReceiverTimeout_Config+0x28>
  {
    assert_param(IS_UART_RECEIVER_TIMEOUT_VALUE(TimeoutValue));
    MODIFY_REG(huart->Instance->RTOR, USART_RTOR_RTO, TimeoutValue);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	695b      	ldr	r3, [r3, #20]
 80050ae:	f003 417f 	and.w	r1, r3, #4278190080	@ 0xff000000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	683a      	ldr	r2, [r7, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	615a      	str	r2, [r3, #20]
  }
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr
 80050c8:	40008000 	.word	0x40008000

080050cc <HAL_UART_EnableReceiverTimeout>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *                    the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_EnableReceiverTimeout(UART_HandleTypeDef *huart)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a18      	ldr	r2, [pc, #96]	@ (800513c <HAL_UART_EnableReceiverTimeout+0x70>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d027      	beq.n	800512e <HAL_UART_EnableReceiverTimeout+0x62>
  {
    if (huart->gState == HAL_UART_STATE_READY)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050e4:	2b20      	cmp	r3, #32
 80050e6:	d120      	bne.n	800512a <HAL_UART_EnableReceiverTimeout+0x5e>
    {
      /* Process Locked */
      __HAL_LOCK(huart);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80050ee:	2b01      	cmp	r3, #1
 80050f0:	d101      	bne.n	80050f6 <HAL_UART_EnableReceiverTimeout+0x2a>
 80050f2:	2302      	movs	r3, #2
 80050f4:	e01c      	b.n	8005130 <HAL_UART_EnableReceiverTimeout+0x64>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2201      	movs	r2, #1
 80050fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      huart->gState = HAL_UART_STATE_BUSY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2224      	movs	r2, #36	@ 0x24
 8005102:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Set the USART RTOEN bit */
      SET_BIT(huart->Instance->CR2, USART_CR2_RTOEN);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8005114:	605a      	str	r2, [r3, #4]

      huart->gState = HAL_UART_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2220      	movs	r2, #32
 800511a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      /* Process Unlocked */
      __HAL_UNLOCK(huart);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      return HAL_OK;
 8005126:	2300      	movs	r3, #0
 8005128:	e002      	b.n	8005130 <HAL_UART_EnableReceiverTimeout+0x64>
    }
    else
    {
      return HAL_BUSY;
 800512a:	2302      	movs	r3, #2
 800512c:	e000      	b.n	8005130 <HAL_UART_EnableReceiverTimeout+0x64>
    }
  }
  else
  {
    return HAL_ERROR;
 800512e:	2301      	movs	r3, #1
  }
}
 8005130:	4618      	mov	r0, r3
 8005132:	370c      	adds	r7, #12
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	40008000 	.word	0x40008000

08005140 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 8005140:	b480      	push	{r7}
 8005142:	b083      	sub	sp, #12
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
}
 800514e:	4618      	mov	r0, r3
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
	...

0800515c <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	4a1a      	ldr	r2, [pc, #104]	@ (80051d0 <UART_InitCallbacksToDefault+0x74>)
 8005168:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	4a19      	ldr	r2, [pc, #100]	@ (80051d4 <UART_InitCallbacksToDefault+0x78>)
 8005170:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4a18      	ldr	r2, [pc, #96]	@ (80051d8 <UART_InitCallbacksToDefault+0x7c>)
 8005178:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a17      	ldr	r2, [pc, #92]	@ (80051dc <UART_InitCallbacksToDefault+0x80>)
 8005180:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a16      	ldr	r2, [pc, #88]	@ (80051e0 <UART_InitCallbacksToDefault+0x84>)
 8005188:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a15      	ldr	r2, [pc, #84]	@ (80051e4 <UART_InitCallbacksToDefault+0x88>)
 8005190:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a14      	ldr	r2, [pc, #80]	@ (80051e8 <UART_InitCallbacksToDefault+0x8c>)
 8005198:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a13      	ldr	r2, [pc, #76]	@ (80051ec <UART_InitCallbacksToDefault+0x90>)
 80051a0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	4a12      	ldr	r2, [pc, #72]	@ (80051f0 <UART_InitCallbacksToDefault+0x94>)
 80051a8:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  huart->RxFifoFullCallback        = HAL_UARTEx_RxFifoFullCallback;      /* Legacy weak RxFifoFullCallback        */
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	4a11      	ldr	r2, [pc, #68]	@ (80051f4 <UART_InitCallbacksToDefault+0x98>)
 80051b0:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  huart->TxFifoEmptyCallback       = HAL_UARTEx_TxFifoEmptyCallback;     /* Legacy weak TxFifoEmptyCallback       */
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	4a10      	ldr	r2, [pc, #64]	@ (80051f8 <UART_InitCallbacksToDefault+0x9c>)
 80051b8:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	4a0f      	ldr	r2, [pc, #60]	@ (80051fc <UART_InitCallbacksToDefault+0xa0>)
 80051c0:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr
 80051d0:	08004ff1 	.word	0x08004ff1
 80051d4:	08004fdd 	.word	0x08004fdd
 80051d8:	08005019 	.word	0x08005019
 80051dc:	08005005 	.word	0x08005005
 80051e0:	0800502d 	.word	0x0800502d
 80051e4:	08005041 	.word	0x08005041
 80051e8:	08005055 	.word	0x08005055
 80051ec:	08005069 	.word	0x08005069
 80051f0:	0800614d 	.word	0x0800614d
 80051f4:	08006161 	.word	0x08006161
 80051f8:	08006175 	.word	0x08006175
 80051fc:	0800507d 	.word	0x0800507d

08005200 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005200:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005204:	b08c      	sub	sp, #48	@ 0x30
 8005206:	af00      	add	r7, sp, #0
 8005208:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800520a:	2300      	movs	r3, #0
 800520c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	691b      	ldr	r3, [r3, #16]
 8005218:	431a      	orrs	r2, r3
 800521a:	697b      	ldr	r3, [r7, #20]
 800521c:	695b      	ldr	r3, [r3, #20]
 800521e:	431a      	orrs	r2, r3
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	4313      	orrs	r3, r2
 8005226:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	4baa      	ldr	r3, [pc, #680]	@ (80054d8 <UART_SetConfig+0x2d8>)
 8005230:	4013      	ands	r3, r2
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	6812      	ldr	r2, [r2, #0]
 8005236:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005238:	430b      	orrs	r3, r1
 800523a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800523c:	697b      	ldr	r3, [r7, #20]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	68da      	ldr	r2, [r3, #12]
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a9f      	ldr	r2, [pc, #636]	@ (80054dc <UART_SetConfig+0x2dc>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d004      	beq.n	800526c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005268:	4313      	orrs	r3, r2
 800526a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800526c:	697b      	ldr	r3, [r7, #20]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8005276:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	6812      	ldr	r2, [r2, #0]
 800527e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005280:	430b      	orrs	r3, r1
 8005282:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800528a:	f023 010f 	bic.w	r1, r3, #15
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a90      	ldr	r2, [pc, #576]	@ (80054e0 <UART_SetConfig+0x2e0>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d125      	bne.n	80052f0 <UART_SetConfig+0xf0>
 80052a4:	4b8f      	ldr	r3, [pc, #572]	@ (80054e4 <UART_SetConfig+0x2e4>)
 80052a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052aa:	f003 0303 	and.w	r3, r3, #3
 80052ae:	2b03      	cmp	r3, #3
 80052b0:	d81a      	bhi.n	80052e8 <UART_SetConfig+0xe8>
 80052b2:	a201      	add	r2, pc, #4	@ (adr r2, 80052b8 <UART_SetConfig+0xb8>)
 80052b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052b8:	080052c9 	.word	0x080052c9
 80052bc:	080052d9 	.word	0x080052d9
 80052c0:	080052d1 	.word	0x080052d1
 80052c4:	080052e1 	.word	0x080052e1
 80052c8:	2301      	movs	r3, #1
 80052ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ce:	e116      	b.n	80054fe <UART_SetConfig+0x2fe>
 80052d0:	2302      	movs	r3, #2
 80052d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052d6:	e112      	b.n	80054fe <UART_SetConfig+0x2fe>
 80052d8:	2304      	movs	r3, #4
 80052da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052de:	e10e      	b.n	80054fe <UART_SetConfig+0x2fe>
 80052e0:	2308      	movs	r3, #8
 80052e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052e6:	e10a      	b.n	80054fe <UART_SetConfig+0x2fe>
 80052e8:	2310      	movs	r3, #16
 80052ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80052ee:	e106      	b.n	80054fe <UART_SetConfig+0x2fe>
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a7c      	ldr	r2, [pc, #496]	@ (80054e8 <UART_SetConfig+0x2e8>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d138      	bne.n	800536c <UART_SetConfig+0x16c>
 80052fa:	4b7a      	ldr	r3, [pc, #488]	@ (80054e4 <UART_SetConfig+0x2e4>)
 80052fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005300:	f003 030c 	and.w	r3, r3, #12
 8005304:	2b0c      	cmp	r3, #12
 8005306:	d82d      	bhi.n	8005364 <UART_SetConfig+0x164>
 8005308:	a201      	add	r2, pc, #4	@ (adr r2, 8005310 <UART_SetConfig+0x110>)
 800530a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800530e:	bf00      	nop
 8005310:	08005345 	.word	0x08005345
 8005314:	08005365 	.word	0x08005365
 8005318:	08005365 	.word	0x08005365
 800531c:	08005365 	.word	0x08005365
 8005320:	08005355 	.word	0x08005355
 8005324:	08005365 	.word	0x08005365
 8005328:	08005365 	.word	0x08005365
 800532c:	08005365 	.word	0x08005365
 8005330:	0800534d 	.word	0x0800534d
 8005334:	08005365 	.word	0x08005365
 8005338:	08005365 	.word	0x08005365
 800533c:	08005365 	.word	0x08005365
 8005340:	0800535d 	.word	0x0800535d
 8005344:	2300      	movs	r3, #0
 8005346:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800534a:	e0d8      	b.n	80054fe <UART_SetConfig+0x2fe>
 800534c:	2302      	movs	r3, #2
 800534e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005352:	e0d4      	b.n	80054fe <UART_SetConfig+0x2fe>
 8005354:	2304      	movs	r3, #4
 8005356:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800535a:	e0d0      	b.n	80054fe <UART_SetConfig+0x2fe>
 800535c:	2308      	movs	r3, #8
 800535e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005362:	e0cc      	b.n	80054fe <UART_SetConfig+0x2fe>
 8005364:	2310      	movs	r3, #16
 8005366:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800536a:	e0c8      	b.n	80054fe <UART_SetConfig+0x2fe>
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a5e      	ldr	r2, [pc, #376]	@ (80054ec <UART_SetConfig+0x2ec>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d125      	bne.n	80053c2 <UART_SetConfig+0x1c2>
 8005376:	4b5b      	ldr	r3, [pc, #364]	@ (80054e4 <UART_SetConfig+0x2e4>)
 8005378:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800537c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005380:	2b30      	cmp	r3, #48	@ 0x30
 8005382:	d016      	beq.n	80053b2 <UART_SetConfig+0x1b2>
 8005384:	2b30      	cmp	r3, #48	@ 0x30
 8005386:	d818      	bhi.n	80053ba <UART_SetConfig+0x1ba>
 8005388:	2b20      	cmp	r3, #32
 800538a:	d00a      	beq.n	80053a2 <UART_SetConfig+0x1a2>
 800538c:	2b20      	cmp	r3, #32
 800538e:	d814      	bhi.n	80053ba <UART_SetConfig+0x1ba>
 8005390:	2b00      	cmp	r3, #0
 8005392:	d002      	beq.n	800539a <UART_SetConfig+0x19a>
 8005394:	2b10      	cmp	r3, #16
 8005396:	d008      	beq.n	80053aa <UART_SetConfig+0x1aa>
 8005398:	e00f      	b.n	80053ba <UART_SetConfig+0x1ba>
 800539a:	2300      	movs	r3, #0
 800539c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053a0:	e0ad      	b.n	80054fe <UART_SetConfig+0x2fe>
 80053a2:	2302      	movs	r3, #2
 80053a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053a8:	e0a9      	b.n	80054fe <UART_SetConfig+0x2fe>
 80053aa:	2304      	movs	r3, #4
 80053ac:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053b0:	e0a5      	b.n	80054fe <UART_SetConfig+0x2fe>
 80053b2:	2308      	movs	r3, #8
 80053b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053b8:	e0a1      	b.n	80054fe <UART_SetConfig+0x2fe>
 80053ba:	2310      	movs	r3, #16
 80053bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053c0:	e09d      	b.n	80054fe <UART_SetConfig+0x2fe>
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4a4a      	ldr	r2, [pc, #296]	@ (80054f0 <UART_SetConfig+0x2f0>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d125      	bne.n	8005418 <UART_SetConfig+0x218>
 80053cc:	4b45      	ldr	r3, [pc, #276]	@ (80054e4 <UART_SetConfig+0x2e4>)
 80053ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053d2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80053d6:	2bc0      	cmp	r3, #192	@ 0xc0
 80053d8:	d016      	beq.n	8005408 <UART_SetConfig+0x208>
 80053da:	2bc0      	cmp	r3, #192	@ 0xc0
 80053dc:	d818      	bhi.n	8005410 <UART_SetConfig+0x210>
 80053de:	2b80      	cmp	r3, #128	@ 0x80
 80053e0:	d00a      	beq.n	80053f8 <UART_SetConfig+0x1f8>
 80053e2:	2b80      	cmp	r3, #128	@ 0x80
 80053e4:	d814      	bhi.n	8005410 <UART_SetConfig+0x210>
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d002      	beq.n	80053f0 <UART_SetConfig+0x1f0>
 80053ea:	2b40      	cmp	r3, #64	@ 0x40
 80053ec:	d008      	beq.n	8005400 <UART_SetConfig+0x200>
 80053ee:	e00f      	b.n	8005410 <UART_SetConfig+0x210>
 80053f0:	2300      	movs	r3, #0
 80053f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053f6:	e082      	b.n	80054fe <UART_SetConfig+0x2fe>
 80053f8:	2302      	movs	r3, #2
 80053fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80053fe:	e07e      	b.n	80054fe <UART_SetConfig+0x2fe>
 8005400:	2304      	movs	r3, #4
 8005402:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005406:	e07a      	b.n	80054fe <UART_SetConfig+0x2fe>
 8005408:	2308      	movs	r3, #8
 800540a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800540e:	e076      	b.n	80054fe <UART_SetConfig+0x2fe>
 8005410:	2310      	movs	r3, #16
 8005412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005416:	e072      	b.n	80054fe <UART_SetConfig+0x2fe>
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a35      	ldr	r2, [pc, #212]	@ (80054f4 <UART_SetConfig+0x2f4>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d12a      	bne.n	8005478 <UART_SetConfig+0x278>
 8005422:	4b30      	ldr	r3, [pc, #192]	@ (80054e4 <UART_SetConfig+0x2e4>)
 8005424:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005428:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800542c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005430:	d01a      	beq.n	8005468 <UART_SetConfig+0x268>
 8005432:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005436:	d81b      	bhi.n	8005470 <UART_SetConfig+0x270>
 8005438:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800543c:	d00c      	beq.n	8005458 <UART_SetConfig+0x258>
 800543e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005442:	d815      	bhi.n	8005470 <UART_SetConfig+0x270>
 8005444:	2b00      	cmp	r3, #0
 8005446:	d003      	beq.n	8005450 <UART_SetConfig+0x250>
 8005448:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800544c:	d008      	beq.n	8005460 <UART_SetConfig+0x260>
 800544e:	e00f      	b.n	8005470 <UART_SetConfig+0x270>
 8005450:	2300      	movs	r3, #0
 8005452:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005456:	e052      	b.n	80054fe <UART_SetConfig+0x2fe>
 8005458:	2302      	movs	r3, #2
 800545a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800545e:	e04e      	b.n	80054fe <UART_SetConfig+0x2fe>
 8005460:	2304      	movs	r3, #4
 8005462:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005466:	e04a      	b.n	80054fe <UART_SetConfig+0x2fe>
 8005468:	2308      	movs	r3, #8
 800546a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800546e:	e046      	b.n	80054fe <UART_SetConfig+0x2fe>
 8005470:	2310      	movs	r3, #16
 8005472:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005476:	e042      	b.n	80054fe <UART_SetConfig+0x2fe>
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a17      	ldr	r2, [pc, #92]	@ (80054dc <UART_SetConfig+0x2dc>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d13a      	bne.n	80054f8 <UART_SetConfig+0x2f8>
 8005482:	4b18      	ldr	r3, [pc, #96]	@ (80054e4 <UART_SetConfig+0x2e4>)
 8005484:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005488:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800548c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005490:	d01a      	beq.n	80054c8 <UART_SetConfig+0x2c8>
 8005492:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005496:	d81b      	bhi.n	80054d0 <UART_SetConfig+0x2d0>
 8005498:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800549c:	d00c      	beq.n	80054b8 <UART_SetConfig+0x2b8>
 800549e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054a2:	d815      	bhi.n	80054d0 <UART_SetConfig+0x2d0>
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d003      	beq.n	80054b0 <UART_SetConfig+0x2b0>
 80054a8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80054ac:	d008      	beq.n	80054c0 <UART_SetConfig+0x2c0>
 80054ae:	e00f      	b.n	80054d0 <UART_SetConfig+0x2d0>
 80054b0:	2300      	movs	r3, #0
 80054b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054b6:	e022      	b.n	80054fe <UART_SetConfig+0x2fe>
 80054b8:	2302      	movs	r3, #2
 80054ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054be:	e01e      	b.n	80054fe <UART_SetConfig+0x2fe>
 80054c0:	2304      	movs	r3, #4
 80054c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054c6:	e01a      	b.n	80054fe <UART_SetConfig+0x2fe>
 80054c8:	2308      	movs	r3, #8
 80054ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054ce:	e016      	b.n	80054fe <UART_SetConfig+0x2fe>
 80054d0:	2310      	movs	r3, #16
 80054d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80054d6:	e012      	b.n	80054fe <UART_SetConfig+0x2fe>
 80054d8:	cfff69f3 	.word	0xcfff69f3
 80054dc:	40008000 	.word	0x40008000
 80054e0:	40013800 	.word	0x40013800
 80054e4:	40021000 	.word	0x40021000
 80054e8:	40004400 	.word	0x40004400
 80054ec:	40004800 	.word	0x40004800
 80054f0:	40004c00 	.word	0x40004c00
 80054f4:	40005000 	.word	0x40005000
 80054f8:	2310      	movs	r3, #16
 80054fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4aae      	ldr	r2, [pc, #696]	@ (80057bc <UART_SetConfig+0x5bc>)
 8005504:	4293      	cmp	r3, r2
 8005506:	f040 8097 	bne.w	8005638 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800550a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800550e:	2b08      	cmp	r3, #8
 8005510:	d823      	bhi.n	800555a <UART_SetConfig+0x35a>
 8005512:	a201      	add	r2, pc, #4	@ (adr r2, 8005518 <UART_SetConfig+0x318>)
 8005514:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005518:	0800553d 	.word	0x0800553d
 800551c:	0800555b 	.word	0x0800555b
 8005520:	08005545 	.word	0x08005545
 8005524:	0800555b 	.word	0x0800555b
 8005528:	0800554b 	.word	0x0800554b
 800552c:	0800555b 	.word	0x0800555b
 8005530:	0800555b 	.word	0x0800555b
 8005534:	0800555b 	.word	0x0800555b
 8005538:	08005553 	.word	0x08005553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800553c:	f7fd fc86 	bl	8002e4c <HAL_RCC_GetPCLK1Freq>
 8005540:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005542:	e010      	b.n	8005566 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005544:	4b9e      	ldr	r3, [pc, #632]	@ (80057c0 <UART_SetConfig+0x5c0>)
 8005546:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005548:	e00d      	b.n	8005566 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800554a:	f7fd fc11 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 800554e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005550:	e009      	b.n	8005566 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005552:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005556:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005558:	e005      	b.n	8005566 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005564:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005568:	2b00      	cmp	r3, #0
 800556a:	f000 8130 	beq.w	80057ce <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005572:	4a94      	ldr	r2, [pc, #592]	@ (80057c4 <UART_SetConfig+0x5c4>)
 8005574:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005578:	461a      	mov	r2, r3
 800557a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800557c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005580:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	685a      	ldr	r2, [r3, #4]
 8005586:	4613      	mov	r3, r2
 8005588:	005b      	lsls	r3, r3, #1
 800558a:	4413      	add	r3, r2
 800558c:	69ba      	ldr	r2, [r7, #24]
 800558e:	429a      	cmp	r2, r3
 8005590:	d305      	bcc.n	800559e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005598:	69ba      	ldr	r2, [r7, #24]
 800559a:	429a      	cmp	r2, r3
 800559c:	d903      	bls.n	80055a6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80055a4:	e113      	b.n	80057ce <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055a8:	2200      	movs	r2, #0
 80055aa:	60bb      	str	r3, [r7, #8]
 80055ac:	60fa      	str	r2, [r7, #12]
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b2:	4a84      	ldr	r2, [pc, #528]	@ (80057c4 <UART_SetConfig+0x5c4>)
 80055b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	2200      	movs	r2, #0
 80055bc:	603b      	str	r3, [r7, #0]
 80055be:	607a      	str	r2, [r7, #4]
 80055c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055c4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055c8:	f7fa fe26 	bl	8000218 <__aeabi_uldivmod>
 80055cc:	4602      	mov	r2, r0
 80055ce:	460b      	mov	r3, r1
 80055d0:	4610      	mov	r0, r2
 80055d2:	4619      	mov	r1, r3
 80055d4:	f04f 0200 	mov.w	r2, #0
 80055d8:	f04f 0300 	mov.w	r3, #0
 80055dc:	020b      	lsls	r3, r1, #8
 80055de:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80055e2:	0202      	lsls	r2, r0, #8
 80055e4:	6979      	ldr	r1, [r7, #20]
 80055e6:	6849      	ldr	r1, [r1, #4]
 80055e8:	0849      	lsrs	r1, r1, #1
 80055ea:	2000      	movs	r0, #0
 80055ec:	460c      	mov	r4, r1
 80055ee:	4605      	mov	r5, r0
 80055f0:	eb12 0804 	adds.w	r8, r2, r4
 80055f4:	eb43 0905 	adc.w	r9, r3, r5
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	469a      	mov	sl, r3
 8005600:	4693      	mov	fp, r2
 8005602:	4652      	mov	r2, sl
 8005604:	465b      	mov	r3, fp
 8005606:	4640      	mov	r0, r8
 8005608:	4649      	mov	r1, r9
 800560a:	f7fa fe05 	bl	8000218 <__aeabi_uldivmod>
 800560e:	4602      	mov	r2, r0
 8005610:	460b      	mov	r3, r1
 8005612:	4613      	mov	r3, r2
 8005614:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800561c:	d308      	bcc.n	8005630 <UART_SetConfig+0x430>
 800561e:	6a3b      	ldr	r3, [r7, #32]
 8005620:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005624:	d204      	bcs.n	8005630 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	6a3a      	ldr	r2, [r7, #32]
 800562c:	60da      	str	r2, [r3, #12]
 800562e:	e0ce      	b.n	80057ce <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8005636:	e0ca      	b.n	80057ce <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	69db      	ldr	r3, [r3, #28]
 800563c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005640:	d166      	bne.n	8005710 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005642:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005646:	2b08      	cmp	r3, #8
 8005648:	d827      	bhi.n	800569a <UART_SetConfig+0x49a>
 800564a:	a201      	add	r2, pc, #4	@ (adr r2, 8005650 <UART_SetConfig+0x450>)
 800564c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005650:	08005675 	.word	0x08005675
 8005654:	0800567d 	.word	0x0800567d
 8005658:	08005685 	.word	0x08005685
 800565c:	0800569b 	.word	0x0800569b
 8005660:	0800568b 	.word	0x0800568b
 8005664:	0800569b 	.word	0x0800569b
 8005668:	0800569b 	.word	0x0800569b
 800566c:	0800569b 	.word	0x0800569b
 8005670:	08005693 	.word	0x08005693
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005674:	f7fd fbea 	bl	8002e4c <HAL_RCC_GetPCLK1Freq>
 8005678:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800567a:	e014      	b.n	80056a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800567c:	f7fd fbfc 	bl	8002e78 <HAL_RCC_GetPCLK2Freq>
 8005680:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005682:	e010      	b.n	80056a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005684:	4b4e      	ldr	r3, [pc, #312]	@ (80057c0 <UART_SetConfig+0x5c0>)
 8005686:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005688:	e00d      	b.n	80056a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800568a:	f7fd fb71 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 800568e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005690:	e009      	b.n	80056a6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005692:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005696:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005698:	e005      	b.n	80056a6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800569a:	2300      	movs	r3, #0
 800569c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800569e:	2301      	movs	r3, #1
 80056a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80056a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80056a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f000 8090 	beq.w	80057ce <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80056ae:	697b      	ldr	r3, [r7, #20]
 80056b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056b2:	4a44      	ldr	r2, [pc, #272]	@ (80057c4 <UART_SetConfig+0x5c4>)
 80056b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80056b8:	461a      	mov	r2, r3
 80056ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80056c0:	005a      	lsls	r2, r3, #1
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	085b      	lsrs	r3, r3, #1
 80056c8:	441a      	add	r2, r3
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80056d2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80056d4:	6a3b      	ldr	r3, [r7, #32]
 80056d6:	2b0f      	cmp	r3, #15
 80056d8:	d916      	bls.n	8005708 <UART_SetConfig+0x508>
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80056e0:	d212      	bcs.n	8005708 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80056e2:	6a3b      	ldr	r3, [r7, #32]
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	f023 030f 	bic.w	r3, r3, #15
 80056ea:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	085b      	lsrs	r3, r3, #1
 80056f0:	b29b      	uxth	r3, r3
 80056f2:	f003 0307 	and.w	r3, r3, #7
 80056f6:	b29a      	uxth	r2, r3
 80056f8:	8bfb      	ldrh	r3, [r7, #30]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	8bfa      	ldrh	r2, [r7, #30]
 8005704:	60da      	str	r2, [r3, #12]
 8005706:	e062      	b.n	80057ce <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800570e:	e05e      	b.n	80057ce <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005710:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005714:	2b08      	cmp	r3, #8
 8005716:	d828      	bhi.n	800576a <UART_SetConfig+0x56a>
 8005718:	a201      	add	r2, pc, #4	@ (adr r2, 8005720 <UART_SetConfig+0x520>)
 800571a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800571e:	bf00      	nop
 8005720:	08005745 	.word	0x08005745
 8005724:	0800574d 	.word	0x0800574d
 8005728:	08005755 	.word	0x08005755
 800572c:	0800576b 	.word	0x0800576b
 8005730:	0800575b 	.word	0x0800575b
 8005734:	0800576b 	.word	0x0800576b
 8005738:	0800576b 	.word	0x0800576b
 800573c:	0800576b 	.word	0x0800576b
 8005740:	08005763 	.word	0x08005763
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005744:	f7fd fb82 	bl	8002e4c <HAL_RCC_GetPCLK1Freq>
 8005748:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800574a:	e014      	b.n	8005776 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800574c:	f7fd fb94 	bl	8002e78 <HAL_RCC_GetPCLK2Freq>
 8005750:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005752:	e010      	b.n	8005776 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005754:	4b1a      	ldr	r3, [pc, #104]	@ (80057c0 <UART_SetConfig+0x5c0>)
 8005756:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005758:	e00d      	b.n	8005776 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800575a:	f7fd fb09 	bl	8002d70 <HAL_RCC_GetSysClockFreq>
 800575e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005760:	e009      	b.n	8005776 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005762:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005766:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005768:	e005      	b.n	8005776 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800576a:	2300      	movs	r3, #0
 800576c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8005774:	bf00      	nop
    }

    if (pclk != 0U)
 8005776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005778:	2b00      	cmp	r3, #0
 800577a:	d028      	beq.n	80057ce <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005780:	4a10      	ldr	r2, [pc, #64]	@ (80057c4 <UART_SetConfig+0x5c4>)
 8005782:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005786:	461a      	mov	r2, r3
 8005788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578a:	fbb3 f2f2 	udiv	r2, r3, r2
 800578e:	697b      	ldr	r3, [r7, #20]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	085b      	lsrs	r3, r3, #1
 8005794:	441a      	add	r2, r3
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	fbb2 f3f3 	udiv	r3, r2, r3
 800579e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	2b0f      	cmp	r3, #15
 80057a4:	d910      	bls.n	80057c8 <UART_SetConfig+0x5c8>
 80057a6:	6a3b      	ldr	r3, [r7, #32]
 80057a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057ac:	d20c      	bcs.n	80057c8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80057ae:	6a3b      	ldr	r3, [r7, #32]
 80057b0:	b29a      	uxth	r2, r3
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	60da      	str	r2, [r3, #12]
 80057b8:	e009      	b.n	80057ce <UART_SetConfig+0x5ce>
 80057ba:	bf00      	nop
 80057bc:	40008000 	.word	0x40008000
 80057c0:	00f42400 	.word	0x00f42400
 80057c4:	08006434 	.word	0x08006434
      }
      else
      {
        ret = HAL_ERROR;
 80057c8:	2301      	movs	r3, #1
 80057ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2201      	movs	r2, #1
 80057da:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2200      	movs	r2, #0
 80057e2:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2200      	movs	r2, #0
 80057e8:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80057ea:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3730      	adds	r7, #48	@ 0x30
 80057f2:	46bd      	mov	sp, r7
 80057f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080057f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005804:	f003 0308 	and.w	r3, r3, #8
 8005808:	2b00      	cmp	r3, #0
 800580a:	d00a      	beq.n	8005822 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	430a      	orrs	r2, r1
 8005820:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005826:	f003 0301 	and.w	r3, r3, #1
 800582a:	2b00      	cmp	r3, #0
 800582c:	d00a      	beq.n	8005844 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	685b      	ldr	r3, [r3, #4]
 8005834:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	430a      	orrs	r2, r1
 8005842:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005848:	f003 0302 	and.w	r3, r3, #2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00a      	beq.n	8005866 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685b      	ldr	r3, [r3, #4]
 8005856:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	430a      	orrs	r2, r1
 8005864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800586a:	f003 0304 	and.w	r3, r3, #4
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	685b      	ldr	r3, [r3, #4]
 8005878:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	430a      	orrs	r2, r1
 8005886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800588c:	f003 0310 	and.w	r3, r3, #16
 8005890:	2b00      	cmp	r3, #0
 8005892:	d00a      	beq.n	80058aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	430a      	orrs	r2, r1
 80058a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058ae:	f003 0320 	and.w	r3, r3, #32
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00a      	beq.n	80058cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689b      	ldr	r3, [r3, #8]
 80058bc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	430a      	orrs	r2, r1
 80058ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d01a      	beq.n	800590e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	430a      	orrs	r2, r1
 80058ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80058f6:	d10a      	bne.n	800590e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	430a      	orrs	r2, r1
 800590c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005912:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00a      	beq.n	8005930 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	430a      	orrs	r2, r1
 800592e:	605a      	str	r2, [r3, #4]
  }
}
 8005930:	bf00      	nop
 8005932:	370c      	adds	r7, #12
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b098      	sub	sp, #96	@ 0x60
 8005940:	af02      	add	r7, sp, #8
 8005942:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800594c:	f7fb fee0 	bl	8001710 <HAL_GetTick>
 8005950:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 0308 	and.w	r3, r3, #8
 800595c:	2b08      	cmp	r3, #8
 800595e:	d12f      	bne.n	80059c0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005960:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005964:	9300      	str	r3, [sp, #0]
 8005966:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005968:	2200      	movs	r2, #0
 800596a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800596e:	6878      	ldr	r0, [r7, #4]
 8005970:	f000 f88e 	bl	8005a90 <UART_WaitOnFlagUntilTimeout>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d022      	beq.n	80059c0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005982:	e853 3f00 	ldrex	r3, [r3]
 8005986:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005988:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800598a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800598e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	461a      	mov	r2, r3
 8005996:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005998:	647b      	str	r3, [r7, #68]	@ 0x44
 800599a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800599e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059a0:	e841 2300 	strex	r3, r2, [r1]
 80059a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80059a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1e6      	bne.n	800597a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2220      	movs	r2, #32
 80059b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2200      	movs	r2, #0
 80059b8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e063      	b.n	8005a88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 0304 	and.w	r3, r3, #4
 80059ca:	2b04      	cmp	r3, #4
 80059cc:	d149      	bne.n	8005a62 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059ce:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80059d6:	2200      	movs	r2, #0
 80059d8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 f857 	bl	8005a90 <UART_WaitOnFlagUntilTimeout>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d03c      	beq.n	8005a62 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059f0:	e853 3f00 	ldrex	r3, [r3]
 80059f4:	623b      	str	r3, [r7, #32]
   return(result);
 80059f6:	6a3b      	ldr	r3, [r7, #32]
 80059f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80059fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	461a      	mov	r2, r3
 8005a04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a06:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a08:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005a0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a0e:	e841 2300 	strex	r3, r2, [r1]
 8005a12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d1e6      	bne.n	80059e8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3308      	adds	r3, #8
 8005a20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	e853 3f00 	ldrex	r3, [r3]
 8005a28:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f023 0301 	bic.w	r3, r3, #1
 8005a30:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3308      	adds	r3, #8
 8005a38:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a3a:	61fa      	str	r2, [r7, #28]
 8005a3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3e:	69b9      	ldr	r1, [r7, #24]
 8005a40:	69fa      	ldr	r2, [r7, #28]
 8005a42:	e841 2300 	strex	r3, r2, [r1]
 8005a46:	617b      	str	r3, [r7, #20]
   return(result);
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d1e5      	bne.n	8005a1a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2220      	movs	r2, #32
 8005a52:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a5e:	2303      	movs	r3, #3
 8005a60:	e012      	b.n	8005a88 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2220      	movs	r2, #32
 8005a66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a86:	2300      	movs	r3, #0
}
 8005a88:	4618      	mov	r0, r3
 8005a8a:	3758      	adds	r7, #88	@ 0x58
 8005a8c:	46bd      	mov	sp, r7
 8005a8e:	bd80      	pop	{r7, pc}

08005a90 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	60f8      	str	r0, [r7, #12]
 8005a98:	60b9      	str	r1, [r7, #8]
 8005a9a:	603b      	str	r3, [r7, #0]
 8005a9c:	4613      	mov	r3, r2
 8005a9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aa0:	e04f      	b.n	8005b42 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa8:	d04b      	beq.n	8005b42 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005aaa:	f7fb fe31 	bl	8001710 <HAL_GetTick>
 8005aae:	4602      	mov	r2, r0
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	1ad3      	subs	r3, r2, r3
 8005ab4:	69ba      	ldr	r2, [r7, #24]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d302      	bcc.n	8005ac0 <UART_WaitOnFlagUntilTimeout+0x30>
 8005aba:	69bb      	ldr	r3, [r7, #24]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d101      	bne.n	8005ac4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e04e      	b.n	8005b62 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 0304 	and.w	r3, r3, #4
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d037      	beq.n	8005b42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	2b80      	cmp	r3, #128	@ 0x80
 8005ad6:	d034      	beq.n	8005b42 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	2b40      	cmp	r3, #64	@ 0x40
 8005adc:	d031      	beq.n	8005b42 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	69db      	ldr	r3, [r3, #28]
 8005ae4:	f003 0308 	and.w	r3, r3, #8
 8005ae8:	2b08      	cmp	r3, #8
 8005aea:	d110      	bne.n	8005b0e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2208      	movs	r2, #8
 8005af2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f000 f920 	bl	8005d3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2208      	movs	r2, #8
 8005afe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e029      	b.n	8005b62 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69db      	ldr	r3, [r3, #28]
 8005b14:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005b1c:	d111      	bne.n	8005b42 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005b26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f000 f906 	bl	8005d3a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2220      	movs	r2, #32
 8005b32:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005b3e:	2303      	movs	r3, #3
 8005b40:	e00f      	b.n	8005b62 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	69da      	ldr	r2, [r3, #28]
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	68ba      	ldr	r2, [r7, #8]
 8005b4e:	429a      	cmp	r2, r3
 8005b50:	bf0c      	ite	eq
 8005b52:	2301      	moveq	r3, #1
 8005b54:	2300      	movne	r3, #0
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	461a      	mov	r2, r3
 8005b5a:	79fb      	ldrb	r3, [r7, #7]
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d0a0      	beq.n	8005aa2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3710      	adds	r7, #16
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
	...

08005b6c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b096      	sub	sp, #88	@ 0x58
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	4613      	mov	r3, r2
 8005b78:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	88fa      	ldrh	r2, [r7, #6]
 8005b84:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2222      	movs	r2, #34	@ 0x22
 8005b94:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d02d      	beq.n	8005bfe <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005ba8:	4a40      	ldr	r2, [pc, #256]	@ (8005cac <UART_Start_Receive_DMA+0x140>)
 8005baa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bb2:	4a3f      	ldr	r2, [pc, #252]	@ (8005cb0 <UART_Start_Receive_DMA+0x144>)
 8005bb4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bbc:	4a3d      	ldr	r2, [pc, #244]	@ (8005cb4 <UART_Start_Receive_DMA+0x148>)
 8005bbe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	3324      	adds	r3, #36	@ 0x24
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bdc:	461a      	mov	r2, r3
 8005bde:	88fb      	ldrh	r3, [r7, #6]
 8005be0:	f7fb ff7c 	bl	8001adc <HAL_DMA_Start_IT>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d009      	beq.n	8005bfe <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	2210      	movs	r2, #16
 8005bee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2220      	movs	r2, #32
 8005bf6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	e051      	b.n	8005ca2 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	691b      	ldr	r3, [r3, #16]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d018      	beq.n	8005c38 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c0e:	e853 3f00 	ldrex	r3, [r3]
 8005c12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	461a      	mov	r2, r3
 8005c22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c26:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c28:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005c2a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c2c:	e841 2300 	strex	r3, r2, [r1]
 8005c30:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8005c32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d1e6      	bne.n	8005c06 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3308      	adds	r3, #8
 8005c3e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c42:	e853 3f00 	ldrex	r3, [r3]
 8005c46:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c4a:	f043 0301 	orr.w	r3, r3, #1
 8005c4e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	3308      	adds	r3, #8
 8005c56:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005c58:	637a      	str	r2, [r7, #52]	@ 0x34
 8005c5a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c5c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005c5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005c60:	e841 2300 	strex	r3, r2, [r1]
 8005c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8005c66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d1e5      	bne.n	8005c38 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	3308      	adds	r3, #8
 8005c72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	e853 3f00 	ldrex	r3, [r3]
 8005c7a:	613b      	str	r3, [r7, #16]
   return(result);
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	3308      	adds	r3, #8
 8005c8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c8c:	623a      	str	r2, [r7, #32]
 8005c8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c90:	69f9      	ldr	r1, [r7, #28]
 8005c92:	6a3a      	ldr	r2, [r7, #32]
 8005c94:	e841 2300 	strex	r3, r2, [r1]
 8005c98:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c9a:	69bb      	ldr	r3, [r7, #24]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1e5      	bne.n	8005c6c <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3758      	adds	r7, #88	@ 0x58
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
 8005caa:	bf00      	nop
 8005cac:	08005ec5 	.word	0x08005ec5
 8005cb0:	08005ff9 	.word	0x08005ff9
 8005cb4:	0800603f 	.word	0x0800603f

08005cb8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b08f      	sub	sp, #60	@ 0x3c
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cc6:	6a3b      	ldr	r3, [r7, #32]
 8005cc8:	e853 3f00 	ldrex	r3, [r3]
 8005ccc:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005cd4:	637b      	str	r3, [r7, #52]	@ 0x34
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	461a      	mov	r2, r3
 8005cdc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ce0:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ce4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ce6:	e841 2300 	strex	r3, r2, [r1]
 8005cea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d1e6      	bne.n	8005cc0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	3308      	adds	r3, #8
 8005cf8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	e853 3f00 	ldrex	r3, [r3]
 8005d00:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8005d08:	633b      	str	r3, [r7, #48]	@ 0x30
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	3308      	adds	r3, #8
 8005d10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005d12:	61ba      	str	r2, [r7, #24]
 8005d14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d16:	6979      	ldr	r1, [r7, #20]
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	e841 2300 	strex	r3, r2, [r1]
 8005d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1e5      	bne.n	8005cf2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2220      	movs	r2, #32
 8005d2a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8005d2e:	bf00      	nop
 8005d30:	373c      	adds	r7, #60	@ 0x3c
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr

08005d3a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b095      	sub	sp, #84	@ 0x54
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d4a:	e853 3f00 	ldrex	r3, [r3]
 8005d4e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d52:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	461a      	mov	r2, r3
 8005d5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d60:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d62:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d64:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d66:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d68:	e841 2300 	strex	r3, r2, [r1]
 8005d6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1e6      	bne.n	8005d42 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3308      	adds	r3, #8
 8005d7a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d7c:	6a3b      	ldr	r3, [r7, #32]
 8005d7e:	e853 3f00 	ldrex	r3, [r3]
 8005d82:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d84:	69fb      	ldr	r3, [r7, #28]
 8005d86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005d8a:	f023 0301 	bic.w	r3, r3, #1
 8005d8e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	3308      	adds	r3, #8
 8005d96:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005d98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005d9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d9c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005da0:	e841 2300 	strex	r3, r2, [r1]
 8005da4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005da6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d1e3      	bne.n	8005d74 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d118      	bne.n	8005de6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	e853 3f00 	ldrex	r3, [r3]
 8005dc0:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dc2:	68bb      	ldr	r3, [r7, #8]
 8005dc4:	f023 0310 	bic.w	r3, r3, #16
 8005dc8:	647b      	str	r3, [r7, #68]	@ 0x44
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dd2:	61bb      	str	r3, [r7, #24]
 8005dd4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd6:	6979      	ldr	r1, [r7, #20]
 8005dd8:	69ba      	ldr	r2, [r7, #24]
 8005dda:	e841 2300 	strex	r3, r2, [r1]
 8005dde:	613b      	str	r3, [r7, #16]
   return(result);
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d1e6      	bne.n	8005db4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2220      	movs	r2, #32
 8005dea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005dfa:	bf00      	nop
 8005dfc:	3754      	adds	r7, #84	@ 0x54
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr

08005e06 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b090      	sub	sp, #64	@ 0x40
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e12:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f003 0320 	and.w	r3, r3, #32
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d137      	bne.n	8005e92 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 8005e22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e24:	2200      	movs	r2, #0
 8005e26:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	3308      	adds	r3, #8
 8005e30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e34:	e853 3f00 	ldrex	r3, [r3]
 8005e38:	623b      	str	r3, [r7, #32]
   return(result);
 8005e3a:	6a3b      	ldr	r3, [r7, #32]
 8005e3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e40:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005e42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3308      	adds	r3, #8
 8005e48:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e4a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e4e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e50:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e52:	e841 2300 	strex	r3, r2, [r1]
 8005e56:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1e5      	bne.n	8005e2a <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e64:	693b      	ldr	r3, [r7, #16]
 8005e66:	e853 3f00 	ldrex	r3, [r3]
 8005e6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e72:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	461a      	mov	r2, r3
 8005e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e7c:	61fb      	str	r3, [r7, #28]
 8005e7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e80:	69b9      	ldr	r1, [r7, #24]
 8005e82:	69fa      	ldr	r2, [r7, #28]
 8005e84:	e841 2300 	strex	r3, r2, [r1]
 8005e88:	617b      	str	r3, [r7, #20]
   return(result);
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d1e6      	bne.n	8005e5e <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e90:	e004      	b.n	8005e9c <UART_DMATransmitCplt+0x96>
    huart->TxCpltCallback(huart);
 8005e92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005e98:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005e9a:	4798      	blx	r3
}
 8005e9c:	bf00      	nop
 8005e9e:	3740      	adds	r7, #64	@ 0x40
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005eb0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005eb8:	68f8      	ldr	r0, [r7, #12]
 8005eba:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ebc:	bf00      	nop
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b09c      	sub	sp, #112	@ 0x70
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ed0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0320 	and.w	r3, r3, #32
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d171      	bne.n	8005fc4 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8005ee0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ee8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ef0:	e853 3f00 	ldrex	r3, [r3]
 8005ef4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005ef6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ef8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005efc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005efe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	461a      	mov	r2, r3
 8005f04:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005f08:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005f0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005f0e:	e841 2300 	strex	r3, r2, [r1]
 8005f12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005f14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d1e6      	bne.n	8005ee8 <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	3308      	adds	r3, #8
 8005f20:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f24:	e853 3f00 	ldrex	r3, [r3]
 8005f28:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005f2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f2c:	f023 0301 	bic.w	r3, r3, #1
 8005f30:	667b      	str	r3, [r7, #100]	@ 0x64
 8005f32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	3308      	adds	r3, #8
 8005f38:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005f3a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005f3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005f40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005f42:	e841 2300 	strex	r3, r2, [r1]
 8005f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005f48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d1e5      	bne.n	8005f1a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f4e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	3308      	adds	r3, #8
 8005f54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f58:	e853 3f00 	ldrex	r3, [r3]
 8005f5c:	623b      	str	r3, [r7, #32]
   return(result);
 8005f5e:	6a3b      	ldr	r3, [r7, #32]
 8005f60:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f64:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	3308      	adds	r3, #8
 8005f6c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005f6e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f76:	e841 2300 	strex	r3, r2, [r1]
 8005f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d1e5      	bne.n	8005f4e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f84:	2220      	movs	r2, #32
 8005f86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d118      	bne.n	8005fc4 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	e853 3f00 	ldrex	r3, [r3]
 8005f9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f023 0310 	bic.w	r3, r3, #16
 8005fa6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005fa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	461a      	mov	r2, r3
 8005fae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005fb0:	61fb      	str	r3, [r7, #28]
 8005fb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fb4:	69b9      	ldr	r1, [r7, #24]
 8005fb6:	69fa      	ldr	r2, [r7, #28]
 8005fb8:	e841 2300 	strex	r3, r2, [r1]
 8005fbc:	617b      	str	r3, [r7, #20]
   return(result);
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1e6      	bne.n	8005f92 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fcc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005fce:	2b01      	cmp	r3, #1
 8005fd0:	d109      	bne.n	8005fe6 <UART_DMAReceiveCplt+0x122>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8005fd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fd4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8005fd8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005fda:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8005fde:	4611      	mov	r1, r2
 8005fe0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005fe2:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005fe4:	e004      	b.n	8005ff0 <UART_DMAReceiveCplt+0x12c>
    huart->RxCpltCallback(huart);
 8005fe6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005fe8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8005fec:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005fee:	4798      	blx	r3
}
 8005ff0:	bf00      	nop
 8005ff2:	3770      	adds	r7, #112	@ 0x70
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b084      	sub	sp, #16
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006004:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	2201      	movs	r2, #1
 800600a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006010:	2b01      	cmp	r3, #1
 8006012:	d10b      	bne.n	800602c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800601a:	68fa      	ldr	r2, [r7, #12]
 800601c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	@ 0x5c
 8006020:	0852      	lsrs	r2, r2, #1
 8006022:	b292      	uxth	r2, r2
 8006024:	4611      	mov	r1, r2
 8006026:	68f8      	ldr	r0, [r7, #12]
 8006028:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800602a:	e004      	b.n	8006036 <UART_DMARxHalfCplt+0x3e>
    huart->RxHalfCpltCallback(huart);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006032:	68f8      	ldr	r0, [r7, #12]
 8006034:	4798      	blx	r3
}
 8006036:	bf00      	nop
 8006038:	3710      	adds	r7, #16
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}

0800603e <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800603e:	b580      	push	{r7, lr}
 8006040:	b086      	sub	sp, #24
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800604a:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006052:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800605a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006066:	2b80      	cmp	r3, #128	@ 0x80
 8006068:	d109      	bne.n	800607e <UART_DMAError+0x40>
 800606a:	693b      	ldr	r3, [r7, #16]
 800606c:	2b21      	cmp	r3, #33	@ 0x21
 800606e:	d106      	bne.n	800607e <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	2200      	movs	r2, #0
 8006074:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006078:	6978      	ldr	r0, [r7, #20]
 800607a:	f7ff fe1d 	bl	8005cb8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800607e:	697b      	ldr	r3, [r7, #20]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	689b      	ldr	r3, [r3, #8]
 8006084:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006088:	2b40      	cmp	r3, #64	@ 0x40
 800608a:	d109      	bne.n	80060a0 <UART_DMAError+0x62>
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2b22      	cmp	r3, #34	@ 0x22
 8006090:	d106      	bne.n	80060a0 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	2200      	movs	r2, #0
 8006096:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800609a:	6978      	ldr	r0, [r7, #20]
 800609c:	f7ff fe4d 	bl	8005d3a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060a6:	f043 0210 	orr.w	r2, r3, #16
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80060b6:	6978      	ldr	r0, [r7, #20]
 80060b8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060ba:	bf00      	nop
 80060bc:	3718      	adds	r7, #24
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}

080060c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80060c2:	b580      	push	{r7, lr}
 80060c4:	b084      	sub	sp, #16
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80060ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2200      	movs	r2, #0
 80060d4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2200      	movs	r2, #0
 80060dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80060ea:	bf00      	nop
 80060ec:	3710      	adds	r7, #16
 80060ee:	46bd      	mov	sp, r7
 80060f0:	bd80      	pop	{r7, pc}

080060f2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060f2:	b580      	push	{r7, lr}
 80060f4:	b088      	sub	sp, #32
 80060f6:	af00      	add	r7, sp, #0
 80060f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	e853 3f00 	ldrex	r3, [r3]
 8006106:	60bb      	str	r3, [r7, #8]
   return(result);
 8006108:	68bb      	ldr	r3, [r7, #8]
 800610a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800610e:	61fb      	str	r3, [r7, #28]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	461a      	mov	r2, r3
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	61bb      	str	r3, [r7, #24]
 800611a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611c:	6979      	ldr	r1, [r7, #20]
 800611e:	69ba      	ldr	r2, [r7, #24]
 8006120:	e841 2300 	strex	r3, r2, [r1]
 8006124:	613b      	str	r3, [r7, #16]
   return(result);
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d1e6      	bne.n	80060fa <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2220      	movs	r2, #32
 8006130:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	679a      	str	r2, [r3, #120]	@ 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006140:	6878      	ldr	r0, [r7, #4]
 8006142:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006144:	bf00      	nop
 8006146:	3720      	adds	r7, #32
 8006148:	46bd      	mov	sp, r7
 800614a:	bd80      	pop	{r7, pc}

0800614c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800614c:	b480      	push	{r7}
 800614e:	b083      	sub	sp, #12
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006160:	b480      	push	{r7}
 8006162:	b083      	sub	sp, #12
 8006164:	af00      	add	r7, sp, #0
 8006166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006168:	bf00      	nop
 800616a:	370c      	adds	r7, #12
 800616c:	46bd      	mov	sp, r7
 800616e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006172:	4770      	bx	lr

08006174 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006174:	b480      	push	{r7}
 8006176:	b083      	sub	sp, #12
 8006178:	af00      	add	r7, sp, #0
 800617a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800617c:	bf00      	nop
 800617e:	370c      	adds	r7, #12
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr

08006188 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006188:	b480      	push	{r7}
 800618a:	b085      	sub	sp, #20
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006196:	2b01      	cmp	r3, #1
 8006198:	d101      	bne.n	800619e <HAL_UARTEx_DisableFifoMode+0x16>
 800619a:	2302      	movs	r3, #2
 800619c:	e027      	b.n	80061ee <HAL_UARTEx_DisableFifoMode+0x66>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2224      	movs	r2, #36	@ 0x24
 80061aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f022 0201 	bic.w	r2, r2, #1
 80061c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80061cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2220      	movs	r2, #32
 80061e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3714      	adds	r7, #20
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr

080061fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80061fa:	b580      	push	{r7, lr}
 80061fc:	b084      	sub	sp, #16
 80061fe:	af00      	add	r7, sp, #0
 8006200:	6078      	str	r0, [r7, #4]
 8006202:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800620a:	2b01      	cmp	r3, #1
 800620c:	d101      	bne.n	8006212 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800620e:	2302      	movs	r3, #2
 8006210:	e02d      	b.n	800626e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2201      	movs	r2, #1
 8006216:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2224      	movs	r2, #36	@ 0x24
 800621e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	681a      	ldr	r2, [r3, #0]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f022 0201 	bic.w	r2, r2, #1
 8006238:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	689b      	ldr	r3, [r3, #8]
 8006240:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	683a      	ldr	r2, [r7, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 f850 	bl	80062f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	68fa      	ldr	r2, [r7, #12]
 800625a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2220      	movs	r2, #32
 8006260:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800626c:	2300      	movs	r3, #0
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}

08006276 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006286:	2b01      	cmp	r3, #1
 8006288:	d101      	bne.n	800628e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800628a:	2302      	movs	r3, #2
 800628c:	e02d      	b.n	80062ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2224      	movs	r2, #36	@ 0x24
 800629a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f022 0201 	bic.w	r2, r2, #1
 80062b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	689b      	ldr	r3, [r3, #8]
 80062bc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	683a      	ldr	r2, [r7, #0]
 80062c6:	430a      	orrs	r2, r1
 80062c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f000 f812 	bl	80062f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	68fa      	ldr	r2, [r7, #12]
 80062d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2220      	movs	r2, #32
 80062dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80062e8:	2300      	movs	r3, #0
}
 80062ea:	4618      	mov	r0, r3
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}
	...

080062f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80062f4:	b480      	push	{r7}
 80062f6:	b085      	sub	sp, #20
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006300:	2b00      	cmp	r3, #0
 8006302:	d108      	bne.n	8006316 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2201      	movs	r2, #1
 8006308:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2201      	movs	r2, #1
 8006310:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006314:	e031      	b.n	800637a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006316:	2308      	movs	r3, #8
 8006318:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800631a:	2308      	movs	r3, #8
 800631c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	0e5b      	lsrs	r3, r3, #25
 8006326:	b2db      	uxtb	r3, r3
 8006328:	f003 0307 	and.w	r3, r3, #7
 800632c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	0f5b      	lsrs	r3, r3, #29
 8006336:	b2db      	uxtb	r3, r3
 8006338:	f003 0307 	and.w	r3, r3, #7
 800633c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800633e:	7bbb      	ldrb	r3, [r7, #14]
 8006340:	7b3a      	ldrb	r2, [r7, #12]
 8006342:	4911      	ldr	r1, [pc, #68]	@ (8006388 <UARTEx_SetNbDataToProcess+0x94>)
 8006344:	5c8a      	ldrb	r2, [r1, r2]
 8006346:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800634a:	7b3a      	ldrb	r2, [r7, #12]
 800634c:	490f      	ldr	r1, [pc, #60]	@ (800638c <UARTEx_SetNbDataToProcess+0x98>)
 800634e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006350:	fb93 f3f2 	sdiv	r3, r3, r2
 8006354:	b29a      	uxth	r2, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800635c:	7bfb      	ldrb	r3, [r7, #15]
 800635e:	7b7a      	ldrb	r2, [r7, #13]
 8006360:	4909      	ldr	r1, [pc, #36]	@ (8006388 <UARTEx_SetNbDataToProcess+0x94>)
 8006362:	5c8a      	ldrb	r2, [r1, r2]
 8006364:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006368:	7b7a      	ldrb	r2, [r7, #13]
 800636a:	4908      	ldr	r1, [pc, #32]	@ (800638c <UARTEx_SetNbDataToProcess+0x98>)
 800636c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800636e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006372:	b29a      	uxth	r2, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800637a:	bf00      	nop
 800637c:	3714      	adds	r7, #20
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	0800644c 	.word	0x0800644c
 800638c:	08006454 	.word	0x08006454

08006390 <memset>:
 8006390:	4402      	add	r2, r0
 8006392:	4603      	mov	r3, r0
 8006394:	4293      	cmp	r3, r2
 8006396:	d100      	bne.n	800639a <memset+0xa>
 8006398:	4770      	bx	lr
 800639a:	f803 1b01 	strb.w	r1, [r3], #1
 800639e:	e7f9      	b.n	8006394 <memset+0x4>

080063a0 <__libc_init_array>:
 80063a0:	b570      	push	{r4, r5, r6, lr}
 80063a2:	4d0d      	ldr	r5, [pc, #52]	@ (80063d8 <__libc_init_array+0x38>)
 80063a4:	4c0d      	ldr	r4, [pc, #52]	@ (80063dc <__libc_init_array+0x3c>)
 80063a6:	1b64      	subs	r4, r4, r5
 80063a8:	10a4      	asrs	r4, r4, #2
 80063aa:	2600      	movs	r6, #0
 80063ac:	42a6      	cmp	r6, r4
 80063ae:	d109      	bne.n	80063c4 <__libc_init_array+0x24>
 80063b0:	4d0b      	ldr	r5, [pc, #44]	@ (80063e0 <__libc_init_array+0x40>)
 80063b2:	4c0c      	ldr	r4, [pc, #48]	@ (80063e4 <__libc_init_array+0x44>)
 80063b4:	f000 f826 	bl	8006404 <_init>
 80063b8:	1b64      	subs	r4, r4, r5
 80063ba:	10a4      	asrs	r4, r4, #2
 80063bc:	2600      	movs	r6, #0
 80063be:	42a6      	cmp	r6, r4
 80063c0:	d105      	bne.n	80063ce <__libc_init_array+0x2e>
 80063c2:	bd70      	pop	{r4, r5, r6, pc}
 80063c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80063c8:	4798      	blx	r3
 80063ca:	3601      	adds	r6, #1
 80063cc:	e7ee      	b.n	80063ac <__libc_init_array+0xc>
 80063ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80063d2:	4798      	blx	r3
 80063d4:	3601      	adds	r6, #1
 80063d6:	e7f2      	b.n	80063be <__libc_init_array+0x1e>
 80063d8:	08006464 	.word	0x08006464
 80063dc:	08006464 	.word	0x08006464
 80063e0:	08006464 	.word	0x08006464
 80063e4:	08006468 	.word	0x08006468

080063e8 <memcpy>:
 80063e8:	440a      	add	r2, r1
 80063ea:	4291      	cmp	r1, r2
 80063ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80063f0:	d100      	bne.n	80063f4 <memcpy+0xc>
 80063f2:	4770      	bx	lr
 80063f4:	b510      	push	{r4, lr}
 80063f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063fe:	4291      	cmp	r1, r2
 8006400:	d1f9      	bne.n	80063f6 <memcpy+0xe>
 8006402:	bd10      	pop	{r4, pc}

08006404 <_init>:
 8006404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006406:	bf00      	nop
 8006408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800640a:	bc08      	pop	{r3}
 800640c:	469e      	mov	lr, r3
 800640e:	4770      	bx	lr

08006410 <_fini>:
 8006410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006412:	bf00      	nop
 8006414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006416:	bc08      	pop	{r3}
 8006418:	469e      	mov	lr, r3
 800641a:	4770      	bx	lr
